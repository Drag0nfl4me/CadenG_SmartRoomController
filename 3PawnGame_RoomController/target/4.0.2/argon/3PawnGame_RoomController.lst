
c:/Users/cgame/Documents/IoT/CadenG_SmartRoomController/3PawnGame_RoomController/target/4.0.2/argon/3PawnGame_RoomController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004f90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8fb0  000b8fb0  00008fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8fd4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004dc  2003e0ac  000b8fd8  0001e0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000268  2003e588  2003e588  0002e588  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b94b4  000b94b4  000294b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b94dc  000b94dc  000294dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012494f  00000000  00000000  000294e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014a45  00000000  00000000  0014de2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003dcbe  00000000  00000000  00162874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030f0  00000000  00000000  001a0532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a970  00000000  00000000  001a3622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c1c5  00000000  00000000  001adf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000461e0  00000000  00000000  001ea157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134b12  00000000  00000000  00230337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008c00  00000000  00000000  00364e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 f953 	bl	b82dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f95b 	bl	b82f8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0ac 	.word	0x2003e0ac
   b404c:	000b8fd8 	.word	0x000b8fd8
   b4050:	2003e588 	.word	0x2003e588
   b4054:	2003e588 	.word	0x2003e588
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fd2f 	bl	b6ac4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8f84 	.word	0x000b8f84
   b4080:	000b8fac 	.word	0x000b8fac

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b98e 	b.w	b43a4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fca3 	bl	b49d4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bccf 	b.w	b6a34 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b951 	b.w	b633c <malloc>

000b409a <_Znaj>:
   b409a:	f002 b94f 	b.w	b633c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 b955 	b.w	b634c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 f8a2 	bl	b61f4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5ed5 	.word	0x000b5ed5
   b40b8:	000b8478 	.word	0x000b8478

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f002 fbda 	bl	b6894 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f002 bbec 	b.w	b68c6 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40f2 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f2:	b40e      	push	{r1, r2, r3}
   b40f4:	b503      	push	{r0, r1, lr}
   b40f6:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fe:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4100:	f002 fbff 	bl	b6902 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4104:	b002      	add	sp, #8
   b4106:	f85d eb04 	ldr.w	lr, [sp], #4
   b410a:	b003      	add	sp, #12
   b410c:	4770      	bx	lr
	...

000b4110 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4110:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4112:	6984      	ldr	r4, [r0, #24]
   b4114:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_ZN9TCPClientD1Ev+0x30>)
   b4116:	6003      	str	r3, [r0, #0]
   b4118:	4605      	mov	r5, r0
   b411a:	b17c      	cbz	r4, b413c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b411c:	6863      	ldr	r3, [r4, #4]
   b411e:	3b01      	subs	r3, #1
   b4120:	6063      	str	r3, [r4, #4]
   b4122:	b95b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4124:	6823      	ldr	r3, [r4, #0]
   b4126:	4620      	mov	r0, r4
   b4128:	689b      	ldr	r3, [r3, #8]
   b412a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b412c:	68a3      	ldr	r3, [r4, #8]
   b412e:	3b01      	subs	r3, #1
   b4130:	60a3      	str	r3, [r4, #8]
   b4132:	b91b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4134:	6823      	ldr	r3, [r4, #0]
   b4136:	4620      	mov	r0, r4
   b4138:	68db      	ldr	r3, [r3, #12]
   b413a:	4798      	blx	r3
   b413c:	4628      	mov	r0, r5
   b413e:	bd38      	pop	{r3, r4, r5, pc}
   b4140:	000b8d3c 	.word	0x000b8d3c

000b4144 <_ZN9TCPClientD0Ev>:
   b4144:	b510      	push	{r4, lr}
   b4146:	4604      	mov	r4, r0
   b4148:	f7ff ffe2 	bl	b4110 <_ZN9TCPClientD1Ev>
   b414c:	4620      	mov	r0, r4
   b414e:	211c      	movs	r1, #28
   b4150:	f7ff ffa5 	bl	b409e <_ZdlPvj>
   b4154:	4620      	mov	r0, r4
   b4156:	bd10      	pop	{r4, pc}

000b4158 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b415c:	b08c      	sub	sp, #48	; 0x30
   b415e:	4605      	mov	r5, r0
   b4160:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4162:	4668      	mov	r0, sp
   b4164:	4977      	ldr	r1, [pc, #476]	; (b4344 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4166:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b416a:	4614      	mov	r4, r2
   b416c:	461e      	mov	r6, r3
  String command = "";  
   b416e:	f002 fac4 	bl	b66fa <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4172:	f8df e228 	ldr.w	lr, [pc, #552]	; b439c <_Z6setHueibiii+0x244>
   b4176:	4974      	ldr	r1, [pc, #464]	; (b4348 <_Z6setHueibiii+0x1f0>)
   b4178:	f8de 3000 	ldr.w	r3, [lr]
   b417c:	4873      	ldr	r0, [pc, #460]	; (b434c <_Z6setHueibiii+0x1f4>)
   b417e:	4a74      	ldr	r2, [pc, #464]	; (b4350 <_Z6setHueibiii+0x1f8>)
   b4180:	f8df c21c 	ldr.w	ip, [pc, #540]	; b43a0 <_Z6setHueibiii+0x248>
   b4184:	42ab      	cmp	r3, r5
   b4186:	d119      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4188:	680b      	ldr	r3, [r1, #0]
   b418a:	42bb      	cmp	r3, r7
   b418c:	d116      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b418e:	6803      	ldr	r3, [r0, #0]
   b4190:	42a3      	cmp	r3, r4
   b4192:	d113      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4194:	6813      	ldr	r3, [r2, #0]
   b4196:	42b3      	cmp	r3, r6
   b4198:	d110      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b419a:	f8dc 3000 	ldr.w	r3, [ip]
   b419e:	4543      	cmp	r3, r8
   b41a0:	d10c      	bne.n	b41bc <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b41a2:	f002 fdb1 	bl	b6d08 <_Z16_fetch_usbserialv>
   b41a6:	496b      	ldr	r1, [pc, #428]	; (b4354 <_Z6setHueibiii+0x1fc>)
   b41a8:	f7ff ffa3 	bl	b40f2 <_ZN5Print6printfEPKcz>
    return false;
   b41ac:	2400      	movs	r4, #0
  String command = "";  
   b41ae:	4668      	mov	r0, sp
   b41b0:	f002 fa58 	bl	b6664 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b4:	4620      	mov	r0, r4
   b41b6:	b00c      	add	sp, #48	; 0x30
   b41b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41bc:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41c0:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41c2:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c4:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c6:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41ca:	2f00      	cmp	r7, #0
   b41cc:	f000 80b5 	beq.w	b433a <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41d0:	4961      	ldr	r1, [pc, #388]	; (b4358 <_Z6setHueibiii+0x200>)
   b41d2:	4668      	mov	r0, sp
   b41d4:	f002 fabf 	bl	b6756 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d8:	4669      	mov	r1, sp
   b41da:	a808      	add	r0, sp, #32
   b41dc:	f002 fab0 	bl	b6740 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41e0:	220a      	movs	r2, #10
   b41e2:	4641      	mov	r1, r8
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f002 fac8 	bl	b677a <_ZN6StringC1Eih>
   b41ea:	a904      	add	r1, sp, #16
   b41ec:	a808      	add	r0, sp, #32
   b41ee:	f002 fafb 	bl	b67e8 <_ZplRK15StringSumHelperRK6String>
   b41f2:	495a      	ldr	r1, [pc, #360]	; (b435c <_Z6setHueibiii+0x204>)
   b41f4:	f002 fb04 	bl	b6800 <_ZplRK15StringSumHelperPKc>
   b41f8:	4601      	mov	r1, r0
   b41fa:	4668      	mov	r0, sp
   b41fc:	f002 fa91 	bl	b6722 <_ZN6StringaSERKS_>
   b4200:	a804      	add	r0, sp, #16
   b4202:	f002 fa2f 	bl	b6664 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4206:	a808      	add	r0, sp, #32
   b4208:	f002 fa2c 	bl	b6664 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b420c:	4669      	mov	r1, sp
   b420e:	a808      	add	r0, sp, #32
   b4210:	f002 fa96 	bl	b6740 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4214:	220a      	movs	r2, #10
   b4216:	4631      	mov	r1, r6
   b4218:	a804      	add	r0, sp, #16
   b421a:	f002 faae 	bl	b677a <_ZN6StringC1Eih>
   b421e:	a904      	add	r1, sp, #16
   b4220:	a808      	add	r0, sp, #32
   b4222:	f002 fae1 	bl	b67e8 <_ZplRK15StringSumHelperRK6String>
   b4226:	494e      	ldr	r1, [pc, #312]	; (b4360 <_Z6setHueibiii+0x208>)
   b4228:	f002 faea 	bl	b6800 <_ZplRK15StringSumHelperPKc>
   b422c:	4601      	mov	r1, r0
   b422e:	4668      	mov	r0, sp
   b4230:	f002 fa77 	bl	b6722 <_ZN6StringaSERKS_>
   b4234:	a804      	add	r0, sp, #16
   b4236:	f002 fa15 	bl	b6664 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b423a:	a808      	add	r0, sp, #32
   b423c:	f002 fa12 	bl	b6664 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4240:	4669      	mov	r1, sp
   b4242:	a808      	add	r0, sp, #32
   b4244:	f002 fa7c 	bl	b6740 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4248:	220a      	movs	r2, #10
   b424a:	4621      	mov	r1, r4
   b424c:	a804      	add	r0, sp, #16
   b424e:	f002 fa94 	bl	b677a <_ZN6StringC1Eih>
   b4252:	a904      	add	r1, sp, #16
   b4254:	a808      	add	r0, sp, #32
   b4256:	f002 fac7 	bl	b67e8 <_ZplRK15StringSumHelperRK6String>
   b425a:	4942      	ldr	r1, [pc, #264]	; (b4364 <_Z6setHueibiii+0x20c>)
   b425c:	f002 fad0 	bl	b6800 <_ZplRK15StringSumHelperPKc>
   b4260:	4601      	mov	r1, r0
   b4262:	4668      	mov	r0, sp
   b4264:	f002 fa5d 	bl	b6722 <_ZN6StringaSERKS_>
   b4268:	a804      	add	r0, sp, #16
   b426a:	f002 f9fb 	bl	b6664 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426e:	a808      	add	r0, sp, #32
   b4270:	f002 f9f8 	bl	b6664 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4274:	493c      	ldr	r1, [pc, #240]	; (b4368 <_Z6setHueibiii+0x210>)
   b4276:	483d      	ldr	r0, [pc, #244]	; (b436c <_Z6setHueibiii+0x214>)
   b4278:	2300      	movs	r3, #0
   b427a:	2250      	movs	r2, #80	; 0x50
   b427c:	f002 fed2 	bl	b7024 <_ZN9TCPClient7connectEPKctm>
   b4280:	4604      	mov	r4, r0
   b4282:	2800      	cmp	r0, #0
   b4284:	d093      	beq.n	b41ae <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4286:	f002 fd3f 	bl	b6d08 <_Z16_fetch_usbserialv>
   b428a:	4939      	ldr	r1, [pc, #228]	; (b4370 <_Z6setHueibiii+0x218>)
   b428c:	f002 fb11 	bl	b68b2 <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4290:	f002 fd3a 	bl	b6d08 <_Z16_fetch_usbserialv>
   b4294:	9900      	ldr	r1, [sp, #0]
   b4296:	f002 fb0c 	bl	b68b2 <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b429a:	4936      	ldr	r1, [pc, #216]	; (b4374 <_Z6setHueibiii+0x21c>)
   b429c:	4833      	ldr	r0, [pc, #204]	; (b436c <_Z6setHueibiii+0x214>)
   b429e:	f002 faf5 	bl	b688c <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b42a2:	4935      	ldr	r1, [pc, #212]	; (b4378 <_Z6setHueibiii+0x220>)
   b42a4:	4831      	ldr	r0, [pc, #196]	; (b436c <_Z6setHueibiii+0x214>)
   b42a6:	f002 faf1 	bl	b688c <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42aa:	4934      	ldr	r1, [pc, #208]	; (b437c <_Z6setHueibiii+0x224>)
   b42ac:	482f      	ldr	r0, [pc, #188]	; (b436c <_Z6setHueibiii+0x214>)
   b42ae:	f002 faed 	bl	b688c <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42b2:	220a      	movs	r2, #10
   b42b4:	482d      	ldr	r0, [pc, #180]	; (b436c <_Z6setHueibiii+0x214>)
   b42b6:	4629      	mov	r1, r5
   b42b8:	f7ff ff08 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42bc:	4930      	ldr	r1, [pc, #192]	; (b4380 <_Z6setHueibiii+0x228>)
   b42be:	482b      	ldr	r0, [pc, #172]	; (b436c <_Z6setHueibiii+0x214>)
   b42c0:	f002 faf7 	bl	b68b2 <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c4:	492f      	ldr	r1, [pc, #188]	; (b4384 <_Z6setHueibiii+0x22c>)
   b42c6:	4829      	ldr	r0, [pc, #164]	; (b436c <_Z6setHueibiii+0x214>)
   b42c8:	f002 faf3 	bl	b68b2 <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42cc:	492e      	ldr	r1, [pc, #184]	; (b4388 <_Z6setHueibiii+0x230>)
   b42ce:	4827      	ldr	r0, [pc, #156]	; (b436c <_Z6setHueibiii+0x214>)
   b42d0:	f002 fadc 	bl	b688c <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d4:	4924      	ldr	r1, [pc, #144]	; (b4368 <_Z6setHueibiii+0x210>)
   b42d6:	4825      	ldr	r0, [pc, #148]	; (b436c <_Z6setHueibiii+0x214>)
   b42d8:	f002 faeb 	bl	b68b2 <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42dc:	492b      	ldr	r1, [pc, #172]	; (b438c <_Z6setHueibiii+0x234>)
   b42de:	4823      	ldr	r0, [pc, #140]	; (b436c <_Z6setHueibiii+0x214>)
   b42e0:	f002 fad4 	bl	b688c <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e4:	220a      	movs	r2, #10
   b42e6:	9902      	ldr	r1, [sp, #8]
   b42e8:	4820      	ldr	r0, [pc, #128]	; (b436c <_Z6setHueibiii+0x214>)
   b42ea:	f002 faec 	bl	b68c6 <_ZN5Print11printNumberEmh>
        n += println();
   b42ee:	481f      	ldr	r0, [pc, #124]	; (b436c <_Z6setHueibiii+0x214>)
   b42f0:	f002 fad3 	bl	b689a <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f4:	4926      	ldr	r1, [pc, #152]	; (b4390 <_Z6setHueibiii+0x238>)
   b42f6:	481d      	ldr	r0, [pc, #116]	; (b436c <_Z6setHueibiii+0x214>)
   b42f8:	f002 fadb 	bl	b68b2 <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42fc:	481b      	ldr	r0, [pc, #108]	; (b436c <_Z6setHueibiii+0x214>)
   b42fe:	f002 facc 	bl	b689a <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b4302:	9900      	ldr	r1, [sp, #0]
   b4304:	4819      	ldr	r0, [pc, #100]	; (b436c <_Z6setHueibiii+0x214>)
   b4306:	f002 fad4 	bl	b68b2 <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b430a:	f002 fcfd 	bl	b6d08 <_Z16_fetch_usbserialv>
   b430e:	4921      	ldr	r1, [pc, #132]	; (b4394 <_Z6setHueibiii+0x23c>)
   b4310:	f002 facf 	bl	b68b2 <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4314:	f002 fcf8 	bl	b6d08 <_Z16_fetch_usbserialv>
   b4318:	4914      	ldr	r1, [pc, #80]	; (b436c <_Z6setHueibiii+0x214>)
   b431a:	4604      	mov	r4, r0
   b431c:	a808      	add	r0, sp, #32
   b431e:	f002 fb37 	bl	b6990 <_ZN6Stream10readStringEv>
   b4322:	9908      	ldr	r1, [sp, #32]
   b4324:	4620      	mov	r0, r4
   b4326:	f002 fac4 	bl	b68b2 <_ZN5Print7printlnEPKc>
   b432a:	a808      	add	r0, sp, #32
   b432c:	f002 f99a 	bl	b6664 <_ZN6StringD1Ev>
    HueClient.stop();
   b4330:	480e      	ldr	r0, [pc, #56]	; (b436c <_Z6setHueibiii+0x214>)
   b4332:	f003 f82d 	bl	b7390 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4336:	2401      	movs	r4, #1
   b4338:	e739      	b.n	b41ae <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b433a:	4917      	ldr	r1, [pc, #92]	; (b4398 <_Z6setHueibiii+0x240>)
   b433c:	4668      	mov	r0, sp
   b433e:	f002 fa0a 	bl	b6756 <_ZN6StringaSEPKc>
   b4342:	e797      	b.n	b4274 <_Z6setHueibiii+0x11c>
   b4344:	000b84a8 	.word	0x000b84a8
   b4348:	2003e5f4 	.word	0x2003e5f4
   b434c:	2003e5fc 	.word	0x2003e5fc
   b4350:	2003e5ec 	.word	0x2003e5ec
   b4354:	000b848d 	.word	0x000b848d
   b4358:	000b84a9 	.word	0x000b84a9
   b435c:	000b84bb 	.word	0x000b84bb
   b4360:	000b84c3 	.word	0x000b84c3
   b4364:	000b84d6 	.word	0x000b84d6
   b4368:	000b8650 	.word	0x000b8650
   b436c:	2003e588 	.word	0x2003e588
   b4370:	000b84d8 	.word	0x000b84d8
   b4374:	000b84ef 	.word	0x000b84ef
   b4378:	000b860b 	.word	0x000b860b
   b437c:	000b84f9 	.word	0x000b84f9
   b4380:	000b8502 	.word	0x000b8502
   b4384:	000b8512 	.word	0x000b8512
   b4388:	000b851d 	.word	0x000b851d
   b438c:	000b8524 	.word	0x000b8524
   b4390:	000b8535 	.word	0x000b8535
   b4394:	000b855c 	.word	0x000b855c
   b4398:	000b84cb 	.word	0x000b84cb
   b439c:	2003e5f0 	.word	0x2003e5f0
   b43a0:	2003e5f8 	.word	0x2003e5f8

000b43a4 <setup>:
void drawPieces();

Adafruit_NeoPixel neopix(12,A4,WS2812B);
Adafruit_SSD1306 display(D2);

void setup() {
   b43a4:	b538      	push	{r3, r4, r5, lr}
  // WiFi.connect();
  // while(WiFi.connecting()) {
  // delay(1);
  // }

  neopix.setBrightness(8);
   b43a6:	2108      	movs	r1, #8
   b43a8:	4826      	ldr	r0, [pc, #152]	; (b4444 <setup+0xa0>)
   b43aa:	f001 fd14 	bl	b5dd6 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  neopix.show();
   b43ae:	4825      	ldr	r0, [pc, #148]	; (b4444 <setup+0xa0>)
   b43b0:	f001 fb22 	bl	b59f8 <_ZN17Adafruit_NeoPixel4showEv>

  display.begin(SSD1306_SWITCHCAPVCC,0x3C);
   b43b4:	223c      	movs	r2, #60	; 0x3c
   b43b6:	2102      	movs	r1, #2
   b43b8:	4823      	ldr	r0, [pc, #140]	; (b4448 <setup+0xa4>)
   b43ba:	f000 fea9 	bl	b5110 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b43be:	4822      	ldr	r0, [pc, #136]	; (b4448 <setup+0xa4>)
   b43c0:	f000 fdbe 	bl	b4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b43c4:	4820      	ldr	r0, [pc, #128]	; (b4448 <setup+0xa4>)
   b43c6:	f000 fe33 	bl	b5030 <_ZN16Adafruit_SSD13067displayEv>

  Serial.begin(9600);
   b43ca:	f002 fc9d 	bl	b6d08 <_Z16_fetch_usbserialv>
   b43ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43d2:	f002 fc89 	bl	b6ce8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b43d6:	2000      	movs	r0, #0
   b43d8:	f001 fd94 	bl	b5f04 <hal_timer_millis>
        while (_while() && !_condition()) {
   b43dc:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b43e0:	4604      	mov	r4, r0
   b43e2:	2000      	movs	r0, #0
   b43e4:	f001 fd8e 	bl	b5f04 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b43e8:	1b00      	subs	r0, r0, r4
   b43ea:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b43ee:	42a8      	cmp	r0, r5
   b43f0:	f171 0300 	sbcs.w	r3, r1, #0
   b43f4:	d207      	bcs.n	b4406 <setup+0x62>
  waitFor(Serial.isConnected,10000);
   b43f6:	f002 fc87 	bl	b6d08 <_Z16_fetch_usbserialv>
   b43fa:	f002 fc79 	bl	b6cf0 <_ZN9USBSerial11isConnectedEv>
   b43fe:	b910      	cbnz	r0, b4406 <setup+0x62>
            spark_process();
   b4400:	f001 ff8c 	bl	b631c <spark_process>
        while (_while() && !_condition()) {
   b4404:	e7ed      	b.n	b43e2 <setup+0x3e>
   b4406:	f002 fc7f 	bl	b6d08 <_Z16_fetch_usbserialv>
   b440a:	f002 fc71 	bl	b6cf0 <_ZN9USBSerial11isConnectedEv>

  pinMode(A0,INPUT);
   b440e:	2100      	movs	r1, #0
   b4410:	2013      	movs	r0, #19
   b4412:	f003 f949 	bl	b76a8 <pinMode>
  pinMode(A1,INPUT);
   b4416:	2100      	movs	r1, #0
   b4418:	2012      	movs	r0, #18
   b441a:	f003 f945 	bl	b76a8 <pinMode>
  pinMode(A2,INPUT);
   b441e:	2100      	movs	r1, #0
   b4420:	2011      	movs	r0, #17
   b4422:	f003 f941 	bl	b76a8 <pinMode>
  pinMode(D8,OUTPUT);
   b4426:	2101      	movs	r1, #1
   b4428:	2008      	movs	r0, #8
   b442a:	f003 f93d 	bl	b76a8 <pinMode>
  pinMode(D7,OUTPUT);
   b442e:	2101      	movs	r1, #1
   b4430:	2007      	movs	r0, #7
   b4432:	f003 f939 	bl	b76a8 <pinMode>
  pinMode(D6,OUTPUT);
}
   b4436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pinMode(D6,OUTPUT);
   b443a:	2101      	movs	r1, #1
   b443c:	2006      	movs	r0, #6
   b443e:	f003 b933 	b.w	b76a8 <pinMode>
   b4442:	bf00      	nop
   b4444:	2003e674 	.word	0x2003e674
   b4448:	2003e634 	.word	0x2003e634

000b444c <_Z18determineAdvantagev>:
    setHue(3,true,COLORS[currentColor],100,255);
    pixelFill(0,12,NEOCOLORS[currentColor]);
  }
}

void determineAdvantage () {
   b444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; b4524 <_Z18determineAdvantagev+0xd8>
  //reset values
  redPiece = 0;
   b4454:	4c2d      	ldr	r4, [pc, #180]	; (b450c <_Z18determineAdvantagev+0xc0>)
  bluePiece = 0;
   b4456:	4d2e      	ldr	r5, [pc, #184]	; (b4510 <_Z18determineAdvantagev+0xc4>)
  //read number of red and blue pieces
  for (j=0;j<3;j++) {
   b4458:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b4528 <_Z18determineAdvantagev+0xdc>
   b445c:	f8d8 9000 	ldr.w	r9, [r8]
   b4460:	4e2c      	ldr	r6, [pc, #176]	; (b4514 <_Z18determineAdvantagev+0xc8>)
  redPiece = 0;
   b4462:	2300      	movs	r3, #0
   b4464:	6023      	str	r3, [r4, #0]
  bluePiece = 0;
   b4466:	602b      	str	r3, [r5, #0]
  for (j=0;j<3;j++) {
   b4468:	f8cc 3000 	str.w	r3, [ip]
   b446c:	2704      	movs	r7, #4
   b446e:	4619      	mov	r1, r3
   b4470:	469e      	mov	lr, r3
   b4472:	4618      	mov	r0, r3
   b4474:	461a      	mov	r2, r3
    for (i=0;i<3;i++) {
      if (nominalRead[j][i] == 1) {redPiece ++;}
   b4476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      if (nominalRead[j][i] == 2) {bluePiece ++;}
   b447a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  for (j=0;j<3;j++) {
   b447e:	3f01      	subs	r7, #1
   b4480:	d01b      	beq.n	b44ba <_Z18determineAdvantagev+0x6e>
   b4482:	46b1      	mov	r9, r6
   b4484:	2204      	movs	r2, #4
    for (i=0;i<3;i++) {
   b4486:	3a01      	subs	r2, #1
   b4488:	d012      	beq.n	b44b0 <_Z18determineAdvantagev+0x64>
      if (nominalRead[j][i] == 1) {redPiece ++;}
   b448a:	ecf9 7a01 	vldmia	r9!, {s15}
   b448e:	eef4 7a47 	vcmp.f32	s15, s14
   b4492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4496:	d103      	bne.n	b44a0 <_Z18determineAdvantagev+0x54>
   b4498:	3001      	adds	r0, #1
   b449a:	f04f 0e01 	mov.w	lr, #1
   b449e:	e7f2      	b.n	b4486 <_Z18determineAdvantagev+0x3a>
      if (nominalRead[j][i] == 2) {bluePiece ++;}
   b44a0:	eef4 7a66 	vcmp.f32	s15, s13
   b44a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b44a8:	d1ed      	bne.n	b4486 <_Z18determineAdvantagev+0x3a>
   b44aa:	3101      	adds	r1, #1
   b44ac:	2301      	movs	r3, #1
    for (i=0;i<3;i++) {
   b44ae:	e7ea      	b.n	b4486 <_Z18determineAdvantagev+0x3a>
  for (j=0;j<3;j++) {
   b44b0:	360c      	adds	r6, #12
   b44b2:	2201      	movs	r2, #1
   b44b4:	f04f 0903 	mov.w	r9, #3
   b44b8:	e7e1      	b.n	b447e <_Z18determineAdvantagev+0x32>
   b44ba:	b10a      	cbz	r2, b44c0 <_Z18determineAdvantagev+0x74>
   b44bc:	f8c8 9000 	str.w	r9, [r8]
   b44c0:	f1be 0f00 	cmp.w	lr, #0
   b44c4:	d000      	beq.n	b44c8 <_Z18determineAdvantagev+0x7c>
   b44c6:	6020      	str	r0, [r4, #0]
   b44c8:	b103      	cbz	r3, b44cc <_Z18determineAdvantagev+0x80>
   b44ca:	6029      	str	r1, [r5, #0]
   b44cc:	b112      	cbz	r2, b44d4 <_Z18determineAdvantagev+0x88>
   b44ce:	2303      	movs	r3, #3
   b44d0:	f8cc 3000 	str.w	r3, [ip]
    }
  }
  //adjust colors and servo angle
  if (redPiece > bluePiece) {
   b44d4:	6822      	ldr	r2, [r4, #0]
   b44d6:	682b      	ldr	r3, [r5, #0]
   b44d8:	429a      	cmp	r2, r3
   b44da:	dd07      	ble.n	b44ec <_Z18determineAdvantagev+0xa0>
    currentColor = 3 - (redPiece - bluePiece); 
   b44dc:	1ad3      	subs	r3, r2, r3
   b44de:	f1c3 0303 	rsb	r3, r3, #3
  if (redPiece < bluePiece) {
    currentColor = 3 + (bluePiece - redPiece);
    currentAngle = 3 + (bluePiece - redPiece);
  }
  if (redPiece == bluePiece) {
    currentColor = 3;
   b44e2:	4a0d      	ldr	r2, [pc, #52]	; (b4518 <_Z18determineAdvantagev+0xcc>)
   b44e4:	6013      	str	r3, [r2, #0]
    currentAngle = 3;
   b44e6:	4a0d      	ldr	r2, [pc, #52]	; (b451c <_Z18determineAdvantagev+0xd0>)
   b44e8:	6013      	str	r3, [r2, #0]
   b44ea:	e001      	b.n	b44f0 <_Z18determineAdvantagev+0xa4>
  if (redPiece < bluePiece) {
   b44ec:	db09      	blt.n	b4502 <_Z18determineAdvantagev+0xb6>
  if (redPiece == bluePiece) {
   b44ee:	d00b      	beq.n	b4508 <_Z18determineAdvantagev+0xbc>
  }
  Serial.printf("\nNumRed = %i NumBlue = %i",redPiece,bluePiece);
   b44f0:	f002 fc0a 	bl	b6d08 <_Z16_fetch_usbserialv>
   b44f4:	682b      	ldr	r3, [r5, #0]
   b44f6:	6822      	ldr	r2, [r4, #0]
   b44f8:	4909      	ldr	r1, [pc, #36]	; (b4520 <_Z18determineAdvantagev+0xd4>)
   b44fa:	f7ff fdfa 	bl	b40f2 <_ZN5Print6printfEPKcz>
}
   b44fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currentColor = 3 + (bluePiece - redPiece);
   b4502:	1a9b      	subs	r3, r3, r2
   b4504:	3303      	adds	r3, #3
   b4506:	e7ec      	b.n	b44e2 <_Z18determineAdvantagev+0x96>
    currentColor = 3;
   b4508:	2303      	movs	r3, #3
   b450a:	e7ea      	b.n	b44e2 <_Z18determineAdvantagev+0x96>
   b450c:	2003e6b0 	.word	0x2003e6b0
   b4510:	2003e624 	.word	0x2003e624
   b4514:	2003e68c 	.word	0x2003e68c
   b4518:	2003e62c 	.word	0x2003e62c
   b451c:	2003e628 	.word	0x2003e628
   b4520:	000b8565 	.word	0x000b8565
   b4524:	2003e668 	.word	0x2003e668
   b4528:	2003e66c 	.word	0x2003e66c

000b452c <_Z8rowSetupv>:
  for (i=2;i>=0;i--) {
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
  }
}

void rowSetup () { 
   b452c:	b538      	push	{r3, r4, r5, lr}
  if (currentRow == 0) {
   b452e:	4d2a      	ldr	r5, [pc, #168]	; (b45d8 <_Z8rowSetupv+0xac>)
   b4530:	682c      	ldr	r4, [r5, #0]
   b4532:	b9bc      	cbnz	r4, b4564 <_Z8rowSetupv+0x38>
    pinMode(D8,OUTPUT);
   b4534:	2101      	movs	r1, #1
   b4536:	2008      	movs	r0, #8
   b4538:	f003 f8b6 	bl	b76a8 <pinMode>
    pinMode(D7,INPUT);
   b453c:	4621      	mov	r1, r4
   b453e:	2007      	movs	r0, #7
   b4540:	f003 f8b2 	bl	b76a8 <pinMode>
    pinMode(D6,INPUT);
   b4544:	4621      	mov	r1, r4
   b4546:	2006      	movs	r0, #6
   b4548:	f003 f8ae 	bl	b76a8 <pinMode>
    digitalWrite(D8,HIGH);
   b454c:	2101      	movs	r1, #1
   b454e:	2008      	movs	r0, #8
   b4550:	f003 f8bb 	bl	b76ca <digitalWrite>
    digitalWrite(D7,LOW);
   b4554:	4621      	mov	r1, r4
   b4556:	2007      	movs	r0, #7
   b4558:	f003 f8b7 	bl	b76ca <digitalWrite>
    digitalWrite(D6,LOW);
   b455c:	4621      	mov	r1, r4
   b455e:	2006      	movs	r0, #6
   b4560:	f003 f8b3 	bl	b76ca <digitalWrite>
  }
  if (currentRow == 1) { 
   b4564:	682c      	ldr	r4, [r5, #0]
   b4566:	2c01      	cmp	r4, #1
   b4568:	d117      	bne.n	b459a <_Z8rowSetupv+0x6e>
    pinMode(D8,INPUT);
   b456a:	2100      	movs	r1, #0
   b456c:	2008      	movs	r0, #8
   b456e:	f003 f89b 	bl	b76a8 <pinMode>
    pinMode(D7,OUTPUT);
   b4572:	4621      	mov	r1, r4
   b4574:	2007      	movs	r0, #7
   b4576:	f003 f897 	bl	b76a8 <pinMode>
    pinMode(D6,INPUT);
   b457a:	2100      	movs	r1, #0
   b457c:	2006      	movs	r0, #6
   b457e:	f003 f893 	bl	b76a8 <pinMode>
    digitalWrite(D8,LOW);
   b4582:	2100      	movs	r1, #0
   b4584:	2008      	movs	r0, #8
   b4586:	f003 f8a0 	bl	b76ca <digitalWrite>
    digitalWrite(D7,HIGH);
   b458a:	4621      	mov	r1, r4
   b458c:	2007      	movs	r0, #7
   b458e:	f003 f89c 	bl	b76ca <digitalWrite>
    digitalWrite(D6,LOW); 
   b4592:	2100      	movs	r1, #0
   b4594:	2006      	movs	r0, #6
   b4596:	f003 f898 	bl	b76ca <digitalWrite>
  }
  if (currentRow == 2) {
   b459a:	682b      	ldr	r3, [r5, #0]
   b459c:	2b02      	cmp	r3, #2
   b459e:	d119      	bne.n	b45d4 <_Z8rowSetupv+0xa8>
    pinMode(D8,INPUT);
   b45a0:	2100      	movs	r1, #0
   b45a2:	2008      	movs	r0, #8
   b45a4:	f003 f880 	bl	b76a8 <pinMode>
    pinMode(D7,INPUT);
   b45a8:	2100      	movs	r1, #0
   b45aa:	2007      	movs	r0, #7
   b45ac:	f003 f87c 	bl	b76a8 <pinMode>
    pinMode(D6,OUTPUT);
   b45b0:	2101      	movs	r1, #1
   b45b2:	2006      	movs	r0, #6
   b45b4:	f003 f878 	bl	b76a8 <pinMode>
    digitalWrite(D8,LOW);
   b45b8:	2100      	movs	r1, #0
   b45ba:	2008      	movs	r0, #8
   b45bc:	f003 f885 	bl	b76ca <digitalWrite>
    digitalWrite(D7,LOW);
   b45c0:	2100      	movs	r1, #0
   b45c2:	2007      	movs	r0, #7
   b45c4:	f003 f881 	bl	b76ca <digitalWrite>
    digitalWrite(D6,HIGH);
  }
}
   b45c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(D6,HIGH);
   b45cc:	2101      	movs	r1, #1
   b45ce:	2006      	movs	r0, #6
   b45d0:	f003 b87b 	b.w	b76ca <digitalWrite>
}
   b45d4:	bd38      	pop	{r3, r4, r5, pc}
   b45d6:	bf00      	nop
   b45d8:	2003e630 	.word	0x2003e630
   b45dc:	00000000 	.word	0x00000000

000b45e0 <_Z13checkPiecePosv>:
void checkPiecePos () {
   b45e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (j=0;j<3;j++) {
   b45e4:	f8df 8190 	ldr.w	r8, [pc, #400]	; b4778 <_Z13checkPiecePosv+0x198>
      nominalRead [i][j] = analogRead(i+17)/783.0;
   b45e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b4768 <_Z13checkPiecePosv+0x188>
   b45ec:	a760      	add	r7, pc, #384	; (adr r7, b4770 <_Z13checkPiecePosv+0x190>)
   b45ee:	e9d7 6700 	ldrd	r6, r7, [r7]
  for (j=0;j<3;j++) {
   b45f2:	2300      	movs	r3, #0
void checkPiecePos () {
   b45f4:	b086      	sub	sp, #24
  for (j=0;j<3;j++) {
   b45f6:	f8c8 3000 	str.w	r3, [r8]
   b45fa:	f8d8 3000 	ldr.w	r3, [r8]
   b45fe:	4c56      	ldr	r4, [pc, #344]	; (b4758 <_Z13checkPiecePosv+0x178>)
   b4600:	2b02      	cmp	r3, #2
   b4602:	dc56      	bgt.n	b46b2 <_Z13checkPiecePosv+0xd2>
    currentRow = j;
   b4604:	4a55      	ldr	r2, [pc, #340]	; (b475c <_Z13checkPiecePosv+0x17c>)
   b4606:	6013      	str	r3, [r2, #0]
    rowSetup ();
   b4608:	f7ff ff90 	bl	b452c <_Z8rowSetupv>
    for (i=0;i<3;i++) {
   b460c:	2300      	movs	r3, #0
   b460e:	6023      	str	r3, [r4, #0]
   b4610:	6820      	ldr	r0, [r4, #0]
   b4612:	2802      	cmp	r0, #2
   b4614:	dc47      	bgt.n	b46a6 <_Z13checkPiecePosv+0xc6>
      nominalRead [i][j] = analogRead(i+17)/783.0;
   b4616:	3011      	adds	r0, #17
   b4618:	b280      	uxth	r0, r0
   b461a:	f003 f86f 	bl	b76fc <analogRead>
   b461e:	f003 fb8b 	bl	b7d38 <__aeabi_i2d>
   b4622:	4632      	mov	r2, r6
   b4624:	463b      	mov	r3, r7
   b4626:	f003 fd1b 	bl	b8060 <__aeabi_ddiv>
   b462a:	f003 fe01 	bl	b8230 <__aeabi_d2f>
   b462e:	6825      	ldr	r5, [r4, #0]
   b4630:	f8d8 a000 	ldr.w	sl, [r8]
      actualRead [i][j] = nominalRead [i][j];
   b4634:	494a      	ldr	r1, [pc, #296]	; (b4760 <_Z13checkPiecePosv+0x180>)
      nominalRead [i][j] = analogRead(i+17)/783.0;
   b4636:	ee07 0a90 	vmov	s15, r0
   b463a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b463e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      nominalRead [i][j] = analogRead(i+17)/783.0;
   b4642:	4452      	add	r2, sl
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4644:	eef4 7ac7 	vcmpe.f32	s15, s14
      nominalRead [i][j] = analogRead(i+17)/783.0;
   b4648:	eb09 0082 	add.w	r0, r9, r2, lsl #2
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      actualRead [i][j] = nominalRead [i][j];
   b4650:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      nominalRead [i][j] = analogRead(i+17)/783.0;
   b4654:	ea4f 0345 	mov.w	r3, r5, lsl #1
   b4658:	edc0 7a00 	vstr	s15, [r0]
      actualRead [i][j] = nominalRead [i][j];
   b465c:	edc2 7a00 	vstr	s15, [r2]
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4660:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   b4664:	dd09      	ble.n	b467a <_Z13checkPiecePosv+0x9a>
   b4666:	eef4 7ae6 	vcmpe.f32	s15, s13
   b466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b466e:	d504      	bpl.n	b467a <_Z13checkPiecePosv+0x9a>
   b4670:	ed80 7a00 	vstr	s14, [r0]
    for (i=0;i<3;i++) {
   b4674:	3501      	adds	r5, #1
   b4676:	6025      	str	r5, [r4, #0]
   b4678:	e7ca      	b.n	b4610 <_Z13checkPiecePosv+0x30>
      if (nominalRead [i][j] > 2) {nominalRead [i][j] = 2;}
   b467a:	eef4 7ae6 	vcmpe.f32	s15, s13
   b467e:	442b      	add	r3, r5
   b4680:	4453      	add	r3, sl
   b4682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4686:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   b468a:	dd02      	ble.n	b4692 <_Z13checkPiecePosv+0xb2>
   b468c:	edc3 6a00 	vstr	s13, [r3]
      if (nominalRead [i][j] < 1) {nominalRead [i][j] = 0;}
   b4690:	e7f0      	b.n	b4674 <_Z13checkPiecePosv+0x94>
   b4692:	edd3 7a00 	vldr	s15, [r3]
   b4696:	eef4 7ac7 	vcmpe.f32	s15, s14
   b469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b469e:	bf44      	itt	mi
   b46a0:	2200      	movmi	r2, #0
   b46a2:	601a      	strmi	r2, [r3, #0]
   b46a4:	e7e6      	b.n	b4674 <_Z13checkPiecePosv+0x94>
  for (j=0;j<3;j++) {
   b46a6:	f8d8 3000 	ldr.w	r3, [r8]
   b46aa:	3301      	adds	r3, #1
   b46ac:	f8c8 3000 	str.w	r3, [r8]
   b46b0:	e7a3      	b.n	b45fa <_Z13checkPiecePosv+0x1a>
  for (i=2;i>=0;i--) {
   b46b2:	2302      	movs	r3, #2
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",actualRead[i][0],actualRead[i][1],actualRead[i][2]);
   b46b4:	4f2a      	ldr	r7, [pc, #168]	; (b4760 <_Z13checkPiecePosv+0x180>)
   b46b6:	4e2b      	ldr	r6, [pc, #172]	; (b4764 <_Z13checkPiecePosv+0x184>)
  for (i=2;i>=0;i--) {
   b46b8:	6023      	str	r3, [r4, #0]
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",actualRead[i][0],actualRead[i][1],actualRead[i][2]);
   b46ba:	f04f 080c 	mov.w	r8, #12
   b46be:	f002 fb23 	bl	b6d08 <_Z16_fetch_usbserialv>
   b46c2:	6825      	ldr	r5, [r4, #0]
   b46c4:	fb08 7505 	mla	r5, r8, r5, r7
   b46c8:	4681      	mov	r9, r0
   b46ca:	6828      	ldr	r0, [r5, #0]
   b46cc:	f003 fb46 	bl	b7d5c <__aeabi_f2d>
   b46d0:	4602      	mov	r2, r0
   b46d2:	460b      	mov	r3, r1
   b46d4:	68a8      	ldr	r0, [r5, #8]
   b46d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b46da:	f003 fb3f 	bl	b7d5c <__aeabi_f2d>
   b46de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b46e2:	6868      	ldr	r0, [r5, #4]
   b46e4:	f003 fb3a 	bl	b7d5c <__aeabi_f2d>
   b46e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b46ec:	e9cd 0100 	strd	r0, r1, [sp]
   b46f0:	4631      	mov	r1, r6
   b46f2:	4648      	mov	r0, r9
   b46f4:	f7ff fcfd 	bl	b40f2 <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b46f8:	6823      	ldr	r3, [r4, #0]
   b46fa:	3b01      	subs	r3, #1
   b46fc:	2b00      	cmp	r3, #0
   b46fe:	6023      	str	r3, [r4, #0]
   b4700:	dadd      	bge.n	b46be <_Z13checkPiecePosv+0xde>
  for (i=2;i>=0;i--) {
   b4702:	2302      	movs	r3, #2
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
   b4704:	4f18      	ldr	r7, [pc, #96]	; (b4768 <_Z13checkPiecePosv+0x188>)
   b4706:	4e19      	ldr	r6, [pc, #100]	; (b476c <_Z13checkPiecePosv+0x18c>)
  for (i=2;i>=0;i--) {
   b4708:	6023      	str	r3, [r4, #0]
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
   b470a:	f04f 080c 	mov.w	r8, #12
   b470e:	f002 fafb 	bl	b6d08 <_Z16_fetch_usbserialv>
   b4712:	6825      	ldr	r5, [r4, #0]
   b4714:	fb08 7505 	mla	r5, r8, r5, r7
   b4718:	4681      	mov	r9, r0
   b471a:	6828      	ldr	r0, [r5, #0]
   b471c:	f003 fb1e 	bl	b7d5c <__aeabi_f2d>
   b4720:	4602      	mov	r2, r0
   b4722:	460b      	mov	r3, r1
   b4724:	68a8      	ldr	r0, [r5, #8]
   b4726:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b472a:	f003 fb17 	bl	b7d5c <__aeabi_f2d>
   b472e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4732:	6868      	ldr	r0, [r5, #4]
   b4734:	f003 fb12 	bl	b7d5c <__aeabi_f2d>
   b4738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b473c:	e9cd 0100 	strd	r0, r1, [sp]
   b4740:	4631      	mov	r1, r6
   b4742:	4648      	mov	r0, r9
   b4744:	f7ff fcd5 	bl	b40f2 <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b4748:	6823      	ldr	r3, [r4, #0]
   b474a:	3b01      	subs	r3, #1
   b474c:	2b00      	cmp	r3, #0
   b474e:	6023      	str	r3, [r4, #0]
   b4750:	dadd      	bge.n	b470e <_Z13checkPiecePosv+0x12e>
}
   b4752:	b006      	add	sp, #24
   b4754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4758:	2003e668 	.word	0x2003e668
   b475c:	2003e630 	.word	0x2003e630
   b4760:	2003e600 	.word	0x2003e600
   b4764:	000b857f 	.word	0x000b857f
   b4768:	2003e68c 	.word	0x2003e68c
   b476c:	000b85a4 	.word	0x000b85a4
   b4770:	00000000 	.word	0x00000000
   b4774:	40887800 	.word	0x40887800
   b4778:	2003e66c 	.word	0x2003e66c

000b477c <_Z9drawBoardv>:

void drawBoard () {
   b477c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  display.clearDisplay();
   b477e:	4c3b      	ldr	r4, [pc, #236]	; (b486c <_Z9drawBoardv+0xf0>)
   b4780:	4620      	mov	r0, r4
  //left edge
  display.drawLine(6,6,6,57,WHITE);
   b4782:	2501      	movs	r5, #1
   b4784:	2639      	movs	r6, #57	; 0x39
  display.clearDisplay();
   b4786:	f000 fbdb 	bl	b4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.drawLine(6,6,6,57,WHITE);
   b478a:	2306      	movs	r3, #6
   b478c:	e9cd 6500 	strd	r6, r5, [sp]
   b4790:	461a      	mov	r2, r3
   b4792:	4619      	mov	r1, r3
   b4794:	4620      	mov	r0, r4
   b4796:	f000 fd93 	bl	b52c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  //right edge
  display.drawLine(57,6,57,57,WHITE);
   b479a:	e9cd 6500 	strd	r6, r5, [sp]
   b479e:	4633      	mov	r3, r6
   b47a0:	4631      	mov	r1, r6
   b47a2:	4620      	mov	r0, r4
   b47a4:	2206      	movs	r2, #6
   b47a6:	f000 fd8b 	bl	b52c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  //top edge
  display.drawLine(6,6,57,6,WHITE);
   b47aa:	2106      	movs	r1, #6
   b47ac:	9100      	str	r1, [sp, #0]
   b47ae:	4633      	mov	r3, r6
   b47b0:	460a      	mov	r2, r1
   b47b2:	4620      	mov	r0, r4
   b47b4:	9501      	str	r5, [sp, #4]
   b47b6:	f000 fd83 	bl	b52c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  //bottom edge
  display.drawLine(6,57,57,57,WHITE);
   b47ba:	e9cd 6500 	strd	r6, r5, [sp]
   b47be:	4633      	mov	r3, r6
   b47c0:	4632      	mov	r2, r6
   b47c2:	4620      	mov	r0, r4
  //white squares
  display.fillRect(24,7,16,16,WHITE);
   b47c4:	2610      	movs	r6, #16
  display.drawLine(6,57,57,57,WHITE);
   b47c6:	2106      	movs	r1, #6
   b47c8:	f000 fd7a 	bl	b52c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  display.fillRect(24,7,16,16,WHITE);
   b47cc:	4633      	mov	r3, r6
   b47ce:	4620      	mov	r0, r4
   b47d0:	9501      	str	r5, [sp, #4]
   b47d2:	9600      	str	r6, [sp, #0]
   b47d4:	2207      	movs	r2, #7
   b47d6:	2118      	movs	r1, #24
   b47d8:	f000 fe20 	bl	b541c <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(7,24,16,16,WHITE);
   b47dc:	4633      	mov	r3, r6
   b47de:	4620      	mov	r0, r4
   b47e0:	e9cd 6500 	strd	r6, r5, [sp]
   b47e4:	2218      	movs	r2, #24
   b47e6:	2107      	movs	r1, #7
   b47e8:	f000 fe18 	bl	b541c <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(41,24,16,16,WHITE);
   b47ec:	4633      	mov	r3, r6
   b47ee:	4620      	mov	r0, r4
   b47f0:	e9cd 6500 	strd	r6, r5, [sp]
   b47f4:	2218      	movs	r2, #24
   b47f6:	2129      	movs	r1, #41	; 0x29
   b47f8:	f000 fe10 	bl	b541c <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(24,41,16,16,WHITE);
   b47fc:	4633      	mov	r3, r6
   b47fe:	2229      	movs	r2, #41	; 0x29
   b4800:	4620      	mov	r0, r4
   b4802:	e9cd 6500 	strd	r6, r5, [sp]
   b4806:	2118      	movs	r1, #24
   b4808:	f000 fe08 	bl	b541c <_ZN12Adafruit_GFX8fillRectEsssst>

  display.setTextColor(WHITE);
   b480c:	4629      	mov	r1, r5
   b480e:	4620      	mov	r0, r4
   b4810:	f001 f89e 	bl	b5950 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setTextSize(1);
   b4814:	4629      	mov	r1, r5
   b4816:	4620      	mov	r0, r4
   b4818:	f001 f895 	bl	b5946 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(68,16);
   b481c:	4632      	mov	r2, r6
   b481e:	4620      	mov	r0, r4
   b4820:	2144      	movs	r1, #68	; 0x44
   b4822:	f001 f88d 	bl	b5940 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("red  = ");
   b4826:	4912      	ldr	r1, [pc, #72]	; (b4870 <_Z9drawBoardv+0xf4>)
   b4828:	4620      	mov	r0, r4
   b482a:	f7ff fc62 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.setCursor(68,43);
   b482e:	222b      	movs	r2, #43	; 0x2b
   b4830:	4620      	mov	r0, r4
   b4832:	2144      	movs	r1, #68	; 0x44
   b4834:	f001 f884 	bl	b5940 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("blue = ");
   b4838:	490e      	ldr	r1, [pc, #56]	; (b4874 <_Z9drawBoardv+0xf8>)
   b483a:	4620      	mov	r0, r4
   b483c:	f7ff fc59 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.fillCircle(118,18,4,WHITE);
   b4840:	4620      	mov	r0, r4
   b4842:	9500      	str	r5, [sp, #0]
   b4844:	2304      	movs	r3, #4
   b4846:	2212      	movs	r2, #18
   b4848:	2176      	movs	r1, #118	; 0x76
   b484a:	f000 febe 	bl	b55ca <_ZN12Adafruit_GFX10fillCircleEssst>
  display.fillTriangle(118,41,114,49,122,49,WHITE);
   b484e:	2331      	movs	r3, #49	; 0x31
   b4850:	227a      	movs	r2, #122	; 0x7a
   b4852:	e9cd 2301 	strd	r2, r3, [sp, #4]
   b4856:	9300      	str	r3, [sp, #0]
   b4858:	9503      	str	r5, [sp, #12]
   b485a:	2372      	movs	r3, #114	; 0x72
   b485c:	2229      	movs	r2, #41	; 0x29
   b485e:	2176      	movs	r1, #118	; 0x76
   b4860:	4620      	mov	r0, r4
   b4862:	f000 fed8 	bl	b5616 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
}
   b4866:	b004      	add	sp, #16
   b4868:	bd70      	pop	{r4, r5, r6, pc}
   b486a:	bf00      	nop
   b486c:	2003e634 	.word	0x2003e634
   b4870:	000b85d8 	.word	0x000b85d8
   b4874:	000b85e0 	.word	0x000b85e0

000b4878 <_Z10drawPiecesv>:

void drawPieces () {
   b4878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  bool whiteBlack;
  for (j=0;j<3;j++) {
   b487c:	4e3f      	ldr	r6, [pc, #252]	; (b497c <_Z10drawPiecesv+0x104>)
    k = 0;
    for (i=0;i<3;i++) {
      whiteBlack = !whiteBlack;
      if (nominalRead [i][j] == 1) {
   b487e:	f8df 8114 	ldr.w	r8, [pc, #276]	; b4994 <_Z10drawPiecesv+0x11c>
void drawPieces () {
   b4882:	2700      	movs	r7, #0
   b4884:	b085      	sub	sp, #20
  for (j=0;j<3;j++) {
   b4886:	6037      	str	r7, [r6, #0]
    k = 0;
   b4888:	4d3d      	ldr	r5, [pc, #244]	; (b4980 <_Z10drawPiecesv+0x108>)
    for (i=0;i<3;i++) {
   b488a:	4c3e      	ldr	r4, [pc, #248]	; (b4984 <_Z10drawPiecesv+0x10c>)
        display.fillCircle(piecePos[j][k],piecePos[j][k+1],4,whiteBlack);
   b488c:	f8df 9108 	ldr.w	r9, [pc, #264]	; b4998 <_Z10drawPiecesv+0x120>
    k = 0;
   b4890:	2300      	movs	r3, #0
   b4892:	602b      	str	r3, [r5, #0]
    for (i=0;i<3;i++) {
   b4894:	6023      	str	r3, [r4, #0]
   b4896:	6822      	ldr	r2, [r4, #0]
      if (nominalRead [i][j] == 1) {
   b4898:	6833      	ldr	r3, [r6, #0]
    for (i=0;i<3;i++) {
   b489a:	2a02      	cmp	r2, #2
   b489c:	dc66      	bgt.n	b496c <_Z10drawPiecesv+0xf4>
      if (nominalRead [i][j] == 1) {
   b489e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b48a2:	441a      	add	r2, r3
   b48a4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   b48a8:	ed92 7a00 	vldr	s14, [r2]
   b48ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b48b0:	eeb4 7a67 	vcmp.f32	s14, s15
   b48b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      whiteBlack = !whiteBlack;
   b48b8:	f087 0701 	eor.w	r7, r7, #1
      if (nominalRead [i][j] == 1) {
   b48bc:	d114      	bne.n	b48e8 <_Z10drawPiecesv+0x70>
        display.fillCircle(piecePos[j][k],piecePos[j][k+1],4,whiteBlack);
   b48be:	6829      	ldr	r1, [r5, #0]
   b48c0:	4831      	ldr	r0, [pc, #196]	; (b4988 <_Z10drawPiecesv+0x110>)
   b48c2:	2206      	movs	r2, #6
   b48c4:	4353      	muls	r3, r2
   b48c6:	1c4a      	adds	r2, r1, #1
   b48c8:	441a      	add	r2, r3
   b48ca:	4419      	add	r1, r3
   b48cc:	b2bb      	uxth	r3, r7
   b48ce:	f939 1021 	ldrsh.w	r1, [r9, r1, lsl #2]
   b48d2:	f939 2022 	ldrsh.w	r2, [r9, r2, lsl #2]
   b48d6:	9300      	str	r3, [sp, #0]
   b48d8:	2304      	movs	r3, #4
   b48da:	f000 fe76 	bl	b55ca <_ZN12Adafruit_GFX10fillCircleEssst>
        Serial.printf(" piece found");
   b48de:	f002 fa13 	bl	b6d08 <_Z16_fetch_usbserialv>
   b48e2:	492a      	ldr	r1, [pc, #168]	; (b498c <_Z10drawPiecesv+0x114>)
   b48e4:	f7ff fc05 	bl	b40f2 <_ZN5Print6printfEPKcz>
      }
      if (nominalRead [i][j] == 2) {
   b48e8:	6823      	ldr	r3, [r4, #0]
   b48ea:	6832      	ldr	r2, [r6, #0]
   b48ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b48f0:	4413      	add	r3, r2
   b48f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   b48f6:	ed93 7a00 	vldr	s14, [r3]
   b48fa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b48fe:	eeb4 7a67 	vcmp.f32	s14, s15
   b4902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4906:	d121      	bne.n	b494c <_Z10drawPiecesv+0xd4>
        display.fillTriangle(piecePos[j][k],piecePos[j][k+1]-4,piecePos[j][k]-4,piecePos[j][k+1]+4,piecePos[j][k]+4,piecePos[j][k+1]+4,whiteBlack);
   b4908:	6828      	ldr	r0, [r5, #0]
   b490a:	2306      	movs	r3, #6
   b490c:	4353      	muls	r3, r2
   b490e:	181a      	adds	r2, r3, r0
   b4910:	3001      	adds	r0, #1
   b4912:	4403      	add	r3, r0
   b4914:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
   b4918:	f839 2023 	ldrh.w	r2, [r9, r3, lsl #2]
   b491c:	b288      	uxth	r0, r1
   b491e:	f1a0 0c04 	sub.w	ip, r0, #4
   b4922:	1d13      	adds	r3, r2, #4
   b4924:	3004      	adds	r0, #4
   b4926:	b21b      	sxth	r3, r3
   b4928:	b200      	sxth	r0, r0
   b492a:	3a04      	subs	r2, #4
   b492c:	e9cd 3000 	strd	r3, r0, [sp]
   b4930:	b209      	sxth	r1, r1
   b4932:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b4936:	4814      	ldr	r0, [pc, #80]	; (b4988 <_Z10drawPiecesv+0x110>)
   b4938:	fa0f f38c 	sxth.w	r3, ip
   b493c:	b212      	sxth	r2, r2
   b493e:	f000 fe6a 	bl	b5616 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
        Serial.printf(" piece found");
   b4942:	f002 f9e1 	bl	b6d08 <_Z16_fetch_usbserialv>
   b4946:	4911      	ldr	r1, [pc, #68]	; (b498c <_Z10drawPiecesv+0x114>)
   b4948:	f7ff fbd3 	bl	b40f2 <_ZN5Print6printfEPKcz>
      }
      Serial.printf("\nk = %i i = %i j = %i",k,i,j);
   b494c:	f002 f9dc 	bl	b6d08 <_Z16_fetch_usbserialv>
   b4950:	6833      	ldr	r3, [r6, #0]
   b4952:	9300      	str	r3, [sp, #0]
   b4954:	682a      	ldr	r2, [r5, #0]
   b4956:	6823      	ldr	r3, [r4, #0]
   b4958:	490d      	ldr	r1, [pc, #52]	; (b4990 <_Z10drawPiecesv+0x118>)
   b495a:	f7ff fbca 	bl	b40f2 <_ZN5Print6printfEPKcz>
      k+=2;
   b495e:	682b      	ldr	r3, [r5, #0]
   b4960:	3302      	adds	r3, #2
   b4962:	602b      	str	r3, [r5, #0]
    for (i=0;i<3;i++) {
   b4964:	6823      	ldr	r3, [r4, #0]
   b4966:	3301      	adds	r3, #1
   b4968:	6023      	str	r3, [r4, #0]
   b496a:	e794      	b.n	b4896 <_Z10drawPiecesv+0x1e>
  for (j=0;j<3;j++) {
   b496c:	3301      	adds	r3, #1
   b496e:	2b02      	cmp	r3, #2
   b4970:	6033      	str	r3, [r6, #0]
   b4972:	dd89      	ble.n	b4888 <_Z10drawPiecesv+0x10>
    }
  }
}
   b4974:	b005      	add	sp, #20
   b4976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b497a:	bf00      	nop
   b497c:	2003e66c 	.word	0x2003e66c
   b4980:	2003e670 	.word	0x2003e670
   b4984:	2003e668 	.word	0x2003e668
   b4988:	2003e634 	.word	0x2003e634
   b498c:	000b85e8 	.word	0x000b85e8
   b4990:	000b85f5 	.word	0x000b85f5
   b4994:	2003e68c 	.word	0x2003e68c
   b4998:	2003e0c4 	.word	0x2003e0c4

000b499c <_Z9pixelFilliii>:

int pixelFill(int start, int end,int color) {
   b499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
   b499e:	4d0b      	ldr	r5, [pc, #44]	; (b49cc <_Z9pixelFilliii+0x30>)

    neopix.setPixelColor(neopixNum, color);
   b49a0:	4e0b      	ldr	r6, [pc, #44]	; (b49d0 <_Z9pixelFilliii+0x34>)
  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
   b49a2:	6028      	str	r0, [r5, #0]
int pixelFill(int start, int end,int color) {
   b49a4:	460c      	mov	r4, r1
   b49a6:	4617      	mov	r7, r2
  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
   b49a8:	6829      	ldr	r1, [r5, #0]
   b49aa:	42a1      	cmp	r1, r4
   b49ac:	da0b      	bge.n	b49c6 <_Z9pixelFilliii+0x2a>
    neopix.setPixelColor(neopixNum, color);
   b49ae:	463a      	mov	r2, r7
   b49b0:	b289      	uxth	r1, r1
   b49b2:	4630      	mov	r0, r6
   b49b4:	f001 f9cc 	bl	b5d50 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    neopix.show();
   b49b8:	4630      	mov	r0, r6
   b49ba:	f001 f81d 	bl	b59f8 <_ZN17Adafruit_NeoPixel4showEv>
  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
   b49be:	682b      	ldr	r3, [r5, #0]
   b49c0:	3301      	adds	r3, #1
   b49c2:	602b      	str	r3, [r5, #0]
   b49c4:	e7f0      	b.n	b49a8 <_Z9pixelFilliii+0xc>

  }
    
  return end;

   b49c6:	4620      	mov	r0, r4
   b49c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b49ca:	bf00      	nop
   b49cc:	2003e688 	.word	0x2003e688
   b49d0:	2003e674 	.word	0x2003e674

000b49d4 <loop>:
void loop() {
   b49d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (nominalRead[0][0] == 2 || nominalRead[0][1] == 2 || nominalRead[0][2] == 2) {
   b49d6:	4c3e      	ldr	r4, [pc, #248]	; (b4ad0 <loop+0xfc>)
  checkPiecePos();
   b49d8:	f7ff fe02 	bl	b45e0 <_Z13checkPiecePosv>
  determineAdvantage();
   b49dc:	f7ff fd36 	bl	b444c <_Z18determineAdvantagev>
  drawBoard();
   b49e0:	f7ff fecc 	bl	b477c <_Z9drawBoardv>
  drawPieces();
   b49e4:	f7ff ff48 	bl	b4878 <_Z10drawPiecesv>
  display.display();
   b49e8:	483a      	ldr	r0, [pc, #232]	; (b4ad4 <loop+0x100>)
   b49ea:	f000 fb21 	bl	b5030 <_ZN16Adafruit_SSD13067displayEv>
  if (nominalRead[0][0] == 2 || nominalRead[0][1] == 2 || nominalRead[0][2] == 2) {
   b49ee:	ed94 7a00 	vldr	s14, [r4]
   b49f2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b49f6:	eeb4 7a67 	vcmp.f32	s14, s15
   b49fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b49fe:	d00d      	beq.n	b4a1c <loop+0x48>
   b4a00:	ed94 7a01 	vldr	s14, [r4, #4]
   b4a04:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a0c:	d006      	beq.n	b4a1c <loop+0x48>
   b4a0e:	ed94 7a02 	vldr	s14, [r4, #8]
   b4a12:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a1a:	d114      	bne.n	b4a46 <loop+0x72>
    setHue(3,false,COLORS[currentColor],100,255);
   b4a1c:	4b2e      	ldr	r3, [pc, #184]	; (b4ad8 <loop+0x104>)
   b4a1e:	4a2f      	ldr	r2, [pc, #188]	; (b4adc <loop+0x108>)
   b4a20:	6819      	ldr	r1, [r3, #0]
   b4a22:	25ff      	movs	r5, #255	; 0xff
   b4a24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b4a28:	9500      	str	r5, [sp, #0]
   b4a2a:	2364      	movs	r3, #100	; 0x64
   b4a2c:	2100      	movs	r1, #0
   b4a2e:	2003      	movs	r0, #3
   b4a30:	f7ff fb92 	bl	b4158 <_Z6setHueibiii>
    pixelFill(0,12,NEOCOLORS[6]);
   b4a34:	462a      	mov	r2, r5
   b4a36:	210c      	movs	r1, #12
   b4a38:	2000      	movs	r0, #0
   b4a3a:	f7ff ffaf 	bl	b499c <_Z9pixelFilliii>
    delay(5000);
   b4a3e:	f241 3088 	movw	r0, #5000	; 0x1388
   b4a42:	f001 ffcb 	bl	b69dc <delay>
  if (nominalRead[2][0] == 1 || nominalRead[2][1] == 1 || nominalRead[2][2] == 1) {
   b4a46:	ed94 7a06 	vldr	s14, [r4, #24]
   b4a4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b4a4e:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a56:	d00d      	beq.n	b4a74 <loop+0xa0>
   b4a58:	ed94 7a07 	vldr	s14, [r4, #28]
   b4a5c:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a64:	d006      	beq.n	b4a74 <loop+0xa0>
   b4a66:	ed94 7a08 	vldr	s14, [r4, #32]
   b4a6a:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4a72:	d115      	bne.n	b4aa0 <loop+0xcc>
    setHue(3,true,21485,100,255);
   b4a74:	23ff      	movs	r3, #255	; 0xff
   b4a76:	9300      	str	r3, [sp, #0]
   b4a78:	f245 32ed 	movw	r2, #21485	; 0x53ed
   b4a7c:	2364      	movs	r3, #100	; 0x64
   b4a7e:	2101      	movs	r1, #1
   b4a80:	2003      	movs	r0, #3
   b4a82:	f7ff fb69 	bl	b4158 <_Z6setHueibiii>
    pixelFill(0,12,NEOCOLORS[0]);
   b4a86:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   b4a8a:	210c      	movs	r1, #12
   b4a8c:	2000      	movs	r0, #0
   b4a8e:	f7ff ff85 	bl	b499c <_Z9pixelFilliii>
    delay(5000);
   b4a92:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b4a96:	b003      	add	sp, #12
   b4a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay(5000);
   b4a9c:	f001 bf9e 	b.w	b69dc <delay>
    setHue(3,true,COLORS[currentColor],100,255);
   b4aa0:	4c0d      	ldr	r4, [pc, #52]	; (b4ad8 <loop+0x104>)
   b4aa2:	4a0e      	ldr	r2, [pc, #56]	; (b4adc <loop+0x108>)
   b4aa4:	6821      	ldr	r1, [r4, #0]
   b4aa6:	23ff      	movs	r3, #255	; 0xff
   b4aa8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b4aac:	9300      	str	r3, [sp, #0]
   b4aae:	2101      	movs	r1, #1
   b4ab0:	2364      	movs	r3, #100	; 0x64
   b4ab2:	2003      	movs	r0, #3
   b4ab4:	f7ff fb50 	bl	b4158 <_Z6setHueibiii>
    pixelFill(0,12,NEOCOLORS[currentColor]);
   b4ab8:	6822      	ldr	r2, [r4, #0]
   b4aba:	4b09      	ldr	r3, [pc, #36]	; (b4ae0 <loop+0x10c>)
   b4abc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b4ac0:	210c      	movs	r1, #12
   b4ac2:	2000      	movs	r0, #0
}
   b4ac4:	b003      	add	sp, #12
   b4ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    pixelFill(0,12,NEOCOLORS[currentColor]);
   b4aca:	f7ff bf67 	b.w	b499c <_Z9pixelFilliii>
   b4ace:	bf00      	nop
   b4ad0:	2003e68c 	.word	0x2003e68c
   b4ad4:	2003e634 	.word	0x2003e634
   b4ad8:	2003e62c 	.word	0x2003e62c
   b4adc:	000b8634 	.word	0x000b8634
   b4ae0:	000b865c 	.word	0x000b865c

000b4ae4 <_GLOBAL__sub_I_SystemMode>:
   b4ae4:	b508      	push	{r3, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4ae6:	4b1b      	ldr	r3, [pc, #108]	; (b4b54 <_GLOBAL__sub_I_SystemMode+0x70>)
   b4ae8:	2200      	movs	r2, #0
   b4aea:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4aee:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4af2:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4af4:	2002      	movs	r0, #2
   b4af6:	f001 fb8d 	bl	b6214 <set_system_mode>
String hueCmd;  // Hue command
   b4afa:	4917      	ldr	r1, [pc, #92]	; (b4b58 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4afc:	4817      	ldr	r0, [pc, #92]	; (b4b5c <_GLOBAL__sub_I_SystemMode+0x78>)
   b4afe:	f001 fdfc 	bl	b66fa <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4b02:	4a17      	ldr	r2, [pc, #92]	; (b4b60 <_GLOBAL__sub_I_SystemMode+0x7c>)
   b4b04:	4b17      	ldr	r3, [pc, #92]	; (b4b64 <_GLOBAL__sub_I_SystemMode+0x80>)
   b4b06:	6812      	ldr	r2, [r2, #0]
   b4b08:	601a      	str	r2, [r3, #0]
   b4b0a:	4a17      	ldr	r2, [pc, #92]	; (b4b68 <_GLOBAL__sub_I_SystemMode+0x84>)
TCPClient HueClient;
   b4b0c:	4817      	ldr	r0, [pc, #92]	; (b4b6c <_GLOBAL__sub_I_SystemMode+0x88>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4b0e:	6812      	ldr	r2, [r2, #0]
   b4b10:	605a      	str	r2, [r3, #4]
   b4b12:	4a17      	ldr	r2, [pc, #92]	; (b4b70 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4b14:	6812      	ldr	r2, [r2, #0]
   b4b16:	609a      	str	r2, [r3, #8]
   b4b18:	4a16      	ldr	r2, [pc, #88]	; (b4b74 <_GLOBAL__sub_I_SystemMode+0x90>)
   b4b1a:	6812      	ldr	r2, [r2, #0]
   b4b1c:	60da      	str	r2, [r3, #12]
   b4b1e:	4a16      	ldr	r2, [pc, #88]	; (b4b78 <_GLOBAL__sub_I_SystemMode+0x94>)
   b4b20:	6812      	ldr	r2, [r2, #0]
   b4b22:	611a      	str	r2, [r3, #16]
   b4b24:	4a15      	ldr	r2, [pc, #84]	; (b4b7c <_GLOBAL__sub_I_SystemMode+0x98>)
   b4b26:	6812      	ldr	r2, [r2, #0]
   b4b28:	615a      	str	r2, [r3, #20]
   b4b2a:	4a15      	ldr	r2, [pc, #84]	; (b4b80 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4b2c:	6812      	ldr	r2, [r2, #0]
   b4b2e:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4b30:	f002 fc78 	bl	b7424 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b4b34:	4813      	ldr	r0, [pc, #76]	; (b4b84 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4b36:	f002 fc75 	bl	b7424 <_ZN9TCPClientC1Ev>
Adafruit_NeoPixel neopix(12,A4,WS2812B);
   b4b3a:	2302      	movs	r3, #2
   b4b3c:	210c      	movs	r1, #12
   b4b3e:	4812      	ldr	r0, [pc, #72]	; (b4b88 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4b40:	220f      	movs	r2, #15
   b4b42:	f000 ff47 	bl	b59d4 <_ZN17Adafruit_NeoPixelC1Ethh>
   b4b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SSD1306 display(D2);
   b4b4a:	4810      	ldr	r0, [pc, #64]	; (b4b8c <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4b4c:	2102      	movs	r1, #2
   b4b4e:	f000 b9e1 	b.w	b4f14 <_ZN16Adafruit_SSD1306C1Ea>
   b4b52:	bf00      	nop
   b4b54:	2003e5c4 	.word	0x2003e5c4
   b4b58:	000b84a8 	.word	0x000b84a8
   b4b5c:	2003e658 	.word	0x2003e658
   b4b60:	2003e5c0 	.word	0x2003e5c0
   b4b64:	2003e5a4 	.word	0x2003e5a4
   b4b68:	2003e0b8 	.word	0x2003e0b8
   b4b6c:	2003e588 	.word	0x2003e588
   b4b70:	2003e0c0 	.word	0x2003e0c0
   b4b74:	2003e0b0 	.word	0x2003e0b0
   b4b78:	2003e0ac 	.word	0x2003e0ac
   b4b7c:	2003e0b4 	.word	0x2003e0b4
   b4b80:	2003e0bc 	.word	0x2003e0bc
   b4b84:	2003e5d0 	.word	0x2003e5d0
   b4b88:	2003e674 	.word	0x2003e674
   b4b8c:	2003e634 	.word	0x2003e634

000b4b90 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4b90:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4b92:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4b94:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4b98:	2d02      	cmp	r5, #2
   b4b9a:	d069      	beq.n	b4c70 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4b9c:	2d03      	cmp	r5, #3
   b4b9e:	f000 8099 	beq.w	b4cd4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4ba2:	2d01      	cmp	r5, #1
   b4ba4:	d16c      	bne.n	b4c80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4ba6:	8905      	ldrh	r5, [r0, #8]
   b4ba8:	43d2      	mvns	r2, r2
   b4baa:	442a      	add	r2, r5
   b4bac:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4bae:	2a00      	cmp	r2, #0
   b4bb0:	db5d      	blt.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4bb2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4bb6:	4295      	cmp	r5, r2
   b4bb8:	dd59      	ble.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4bba:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4bbc:	bfbe      	ittt	lt
   b4bbe:	185b      	addlt	r3, r3, r1
   b4bc0:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4bc2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4bc4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4bc8:	18cd      	adds	r5, r1, r3
   b4bca:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4bcc:	bfc4      	itt	gt
   b4bce:	1a43      	subgt	r3, r0, r1
   b4bd0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4bd2:	2b00      	cmp	r3, #0
   b4bd4:	dd4b      	ble.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4bd6:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4bda:	f8df c120 	ldr.w	ip, [pc, #288]	; b4cfc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4bde:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4be2:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4be6:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4be8:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4bec:	d01a      	beq.n	b4c24 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4bee:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4bf2:	4e40      	ldr	r6, [pc, #256]	; (b4cf4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4bf4:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4bf6:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4bf8:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4bfa:	bf3f      	itttt	cc
   b4bfc:	eba5 0e03 	subcc.w	lr, r5, r3
   b4c00:	26ff      	movcc	r6, #255	; 0xff
   b4c02:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4c06:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4c08:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4c0c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c0e:	bf0c      	ite	eq
   b4c10:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4c12:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4c14:	42ab      	cmp	r3, r5
   b4c16:	f80c 6002 	strb.w	r6, [ip, r2]
   b4c1a:	d328      	bcc.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4c1c:	3908      	subs	r1, #8
   b4c1e:	440b      	add	r3, r1
   b4c20:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4c22:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4c24:	2b07      	cmp	r3, #7
   b4c26:	d919      	bls.n	b4c5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4c28:	2c01      	cmp	r4, #1
   b4c2a:	f04f 35ff 	mov.w	r5, #4294967295
   b4c2e:	bf18      	it	ne
   b4c30:	2500      	movne	r5, #0
   b4c32:	b2ed      	uxtb	r5, r5
   b4c34:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4c38:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4c3a:	3a08      	subs	r2, #8
   b4c3c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4c3e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4c40:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4c44:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4c48:	d8f7      	bhi.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4c4a:	f1a3 0208 	sub.w	r2, r3, #8
   b4c4e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4c52:	3201      	adds	r2, #1
   b4c54:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4c58:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4c5c:	b13b      	cbz	r3, b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4c5e:	4a26      	ldr	r2, [pc, #152]	; (b4cf8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4c60:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4c62:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4c64:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c66:	bf0c      	ite	eq
   b4c68:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4c6a:	4393      	bicne	r3, r2
   b4c6c:	7003      	strb	r3, [r0, #0]
}
   b4c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4c70:	8945      	ldrh	r5, [r0, #10]
   b4c72:	43d2      	mvns	r2, r2
   b4c74:	442a      	add	r2, r5
      x -= (w-1);
   b4c76:	18cd      	adds	r5, r1, r3
   b4c78:	8901      	ldrh	r1, [r0, #8]
   b4c7a:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4c7c:	b212      	sxth	r2, r2
      x -= (w-1);
   b4c7e:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4c80:	2a00      	cmp	r2, #0
   b4c82:	dbf4      	blt.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4c84:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4c88:	4295      	cmp	r5, r2
   b4c8a:	ddf0      	ble.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4c8c:	2900      	cmp	r1, #0
    w += x;
   b4c8e:	bfbe      	ittt	lt
   b4c90:	185b      	addlt	r3, r3, r1
   b4c92:	b21b      	sxthlt	r3, r3
    x = 0;
   b4c94:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4c96:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4c9a:	18ce      	adds	r6, r1, r3
   b4c9c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4c9e:	bfc4      	itt	gt
   b4ca0:	1a6b      	subgt	r3, r5, r1
   b4ca2:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4ca4:	2b00      	cmp	r3, #0
   b4ca6:	dde2      	ble.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4ca8:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4caa:	2580      	movs	r5, #128	; 0x80
   b4cac:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4cb0:	4812      	ldr	r0, [pc, #72]	; (b4cfc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4cb2:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4cb4:	f002 0007 	and.w	r0, r2, #7
   b4cb8:	2201      	movs	r2, #1
   b4cba:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4cbc:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4cbe:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4cc0:	440b      	add	r3, r1
   b4cc2:	d10c      	bne.n	b4cde <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4cc4:	428b      	cmp	r3, r1
   b4cc6:	d0d2      	beq.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4cc8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4ccc:	4310      	orrs	r0, r2
   b4cce:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4cd2:	e7f7      	b.n	b4cc4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4cd4:	18cd      	adds	r5, r1, r3
   b4cd6:	8941      	ldrh	r1, [r0, #10]
   b4cd8:	1b49      	subs	r1, r1, r5
   b4cda:	b209      	sxth	r1, r1
      break;
   b4cdc:	e767      	b.n	b4bae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4cde:	43d2      	mvns	r2, r2
   b4ce0:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4ce2:	428b      	cmp	r3, r1
   b4ce4:	d0c3      	beq.n	b4c6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4ce6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4cea:	4010      	ands	r0, r2
   b4cec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4cf0:	e7f7      	b.n	b4ce2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4cf2:	bf00      	nop
   b4cf4:	2003e114 	.word	0x2003e114
   b4cf8:	2003e10c 	.word	0x2003e10c
   b4cfc:	2003e11c 	.word	0x2003e11c

000b4d00 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4d02:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4d04:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4d08:	2d02      	cmp	r5, #2
   b4d0a:	d034      	beq.n	b4d76 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4d0c:	2d03      	cmp	r5, #3
   b4d0e:	f000 809b 	beq.w	b4e48 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4d12:	2d01      	cmp	r5, #1
   b4d14:	d137      	bne.n	b4d86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4d16:	18d5      	adds	r5, r2, r3
   b4d18:	8902      	ldrh	r2, [r0, #8]
   b4d1a:	1b52      	subs	r2, r2, r5
   b4d1c:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4d1e:	2900      	cmp	r1, #0
   b4d20:	f2c0 8091 	blt.w	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d24:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4d28:	428d      	cmp	r5, r1
   b4d2a:	f340 808c 	ble.w	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4d2e:	2a00      	cmp	r2, #0
    w += x;
   b4d30:	bfbe      	ittt	lt
   b4d32:	189b      	addlt	r3, r3, r2
   b4d34:	b21b      	sxthlt	r3, r3
    x = 0;
   b4d36:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4d38:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4d3c:	18d6      	adds	r6, r2, r3
   b4d3e:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4d40:	bfc4      	itt	gt
   b4d42:	1aab      	subgt	r3, r5, r2
   b4d44:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4d46:	2b00      	cmp	r3, #0
   b4d48:	dd7d      	ble.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4d4a:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4d4c:	2580      	movs	r5, #128	; 0x80
   b4d4e:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4d52:	4845      	ldr	r0, [pc, #276]	; (b4e68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4d54:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4d56:	f001 0007 	and.w	r0, r1, #7
   b4d5a:	2101      	movs	r1, #1
   b4d5c:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4d5e:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4d60:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4d62:	4413      	add	r3, r2
   b4d64:	d175      	bne.n	b4e52 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4d66:	429a      	cmp	r2, r3
   b4d68:	d06d      	beq.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d6a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4d6e:	4308      	orrs	r0, r1
   b4d70:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4d74:	e7f7      	b.n	b4d66 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4d76:	8905      	ldrh	r5, [r0, #8]
   b4d78:	43c9      	mvns	r1, r1
   b4d7a:	4429      	add	r1, r5
      y -= (h-1);
   b4d7c:	18d5      	adds	r5, r2, r3
   b4d7e:	8942      	ldrh	r2, [r0, #10]
   b4d80:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4d82:	b209      	sxth	r1, r1
      y -= (h-1);
   b4d84:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4d86:	2900      	cmp	r1, #0
   b4d88:	db5d      	blt.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d8a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4d8e:	428d      	cmp	r5, r1
   b4d90:	dd59      	ble.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4d92:	2a00      	cmp	r2, #0
    __h += __y;
   b4d94:	bfbe      	ittt	lt
   b4d96:	189b      	addlt	r3, r3, r2
   b4d98:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4d9a:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4d9c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4da0:	18d5      	adds	r5, r2, r3
   b4da2:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4da4:	bfc4      	itt	gt
   b4da6:	1a83      	subgt	r3, r0, r2
   b4da8:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4daa:	2b00      	cmp	r3, #0
   b4dac:	dd4b      	ble.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4dae:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4db2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4e68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4db6:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4dba:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4dbe:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4dc0:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4dc4:	d01a      	beq.n	b4dfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4dc6:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4dca:	4e28      	ldr	r6, [pc, #160]	; (b4e6c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4dcc:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4dce:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4dd0:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4dd2:	bf3f      	itttt	cc
   b4dd4:	eba5 0e03 	subcc.w	lr, r5, r3
   b4dd8:	26ff      	movcc	r6, #255	; 0xff
   b4dda:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4dde:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4de0:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4de4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4de6:	bf0c      	ite	eq
   b4de8:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4dea:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4dec:	42ab      	cmp	r3, r5
   b4dee:	f80c 6001 	strb.w	r6, [ip, r1]
   b4df2:	d328      	bcc.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4df4:	3a08      	subs	r2, #8
   b4df6:	4413      	add	r3, r2
   b4df8:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4dfa:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4dfc:	2b07      	cmp	r3, #7
   b4dfe:	d919      	bls.n	b4e34 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4e00:	2c01      	cmp	r4, #1
   b4e02:	f04f 35ff 	mov.w	r5, #4294967295
   b4e06:	bf18      	it	ne
   b4e08:	2500      	movne	r5, #0
   b4e0a:	b2ed      	uxtb	r5, r5
   b4e0c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4e10:	461a      	mov	r2, r3
      h -= 8;
   b4e12:	3a08      	subs	r2, #8
   b4e14:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4e16:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4e18:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4e1c:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4e20:	d8f7      	bhi.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4e22:	f1a3 0208 	sub.w	r2, r3, #8
   b4e26:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4e2a:	3201      	adds	r2, #1
   b4e2c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4e30:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4e34:	b13b      	cbz	r3, b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4e36:	4a0e      	ldr	r2, [pc, #56]	; (b4e70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4e38:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4e3a:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4e3c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e3e:	bf0c      	ite	eq
   b4e40:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4e42:	4393      	bicne	r3, r2
   b4e44:	7003      	strb	r3, [r0, #0]
}
   b4e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4e48:	8945      	ldrh	r5, [r0, #10]
   b4e4a:	43c9      	mvns	r1, r1
   b4e4c:	4429      	add	r1, r5
   b4e4e:	b209      	sxth	r1, r1
      break;
   b4e50:	e765      	b.n	b4d1e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4e52:	43c9      	mvns	r1, r1
   b4e54:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4e56:	429a      	cmp	r2, r3
   b4e58:	d0f5      	beq.n	b4e46 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4e5a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4e5e:	4008      	ands	r0, r1
   b4e60:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4e64:	e7f7      	b.n	b4e56 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4e66:	bf00      	nop
   b4e68:	2003e11c 	.word	0x2003e11c
   b4e6c:	2003e114 	.word	0x2003e114
   b4e70:	2003e10c 	.word	0x2003e10c

000b4e74 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4e74:	4770      	bx	lr
	...

000b4e78 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4e7a:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4e7c:	4606      	mov	r6, r0
   b4e7e:	4614      	mov	r4, r2
   b4e80:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4e82:	db2d      	blt.n	b4ee0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e84:	f000 fd69 	bl	b595a <_ZN12Adafruit_GFX5widthEv>
   b4e88:	42a8      	cmp	r0, r5
   b4e8a:	dd29      	ble.n	b4ee0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e8c:	2c00      	cmp	r4, #0
   b4e8e:	db27      	blt.n	b4ee0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e90:	4630      	mov	r0, r6
   b4e92:	f000 fd65 	bl	b5960 <_ZN12Adafruit_GFX6heightEv>
   b4e96:	42a0      	cmp	r0, r4
   b4e98:	dd22      	ble.n	b4ee0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4e9a:	4630      	mov	r0, r6
   b4e9c:	f000 fd5b 	bl	b5956 <_ZN12Adafruit_GFX11getRotationEv>
   b4ea0:	2802      	cmp	r0, #2
   b4ea2:	d01e      	beq.n	b4ee2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4ea4:	2803      	cmp	r0, #3
   b4ea6:	d025      	beq.n	b4ef4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4ea8:	2801      	cmp	r0, #1
   b4eaa:	d104      	bne.n	b4eb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4eac:	8933      	ldrh	r3, [r6, #8]
   b4eae:	43e2      	mvns	r2, r4
   b4eb0:	441a      	add	r2, r3
    break;
   b4eb2:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4eb4:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4eb6:	2c00      	cmp	r4, #0
   b4eb8:	4622      	mov	r2, r4
   b4eba:	bfb8      	it	lt
   b4ebc:	1de2      	addlt	r2, r4, #7
   b4ebe:	10d2      	asrs	r2, r2, #3
   b4ec0:	2180      	movs	r1, #128	; 0x80
   b4ec2:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4ec6:	490e      	ldr	r1, [pc, #56]	; (b4f00 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4ec8:	2201      	movs	r2, #1
   b4eca:	f004 0407 	and.w	r4, r4, #7
   b4ece:	574b      	ldrsb	r3, [r1, r5]
   b4ed0:	fa02 f404 	lsl.w	r4, r2, r4
   b4ed4:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4ed6:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4ed8:	bf0c      	ite	eq
   b4eda:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4edc:	43a3      	bicne	r3, r4
   b4ede:	554b      	strb	r3, [r1, r5]
}
   b4ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4ee2:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4ee4:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4ee6:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4ee8:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4eea:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4eec:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4eee:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4ef0:	b224      	sxth	r4, r4
    break;
   b4ef2:	e7e0      	b.n	b4eb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4ef4:	8973      	ldrh	r3, [r6, #10]
   b4ef6:	3b01      	subs	r3, #1
   b4ef8:	1b5b      	subs	r3, r3, r5
    break;
   b4efa:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4efc:	b21c      	sxth	r4, r3
    break;
   b4efe:	e7da      	b.n	b4eb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4f00:	2003e11c 	.word	0x2003e11c

000b4f04 <_ZN16Adafruit_SSD1306D0Ev>:
   b4f04:	b510      	push	{r4, lr}
   b4f06:	2124      	movs	r1, #36	; 0x24
   b4f08:	4604      	mov	r4, r0
   b4f0a:	f7ff f8c8 	bl	b409e <_ZdlPvj>
   b4f0e:	4620      	mov	r0, r4
   b4f10:	bd10      	pop	{r4, pc}
	...

000b4f14 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4f14:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4f16:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4f18:	4604      	mov	r4, r0
   b4f1a:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4f1c:	2180      	movs	r1, #128	; 0x80
   b4f1e:	f000 faa7 	bl	b5470 <_ZN12Adafruit_GFXC1Ess>
   b4f22:	4b06      	ldr	r3, [pc, #24]	; (b4f3c <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4f24:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4f26:	23ff      	movs	r3, #255	; 0xff
   b4f28:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4f2c:	7763      	strb	r3, [r4, #29]
   b4f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4f32:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4f34:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4f38:	4620      	mov	r0, r4
   b4f3a:	bd38      	pop	{r3, r4, r5, pc}
   b4f3c:	000b8680 	.word	0x000b8680

000b4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4f40:	4802      	ldr	r0, [pc, #8]	; (b4f4c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4f46:	2100      	movs	r1, #0
   b4f48:	f003 b9d6 	b.w	b82f8 <memset>
   b4f4c:	2003e11c 	.word	0x2003e11c

000b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4f50:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4f52:	4c0b      	ldr	r4, [pc, #44]	; (b4f80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4f54:	7821      	ldrb	r1, [r4, #0]
   b4f56:	f3bf 8f5b 	dmb	ish
   b4f5a:	f011 0101 	ands.w	r1, r1, #1
   b4f5e:	d10b      	bne.n	b4f78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4f60:	4620      	mov	r0, r4
   b4f62:	9101      	str	r1, [sp, #4]
   b4f64:	f7ff f8aa 	bl	b40bc <__cxa_guard_acquire>
   b4f68:	9901      	ldr	r1, [sp, #4]
   b4f6a:	b128      	cbz	r0, b4f78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4f6c:	4805      	ldr	r0, [pc, #20]	; (b4f84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4f6e:	f001 fa61 	bl	b6434 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f72:	4620      	mov	r0, r4
   b4f74:	f7ff f8a7 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b4f78:	4802      	ldr	r0, [pc, #8]	; (b4f84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4f7a:	b002      	add	sp, #8
   b4f7c:	bd10      	pop	{r4, pc}
   b4f7e:	bf00      	nop
   b4f80:	2003e6b4 	.word	0x2003e6b4
   b4f84:	2003e6b8 	.word	0x2003e6b8

000b4f88 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4f88:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4f8a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4f8e:	b143      	cbz	r3, b4fa2 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4f90:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4f92:	f7ff ffdd 	bl	b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f96:	9901      	ldr	r1, [sp, #4]
}
   b4f98:	b003      	add	sp, #12
   b4f9a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4f9e:	f001 bafd 	b.w	b659c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4fa2:	460b      	mov	r3, r1
   b4fa4:	7f81      	ldrb	r1, [r0, #30]
   b4fa6:	7f40      	ldrb	r0, [r0, #29]
   b4fa8:	2201      	movs	r2, #1
}
   b4faa:	b003      	add	sp, #12
   b4fac:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4fb0:	f002 bbbb 	b.w	b772a <shiftOut>

000b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4fb4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4fb6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4fba:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4fbc:	4604      	mov	r4, r0
   b4fbe:	460d      	mov	r5, r1
  if (sid != -1)
   b4fc0:	d01d      	beq.n	b4ffe <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4fc2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4fc6:	2101      	movs	r1, #1
   b4fc8:	b280      	uxth	r0, r0
   b4fca:	f002 fb7e 	bl	b76ca <digitalWrite>
    digitalWrite(dc, LOW);
   b4fce:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	b280      	uxth	r0, r0
   b4fd6:	f002 fb78 	bl	b76ca <digitalWrite>
    digitalWrite(cs, LOW);
   b4fda:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4fde:	2100      	movs	r1, #0
   b4fe0:	b280      	uxth	r0, r0
   b4fe2:	f002 fb72 	bl	b76ca <digitalWrite>
    fastSPIwrite(c);
   b4fe6:	4629      	mov	r1, r5
   b4fe8:	4620      	mov	r0, r4
   b4fea:	f7ff ffcd 	bl	b4f88 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4fee:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4ff2:	2101      	movs	r1, #1
}
   b4ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4ff8:	b280      	uxth	r0, r0
   b4ffa:	f002 bb66 	b.w	b76ca <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4ffe:	f002 fc11 	bl	b7824 <_Z19__fetch_global_Wirev>
   b5002:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5006:	f001 ff4b 	bl	b6ea0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b500a:	f002 fc0b 	bl	b7824 <_Z19__fetch_global_Wirev>
   b500e:	6803      	ldr	r3, [r0, #0]
   b5010:	2100      	movs	r1, #0
   b5012:	689b      	ldr	r3, [r3, #8]
   b5014:	4798      	blx	r3
    Wire.write(c);
   b5016:	f002 fc05 	bl	b7824 <_Z19__fetch_global_Wirev>
   b501a:	6803      	ldr	r3, [r0, #0]
   b501c:	4629      	mov	r1, r5
   b501e:	689b      	ldr	r3, [r3, #8]
   b5020:	4798      	blx	r3
    Wire.endTransmission();
   b5022:	f002 fbff 	bl	b7824 <_Z19__fetch_global_Wirev>
}
   b5026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b502a:	f001 bf40 	b.w	b6eae <_ZN7TwoWire15endTransmissionEv>
	...

000b5030 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b5032:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5034:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5036:	f7ff ffbd 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b503a:	2100      	movs	r1, #0
   b503c:	4620      	mov	r0, r4
   b503e:	f7ff ffb9 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5042:	217f      	movs	r1, #127	; 0x7f
   b5044:	4620      	mov	r0, r4
   b5046:	f7ff ffb5 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b504a:	2122      	movs	r1, #34	; 0x22
   b504c:	4620      	mov	r0, r4
   b504e:	f7ff ffb1 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5052:	2100      	movs	r1, #0
   b5054:	4620      	mov	r0, r4
   b5056:	f7ff ffad 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b505a:	2107      	movs	r1, #7
   b505c:	4620      	mov	r0, r4
   b505e:	f7ff ffa9 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5062:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5066:	4f29      	ldr	r7, [pc, #164]	; (b510c <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5068:	3301      	adds	r3, #1
   b506a:	d02a      	beq.n	b50c2 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b506c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5070:	2101      	movs	r1, #1
   b5072:	b280      	uxth	r0, r0
   b5074:	f002 fb29 	bl	b76ca <digitalWrite>
    digitalWrite(dc, HIGH);
   b5078:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b507c:	2101      	movs	r1, #1
   b507e:	b280      	uxth	r0, r0
   b5080:	f002 fb23 	bl	b76ca <digitalWrite>
    digitalWrite(cs, LOW);
   b5084:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5088:	2100      	movs	r1, #0
   b508a:	b280      	uxth	r0, r0
   b508c:	f002 fb1d 	bl	b76ca <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5090:	2001      	movs	r0, #1
   b5092:	f000 ff1f 	bl	b5ed4 <HAL_Delay_Microseconds>
   b5096:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b509a:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b509c:	f817 1b01 	ldrb.w	r1, [r7], #1
   b50a0:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50a2:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b50a4:	f7ff ff70 	bl	b4f88 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50a8:	2d00      	cmp	r5, #0
   b50aa:	d1f6      	bne.n	b509a <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b50ac:	2001      	movs	r0, #1
   b50ae:	f000 ff11 	bl	b5ed4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b50b2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b50b6:	2101      	movs	r1, #1
}
   b50b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b50bc:	b280      	uxth	r0, r0
   b50be:	f002 bb04 	b.w	b76ca <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50c2:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b50c4:	f002 fbae 	bl	b7824 <_Z19__fetch_global_Wirev>
   b50c8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b50cc:	f001 fee8 	bl	b6ea0 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b50d0:	f002 fba8 	bl	b7824 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b50d4:	6803      	ldr	r3, [r0, #0]
   b50d6:	2140      	movs	r1, #64	; 0x40
   b50d8:	689b      	ldr	r3, [r3, #8]
   b50da:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b50dc:	f105 0610 	add.w	r6, r5, #16
   b50e0:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b50e2:	f002 fb9f 	bl	b7824 <_Z19__fetch_global_Wirev>
   b50e6:	6803      	ldr	r3, [r0, #0]
   b50e8:	5d79      	ldrb	r1, [r7, r5]
   b50ea:	689b      	ldr	r3, [r3, #8]
   b50ec:	4798      	blx	r3
		i++;
   b50ee:	1c6b      	adds	r3, r5, #1
   b50f0:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b50f2:	42ae      	cmp	r6, r5
   b50f4:	d1f5      	bne.n	b50e2 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b50f6:	f002 fb95 	bl	b7824 <_Z19__fetch_global_Wirev>
   b50fa:	f001 fed8 	bl	b6eae <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5102:	d100      	bne.n	b5106 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5106:	4635      	mov	r5, r6
   b5108:	e7dc      	b.n	b50c4 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b510a:	bf00      	nop
   b510c:	2003e11c 	.word	0x2003e11c

000b5110 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5110:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b5112:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5116:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5118:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b511a:	4604      	mov	r4, r0
   b511c:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b511e:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b5120:	f000 80c9 	beq.w	b52b6 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5124:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5128:	2101      	movs	r1, #1
   b512a:	b280      	uxth	r0, r0
   b512c:	f002 fabc 	bl	b76a8 <pinMode>
    pinMode(cs, OUTPUT);
   b5130:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5134:	2101      	movs	r1, #1
   b5136:	b280      	uxth	r0, r0
   b5138:	f002 fab6 	bl	b76a8 <pinMode>
    if (!hwSPI){
   b513c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5140:	2b00      	cmp	r3, #0
   b5142:	f000 80a6 	beq.w	b5292 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5146:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b514a:	2101      	movs	r1, #1
   b514c:	b280      	uxth	r0, r0
   b514e:	f002 fabc 	bl	b76ca <digitalWrite>
        instance().setBitOrder(order);
   b5152:	f7ff fefd 	bl	b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5156:	2101      	movs	r1, #1
   b5158:	f001 f98a 	bl	b6470 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b515c:	f7ff fef8 	bl	b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5160:	2110      	movs	r1, #16
   b5162:	f001 f9f5 	bl	b6550 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5166:	f7ff fef3 	bl	b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b516a:	2100      	movs	r1, #0
   b516c:	f001 f994 	bl	b6498 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5170:	f7ff feee 	bl	b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5174:	f001 f968 	bl	b6448 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5178:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b517c:	2101      	movs	r1, #1
   b517e:	b280      	uxth	r0, r0
   b5180:	f002 fa92 	bl	b76a8 <pinMode>
  digitalWrite(rst, HIGH);
   b5184:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5188:	2101      	movs	r1, #1
   b518a:	b280      	uxth	r0, r0
   b518c:	f002 fa9d 	bl	b76ca <digitalWrite>
  delay(1);
   b5190:	2001      	movs	r0, #1
   b5192:	f001 fc23 	bl	b69dc <delay>
  digitalWrite(rst, LOW);
   b5196:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b519a:	2100      	movs	r1, #0
   b519c:	b280      	uxth	r0, r0
   b519e:	f002 fa94 	bl	b76ca <digitalWrite>
  delay(10);
   b51a2:	200a      	movs	r0, #10
   b51a4:	f001 fc1a 	bl	b69dc <delay>
  digitalWrite(rst, HIGH);
   b51a8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b51ac:	2101      	movs	r1, #1
   b51ae:	b280      	uxth	r0, r0
   b51b0:	f002 fa8b 	bl	b76ca <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b51b4:	4620      	mov	r0, r4
   b51b6:	21ae      	movs	r1, #174	; 0xae
   b51b8:	f7ff fefc 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b51bc:	4620      	mov	r0, r4
   b51be:	21d5      	movs	r1, #213	; 0xd5
   b51c0:	f7ff fef8 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b51c4:	4620      	mov	r0, r4
   b51c6:	2180      	movs	r1, #128	; 0x80
   b51c8:	f7ff fef4 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b51cc:	4620      	mov	r0, r4
   b51ce:	21a8      	movs	r1, #168	; 0xa8
   b51d0:	f7ff fef0 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b51d4:	4620      	mov	r0, r4
   b51d6:	213f      	movs	r1, #63	; 0x3f
   b51d8:	f7ff feec 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b51dc:	4620      	mov	r0, r4
   b51de:	21d3      	movs	r1, #211	; 0xd3
   b51e0:	f7ff fee8 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b51e4:	4620      	mov	r0, r4
   b51e6:	2100      	movs	r1, #0
   b51e8:	f7ff fee4 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b51ec:	4620      	mov	r0, r4
   b51ee:	2140      	movs	r1, #64	; 0x40
   b51f0:	f7ff fee0 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b51f4:	218d      	movs	r1, #141	; 0x8d
   b51f6:	4620      	mov	r0, r4
   b51f8:	f7ff fedc 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b51fc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b51fe:	bf0c      	ite	eq
   b5200:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5202:	2114      	movne	r1, #20
   b5204:	4620      	mov	r0, r4
   b5206:	f7ff fed5 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b520a:	4620      	mov	r0, r4
   b520c:	2120      	movs	r1, #32
   b520e:	f7ff fed1 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5212:	4620      	mov	r0, r4
   b5214:	2100      	movs	r1, #0
   b5216:	f7ff fecd 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b521a:	4620      	mov	r0, r4
   b521c:	21a1      	movs	r1, #161	; 0xa1
   b521e:	f7ff fec9 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5222:	4620      	mov	r0, r4
   b5224:	21c8      	movs	r1, #200	; 0xc8
   b5226:	f7ff fec5 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b522a:	4620      	mov	r0, r4
   b522c:	21da      	movs	r1, #218	; 0xda
   b522e:	f7ff fec1 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5232:	4620      	mov	r0, r4
   b5234:	2112      	movs	r1, #18
   b5236:	f7ff febd 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b523a:	2181      	movs	r1, #129	; 0x81
   b523c:	4620      	mov	r0, r4
   b523e:	f7ff feb9 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5242:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5244:	bf0c      	ite	eq
   b5246:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5248:	21cf      	movne	r1, #207	; 0xcf
   b524a:	4620      	mov	r0, r4
   b524c:	f7ff feb2 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5250:	21d9      	movs	r1, #217	; 0xd9
   b5252:	4620      	mov	r0, r4
   b5254:	f7ff feae 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5258:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b525a:	bf0c      	ite	eq
   b525c:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b525e:	21f1      	movne	r1, #241	; 0xf1
   b5260:	4620      	mov	r0, r4
   b5262:	f7ff fea7 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5266:	4620      	mov	r0, r4
   b5268:	21db      	movs	r1, #219	; 0xdb
   b526a:	f7ff fea3 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b526e:	4620      	mov	r0, r4
   b5270:	2140      	movs	r1, #64	; 0x40
   b5272:	f7ff fe9f 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5276:	4620      	mov	r0, r4
   b5278:	21a4      	movs	r1, #164	; 0xa4
   b527a:	f7ff fe9b 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b527e:	4620      	mov	r0, r4
   b5280:	21a6      	movs	r1, #166	; 0xa6
   b5282:	f7ff fe97 	bl	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5286:	4620      	mov	r0, r4
   b5288:	21af      	movs	r1, #175	; 0xaf
}
   b528a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b528e:	f7ff be91 	b.w	b4fb4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5292:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5296:	2101      	movs	r1, #1
   b5298:	b280      	uxth	r0, r0
   b529a:	f002 fa05 	bl	b76a8 <pinMode>
    	pinMode(sclk, OUTPUT);
   b529e:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b52a2:	2101      	movs	r1, #1
   b52a4:	b280      	uxth	r0, r0
   b52a6:	f002 f9ff 	bl	b76a8 <pinMode>
    if (hwSPI){
   b52aa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b52ae:	2b00      	cmp	r3, #0
   b52b0:	f43f af62 	beq.w	b5178 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b52b4:	e747      	b.n	b5146 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b52b6:	f002 fab5 	bl	b7824 <_Z19__fetch_global_Wirev>
   b52ba:	f001 fde7 	bl	b6e8c <_ZN7TwoWire5beginEv>
   b52be:	e75b      	b.n	b5178 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b52c0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b52c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52c4:	b085      	sub	sp, #20
   b52c6:	461f      	mov	r7, r3
   b52c8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b52cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b52d0:	eba8 0902 	sub.w	r9, r8, r2
   b52d4:	eba7 0a01 	sub.w	sl, r7, r1
   b52d8:	f1b9 0f00 	cmp.w	r9, #0
   b52dc:	bfb8      	it	lt
   b52de:	f1c9 0900 	rsblt	r9, r9, #0
   b52e2:	f1ba 0f00 	cmp.w	sl, #0
   b52e6:	bfb8      	it	lt
   b52e8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b52ec:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b52ee:	4683      	mov	fp, r0
   b52f0:	460c      	mov	r4, r1
   b52f2:	4615      	mov	r5, r2
  if (steep) {
   b52f4:	dd04      	ble.n	b5300 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b52f6:	463a      	mov	r2, r7
    swap(x0, y0);
   b52f8:	462c      	mov	r4, r5
    swap(x1, y1);
   b52fa:	4647      	mov	r7, r8
    swap(x0, y0);
   b52fc:	460d      	mov	r5, r1
    swap(x1, y1);
   b52fe:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5300:	42bc      	cmp	r4, r7
   b5302:	dd05      	ble.n	b5310 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5304:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5306:	4645      	mov	r5, r8
   b5308:	4690      	mov	r8, r2
  if (x0 > x1) {
   b530a:	4622      	mov	r2, r4
   b530c:	463c      	mov	r4, r7
   b530e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5310:	1b3e      	subs	r6, r7, r4
   b5312:	b2b2      	uxth	r2, r6
   b5314:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5316:	eba8 0205 	sub.w	r2, r8, r5
   b531a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b531e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5322:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5326:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b532a:	4545      	cmp	r5, r8
   b532c:	bfb4      	ite	lt
   b532e:	2201      	movlt	r2, #1
   b5330:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5334:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5336:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5338:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b533a:	42bc      	cmp	r4, r7
   b533c:	dc1c      	bgt.n	b5378 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b533e:	f8db 2000 	ldr.w	r2, [fp]
   b5342:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5344:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5346:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b534a:	bfc7      	ittee	gt
   b534c:	4629      	movgt	r1, r5
   b534e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b5350:	462a      	movle	r2, r5
   b5352:	4621      	movle	r1, r4
   b5354:	4658      	mov	r0, fp
   b5356:	47c0      	blx	r8
    }
    err -= dy;
   b5358:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b535a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b535c:	1ab6      	subs	r6, r6, r2
   b535e:	b2b1      	uxth	r1, r6
   b5360:	b236      	sxth	r6, r6
    if (err < 0) {
   b5362:	2e00      	cmp	r6, #0
   b5364:	da05      	bge.n	b5372 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5366:	9a02      	ldr	r2, [sp, #8]
   b5368:	4415      	add	r5, r2
      err += dx;
   b536a:	9a00      	ldr	r2, [sp, #0]
   b536c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b536e:	b22d      	sxth	r5, r5
      err += dx;
   b5370:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b5372:	3401      	adds	r4, #1
   b5374:	b224      	sxth	r4, r4
   b5376:	e7e0      	b.n	b533a <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5378:	b005      	add	sp, #20
   b537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b537e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b537e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5382:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5386:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5388:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b538c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5390:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5392:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5394:	4616      	mov	r6, r2
   b5396:	468a      	mov	sl, r1
   b5398:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b539a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b539c:	6823      	ldr	r3, [r4, #0]
   b539e:	f8cd 8000 	str.w	r8, [sp]
   b53a2:	f109 32ff 	add.w	r2, r9, #4294967295
   b53a6:	4432      	add	r2, r6
   b53a8:	69df      	ldr	r7, [r3, #28]
   b53aa:	4651      	mov	r1, sl
   b53ac:	462b      	mov	r3, r5
   b53ae:	4620      	mov	r0, r4
   b53b0:	b212      	sxth	r2, r2
   b53b2:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b53b4:	6823      	ldr	r3, [r4, #0]
   b53b6:	f8cd 8000 	str.w	r8, [sp]
   b53ba:	699f      	ldr	r7, [r3, #24]
   b53bc:	4632      	mov	r2, r6
   b53be:	464b      	mov	r3, r9
   b53c0:	4651      	mov	r1, sl
   b53c2:	4620      	mov	r0, r4
   b53c4:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b53c6:	1e6b      	subs	r3, r5, #1
   b53c8:	eb03 010a 	add.w	r1, r3, sl
   b53cc:	6823      	ldr	r3, [r4, #0]
   b53ce:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b53d2:	699d      	ldr	r5, [r3, #24]
   b53d4:	4632      	mov	r2, r6
   b53d6:	464b      	mov	r3, r9
   b53d8:	b209      	sxth	r1, r1
   b53da:	4620      	mov	r0, r4
   b53dc:	46ac      	mov	ip, r5
}
   b53de:	b002      	add	sp, #8
   b53e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b53e4:	4760      	bx	ip

000b53e6 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b53e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b53e8:	3b01      	subs	r3, #1
   b53ea:	4413      	add	r3, r2
   b53ec:	6804      	ldr	r4, [r0, #0]
   b53ee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b53f2:	9501      	str	r5, [sp, #4]
   b53f4:	b21b      	sxth	r3, r3
   b53f6:	9300      	str	r3, [sp, #0]
   b53f8:	6964      	ldr	r4, [r4, #20]
   b53fa:	460b      	mov	r3, r1
   b53fc:	47a0      	blx	r4
}
   b53fe:	b003      	add	sp, #12
   b5400:	bd30      	pop	{r4, r5, pc}

000b5402 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5402:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5404:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5408:	6804      	ldr	r4, [r0, #0]
   b540a:	e9cd 2500 	strd	r2, r5, [sp]
   b540e:	3b01      	subs	r3, #1
   b5410:	440b      	add	r3, r1
   b5412:	6964      	ldr	r4, [r4, #20]
   b5414:	b21b      	sxth	r3, r3
   b5416:	47a0      	blx	r4
}
   b5418:	b003      	add	sp, #12
   b541a:	bd30      	pop	{r4, r5, pc}

000b541c <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b541c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5420:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5424:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5428:	4605      	mov	r5, r0
   b542a:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b542c:	460c      	mov	r4, r1
   b542e:	18ce      	adds	r6, r1, r3
   b5430:	42b4      	cmp	r4, r6
   b5432:	da0b      	bge.n	b544c <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5434:	682b      	ldr	r3, [r5, #0]
   b5436:	f8cd 8000 	str.w	r8, [sp]
   b543a:	699f      	ldr	r7, [r3, #24]
   b543c:	4621      	mov	r1, r4
   b543e:	464b      	mov	r3, r9
   b5440:	4652      	mov	r2, sl
   b5442:	4628      	mov	r0, r5
   b5444:	3401      	adds	r4, #1
   b5446:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5448:	b224      	sxth	r4, r4
   b544a:	e7f1      	b.n	b5430 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b544c:	b002      	add	sp, #8
   b544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5452 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5452:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5454:	6802      	ldr	r2, [r0, #0]
   b5456:	9101      	str	r1, [sp, #4]
   b5458:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b545c:	9100      	str	r1, [sp, #0]
   b545e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5460:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5464:	2200      	movs	r2, #0
   b5466:	4611      	mov	r1, r2
   b5468:	47a0      	blx	r4
}
   b546a:	b002      	add	sp, #8
   b546c:	bd10      	pop	{r4, pc}

000b546e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b546e:	4770      	bx	lr

000b5470 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5470:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5472:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5474:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5476:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b547a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b547c:	4d05      	ldr	r5, [pc, #20]	; (b5494 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b547e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5480:	2201      	movs	r2, #1
   b5482:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5484:	6005      	str	r5, [r0, #0]
   b5486:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5488:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b548a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b548c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b548e:	7682      	strb	r2, [r0, #26]
}
   b5490:	bd30      	pop	{r4, r5, pc}
   b5492:	bf00      	nop
   b5494:	000b8bb4 	.word	0x000b8bb4

000b5498 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    uint8_t cornername, int16_t delta, uint16_t color) {
   b5498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b549c:	b08d      	sub	sp, #52	; 0x34
   b549e:	461c      	mov	r4, r3
   b54a0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b54a4:	9309      	str	r3, [sp, #36]	; 0x24
   b54a6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   b54aa:	930a      	str	r3, [sp, #40]	; 0x28
   b54ac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   b54b0:	9304      	str	r3, [sp, #16]
  int16_t f     = 1 - r;
   b54b2:	b2a3      	uxth	r3, r4
   b54b4:	f1c3 0501 	rsb	r5, r3, #1
  int16_t ddF_y = -2 * r;
   b54b8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b54bc:	005b      	lsls	r3, r3, #1
   b54be:	b21b      	sxth	r3, r3
   b54c0:	9307      	str	r3, [sp, #28]
  int16_t x     = 0;
   b54c2:	2300      	movs	r3, #0
   b54c4:	9306      	str	r3, [sp, #24]
    if (cornername & 0x1) {
   b54c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t cornername, int16_t delta, uint16_t color) {
   b54c8:	9208      	str	r2, [sp, #32]
    if (cornername & 0x1) {
   b54ca:	f003 0301 	and.w	r3, r3, #1
  int16_t f     = 1 - r;
   b54ce:	b22a      	sxth	r2, r5
    if (cornername & 0x1) {
   b54d0:	930b      	str	r3, [sp, #44]	; 0x2c
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   b54d2:	b28b      	uxth	r3, r1
    uint8_t cornername, int16_t delta, uint16_t color) {
   b54d4:	4683      	mov	fp, r0
  int16_t f     = 1 - r;
   b54d6:	9203      	str	r2, [sp, #12]
  int16_t ddF_y = -2 * r;
   b54d8:	2703      	movs	r7, #3
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   b54da:	9305      	str	r3, [sp, #20]
  while (x<y) {
   b54dc:	9b06      	ldr	r3, [sp, #24]
   b54de:	42a3      	cmp	r3, r4
   b54e0:	da70      	bge.n	b55c4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x12c>
    if (f >= 0) {
   b54e2:	9b03      	ldr	r3, [sp, #12]
   b54e4:	2b00      	cmp	r3, #0
   b54e6:	db0a      	blt.n	b54fe <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x66>
      ddF_y += 2;
   b54e8:	9b07      	ldr	r3, [sp, #28]
   b54ea:	3302      	adds	r3, #2
   b54ec:	b21a      	sxth	r2, r3
   b54ee:	9207      	str	r2, [sp, #28]
      f     += ddF_y;
   b54f0:	9a03      	ldr	r2, [sp, #12]
   b54f2:	fa12 f583 	uxtah	r5, r2, r3
      y--;
   b54f6:	3c01      	subs	r4, #1
      f     += ddF_y;
   b54f8:	b22b      	sxth	r3, r5
      y--;
   b54fa:	b224      	sxth	r4, r4
      f     += ddF_y;
   b54fc:	9303      	str	r3, [sp, #12]
    x++;
   b54fe:	9b06      	ldr	r3, [sp, #24]
   b5500:	3301      	adds	r3, #1
   b5502:	fa1f fa83 	uxth.w	sl, r3
   b5506:	b21b      	sxth	r3, r3
   b5508:	9306      	str	r3, [sp, #24]
    f     += ddF_x;
   b550a:	9b03      	ldr	r3, [sp, #12]
   b550c:	443b      	add	r3, r7
   b550e:	b21b      	sxth	r3, r3
   b5510:	9303      	str	r3, [sp, #12]
    if (cornername & 0x1) {
   b5512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5514:	b33b      	cbz	r3, b5566 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xce>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   b5516:	9804      	ldr	r0, [sp, #16]
   b5518:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   b551c:	9000      	str	r0, [sp, #0]
   b551e:	f8db 0000 	ldr.w	r0, [fp]
   b5522:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   b5526:	9905      	ldr	r1, [sp, #20]
   b5528:	6980      	ldr	r0, [r0, #24]
   b552a:	b2a6      	uxth	r6, r4
   b552c:	f108 0301 	add.w	r3, r8, #1
   b5530:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   b5534:	eba9 0206 	sub.w	r2, r9, r6
   b5538:	4451      	add	r1, sl
   b553a:	4605      	mov	r5, r0
   b553c:	b21b      	sxth	r3, r3
   b553e:	b212      	sxth	r2, r2
   b5540:	b209      	sxth	r1, r1
   b5542:	4658      	mov	r0, fp
   b5544:	47a8      	blx	r5
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
   b5546:	9905      	ldr	r1, [sp, #20]
   b5548:	9804      	ldr	r0, [sp, #16]
   b554a:	9000      	str	r0, [sp, #0]
   b554c:	4431      	add	r1, r6
   b554e:	f8db 6000 	ldr.w	r6, [fp]
   b5552:	eb08 0307 	add.w	r3, r8, r7
   b5556:	eba9 020a 	sub.w	r2, r9, sl
   b555a:	69b6      	ldr	r6, [r6, #24]
   b555c:	b21b      	sxth	r3, r3
   b555e:	b212      	sxth	r2, r2
   b5560:	b209      	sxth	r1, r1
   b5562:	4658      	mov	r0, fp
   b5564:	47b0      	blx	r6
    if (cornername & 0x2) {
   b5566:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5568:	079b      	lsls	r3, r3, #30
   b556a:	d528      	bpl.n	b55be <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x126>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
   b556c:	9804      	ldr	r0, [sp, #16]
   b556e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   b5572:	9000      	str	r0, [sp, #0]
   b5574:	f8db 0000 	ldr.w	r0, [fp]
   b5578:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b557c:	9905      	ldr	r1, [sp, #20]
   b557e:	6980      	ldr	r0, [r0, #24]
   b5580:	b2a6      	uxth	r6, r4
   b5582:	f109 0301 	add.w	r3, r9, #1
   b5586:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   b558a:	eba8 0206 	sub.w	r2, r8, r6
   b558e:	eba1 010a 	sub.w	r1, r1, sl
   b5592:	4605      	mov	r5, r0
   b5594:	b21b      	sxth	r3, r3
   b5596:	b212      	sxth	r2, r2
   b5598:	b209      	sxth	r1, r1
   b559a:	4658      	mov	r0, fp
   b559c:	47a8      	blx	r5
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
   b559e:	9905      	ldr	r1, [sp, #20]
   b55a0:	9804      	ldr	r0, [sp, #16]
   b55a2:	9000      	str	r0, [sp, #0]
   b55a4:	1b89      	subs	r1, r1, r6
   b55a6:	f8db 6000 	ldr.w	r6, [fp]
   b55aa:	eb09 0307 	add.w	r3, r9, r7
   b55ae:	eba8 020a 	sub.w	r2, r8, sl
   b55b2:	69b6      	ldr	r6, [r6, #24]
   b55b4:	b21b      	sxth	r3, r3
   b55b6:	b212      	sxth	r2, r2
   b55b8:	b209      	sxth	r1, r1
   b55ba:	4658      	mov	r0, fp
   b55bc:	47b0      	blx	r6
   b55be:	3702      	adds	r7, #2
   b55c0:	b2bf      	uxth	r7, r7
   b55c2:	e78b      	b.n	b54dc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x44>
}
   b55c4:	b00d      	add	sp, #52	; 0x34
   b55c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b55ca <_ZN12Adafruit_GFX10fillCircleEssst>:
			      uint16_t color) {
   b55ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55ce:	b085      	sub	sp, #20
   b55d0:	4615      	mov	r5, r2
   b55d2:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
  drawFastVLine(x0, y0-r, 2*r+1, color);
   b55d6:	f8cd 8000 	str.w	r8, [sp]
   b55da:	b29a      	uxth	r2, r3
			      uint16_t color) {
   b55dc:	461e      	mov	r6, r3
  drawFastVLine(x0, y0-r, 2*r+1, color);
   b55de:	0053      	lsls	r3, r2, #1
   b55e0:	f103 0c01 	add.w	ip, r3, #1
   b55e4:	6803      	ldr	r3, [r0, #0]
   b55e6:	1aaa      	subs	r2, r5, r2
   b55e8:	f8d3 9018 	ldr.w	r9, [r3, #24]
   b55ec:	b212      	sxth	r2, r2
   b55ee:	fa0f f38c 	sxth.w	r3, ip
			      uint16_t color) {
   b55f2:	4604      	mov	r4, r0
   b55f4:	460f      	mov	r7, r1
  drawFastVLine(x0, y0-r, 2*r+1, color);
   b55f6:	47c8      	blx	r9
  fillCircleHelper(x0, y0, r, 3, 0, color);
   b55f8:	2303      	movs	r3, #3
   b55fa:	2200      	movs	r2, #0
   b55fc:	e9cd 3200 	strd	r3, r2, [sp]
   b5600:	f8cd 8008 	str.w	r8, [sp, #8]
   b5604:	4633      	mov	r3, r6
   b5606:	462a      	mov	r2, r5
   b5608:	4639      	mov	r1, r7
   b560a:	4620      	mov	r0, r4
   b560c:	f7ff ff44 	bl	b5498 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
}
   b5610:	b005      	add	sp, #20
   b5612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5616 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
				  int16_t x2, int16_t y2, uint16_t color) {
   b5616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b561a:	b08d      	sub	sp, #52	; 0x34
   b561c:	4614      	mov	r4, r2
   b561e:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b5622:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
   b5626:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b562a:	9204      	str	r2, [sp, #16]
  if (y0 > y1) {
   b562c:	42b4      	cmp	r4, r6
				  int16_t x2, int16_t y2, uint16_t color) {
   b562e:	460d      	mov	r5, r1
   b5630:	4683      	mov	fp, r0
   b5632:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  if (y0 > y1) {
   b5636:	dd58      	ble.n	b56ea <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xd4>
  if (y1 > y2) {
   b5638:	42bc      	cmp	r4, r7
   b563a:	dc5e      	bgt.n	b56fa <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xe4>
  if (y0 > y1) {
   b563c:	4622      	mov	r2, r4
   b563e:	4634      	mov	r4, r6
   b5640:	4616      	mov	r6, r2
   b5642:	462a      	mov	r2, r5
   b5644:	461d      	mov	r5, r3
   b5646:	4613      	mov	r3, r2
  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b5648:	42bc      	cmp	r4, r7
   b564a:	d15e      	bne.n	b570a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xf4>
    if(x1 < a)      a = x1;
   b564c:	429d      	cmp	r5, r3
   b564e:	bfc2      	ittt	gt
   b5650:	462a      	movgt	r2, r5
   b5652:	461d      	movgt	r5, r3
   b5654:	4613      	movgt	r3, r2
    if(x2 < a)      a = x2;
   b5656:	428d      	cmp	r5, r1
   b5658:	dc04      	bgt.n	b5664 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
    else if(x2 > b) b = x2;
   b565a:	428b      	cmp	r3, r1
   b565c:	bfb8      	it	lt
   b565e:	460b      	movlt	r3, r1
   b5660:	b21b      	sxth	r3, r3
   b5662:	4629      	mov	r1, r5
    drawFastHLine(a, y0, b-a+1, color);
   b5664:	f8db 2000 	ldr.w	r2, [fp]
   b5668:	9804      	ldr	r0, [sp, #16]
   b566a:	9016      	str	r0, [sp, #88]	; 0x58
   b566c:	69d5      	ldr	r5, [r2, #28]
   b566e:	3301      	adds	r3, #1
   b5670:	1a5b      	subs	r3, r3, r1
   b5672:	b21b      	sxth	r3, r3
   b5674:	4622      	mov	r2, r4
   b5676:	4658      	mov	r0, fp
   b5678:	46ac      	mov	ip, r5
}
   b567a:	b00d      	add	sp, #52	; 0x34
   b567c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    drawFastHLine(a, y0, b-a+1, color);
   b5680:	4760      	bx	ip
  sa = dx12 * (y - y1);
   b5682:	9b05      	ldr	r3, [sp, #20]
   b5684:	1b96      	subs	r6, r2, r6
  sb = dx02 * (y - y0);
   b5686:	1b14      	subs	r4, r2, r4
  sa = dx12 * (y - y1);
   b5688:	fb16 f603 	smulbb	r6, r6, r3
  sb = dx02 * (y - y0);
   b568c:	fb14 f409 	smulbb	r4, r4, r9
  sa = dx12 * (y - y1);
   b5690:	b236      	sxth	r6, r6
  sb = dx02 * (y - y0);
   b5692:	b224      	sxth	r4, r4
  for(; y<=y2; y++) {
   b5694:	42ba      	cmp	r2, r7
   b5696:	f300 8096 	bgt.w	b57c6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1b0>
    a   = x1 + sa / dy12;
   b569a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b   = x0 + sb / dy02;
   b569c:	9802      	ldr	r0, [sp, #8]
    a   = x1 + sa / dy12;
   b569e:	fb96 f1f3 	sdiv	r1, r6, r3
   b56a2:	9b03      	ldr	r3, [sp, #12]
    drawFastHLine(a, y, b-a+1, color);
   b56a4:	9206      	str	r2, [sp, #24]
    a   = x1 + sa / dy12;
   b56a6:	4419      	add	r1, r3
    b   = x0 + sb / dy02;
   b56a8:	9b07      	ldr	r3, [sp, #28]
   b56aa:	fb94 f3f3 	sdiv	r3, r4, r3
   b56ae:	4403      	add	r3, r0
    a   = x1 + sa / dy12;
   b56b0:	b209      	sxth	r1, r1
    b   = x0 + sb / dy02;
   b56b2:	b21b      	sxth	r3, r3
    if(a > b) swap(a,b);
   b56b4:	4299      	cmp	r1, r3
   b56b6:	9805      	ldr	r0, [sp, #20]
   b56b8:	bfc8      	it	gt
   b56ba:	468c      	movgt	ip, r1
   b56bc:	4406      	add	r6, r0
   b56be:	bfc8      	it	gt
   b56c0:	4619      	movgt	r1, r3
    drawFastHLine(a, y, b-a+1, color);
   b56c2:	9804      	ldr	r0, [sp, #16]
   b56c4:	9000      	str	r0, [sp, #0]
    if(a > b) swap(a,b);
   b56c6:	bfc8      	it	gt
   b56c8:	4663      	movgt	r3, ip
    drawFastHLine(a, y, b-a+1, color);
   b56ca:	f8db 0000 	ldr.w	r0, [fp]
   b56ce:	3301      	adds	r3, #1
   b56d0:	1a5b      	subs	r3, r3, r1
   b56d2:	f8d0 801c 	ldr.w	r8, [r0, #28]
   b56d6:	b21b      	sxth	r3, r3
   b56d8:	4658      	mov	r0, fp
   b56da:	47c0      	blx	r8
   b56dc:	9a06      	ldr	r2, [sp, #24]
   b56de:	444c      	add	r4, r9
   b56e0:	3201      	adds	r2, #1
   b56e2:	b236      	sxth	r6, r6
    sb += dx02;
   b56e4:	b224      	sxth	r4, r4
  for(; y<=y2; y++) {
   b56e6:	b212      	sxth	r2, r2
   b56e8:	e7d4      	b.n	b5694 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x7e>
  if (y1 > y2) {
   b56ea:	42be      	cmp	r6, r7
   b56ec:	ddac      	ble.n	b5648 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x32>
   b56ee:	4622      	mov	r2, r4
   b56f0:	4634      	mov	r4, r6
   b56f2:	4616      	mov	r6, r2
   b56f4:	462a      	mov	r2, r5
   b56f6:	461d      	mov	r5, r3
   b56f8:	4613      	mov	r3, r2
  if (y0 > y1) {
   b56fa:	4622      	mov	r2, r4
   b56fc:	42b7      	cmp	r7, r6
   b56fe:	463c      	mov	r4, r7
   b5700:	4617      	mov	r7, r2
   b5702:	462a      	mov	r2, r5
   b5704:	460d      	mov	r5, r1
   b5706:	4611      	mov	r1, r2
   b5708:	da98      	bge.n	b563c <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x26>
    dx01 = x1 - x0,
   b570a:	b29b      	uxth	r3, r3
   b570c:	9303      	str	r3, [sp, #12]
   b570e:	b2ab      	uxth	r3, r5
   b5710:	9302      	str	r3, [sp, #8]
   b5712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5716:	1a9b      	subs	r3, r3, r2
   b5718:	b29b      	uxth	r3, r3
    dy01 = y1 - y0,
   b571a:	fa1f fc84 	uxth.w	ip, r4
    dx01 = x1 - x0,
   b571e:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b5720:	b2b3      	uxth	r3, r6
   b5722:	eba3 020c 	sub.w	r2, r3, ip
   b5726:	b212      	sxth	r2, r2
   b5728:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b572a:	9a02      	ldr	r2, [sp, #8]
   b572c:	b289      	uxth	r1, r1
   b572e:	eba1 0902 	sub.w	r9, r1, r2
    dy02 = y2 - y0,
   b5732:	b2ba      	uxth	r2, r7
   b5734:	eba2 0c0c 	sub.w	ip, r2, ip
   b5738:	fa0f f08c 	sxth.w	r0, ip
   b573c:	9007      	str	r0, [sp, #28]
    dx12 = x2 - x1,
   b573e:	9803      	ldr	r0, [sp, #12]
  if(y1 == y2) last = y1;   // Include y1 scanline
   b5740:	42b7      	cmp	r7, r6
    dy12 = y2 - y1,
   b5742:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b5746:	eba1 0100 	sub.w	r1, r1, r0
  else         last = y1-1; // Skip it
   b574a:	bf18      	it	ne
   b574c:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1,
   b5750:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b5752:	b289      	uxth	r1, r1
  else         last = y1-1; // Skip it
   b5754:	bf18      	it	ne
   b5756:	b21b      	sxthne	r3, r3
    sb   = 0;
   b5758:	f04f 0800 	mov.w	r8, #0
    dy12 = y2 - y1,
   b575c:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b575e:	fa1f f989 	uxth.w	r9, r9
    dx12 = x2 - x1,
   b5762:	9105      	str	r1, [sp, #20]
  else         last = y1-1; // Skip it
   b5764:	bf14      	ite	ne
   b5766:	9306      	strne	r3, [sp, #24]
   b5768:	9706      	streq	r7, [sp, #24]
  for(y=y0; y<=last; y++) {
   b576a:	4622      	mov	r2, r4
    sa   = 0,
   b576c:	46c2      	mov	sl, r8
  for(y=y0; y<=last; y++) {
   b576e:	9b06      	ldr	r3, [sp, #24]
   b5770:	429a      	cmp	r2, r3
   b5772:	dc86      	bgt.n	b5682 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x6c>
    a   = x0 + sa / dy01;
   b5774:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b   = x0 + sb / dy02;
   b5776:	9802      	ldr	r0, [sp, #8]
    a   = x0 + sa / dy01;
   b5778:	fb9a f1f3 	sdiv	r1, sl, r3
   b577c:	9b02      	ldr	r3, [sp, #8]
    drawFastHLine(a, y, b-a+1, color);
   b577e:	920b      	str	r2, [sp, #44]	; 0x2c
    a   = x0 + sa / dy01;
   b5780:	4419      	add	r1, r3
    b   = x0 + sb / dy02;
   b5782:	9b07      	ldr	r3, [sp, #28]
   b5784:	fb98 f3f3 	sdiv	r3, r8, r3
   b5788:	4403      	add	r3, r0
   b578a:	9808      	ldr	r0, [sp, #32]
    a   = x0 + sa / dy01;
   b578c:	b209      	sxth	r1, r1
    b   = x0 + sb / dy02;
   b578e:	b21b      	sxth	r3, r3
    if(a > b) swap(a,b);
   b5790:	4299      	cmp	r1, r3
   b5792:	4482      	add	sl, r0
    drawFastHLine(a, y, b-a+1, color);
   b5794:	9804      	ldr	r0, [sp, #16]
   b5796:	9000      	str	r0, [sp, #0]
    if(a > b) swap(a,b);
   b5798:	bfc8      	it	gt
   b579a:	468c      	movgt	ip, r1
    drawFastHLine(a, y, b-a+1, color);
   b579c:	f8db 0000 	ldr.w	r0, [fp]
    if(a > b) swap(a,b);
   b57a0:	bfc4      	itt	gt
   b57a2:	4619      	movgt	r1, r3
   b57a4:	4663      	movgt	r3, ip
    drawFastHLine(a, y, b-a+1, color);
   b57a6:	69c0      	ldr	r0, [r0, #28]
   b57a8:	3301      	adds	r3, #1
   b57aa:	1a5b      	subs	r3, r3, r1
   b57ac:	4605      	mov	r5, r0
   b57ae:	b21b      	sxth	r3, r3
   b57b0:	4658      	mov	r0, fp
   b57b2:	47a8      	blx	r5
   b57b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b57b6:	44c8      	add	r8, r9
   b57b8:	3201      	adds	r2, #1
   b57ba:	fa0f fa8a 	sxth.w	sl, sl
    sb += dx02;
   b57be:	fa0f f888 	sxth.w	r8, r8
  for(y=y0; y<=last; y++) {
   b57c2:	b212      	sxth	r2, r2
   b57c4:	e7d3      	b.n	b576e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x158>
}
   b57c6:	b00d      	add	sp, #52	; 0x34
   b57c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b57cc <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b57cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57d0:	ed2d 8b02 	vpush	{d8}
   b57d4:	b08d      	sub	sp, #52	; 0x34
   b57d6:	4607      	mov	r7, r0
   b57d8:	9104      	str	r1, [sp, #16]
   b57da:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b57de:	9105      	str	r1, [sp, #20]
   b57e0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b57e4:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b57e6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b57ea:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b57ec:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b57f0:	4281      	cmp	r1, r0
   b57f2:	dd52      	ble.n	b589a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b57f4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b57f8:	4291      	cmp	r1, r2
   b57fa:	dd4e      	ble.n	b589a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b57fc:	2106      	movs	r1, #6
   b57fe:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5802:	2c00      	cmp	r4, #0
   b5804:	dd49      	ble.n	b589a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5806:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b580a:	2c00      	cmp	r4, #0
   b580c:	dd45      	ble.n	b589a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b580e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5812:	930b      	str	r3, [sp, #44]	; 0x2c
   b5814:	b293      	uxth	r3, r2
   b5816:	9307      	str	r3, [sp, #28]
   b5818:	3308      	adds	r3, #8
   b581a:	b29b      	uxth	r3, r3
   b581c:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b581e:	2400      	movs	r4, #0
   b5820:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5822:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5824:	bf1c      	itt	ne
   b5826:	4b2c      	ldrne	r3, [pc, #176]	; (b58d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5828:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b582a:	9e07      	ldr	r6, [sp, #28]
   b582c:	bf16      	itet	ne
   b582e:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5830:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5832:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5834:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5836:	9a04      	ldr	r2, [sp, #16]
   b5838:	b2ab      	uxth	r3, r5
   b583a:	930a      	str	r3, [sp, #40]	; 0x28
   b583c:	fb04 f305 	mul.w	r3, r4, r5
   b5840:	fa13 f382 	uxtah	r3, r3, r2
   b5844:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5846:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b584a:	ee08 3a10 	vmov	s16, r3
   b584e:	46b0      	mov	r8, r6
   b5850:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5854:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5858:	9b03      	ldr	r3, [sp, #12]
   b585a:	07db      	lsls	r3, r3, #31
   b585c:	d52f      	bpl.n	b58be <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b585e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5860:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5862:	d11f      	bne.n	b58a4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5864:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5868:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b586a:	b232      	sxth	r2, r6
   b586c:	4651      	mov	r1, sl
   b586e:	4638      	mov	r0, r7
   b5870:	47d8      	blx	fp
      line >>= 1;
   b5872:	9b03      	ldr	r3, [sp, #12]
   b5874:	085b      	lsrs	r3, r3, #1
   b5876:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b587a:	3601      	adds	r6, #1
   b587c:	4498      	add	r8, r3
   b587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5880:	b2b6      	uxth	r6, r6
   b5882:	42b3      	cmp	r3, r6
   b5884:	fa1f f888 	uxth.w	r8, r8
   b5888:	d1e6      	bne.n	b5858 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b588a:	9b08      	ldr	r3, [sp, #32]
   b588c:	3b01      	subs	r3, #1
   b588e:	3401      	adds	r4, #1
   b5890:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5894:	b264      	sxtb	r4, r4
   b5896:	9308      	str	r3, [sp, #32]
   b5898:	d1c3      	bne.n	b5822 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b589a:	b00d      	add	sp, #52	; 0x34
   b589c:	ecbd 8b02 	vpop	{d8}
   b58a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b58a4:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b58a6:	e9cd 9200 	strd	r9, r2, [sp]
   b58aa:	ee18 1a10 	vmov	r1, s16
   b58ae:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b58b2:	fa0f f288 	sxth.w	r2, r8
   b58b6:	464b      	mov	r3, r9
   b58b8:	4638      	mov	r0, r7
   b58ba:	47d8      	blx	fp
   b58bc:	e7d9      	b.n	b5872 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b58be:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b58c2:	4293      	cmp	r3, r2
   b58c4:	d0d5      	beq.n	b5872 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b58c6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b58c8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b58ca:	d103      	bne.n	b58d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b58cc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b58d0:	9b06      	ldr	r3, [sp, #24]
   b58d2:	e7ca      	b.n	b586a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b58d4:	9a06      	ldr	r2, [sp, #24]
   b58d6:	e7e6      	b.n	b58a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b58d8:	000b86b0 	.word	0x000b86b0

000b58dc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b58dc:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b58de:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b58e0:	b085      	sub	sp, #20
   b58e2:	4604      	mov	r4, r0
  if (c == '\n') {
   b58e4:	d107      	bne.n	b58f6 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b58e6:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b58e8:	8a63      	ldrh	r3, [r4, #18]
   b58ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b58ee:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b58f0:	2300      	movs	r3, #0
   b58f2:	8223      	strh	r3, [r4, #16]
   b58f4:	e021      	b.n	b593a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b58f6:	290d      	cmp	r1, #13
   b58f8:	d01f      	beq.n	b593a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b58fa:	7e03      	ldrb	r3, [r0, #24]
   b58fc:	9302      	str	r3, [sp, #8]
   b58fe:	8ac3      	ldrh	r3, [r0, #22]
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	8a83      	ldrh	r3, [r0, #20]
   b5904:	9300      	str	r3, [sp, #0]
   b5906:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b590a:	460b      	mov	r3, r1
   b590c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5910:	f7ff ff5c 	bl	b57cc <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5914:	7e20      	ldrb	r0, [r4, #24]
   b5916:	8a23      	ldrh	r3, [r4, #16]
   b5918:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b591c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5920:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5922:	b21b      	sxth	r3, r3
   b5924:	4602      	mov	r2, r0
   b5926:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5928:	b139      	cbz	r1, b593a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b592a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b592e:	f06f 0505 	mvn.w	r5, #5
   b5932:	fb05 1100 	mla	r1, r5, r0, r1
   b5936:	428b      	cmp	r3, r1
   b5938:	dcd6      	bgt.n	b58e8 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b593a:	2001      	movs	r0, #1
   b593c:	b005      	add	sp, #20
   b593e:	bd30      	pop	{r4, r5, pc}

000b5940 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5940:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5942:	8242      	strh	r2, [r0, #18]
}
   b5944:	4770      	bx	lr

000b5946 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5946:	2901      	cmp	r1, #1
   b5948:	bf38      	it	cc
   b594a:	2101      	movcc	r1, #1
   b594c:	7601      	strb	r1, [r0, #24]
}
   b594e:	4770      	bx	lr

000b5950 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5950:	82c1      	strh	r1, [r0, #22]
   b5952:	8281      	strh	r1, [r0, #20]
}
   b5954:	4770      	bx	lr

000b5956 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5956:	7e40      	ldrb	r0, [r0, #25]
   b5958:	4770      	bx	lr

000b595a <_ZN12Adafruit_GFX5widthEv>:
}
   b595a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b595e:	4770      	bx	lr

000b5960 <_ZN12Adafruit_GFX6heightEv>:
}
   b5960:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5964:	4770      	bx	lr

000b5966 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5966:	b538      	push	{r3, r4, r5, lr}
   b5968:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b596a:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b596c:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b596e:	b108      	cbz	r0, b5974 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b5970:	f000 fcec 	bl	b634c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5974:	79a3      	ldrb	r3, [r4, #6]
   b5976:	2b06      	cmp	r3, #6
   b5978:	bf0c      	ite	eq
   b597a:	2004      	moveq	r0, #4
   b597c:	2003      	movne	r0, #3
   b597e:	fb10 f005 	smulbb	r0, r0, r5
   b5982:	b280      	uxth	r0, r0
   b5984:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b5986:	f000 fcd9 	bl	b633c <malloc>
   b598a:	60e0      	str	r0, [r4, #12]
   b598c:	b128      	cbz	r0, b599a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b598e:	88a2      	ldrh	r2, [r4, #4]
   b5990:	2100      	movs	r1, #0
   b5992:	f002 fcb1 	bl	b82f8 <memset>
    numLEDs = n;
   b5996:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b5998:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b599a:	80a0      	strh	r0, [r4, #4]
   b599c:	8060      	strh	r0, [r4, #2]
}
   b599e:	e7fb      	b.n	b5998 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b59a0 <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b59a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b59a2:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b59a4:	4605      	mov	r5, r0
   b59a6:	460c      	mov	r4, r1
    if (begun) {
   b59a8:	b11b      	cbz	r3, b59b2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b59aa:	79c0      	ldrb	r0, [r0, #7]
   b59ac:	2100      	movs	r1, #0
   b59ae:	f001 fe7b 	bl	b76a8 <pinMode>
    }
    pin = p;
    if (begun) {
   b59b2:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b59b4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b59b6:	b15b      	cbz	r3, b59d0 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b59b8:	b2a0      	uxth	r0, r4
   b59ba:	2101      	movs	r1, #1
   b59bc:	9001      	str	r0, [sp, #4]
   b59be:	f001 fe73 	bl	b76a8 <pinMode>
        digitalWrite(p, LOW);
   b59c2:	9801      	ldr	r0, [sp, #4]
   b59c4:	2100      	movs	r1, #0
    }
}
   b59c6:	b003      	add	sp, #12
   b59c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b59cc:	f001 be7d 	b.w	b76ca <digitalWrite>
}
   b59d0:	b003      	add	sp, #12
   b59d2:	bd30      	pop	{r4, r5, pc}

000b59d4 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b59d4:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b59d6:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b59d8:	4604      	mov	r4, r0
   b59da:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b59dc:	7183      	strb	r3, [r0, #6]
   b59de:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b59e2:	7005      	strb	r5, [r0, #0]
   b59e4:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b59e6:	f7ff ffbe 	bl	b5966 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b59ea:	4620      	mov	r0, r4
   b59ec:	4631      	mov	r1, r6
   b59ee:	f7ff ffd7 	bl	b59a0 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b59f2:	4620      	mov	r0, r4
   b59f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b59f8 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b59f8:	68c3      	ldr	r3, [r0, #12]
   b59fa:	2b00      	cmp	r3, #0
   b59fc:	f000 81a4 	beq.w	b5d48 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b5a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a04:	7983      	ldrb	r3, [r0, #6]
   b5a06:	3b02      	subs	r3, #2
   b5a08:	b2db      	uxtb	r3, r3
   b5a0a:	2b04      	cmp	r3, #4
   b5a0c:	bf9c      	itt	ls
   b5a0e:	4abf      	ldrls	r2, [pc, #764]	; (b5d0c <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b5a10:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b5a14:	b085      	sub	sp, #20
   b5a16:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b5a18:	bf88      	it	hi
   b5a1a:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5a1c:	f000 fa62 	bl	b5ee4 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b5a20:	692b      	ldr	r3, [r5, #16]
   b5a22:	1ac0      	subs	r0, r0, r3
   b5a24:	42a0      	cmp	r0, r4
   b5a26:	d3f9      	bcc.n	b5a1c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b5a28:	4cb9      	ldr	r4, [pc, #740]	; (b5d10 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5a2a:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b5a2c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5a30:	b91b      	cbnz	r3, b5a3a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5a32:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5a36:	2b00      	cmp	r3, #0
   b5a38:	db7e      	blt.n	b5b38 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b5a3a:	4cb6      	ldr	r4, [pc, #728]	; (b5d14 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b5a3c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5a40:	b923      	cbnz	r3, b5a4c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5a42:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5a46:	2b00      	cmp	r3, #0
   b5a48:	f2c0 816e 	blt.w	b5d28 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b5a4c:	4cb2      	ldr	r4, [pc, #712]	; (b5d18 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b5a4e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5a52:	2b00      	cmp	r3, #0
   b5a54:	f000 8144 	beq.w	b5ce0 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5a58:	79eb      	ldrb	r3, [r5, #7]
   b5a5a:	4ab0      	ldr	r2, [pc, #704]	; (b5d1c <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5a5c:	4cb0      	ldr	r4, [pc, #704]	; (b5d20 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5a5e:	6812      	ldr	r2, [r2, #0]
   b5a60:	0119      	lsls	r1, r3, #4
   b5a62:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b5a66:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5a68:	49ae      	ldr	r1, [pc, #696]	; (b5d24 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5a6a:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5a6c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b5a70:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b5a74:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5a78:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5a7a:	f003 031f 	and.w	r3, r3, #31
   b5a7e:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b5a82:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5a84:	433a      	orrs	r2, r7
   b5a86:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5a88:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5a8a:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5a8e:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5a92:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5a94:	2900      	cmp	r1, #0
   b5a96:	d044      	beq.n	b5b22 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5a98:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5a9c:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b5a9e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b5aa2:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5aa6:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5aa8:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5aaa:	6863      	ldr	r3, [r4, #4]
   b5aac:	1a9b      	subs	r3, r3, r2
   b5aae:	2b46      	cmp	r3, #70	; 0x46
   b5ab0:	d9fb      	bls.n	b5aaa <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b5ab2:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5ab4:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5ab8:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5abc:	ea43 0307 	orr.w	r3, r3, r7
   b5ac0:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5ac4:	d02f      	beq.n	b5b26 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5ac6:	6863      	ldr	r3, [r4, #4]
   b5ac8:	1a9b      	subs	r3, r3, r2
   b5aca:	2b28      	cmp	r3, #40	; 0x28
   b5acc:	d9fb      	bls.n	b5ac6 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b5ace:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5ad2:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5ad4:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5ad8:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5adc:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5ae0:	d1e3      	bne.n	b5aaa <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b5ae2:	88ab      	ldrh	r3, [r5, #4]
   b5ae4:	f10e 0e01 	add.w	lr, lr, #1
   b5ae8:	fa1f fe8e 	uxth.w	lr, lr
   b5aec:	4573      	cmp	r3, lr
   b5aee:	d8d8      	bhi.n	b5aa2 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5af0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b5af4:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5af8:	6863      	ldr	r3, [r4, #4]
   b5afa:	1a9b      	subs	r3, r3, r2
   b5afc:	2b46      	cmp	r3, #70	; 0x46
   b5afe:	d9fb      	bls.n	b5af8 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5b00:	6863      	ldr	r3, [r4, #4]
   b5b02:	eba3 0909 	sub.w	r9, r3, r9
   b5b06:	4589      	cmp	r9, r1
   b5b08:	f0c0 80e4 	bcc.w	b5cd4 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5b10:	f000 f9e0 	bl	b5ed4 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b5b14:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5b16:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5b1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b5b1e:	2900      	cmp	r1, #0
   b5b20:	d1ba      	bne.n	b5a98 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b5b22:	460a      	mov	r2, r1
   b5b24:	e7e8      	b.n	b5af8 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b5b26:	6863      	ldr	r3, [r4, #4]
   b5b28:	1a9b      	subs	r3, r3, r2
   b5b2a:	2b11      	cmp	r3, #17
   b5b2c:	d8cf      	bhi.n	b5ace <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b5b2e:	6863      	ldr	r3, [r4, #4]
   b5b30:	1a9b      	subs	r3, r3, r2
   b5b32:	2b11      	cmp	r3, #17
   b5b34:	d9f7      	bls.n	b5b26 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b5b36:	e7ca      	b.n	b5ace <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5b38:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5b3c:	2b00      	cmp	r3, #0
   b5b3e:	f6bf af7c 	bge.w	b5a3a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5b42:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5b46:	2b00      	cmp	r3, #0
   b5b48:	f6bf af77 	bge.w	b5a3a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5b4c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5b50:	2b00      	cmp	r3, #0
   b5b52:	f6bf af72 	bge.w	b5a3a <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5b56:	0136      	lsls	r6, r6, #4
   b5b58:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5b5a:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5b5c:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5b5e:	f000 fbed 	bl	b633c <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b5b62:	2800      	cmp	r0, #0
   b5b64:	f43f af78 	beq.w	b5a58 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5b68:	88ab      	ldrh	r3, [r5, #4]
   b5b6a:	2b00      	cmp	r3, #0
   b5b6c:	f000 80ed 	beq.w	b5d4a <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b5b70:	68ea      	ldr	r2, [r5, #12]
   b5b72:	3b01      	subs	r3, #1
   b5b74:	fa12 f783 	uxtah	r7, r2, r3
   b5b78:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b5b7c:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b7e:	f248 0206 	movw	r2, #32774	; 0x8006
   b5b82:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5b86:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5b8a:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b5b8e:	bf0c      	ite	eq
   b5b90:	4693      	moveq	fp, r2
   b5b92:	468b      	movne	fp, r1
   b5b94:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5b98:	bf0c      	ite	eq
   b5b9a:	4616      	moveq	r6, r2
   b5b9c:	460e      	movne	r6, r1
   b5b9e:	f01c 0f20 	tst.w	ip, #32
   b5ba2:	bf0c      	ite	eq
   b5ba4:	4690      	moveq	r8, r2
   b5ba6:	4688      	movne	r8, r1
        pos++;
   b5ba8:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bac:	f8cd 8008 	str.w	r8, [sp, #8]
   b5bb0:	9601      	str	r6, [sp, #4]
        pos++;
   b5bb2:	f103 0802 	add.w	r8, r3, #2
   b5bb6:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bba:	9e01      	ldr	r6, [sp, #4]
   b5bbc:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b5bc0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bc4:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5bc8:	9e02      	ldr	r6, [sp, #8]
   b5bca:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b5bce:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bd2:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5bd6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bda:	bf0c      	ite	eq
   b5bdc:	4693      	moveq	fp, r2
   b5bde:	468b      	movne	fp, r1
   b5be0:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5be4:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5be8:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5bec:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bf0:	bf0c      	ite	eq
   b5bf2:	4693      	moveq	fp, r2
   b5bf4:	468b      	movne	fp, r1
   b5bf6:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5bfa:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5bfe:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b5c02:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5c06:	bf0c      	ite	eq
   b5c08:	4693      	moveq	fp, r2
   b5c0a:	468b      	movne	fp, r1
   b5c0c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5c10:	f103 0a08 	add.w	sl, r3, #8
   b5c14:	f103 0806 	add.w	r8, r3, #6
   b5c18:	3307      	adds	r3, #7
   b5c1a:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5c1c:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b5c20:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5c24:	bf0c      	ite	eq
   b5c26:	4693      	moveq	fp, r2
   b5c28:	468b      	movne	fp, r1
        pos++;
   b5c2a:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5c2e:	f01c 0f01 	tst.w	ip, #1
   b5c32:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b5c36:	bf15      	itete	ne
   b5c38:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b5c3c:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b5c40:	fa1f f38a 	uxthne.w	r3, sl
   b5c44:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b5c48:	4577      	cmp	r7, lr
   b5c4a:	d19c      	bne.n	b5b86 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c4c:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c4e:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c50:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c52:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c54:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c56:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c58:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5c5c:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5c5e:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5c60:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c62:	4b2e      	ldr	r3, [pc, #184]	; (b5d1c <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5c64:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c66:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5c68:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5c6a:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5c6c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b5c70:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5c74:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5c78:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5c7c:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b5c80:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5c84:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5c88:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5c8c:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c90:	79eb      	ldrb	r3, [r5, #7]
   b5c92:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5c96:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5c98:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c9a:	5cfe      	ldrb	r6, [r7, r3]
   b5c9c:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b5ca0:	f003 031f 	and.w	r3, r3, #31
   b5ca4:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5ca8:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5cac:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b5cb0:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5cb4:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5cb6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5cba:	2b00      	cmp	r3, #0
   b5cbc:	d0fb      	beq.n	b5cb6 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b5cbe:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5cc0:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b5cc4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5cc8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5ccc:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b5cd0:	f000 fb3c 	bl	b634c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5cd4:	f000 f906 	bl	b5ee4 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5cd8:	6128      	str	r0, [r5, #16]
}
   b5cda:	b005      	add	sp, #20
   b5cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5ce0:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5ce4:	2b00      	cmp	r3, #0
   b5ce6:	f6bf aeb7 	bge.w	b5a58 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cea:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cee:	2b00      	cmp	r3, #0
   b5cf0:	f6bf aeb2 	bge.w	b5a58 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cf4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5cf8:	2b00      	cmp	r3, #0
   b5cfa:	f6bf aead 	bge.w	b5a58 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5cfe:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d02:	2b00      	cmp	r3, #0
   b5d04:	f6bf aea8 	bge.w	b5a58 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b5d08:	e725      	b.n	b5b56 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5d0a:	bf00      	nop
   b5d0c:	000b8be4 	.word	0x000b8be4
   b5d10:	4001c000 	.word	0x4001c000
   b5d14:	40021000 	.word	0x40021000
   b5d18:	40022000 	.word	0x40022000
   b5d1c:	2003e6c0 	.word	0x2003e6c0
   b5d20:	e0001000 	.word	0xe0001000
   b5d24:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d28:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d2c:	2b00      	cmp	r3, #0
   b5d2e:	f6bf ae8d 	bge.w	b5a4c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d32:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d36:	2b00      	cmp	r3, #0
   b5d38:	f6bf ae88 	bge.w	b5a4c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5d3c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d40:	2b00      	cmp	r3, #0
   b5d42:	f6bf ae83 	bge.w	b5a4c <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b5d46:	e706      	b.n	b5b56 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5d48:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b5d4a:	2304      	movs	r3, #4
   b5d4c:	2102      	movs	r1, #2
   b5d4e:	e783      	b.n	b5c58 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b5d50 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b5d50:	8843      	ldrh	r3, [r0, #2]
   b5d52:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b5d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b5d56:	d92d      	bls.n	b5db4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b5d58:	7a06      	ldrb	r6, [r0, #8]
   b5d5a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b5d5e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b5d62:	b2d5      	uxtb	r5, r2
   b5d64:	b13e      	cbz	r6, b5d76 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b5d66:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b5d68:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b5d6a:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b5d6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b5d70:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b5d74:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b5d76:	f890 c006 	ldrb.w	ip, [r0, #6]
   b5d7a:	68c7      	ldr	r7, [r0, #12]
   b5d7c:	f1bc 0f06 	cmp.w	ip, #6
   b5d80:	bf0c      	ite	eq
   b5d82:	2604      	moveq	r6, #4
   b5d84:	2603      	movne	r6, #3
   b5d86:	434e      	muls	r6, r1
   b5d88:	f1ac 0c02 	sub.w	ip, ip, #2
   b5d8c:	19b9      	adds	r1, r7, r6
    switch(type) {
   b5d8e:	f1bc 0f06 	cmp.w	ip, #6
   b5d92:	d81d      	bhi.n	b5dd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b5d94:	e8df f00c 	tbb	[pc, ip]
   b5d98:	04081c04 	.word	0x04081c04
   b5d9c:	040f      	.short	0x040f
   b5d9e:	04          	.byte	0x04
   b5d9f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b5da0:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b5da2:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b5da4:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b5da6:	e005      	b.n	b5db4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b5da8:	2bfe      	cmp	r3, #254	; 0xfe
   b5daa:	bf28      	it	cs
   b5dac:	23fe      	movcs	r3, #254	; 0xfe
   b5dae:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b5db0:	704d      	strb	r5, [r1, #1]
          *p = g;
   b5db2:	708c      	strb	r4, [r1, #2]
}
   b5db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b5db6:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5db8:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b5dba:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5dbc:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b5dbe:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5dc0:	b913      	cbnz	r3, b5dc8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b5dc2:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5dc4:	70ca      	strb	r2, [r1, #3]
        } break;
   b5dc6:	e7f5      	b.n	b5db4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5dc8:	435a      	muls	r2, r3
   b5dca:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b5dce:	e7f9      	b.n	b5dc4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b5dd0:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5dd2:	704c      	strb	r4, [r1, #1]
   b5dd4:	e7e6      	b.n	b5da4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b5dd6 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b5dd6:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b5dd8:	1c4a      	adds	r2, r1, #1
   b5dda:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b5ddc:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b5dde:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b5de0:	d01f      	beq.n	b5e22 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b5de2:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5de4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b5de8:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b5dea:	d00c      	beq.n	b5e06 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b5dec:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b5dee:	bf1f      	itttt	ne
   b5df0:	0211      	lslne	r1, r2, #8
   b5df2:	f101 31ff 	addne.w	r1, r1, #4294967295
   b5df6:	fbb1 f3f3 	udivne	r3, r1, r3
   b5dfa:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b5dfc:	bf04      	itt	eq
   b5dfe:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b5e02:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b5e06:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b5e08:	8886      	ldrh	r6, [r0, #4]
   b5e0a:	1b29      	subs	r1, r5, r4
   b5e0c:	b289      	uxth	r1, r1
   b5e0e:	428e      	cmp	r6, r1
   b5e10:	d906      	bls.n	b5e20 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b5e12:	7829      	ldrb	r1, [r5, #0]
   b5e14:	4359      	muls	r1, r3
   b5e16:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5e1a:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b5e1e:	e7f3      	b.n	b5e08 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b5e20:	7202      	strb	r2, [r0, #8]
  }
}
   b5e22:	bd70      	pop	{r4, r5, r6, pc}

000b5e24 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b5e24:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b5e26:	f000 f815 	bl	b5e54 <HAL_Pin_Map>
   b5e2a:	4b01      	ldr	r3, [pc, #4]	; (b5e30 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5e2c:	6018      	str	r0, [r3, #0]
}
   b5e2e:	bd08      	pop	{r3, pc}
   b5e30:	2003e6c0 	.word	0x2003e6c0

000b5e34 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5e34:	b508      	push	{r3, lr}
   b5e36:	4b02      	ldr	r3, [pc, #8]	; (b5e40 <netdb_freeaddrinfo+0xc>)
   b5e38:	681b      	ldr	r3, [r3, #0]
   b5e3a:	689b      	ldr	r3, [r3, #8]
   b5e3c:	9301      	str	r3, [sp, #4]
   b5e3e:	bd08      	pop	{r3, pc}
   b5e40:	00030268 	.word	0x00030268

000b5e44 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5e44:	b508      	push	{r3, lr}
   b5e46:	4b02      	ldr	r3, [pc, #8]	; (b5e50 <netdb_getaddrinfo+0xc>)
   b5e48:	681b      	ldr	r3, [r3, #0]
   b5e4a:	68db      	ldr	r3, [r3, #12]
   b5e4c:	9301      	str	r3, [sp, #4]
   b5e4e:	bd08      	pop	{r3, pc}
   b5e50:	00030268 	.word	0x00030268

000b5e54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b02      	ldr	r3, [pc, #8]	; (b5e60 <HAL_Pin_Map+0xc>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	681b      	ldr	r3, [r3, #0]
   b5e5c:	9301      	str	r3, [sp, #4]
   b5e5e:	bd08      	pop	{r3, pc}
   b5e60:	0003022c 	.word	0x0003022c

000b5e64 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5e64:	b508      	push	{r3, lr}
   b5e66:	4b02      	ldr	r3, [pc, #8]	; (b5e70 <HAL_Validate_Pin_Function+0xc>)
   b5e68:	681b      	ldr	r3, [r3, #0]
   b5e6a:	685b      	ldr	r3, [r3, #4]
   b5e6c:	9301      	str	r3, [sp, #4]
   b5e6e:	bd08      	pop	{r3, pc}
   b5e70:	0003022c 	.word	0x0003022c

000b5e74 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5e74:	b508      	push	{r3, lr}
   b5e76:	4b02      	ldr	r3, [pc, #8]	; (b5e80 <HAL_Pin_Mode+0xc>)
   b5e78:	681b      	ldr	r3, [r3, #0]
   b5e7a:	689b      	ldr	r3, [r3, #8]
   b5e7c:	9301      	str	r3, [sp, #4]
   b5e7e:	bd08      	pop	{r3, pc}
   b5e80:	0003022c 	.word	0x0003022c

000b5e84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5e84:	b508      	push	{r3, lr}
   b5e86:	4b02      	ldr	r3, [pc, #8]	; (b5e90 <HAL_Get_Pin_Mode+0xc>)
   b5e88:	681b      	ldr	r3, [r3, #0]
   b5e8a:	68db      	ldr	r3, [r3, #12]
   b5e8c:	9301      	str	r3, [sp, #4]
   b5e8e:	bd08      	pop	{r3, pc}
   b5e90:	0003022c 	.word	0x0003022c

000b5e94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5e94:	b508      	push	{r3, lr}
   b5e96:	4b02      	ldr	r3, [pc, #8]	; (b5ea0 <HAL_GPIO_Write+0xc>)
   b5e98:	681b      	ldr	r3, [r3, #0]
   b5e9a:	691b      	ldr	r3, [r3, #16]
   b5e9c:	9301      	str	r3, [sp, #4]
   b5e9e:	bd08      	pop	{r3, pc}
   b5ea0:	0003022c 	.word	0x0003022c

000b5ea4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b02      	ldr	r3, [pc, #8]	; (b5eb0 <hal_adc_read+0xc>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5eac:	9301      	str	r3, [sp, #4]
   b5eae:	bd08      	pop	{r3, pc}
   b5eb0:	0003022c 	.word	0x0003022c

000b5eb4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5eb4:	b508      	push	{r3, lr}
   b5eb6:	4b02      	ldr	r3, [pc, #8]	; (b5ec0 <if_index_to_name+0xc>)
   b5eb8:	681b      	ldr	r3, [r3, #0]
   b5eba:	695b      	ldr	r3, [r3, #20]
   b5ebc:	9301      	str	r3, [sp, #4]
   b5ebe:	bd08      	pop	{r3, pc}
   b5ec0:	0003026c 	.word	0x0003026c

000b5ec4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ec4:	b508      	push	{r3, lr}
   b5ec6:	4b02      	ldr	r3, [pc, #8]	; (b5ed0 <HAL_RNG_GetRandomNumber+0xc>)
   b5ec8:	681b      	ldr	r3, [r3, #0]
   b5eca:	685b      	ldr	r3, [r3, #4]
   b5ecc:	9301      	str	r3, [sp, #4]
   b5ece:	bd08      	pop	{r3, pc}
   b5ed0:	00030218 	.word	0x00030218

000b5ed4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ed4:	b508      	push	{r3, lr}
   b5ed6:	4b02      	ldr	r3, [pc, #8]	; (b5ee0 <HAL_Delay_Microseconds+0xc>)
   b5ed8:	681b      	ldr	r3, [r3, #0]
   b5eda:	68db      	ldr	r3, [r3, #12]
   b5edc:	9301      	str	r3, [sp, #4]
   b5ede:	bd08      	pop	{r3, pc}
   b5ee0:	00030218 	.word	0x00030218

000b5ee4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5ee4:	b508      	push	{r3, lr}
   b5ee6:	4b02      	ldr	r3, [pc, #8]	; (b5ef0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5ee8:	681b      	ldr	r3, [r3, #0]
   b5eea:	691b      	ldr	r3, [r3, #16]
   b5eec:	9301      	str	r3, [sp, #4]
   b5eee:	bd08      	pop	{r3, pc}
   b5ef0:	00030218 	.word	0x00030218

000b5ef4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	695b      	ldr	r3, [r3, #20]
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	bd08      	pop	{r3, pc}
   b5f00:	00030218 	.word	0x00030218

000b5f04 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5f04:	b508      	push	{r3, lr}
   b5f06:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <hal_timer_millis+0xc>)
   b5f08:	681b      	ldr	r3, [r3, #0]
   b5f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	bd08      	pop	{r3, pc}
   b5f10:	00030218 	.word	0x00030218

000b5f14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5f14:	b508      	push	{r3, lr}
   b5f16:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <os_mutex_recursive_create+0xc>)
   b5f18:	681b      	ldr	r3, [r3, #0]
   b5f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	bd08      	pop	{r3, pc}
   b5f20:	00030248 	.word	0x00030248

000b5f24 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b02      	ldr	r3, [pc, #8]	; (b5f30 <inet_inet_ntop+0xc>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	695b      	ldr	r3, [r3, #20]
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	bd08      	pop	{r3, pc}
   b5f30:	00030264 	.word	0x00030264

000b5f34 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5f34:	b508      	push	{r3, lr}
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <inet_htonl+0xc>)
   b5f38:	681b      	ldr	r3, [r3, #0]
   b5f3a:	6a1b      	ldr	r3, [r3, #32]
   b5f3c:	9301      	str	r3, [sp, #4]
   b5f3e:	bd08      	pop	{r3, pc}
   b5f40:	00030264 	.word	0x00030264

000b5f44 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b02      	ldr	r3, [pc, #8]	; (b5f50 <inet_htons+0xc>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f4c:	9301      	str	r3, [sp, #4]
   b5f4e:	bd08      	pop	{r3, pc}
   b5f50:	00030264 	.word	0x00030264

000b5f54 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5f54:	b508      	push	{r3, lr}
   b5f56:	4b02      	ldr	r3, [pc, #8]	; (b5f60 <hal_usart_write+0xc>)
   b5f58:	681b      	ldr	r3, [r3, #0]
   b5f5a:	68db      	ldr	r3, [r3, #12]
   b5f5c:	9301      	str	r3, [sp, #4]
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	0003023c 	.word	0x0003023c

000b5f64 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5f64:	b508      	push	{r3, lr}
   b5f66:	4b02      	ldr	r3, [pc, #8]	; (b5f70 <hal_usart_available+0xc>)
   b5f68:	681b      	ldr	r3, [r3, #0]
   b5f6a:	691b      	ldr	r3, [r3, #16]
   b5f6c:	9301      	str	r3, [sp, #4]
   b5f6e:	bd08      	pop	{r3, pc}
   b5f70:	0003023c 	.word	0x0003023c

000b5f74 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5f74:	b508      	push	{r3, lr}
   b5f76:	4b02      	ldr	r3, [pc, #8]	; (b5f80 <hal_usart_read+0xc>)
   b5f78:	681b      	ldr	r3, [r3, #0]
   b5f7a:	695b      	ldr	r3, [r3, #20]
   b5f7c:	9301      	str	r3, [sp, #4]
   b5f7e:	bd08      	pop	{r3, pc}
   b5f80:	0003023c 	.word	0x0003023c

000b5f84 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f84:	b508      	push	{r3, lr}
   b5f86:	4b02      	ldr	r3, [pc, #8]	; (b5f90 <hal_usart_peek+0xc>)
   b5f88:	681b      	ldr	r3, [r3, #0]
   b5f8a:	699b      	ldr	r3, [r3, #24]
   b5f8c:	9301      	str	r3, [sp, #4]
   b5f8e:	bd08      	pop	{r3, pc}
   b5f90:	0003023c 	.word	0x0003023c

000b5f94 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <hal_usart_flush+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	69db      	ldr	r3, [r3, #28]
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	0003023c 	.word	0x0003023c

000b5fa4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <hal_usart_is_enabled+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	6a1b      	ldr	r3, [r3, #32]
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	0003023c 	.word	0x0003023c

000b5fb4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <hal_usart_available_data_for_write+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	0003023c 	.word	0x0003023c

000b5fc4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <hal_usart_init_ex+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	0003023c 	.word	0x0003023c

000b5fd4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <hal_i2c_begin+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	68db      	ldr	r3, [r3, #12]
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	00030228 	.word	0x00030228

000b5fe4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <hal_i2c_begin_transmission+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	699b      	ldr	r3, [r3, #24]
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	00030228 	.word	0x00030228

000b5ff4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <hal_i2c_end_transmission+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	69db      	ldr	r3, [r3, #28]
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	00030228 	.word	0x00030228

000b6004 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <hal_i2c_write+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	6a1b      	ldr	r3, [r3, #32]
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	00030228 	.word	0x00030228

000b6014 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <hal_i2c_available+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	00030228 	.word	0x00030228

000b6024 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <hal_i2c_read+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	00030228 	.word	0x00030228

000b6034 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <hal_i2c_peek+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	00030228 	.word	0x00030228

000b6044 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <hal_i2c_flush+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030228 	.word	0x00030228

000b6054 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <hal_i2c_is_enabled+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030228 	.word	0x00030228

000b6064 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <hal_i2c_init+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	00030228 	.word	0x00030228

000b6074 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <sock_setsockopt+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	699b      	ldr	r3, [r3, #24]
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	00030238 	.word	0x00030238

000b6084 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <sock_close+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	69db      	ldr	r3, [r3, #28]
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	00030238 	.word	0x00030238

000b6094 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <sock_connect+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	6a1b      	ldr	r3, [r3, #32]
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	00030238 	.word	0x00030238

000b60a4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <sock_recv+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	00030238 	.word	0x00030238

000b60b4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <sock_send+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	00030238 	.word	0x00030238

000b60c4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <sock_socket+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	00030238 	.word	0x00030238

000b60d4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <hal_spi_begin+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	681b      	ldr	r3, [r3, #0]
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	00030230 	.word	0x00030230

000b60e4 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <hal_spi_set_bit_order+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	689b      	ldr	r3, [r3, #8]
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030230 	.word	0x00030230

000b60f4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <hal_spi_set_data_mode+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	68db      	ldr	r3, [r3, #12]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030230 	.word	0x00030230

000b6104 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <hal_spi_set_clock_divider+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	691b      	ldr	r3, [r3, #16]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030230 	.word	0x00030230

000b6114 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <hal_spi_transfer+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	695b      	ldr	r3, [r3, #20]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030230 	.word	0x00030230

000b6124 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <hal_spi_init+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	69db      	ldr	r3, [r3, #28]
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030230 	.word	0x00030230

000b6134 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <hal_spi_is_enabled+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	6a1b      	ldr	r3, [r3, #32]
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030230 	.word	0x00030230

000b6144 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <hal_spi_info+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030230 	.word	0x00030230

000b6154 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <hal_spi_acquire+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030230 	.word	0x00030230

000b6164 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <hal_spi_release+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030230 	.word	0x00030230

000b6174 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <HAL_USB_USART_Init+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	681b      	ldr	r3, [r3, #0]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	0003024c 	.word	0x0003024c

000b6184 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <HAL_USB_USART_Begin+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	685b      	ldr	r3, [r3, #4]
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	0003024c 	.word	0x0003024c

000b6194 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <HAL_USB_USART_Available_Data+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	691b      	ldr	r3, [r3, #16]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	0003024c 	.word	0x0003024c

000b61a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	695b      	ldr	r3, [r3, #20]
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	0003024c 	.word	0x0003024c

000b61b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <HAL_USB_USART_Receive_Data+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	699b      	ldr	r3, [r3, #24]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	0003024c 	.word	0x0003024c

000b61c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <HAL_USB_USART_Send_Data+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	69db      	ldr	r3, [r3, #28]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	0003024c 	.word	0x0003024c

000b61d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <HAL_USB_USART_Flush_Data+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	6a1b      	ldr	r3, [r3, #32]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	0003024c 	.word	0x0003024c

000b61e4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <HAL_USB_USART_Is_Connected+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	0003024c 	.word	0x0003024c

000b61f4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <panic_+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030260 	.word	0x00030260

000b6204 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <log_message+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030260 	.word	0x00030260

000b6214 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <set_system_mode+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	685b      	ldr	r3, [r3, #4]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030220 	.word	0x00030220

000b6224 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <system_delay_ms+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	695b      	ldr	r3, [r3, #20]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030220 	.word	0x00030220

000b6234 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b03      	ldr	r3, [pc, #12]	; (b6244 <system_ctrl_set_app_request_handler+0x10>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b623e:	9301      	str	r3, [sp, #4]
   b6240:	bd08      	pop	{r3, pc}
   b6242:	0000      	.short	0x0000
   b6244:	00030220 	.word	0x00030220

000b6248 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b03      	ldr	r3, [pc, #12]	; (b6258 <system_ctrl_set_result+0x10>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6252:	9301      	str	r3, [sp, #4]
   b6254:	bd08      	pop	{r3, pc}
   b6256:	0000      	.short	0x0000
   b6258:	00030220 	.word	0x00030220

000b625c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b625c:	b508      	push	{r3, lr}
   b625e:	4b02      	ldr	r3, [pc, #8]	; (b6268 <network_connect+0xc>)
   b6260:	681b      	ldr	r3, [r3, #0]
   b6262:	685b      	ldr	r3, [r3, #4]
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	bd08      	pop	{r3, pc}
   b6268:	00030240 	.word	0x00030240

000b626c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b626c:	b508      	push	{r3, lr}
   b626e:	4b02      	ldr	r3, [pc, #8]	; (b6278 <network_connecting+0xc>)
   b6270:	681b      	ldr	r3, [r3, #0]
   b6272:	689b      	ldr	r3, [r3, #8]
   b6274:	9301      	str	r3, [sp, #4]
   b6276:	bd08      	pop	{r3, pc}
   b6278:	00030240 	.word	0x00030240

000b627c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b02      	ldr	r3, [pc, #8]	; (b6288 <network_disconnect+0xc>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	68db      	ldr	r3, [r3, #12]
   b6284:	9301      	str	r3, [sp, #4]
   b6286:	bd08      	pop	{r3, pc}
   b6288:	00030240 	.word	0x00030240

000b628c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b628c:	b508      	push	{r3, lr}
   b628e:	4b02      	ldr	r3, [pc, #8]	; (b6298 <network_ready+0xc>)
   b6290:	681b      	ldr	r3, [r3, #0]
   b6292:	691b      	ldr	r3, [r3, #16]
   b6294:	9301      	str	r3, [sp, #4]
   b6296:	bd08      	pop	{r3, pc}
   b6298:	00030240 	.word	0x00030240

000b629c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b629c:	b508      	push	{r3, lr}
   b629e:	4b02      	ldr	r3, [pc, #8]	; (b62a8 <network_on+0xc>)
   b62a0:	681b      	ldr	r3, [r3, #0]
   b62a2:	695b      	ldr	r3, [r3, #20]
   b62a4:	9301      	str	r3, [sp, #4]
   b62a6:	bd08      	pop	{r3, pc}
   b62a8:	00030240 	.word	0x00030240

000b62ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b62ac:	b508      	push	{r3, lr}
   b62ae:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <network_off+0xc>)
   b62b0:	681b      	ldr	r3, [r3, #0]
   b62b2:	699b      	ldr	r3, [r3, #24]
   b62b4:	9301      	str	r3, [sp, #4]
   b62b6:	bd08      	pop	{r3, pc}
   b62b8:	00030240 	.word	0x00030240

000b62bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b62bc:	b508      	push	{r3, lr}
   b62be:	4b02      	ldr	r3, [pc, #8]	; (b62c8 <network_listen+0xc>)
   b62c0:	681b      	ldr	r3, [r3, #0]
   b62c2:	69db      	ldr	r3, [r3, #28]
   b62c4:	9301      	str	r3, [sp, #4]
   b62c6:	bd08      	pop	{r3, pc}
   b62c8:	00030240 	.word	0x00030240

000b62cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b62cc:	b508      	push	{r3, lr}
   b62ce:	4b02      	ldr	r3, [pc, #8]	; (b62d8 <network_listening+0xc>)
   b62d0:	681b      	ldr	r3, [r3, #0]
   b62d2:	6a1b      	ldr	r3, [r3, #32]
   b62d4:	9301      	str	r3, [sp, #4]
   b62d6:	bd08      	pop	{r3, pc}
   b62d8:	00030240 	.word	0x00030240

000b62dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b62dc:	b508      	push	{r3, lr}
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <network_set_listen_timeout+0xc>)
   b62e0:	681b      	ldr	r3, [r3, #0]
   b62e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62e4:	9301      	str	r3, [sp, #4]
   b62e6:	bd08      	pop	{r3, pc}
   b62e8:	00030240 	.word	0x00030240

000b62ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b62ec:	b508      	push	{r3, lr}
   b62ee:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <network_get_listen_timeout+0xc>)
   b62f0:	681b      	ldr	r3, [r3, #0]
   b62f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b62f4:	9301      	str	r3, [sp, #4]
   b62f6:	bd08      	pop	{r3, pc}
   b62f8:	00030240 	.word	0x00030240

000b62fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b62fc:	b508      	push	{r3, lr}
   b62fe:	4b02      	ldr	r3, [pc, #8]	; (b6308 <network_is_on+0xc>)
   b6300:	681b      	ldr	r3, [r3, #0]
   b6302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6304:	9301      	str	r3, [sp, #4]
   b6306:	bd08      	pop	{r3, pc}
   b6308:	00030240 	.word	0x00030240

000b630c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b630c:	b508      	push	{r3, lr}
   b630e:	4b02      	ldr	r3, [pc, #8]	; (b6318 <network_is_off+0xc>)
   b6310:	681b      	ldr	r3, [r3, #0]
   b6312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6314:	9301      	str	r3, [sp, #4]
   b6316:	bd08      	pop	{r3, pc}
   b6318:	00030240 	.word	0x00030240

000b631c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b631c:	b508      	push	{r3, lr}
   b631e:	4b02      	ldr	r3, [pc, #8]	; (b6328 <spark_process+0xc>)
   b6320:	681b      	ldr	r3, [r3, #0]
   b6322:	689b      	ldr	r3, [r3, #8]
   b6324:	9301      	str	r3, [sp, #4]
   b6326:	bd08      	pop	{r3, pc}
   b6328:	00030244 	.word	0x00030244

000b632c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b632c:	b508      	push	{r3, lr}
   b632e:	4b02      	ldr	r3, [pc, #8]	; (b6338 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6330:	681b      	ldr	r3, [r3, #0]
   b6332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6334:	9301      	str	r3, [sp, #4]
   b6336:	bd08      	pop	{r3, pc}
   b6338:	00030244 	.word	0x00030244

000b633c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b633c:	b508      	push	{r3, lr}
   b633e:	4b02      	ldr	r3, [pc, #8]	; (b6348 <malloc+0xc>)
   b6340:	681b      	ldr	r3, [r3, #0]
   b6342:	681b      	ldr	r3, [r3, #0]
   b6344:	9301      	str	r3, [sp, #4]
   b6346:	bd08      	pop	{r3, pc}
   b6348:	0003021c 	.word	0x0003021c

000b634c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b634c:	b508      	push	{r3, lr}
   b634e:	4b02      	ldr	r3, [pc, #8]	; (b6358 <free+0xc>)
   b6350:	681b      	ldr	r3, [r3, #0]
   b6352:	685b      	ldr	r3, [r3, #4]
   b6354:	9301      	str	r3, [sp, #4]
   b6356:	bd08      	pop	{r3, pc}
   b6358:	0003021c 	.word	0x0003021c

000b635c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b635c:	b508      	push	{r3, lr}
   b635e:	4b02      	ldr	r3, [pc, #8]	; (b6368 <realloc+0xc>)
   b6360:	681b      	ldr	r3, [r3, #0]
   b6362:	689b      	ldr	r3, [r3, #8]
   b6364:	9301      	str	r3, [sp, #4]
   b6366:	bd08      	pop	{r3, pc}
   b6368:	0003021c 	.word	0x0003021c

000b636c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b636c:	b508      	push	{r3, lr}
   b636e:	4b02      	ldr	r3, [pc, #8]	; (b6378 <vsnprintf+0xc>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6374:	9301      	str	r3, [sp, #4]
   b6376:	bd08      	pop	{r3, pc}
   b6378:	0003021c 	.word	0x0003021c

000b637c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b637c:	b508      	push	{r3, lr}
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <__errno+0xc>)
   b6380:	681b      	ldr	r3, [r3, #0]
   b6382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6384:	9301      	str	r3, [sp, #4]
   b6386:	bd08      	pop	{r3, pc}
   b6388:	0003021c 	.word	0x0003021c

000b638c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b638c:	b508      	push	{r3, lr}
   b638e:	4b02      	ldr	r3, [pc, #8]	; (b6398 <__assert_func+0xc>)
   b6390:	681b      	ldr	r3, [r3, #0]
   b6392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6394:	9301      	str	r3, [sp, #4]
   b6396:	bd08      	pop	{r3, pc}
   b6398:	0003021c 	.word	0x0003021c

000b639c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b02      	ldr	r3, [pc, #8]	; (b63a8 <newlib_impure_ptr_callback+0xc>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63a4:	9301      	str	r3, [sp, #4]
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	0003021c 	.word	0x0003021c

000b63ac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b63ac:	2200      	movs	r2, #0
   b63ae:	6840      	ldr	r0, [r0, #4]
   b63b0:	4611      	mov	r1, r2
   b63b2:	f7ff bf8b 	b.w	b62cc <network_listening>

000b63b6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b63b6:	2200      	movs	r2, #0
   b63b8:	6840      	ldr	r0, [r0, #4]
   b63ba:	4611      	mov	r1, r2
   b63bc:	f7ff bf96 	b.w	b62ec <network_get_listen_timeout>

000b63c0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b63c0:	6840      	ldr	r0, [r0, #4]
   b63c2:	2200      	movs	r2, #0
   b63c4:	f7ff bf8a 	b.w	b62dc <network_set_listen_timeout>

000b63c8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b63c8:	6840      	ldr	r0, [r0, #4]
   b63ca:	2200      	movs	r2, #0
   b63cc:	f081 0101 	eor.w	r1, r1, #1
   b63d0:	f7ff bf74 	b.w	b62bc <network_listen>

000b63d4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b63d4:	2300      	movs	r3, #0
   b63d6:	6840      	ldr	r0, [r0, #4]
   b63d8:	461a      	mov	r2, r3
   b63da:	4619      	mov	r1, r3
   b63dc:	f7ff bf66 	b.w	b62ac <network_off>

000b63e0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b63e0:	2300      	movs	r3, #0
   b63e2:	6840      	ldr	r0, [r0, #4]
   b63e4:	461a      	mov	r2, r3
   b63e6:	4619      	mov	r1, r3
   b63e8:	f7ff bf58 	b.w	b629c <network_on>

000b63ec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b63ec:	2200      	movs	r2, #0
   b63ee:	6840      	ldr	r0, [r0, #4]
   b63f0:	4611      	mov	r1, r2
   b63f2:	f7ff bf4b 	b.w	b628c <network_ready>

000b63f6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b63f6:	2200      	movs	r2, #0
   b63f8:	6840      	ldr	r0, [r0, #4]
   b63fa:	4611      	mov	r1, r2
   b63fc:	f7ff bf36 	b.w	b626c <network_connecting>

000b6400 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6400:	6840      	ldr	r0, [r0, #4]
   b6402:	2200      	movs	r2, #0
   b6404:	2102      	movs	r1, #2
   b6406:	f7ff bf39 	b.w	b627c <network_disconnect>

000b640a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b640a:	2300      	movs	r3, #0
   b640c:	6840      	ldr	r0, [r0, #4]
   b640e:	461a      	mov	r2, r3
   b6410:	f7ff bf24 	b.w	b625c <network_connect>

000b6414 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6414:	4b02      	ldr	r3, [pc, #8]	; (b6420 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6416:	2203      	movs	r2, #3
   b6418:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b641a:	4a02      	ldr	r2, [pc, #8]	; (b6424 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b641c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b641e:	4770      	bx	lr
   b6420:	2003e6c4 	.word	0x2003e6c4
   b6424:	000b8c00 	.word	0x000b8c00

000b6428 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6428:	2100      	movs	r1, #0
   b642a:	f7ff be9b 	b.w	b6164 <hal_spi_release>

000b642e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b642e:	2100      	movs	r1, #0
   b6430:	f7ff be90 	b.w	b6154 <hal_spi_acquire>

000b6434 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6434:	b510      	push	{r4, lr}
   b6436:	4604      	mov	r4, r0
   b6438:	4608      	mov	r0, r1
{
    _spi = spi;
   b643a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b643c:	f7ff fe72 	bl	b6124 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6440:	2300      	movs	r3, #0
   b6442:	6063      	str	r3, [r4, #4]
}
   b6444:	4620      	mov	r0, r4
   b6446:	bd10      	pop	{r4, pc}

000b6448 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6448:	b513      	push	{r0, r1, r4, lr}
   b644a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b644c:	7800      	ldrb	r0, [r0, #0]
   b644e:	f7ff ffee 	bl	b642e <_ZN8SPIClass4lockEv.isra.0>
   b6452:	b958      	cbnz	r0, b646c <_ZN8SPIClass5beginEv+0x24>
   b6454:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6456:	9001      	str	r0, [sp, #4]
   b6458:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b645c:	f7ff fe3a 	bl	b60d4 <hal_spi_begin>
        unlock();
   b6460:	9801      	ldr	r0, [sp, #4]
    }
}
   b6462:	b002      	add	sp, #8
   b6464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6468:	f7ff bfde 	b.w	b6428 <_ZN8SPIClass6unlockEv.isra.0>
   b646c:	b002      	add	sp, #8
   b646e:	bd10      	pop	{r4, pc}

000b6470 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6470:	b513      	push	{r0, r1, r4, lr}
   b6472:	4604      	mov	r4, r0
    if (!lock())
   b6474:	7800      	ldrb	r0, [r0, #0]
{
   b6476:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6478:	f7ff ffd9 	bl	b642e <_ZN8SPIClass4lockEv.isra.0>
   b647c:	9901      	ldr	r1, [sp, #4]
   b647e:	b948      	cbnz	r0, b6494 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6480:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6482:	9001      	str	r0, [sp, #4]
   b6484:	f7ff fe2e 	bl	b60e4 <hal_spi_set_bit_order>
        unlock();
   b6488:	9801      	ldr	r0, [sp, #4]
    }
}
   b648a:	b002      	add	sp, #8
   b648c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6490:	f7ff bfca 	b.w	b6428 <_ZN8SPIClass6unlockEv.isra.0>
   b6494:	b002      	add	sp, #8
   b6496:	bd10      	pop	{r4, pc}

000b6498 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6498:	b513      	push	{r0, r1, r4, lr}
   b649a:	4604      	mov	r4, r0
    if (!lock())
   b649c:	7800      	ldrb	r0, [r0, #0]
{
   b649e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b64a0:	f7ff ffc5 	bl	b642e <_ZN8SPIClass4lockEv.isra.0>
   b64a4:	9901      	ldr	r1, [sp, #4]
   b64a6:	b948      	cbnz	r0, b64bc <_ZN8SPIClass11setDataModeEh+0x24>
   b64a8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b64aa:	9001      	str	r0, [sp, #4]
   b64ac:	f7ff fe22 	bl	b60f4 <hal_spi_set_data_mode>
        unlock();
   b64b0:	9801      	ldr	r0, [sp, #4]
    }
}
   b64b2:	b002      	add	sp, #8
   b64b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b64b8:	f7ff bfb6 	b.w	b6428 <_ZN8SPIClass6unlockEv.isra.0>
   b64bc:	b002      	add	sp, #8
   b64be:	bd10      	pop	{r4, pc}

000b64c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b64c0:	0840      	lsrs	r0, r0, #1
{
   b64c2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b64c4:	6018      	str	r0, [r3, #0]
   b64c6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b64c8:	6818      	ldr	r0, [r3, #0]
   b64ca:	4288      	cmp	r0, r1
   b64cc:	b2e5      	uxtb	r5, r4
   b64ce:	d906      	bls.n	b64de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b64d0:	3401      	adds	r4, #1
   b64d2:	2c08      	cmp	r4, #8
   b64d4:	d002      	beq.n	b64dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b64d6:	0840      	lsrs	r0, r0, #1
   b64d8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b64da:	e7f5      	b.n	b64c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b64dc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b64de:	4b02      	ldr	r3, [pc, #8]	; (b64e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b64e0:	5d5b      	ldrb	r3, [r3, r5]
   b64e2:	7013      	strb	r3, [r2, #0]
}
   b64e4:	bd30      	pop	{r4, r5, pc}
   b64e6:	bf00      	nop
   b64e8:	000b8c34 	.word	0x000b8c34

000b64ec <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b64ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b64f0:	b088      	sub	sp, #32
    unsigned clock = 0;
   b64f2:	2300      	movs	r3, #0
{
   b64f4:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b64f6:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b64f8:	9302      	str	r3, [sp, #8]
{
   b64fa:	460e      	mov	r6, r1
   b64fc:	4617      	mov	r7, r2
    if (!lock())
   b64fe:	f7ff ff96 	bl	b642e <_ZN8SPIClass4lockEv.isra.0>
   b6502:	4605      	mov	r5, r0
   b6504:	bb00      	cbnz	r0, b6548 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6506:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b650a:	4601      	mov	r1, r0
   b650c:	2214      	movs	r2, #20
   b650e:	a803      	add	r0, sp, #12
   b6510:	f001 fef2 	bl	b82f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6514:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6516:	462a      	mov	r2, r5
   b6518:	a903      	add	r1, sp, #12
   b651a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b651c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6520:	f7ff fe10 	bl	b6144 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6524:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6526:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b652a:	ab02      	add	r3, sp, #8
   b652c:	f10d 0207 	add.w	r2, sp, #7
   b6530:	fb07 f106 	mul.w	r1, r7, r6
   b6534:	f7ff ffc4 	bl	b64c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6538:	7820      	ldrb	r0, [r4, #0]
   b653a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b653e:	f7ff fde1 	bl	b6104 <hal_spi_set_clock_divider>
        unlock();
   b6542:	7820      	ldrb	r0, [r4, #0]
   b6544:	f7ff ff70 	bl	b6428 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6548:	9802      	ldr	r0, [sp, #8]
   b654a:	b008      	add	sp, #32
   b654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6550 <_ZN8SPIClass15setClockDividerEh>:
{
   b6550:	b538      	push	{r3, r4, r5, lr}
   b6552:	4604      	mov	r4, r0
    if (!lock())
   b6554:	7800      	ldrb	r0, [r0, #0]
{
   b6556:	460d      	mov	r5, r1
    if (!lock())
   b6558:	f7ff ff69 	bl	b642e <_ZN8SPIClass4lockEv.isra.0>
   b655c:	4603      	mov	r3, r0
   b655e:	b9d0      	cbnz	r0, b6596 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6560:	6861      	ldr	r1, [r4, #4]
   b6562:	b199      	cbz	r1, b658c <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6564:	4a0c      	ldr	r2, [pc, #48]	; (b6598 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6566:	f812 0b01 	ldrb.w	r0, [r2], #1
   b656a:	4285      	cmp	r5, r0
   b656c:	d002      	beq.n	b6574 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b656e:	3301      	adds	r3, #1
   b6570:	2b08      	cmp	r3, #8
   b6572:	d1f8      	bne.n	b6566 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6574:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6576:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6578:	2201      	movs	r2, #1
   b657a:	40d9      	lsrs	r1, r3
   b657c:	4620      	mov	r0, r4
   b657e:	f7ff ffb5 	bl	b64ec <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6582:	7820      	ldrb	r0, [r4, #0]
}
   b6584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6588:	f7ff bf4e 	b.w	b6428 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b658c:	7820      	ldrb	r0, [r4, #0]
   b658e:	4629      	mov	r1, r5
   b6590:	f7ff fdb8 	bl	b6104 <hal_spi_set_clock_divider>
   b6594:	e7f5      	b.n	b6582 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6596:	bd38      	pop	{r3, r4, r5, pc}
   b6598:	000b8c34 	.word	0x000b8c34

000b659c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b659c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b659e:	7800      	ldrb	r0, [r0, #0]
   b65a0:	f7ff fdb8 	bl	b6114 <hal_spi_transfer>
}
   b65a4:	b2c0      	uxtb	r0, r0
   b65a6:	bd08      	pop	{r3, pc}

000b65a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b65a8:	4b05      	ldr	r3, [pc, #20]	; (b65c0 <_GLOBAL__sub_I_System+0x18>)
   b65aa:	2202      	movs	r2, #2
   b65ac:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b65ae:	4b05      	ldr	r3, [pc, #20]	; (b65c4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b65b0:	4a05      	ldr	r2, [pc, #20]	; (b65c8 <_GLOBAL__sub_I_System+0x20>)
   b65b2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b65b4:	2000      	movs	r0, #0
   b65b6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b65ba:	f7ff be2b 	b.w	b6214 <set_system_mode>
   b65be:	bf00      	nop
   b65c0:	2003e6d8 	.word	0x2003e6d8
   b65c4:	2003e6cc 	.word	0x2003e6cc
   b65c8:	ffff0000 	.word	0xffff0000

000b65cc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b65cc:	b510      	push	{r4, lr}
   b65ce:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b65d0:	f001 feda 	bl	b8388 <strlen>
   b65d4:	3801      	subs	r0, #1
   b65d6:	1823      	adds	r3, r4, r0
   b65d8:	4620      	mov	r0, r4
	while(i<j){
   b65da:	4283      	cmp	r3, r0
   b65dc:	d906      	bls.n	b65ec <_Z11str_reversePc+0x20>
		c = *i;
   b65de:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b65e0:	7819      	ldrb	r1, [r3, #0]
   b65e2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b65e6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b65ea:	e7f6      	b.n	b65da <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b65ec:	bd10      	pop	{r4, pc}

000b65ee <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b65ee:	b570      	push	{r4, r5, r6, lr}
   b65f0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b65f2:	1e91      	subs	r1, r2, #2
   b65f4:	2922      	cmp	r1, #34	; 0x22
   b65f6:	d81d      	bhi.n	b6634 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b65f8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b65fa:	b930      	cbnz	r0, b660a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b65fc:	4423      	add	r3, r4
            *ptr++ = '0';
   b65fe:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6600:	429d      	cmp	r5, r3
   b6602:	d210      	bcs.n	b6626 <ultoa+0x38>
            *ptr++ = '0';
   b6604:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6608:	e7fa      	b.n	b6600 <ultoa+0x12>
            result.quot = a/radix;
   b660a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b660e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b6612:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6614:	2809      	cmp	r0, #9
                *ptr += '0';
   b6616:	bf94      	ite	ls
   b6618:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b661a:	3157      	addhi	r1, #87	; 0x57
   b661c:	b2c9      	uxtb	r1, r1
   b661e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b6622:	4630      	mov	r0, r6
	while(a){
   b6624:	e7e9      	b.n	b65fa <ultoa+0xc>

	*ptr = '\0';
   b6626:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6628:	4620      	mov	r0, r4
	*ptr = '\0';
   b662a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b662c:	f7ff ffce 	bl	b65cc <_Z11str_reversePc>
	return buffer;
   b6630:	4620      	mov	r0, r4
}
   b6632:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6634:	2000      	movs	r0, #0
   b6636:	e7fc      	b.n	b6632 <ultoa+0x44>

000b6638 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6638:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b663a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b663c:	460c      	mov	r4, r1
   b663e:	4615      	mov	r5, r2
	if(a<0){
   b6640:	da0e      	bge.n	b6660 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6646:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b664a:	bf14      	ite	ne
   b664c:	4258      	negne	r0, r3
   b664e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b6650:	2301      	movs	r3, #1
		*buffer = '-';
   b6652:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6654:	462a      	mov	r2, r5
   b6656:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6658:	f7ff ffc9 	bl	b65ee <ultoa>
	}
	return buffer;
}
   b665c:	4620      	mov	r0, r4
   b665e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b6660:	2301      	movs	r3, #1
   b6662:	e7f9      	b.n	b6658 <itoa+0x20>

000b6664 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6664:	b510      	push	{r4, lr}
   b6666:	4604      	mov	r4, r0
{
	free(buffer);
   b6668:	6800      	ldr	r0, [r0, #0]
   b666a:	f7ff fe6f 	bl	b634c <free>
}
   b666e:	4620      	mov	r0, r4
   b6670:	bd10      	pop	{r4, pc}

000b6672 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6672:	b510      	push	{r4, lr}
   b6674:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6676:	6800      	ldr	r0, [r0, #0]
   b6678:	b108      	cbz	r0, b667e <_ZN6String10invalidateEv+0xc>
   b667a:	f7ff fe67 	bl	b634c <free>
	buffer = NULL;
   b667e:	2300      	movs	r3, #0
	capacity = len = 0;
   b6680:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6684:	6023      	str	r3, [r4, #0]
}
   b6686:	bd10      	pop	{r4, pc}

000b6688 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6688:	b538      	push	{r3, r4, r5, lr}
   b668a:	4604      	mov	r4, r0
   b668c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b668e:	6800      	ldr	r0, [r0, #0]
   b6690:	3101      	adds	r1, #1
   b6692:	f7ff fe63 	bl	b635c <realloc>
	if (newbuffer) {
   b6696:	b110      	cbz	r0, b669e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6698:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b669c:	2001      	movs	r0, #1
	}
	return 0;
}
   b669e:	bd38      	pop	{r3, r4, r5, pc}

000b66a0 <_ZN6String7reserveEj>:
{
   b66a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b66a2:	6803      	ldr	r3, [r0, #0]
{
   b66a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b66a6:	b123      	cbz	r3, b66b2 <_ZN6String7reserveEj+0x12>
   b66a8:	6843      	ldr	r3, [r0, #4]
   b66aa:	428b      	cmp	r3, r1
   b66ac:	d301      	bcc.n	b66b2 <_ZN6String7reserveEj+0x12>
   b66ae:	2001      	movs	r0, #1
}
   b66b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b66b2:	4620      	mov	r0, r4
   b66b4:	f7ff ffe8 	bl	b6688 <_ZN6String12changeBufferEj>
   b66b8:	2800      	cmp	r0, #0
   b66ba:	d0f9      	beq.n	b66b0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b66bc:	68a3      	ldr	r3, [r4, #8]
   b66be:	2b00      	cmp	r3, #0
   b66c0:	d1f5      	bne.n	b66ae <_ZN6String7reserveEj+0xe>
   b66c2:	6822      	ldr	r2, [r4, #0]
   b66c4:	7013      	strb	r3, [r2, #0]
   b66c6:	e7f2      	b.n	b66ae <_ZN6String7reserveEj+0xe>

000b66c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b66c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b66ca:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b66cc:	4611      	mov	r1, r2
   b66ce:	9201      	str	r2, [sp, #4]
{
   b66d0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b66d2:	f7ff ffe5 	bl	b66a0 <_ZN6String7reserveEj>
   b66d6:	9a01      	ldr	r2, [sp, #4]
   b66d8:	b928      	cbnz	r0, b66e6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b66da:	4620      	mov	r0, r4
   b66dc:	f7ff ffc9 	bl	b6672 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b66e0:	4620      	mov	r0, r4
   b66e2:	b003      	add	sp, #12
   b66e4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b66e6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b66e8:	4629      	mov	r1, r5
   b66ea:	6820      	ldr	r0, [r4, #0]
   b66ec:	f001 fdf6 	bl	b82dc <memcpy>
	buffer[len] = 0;
   b66f0:	6822      	ldr	r2, [r4, #0]
   b66f2:	68a3      	ldr	r3, [r4, #8]
   b66f4:	2100      	movs	r1, #0
   b66f6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b66f8:	e7f2      	b.n	b66e0 <_ZN6String4copyEPKcj+0x18>

000b66fa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b66fa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b66fc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b66fe:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6702:	4604      	mov	r4, r0
	len = 0;
   b6704:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6706:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6708:	b141      	cbz	r1, b671c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b670a:	4608      	mov	r0, r1
   b670c:	9101      	str	r1, [sp, #4]
   b670e:	f001 fe3b 	bl	b8388 <strlen>
   b6712:	9901      	ldr	r1, [sp, #4]
   b6714:	4602      	mov	r2, r0
   b6716:	4620      	mov	r0, r4
   b6718:	f7ff ffd6 	bl	b66c8 <_ZN6String4copyEPKcj>
}
   b671c:	4620      	mov	r0, r4
   b671e:	b002      	add	sp, #8
   b6720:	bd10      	pop	{r4, pc}

000b6722 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6722:	4288      	cmp	r0, r1
{
   b6724:	b510      	push	{r4, lr}
   b6726:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6728:	d005      	beq.n	b6736 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b672a:	680b      	ldr	r3, [r1, #0]
   b672c:	b12b      	cbz	r3, b673a <_ZN6StringaSERKS_+0x18>
   b672e:	688a      	ldr	r2, [r1, #8]
   b6730:	4619      	mov	r1, r3
   b6732:	f7ff ffc9 	bl	b66c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6736:	4620      	mov	r0, r4
   b6738:	bd10      	pop	{r4, pc}
	else invalidate();
   b673a:	f7ff ff9a 	bl	b6672 <_ZN6String10invalidateEv>
   b673e:	e7fa      	b.n	b6736 <_ZN6StringaSERKS_+0x14>

000b6740 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6740:	b510      	push	{r4, lr}
	buffer = NULL;
   b6742:	2300      	movs	r3, #0
String::String(const String &value)
   b6744:	4604      	mov	r4, r0
	capacity = 0;
   b6746:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b674a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b674c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b674e:	f7ff ffe8 	bl	b6722 <_ZN6StringaSERKS_>
}
   b6752:	4620      	mov	r0, r4
   b6754:	bd10      	pop	{r4, pc}

000b6756 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6756:	b513      	push	{r0, r1, r4, lr}
   b6758:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b675a:	b159      	cbz	r1, b6774 <_ZN6StringaSEPKc+0x1e>
   b675c:	4608      	mov	r0, r1
   b675e:	9101      	str	r1, [sp, #4]
   b6760:	f001 fe12 	bl	b8388 <strlen>
   b6764:	9901      	ldr	r1, [sp, #4]
   b6766:	4602      	mov	r2, r0
   b6768:	4620      	mov	r0, r4
   b676a:	f7ff ffad 	bl	b66c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b676e:	4620      	mov	r0, r4
   b6770:	b002      	add	sp, #8
   b6772:	bd10      	pop	{r4, pc}
	else invalidate();
   b6774:	f7ff ff7d 	bl	b6672 <_ZN6String10invalidateEv>
   b6778:	e7f9      	b.n	b676e <_ZN6StringaSEPKc+0x18>

000b677a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b677a:	b510      	push	{r4, lr}
   b677c:	4604      	mov	r4, r0
   b677e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6780:	2300      	movs	r3, #0
	capacity = 0;
   b6782:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6786:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6788:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b678a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b678c:	a901      	add	r1, sp, #4
   b678e:	f7ff ff53 	bl	b6638 <itoa>
	*this = buf;
   b6792:	a901      	add	r1, sp, #4
   b6794:	4620      	mov	r0, r4
   b6796:	f7ff ffde 	bl	b6756 <_ZN6StringaSEPKc>
}
   b679a:	4620      	mov	r0, r4
   b679c:	b00a      	add	sp, #40	; 0x28
   b679e:	bd10      	pop	{r4, pc}

000b67a0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b67a0:	b570      	push	{r4, r5, r6, lr}
   b67a2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b67a4:	460e      	mov	r6, r1
   b67a6:	b909      	cbnz	r1, b67ac <_ZN6String6concatEPKcj+0xc>
   b67a8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b67aa:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b67ac:	b16a      	cbz	r2, b67ca <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b67ae:	6884      	ldr	r4, [r0, #8]
   b67b0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b67b2:	4621      	mov	r1, r4
   b67b4:	f7ff ff74 	bl	b66a0 <_ZN6String7reserveEj>
   b67b8:	2800      	cmp	r0, #0
   b67ba:	d0f5      	beq.n	b67a8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b67bc:	6828      	ldr	r0, [r5, #0]
   b67be:	68ab      	ldr	r3, [r5, #8]
   b67c0:	4631      	mov	r1, r6
   b67c2:	4418      	add	r0, r3
   b67c4:	f001 fdd8 	bl	b8378 <strcpy>
	len = newlen;
   b67c8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b67ca:	2001      	movs	r0, #1
   b67cc:	e7ed      	b.n	b67aa <_ZN6String6concatEPKcj+0xa>

000b67ce <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b67ce:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b67d0:	2300      	movs	r3, #0
	buf[0] = c;
   b67d2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b67d6:	2201      	movs	r2, #1
   b67d8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b67da:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b67de:	f7ff ffdf 	bl	b67a0 <_ZN6String6concatEPKcj>
}
   b67e2:	b003      	add	sp, #12
   b67e4:	f85d fb04 	ldr.w	pc, [sp], #4

000b67e8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b67e8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b67ea:	688a      	ldr	r2, [r1, #8]
   b67ec:	6809      	ldr	r1, [r1, #0]
{
   b67ee:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b67f0:	f7ff ffd6 	bl	b67a0 <_ZN6String6concatEPKcj>
   b67f4:	b910      	cbnz	r0, b67fc <_ZplRK15StringSumHelperRK6String+0x14>
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7ff ff3b 	bl	b6672 <_ZN6String10invalidateEv>
	return a;
}
   b67fc:	4620      	mov	r0, r4
   b67fe:	bd10      	pop	{r4, pc}

000b6800 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b6800:	b513      	push	{r0, r1, r4, lr}
   b6802:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6804:	b929      	cbnz	r1, b6812 <_ZplRK15StringSumHelperPKc+0x12>
   b6806:	4620      	mov	r0, r4
   b6808:	f7ff ff33 	bl	b6672 <_ZN6String10invalidateEv>
	return a;
}
   b680c:	4620      	mov	r0, r4
   b680e:	b002      	add	sp, #8
   b6810:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6812:	4608      	mov	r0, r1
   b6814:	9101      	str	r1, [sp, #4]
   b6816:	f001 fdb7 	bl	b8388 <strlen>
   b681a:	9901      	ldr	r1, [sp, #4]
   b681c:	4602      	mov	r2, r0
   b681e:	4620      	mov	r0, r4
   b6820:	f7ff ffbe 	bl	b67a0 <_ZN6String6concatEPKcj>
   b6824:	2800      	cmp	r0, #0
   b6826:	d0ee      	beq.n	b6806 <_ZplRK15StringSumHelperPKc+0x6>
   b6828:	e7f0      	b.n	b680c <_ZplRK15StringSumHelperPKc+0xc>
	...

000b682c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b682c:	4802      	ldr	r0, [pc, #8]	; (b6838 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b682e:	2300      	movs	r3, #0
   b6830:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6832:	f7ff bb6f 	b.w	b5f14 <os_mutex_recursive_create>
   b6836:	bf00      	nop
   b6838:	2003e6dc 	.word	0x2003e6dc

000b683c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b683e:	4606      	mov	r6, r0
   b6840:	460d      	mov	r5, r1
  size_t n = 0;
   b6842:	188f      	adds	r7, r1, r2
   b6844:	2400      	movs	r4, #0
  while (size--) {
   b6846:	42bd      	cmp	r5, r7
   b6848:	d00c      	beq.n	b6864 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b684a:	6833      	ldr	r3, [r6, #0]
   b684c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6850:	689b      	ldr	r3, [r3, #8]
   b6852:	4630      	mov	r0, r6
   b6854:	4798      	blx	r3
     if (chunk>=0)
   b6856:	1e03      	subs	r3, r0, #0
   b6858:	db01      	blt.n	b685e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b685a:	441c      	add	r4, r3
  while (size--) {
   b685c:	e7f3      	b.n	b6846 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b685e:	2c00      	cmp	r4, #0
   b6860:	bf08      	it	eq
   b6862:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6864:	4620      	mov	r0, r4
   b6866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6868 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6868:	b513      	push	{r0, r1, r4, lr}
   b686a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b686c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b686e:	b159      	cbz	r1, b6888 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6870:	9101      	str	r1, [sp, #4]
   b6872:	f001 fd89 	bl	b8388 <strlen>
   b6876:	6823      	ldr	r3, [r4, #0]
   b6878:	9901      	ldr	r1, [sp, #4]
   b687a:	68db      	ldr	r3, [r3, #12]
   b687c:	4602      	mov	r2, r0
   b687e:	4620      	mov	r0, r4
    }
   b6880:	b002      	add	sp, #8
   b6882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6886:	4718      	bx	r3
    }
   b6888:	b002      	add	sp, #8
   b688a:	bd10      	pop	{r4, pc}

000b688c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b688c:	b508      	push	{r3, lr}
  return write(str);
   b688e:	f7ff ffeb 	bl	b6868 <_ZN5Print5writeEPKc>
}
   b6892:	bd08      	pop	{r3, pc}

000b6894 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6894:	6803      	ldr	r3, [r0, #0]
   b6896:	689b      	ldr	r3, [r3, #8]
   b6898:	4718      	bx	r3

000b689a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b689a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b689c:	210d      	movs	r1, #13
{
   b689e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b68a0:	f7ff fff8 	bl	b6894 <_ZN5Print5printEc>
  n += print('\n');
   b68a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b68a6:	4604      	mov	r4, r0
  n += print('\n');
   b68a8:	4628      	mov	r0, r5
   b68aa:	f7ff fff3 	bl	b6894 <_ZN5Print5printEc>
  return n;
}
   b68ae:	4420      	add	r0, r4
   b68b0:	bd38      	pop	{r3, r4, r5, pc}

000b68b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b68b2:	b538      	push	{r3, r4, r5, lr}
   b68b4:	4605      	mov	r5, r0
  return write(str);
   b68b6:	f7ff ffd7 	bl	b6868 <_ZN5Print5writeEPKc>
   b68ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b68bc:	4628      	mov	r0, r5
   b68be:	f7ff ffec 	bl	b689a <_ZN5Print7printlnEv>
  return n;
}
   b68c2:	4420      	add	r0, r4
   b68c4:	bd38      	pop	{r3, r4, r5, pc}

000b68c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b68c6:	b530      	push	{r4, r5, lr}
   b68c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b68ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b68cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b68ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b68d2:	bf98      	it	ls
   b68d4:	220a      	movls	r2, #10
   b68d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b68d8:	460d      	mov	r5, r1
   b68da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b68de:	fb01 5312 	mls	r3, r1, r2, r5
   b68e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b68e6:	2b09      	cmp	r3, #9
   b68e8:	bf94      	ite	ls
   b68ea:	3330      	addls	r3, #48	; 0x30
   b68ec:	3337      	addhi	r3, #55	; 0x37
   b68ee:	b2db      	uxtb	r3, r3
  } while(n);
   b68f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b68f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b68f6:	d9ef      	bls.n	b68d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b68f8:	4621      	mov	r1, r4
   b68fa:	f7ff ffb5 	bl	b6868 <_ZN5Print5writeEPKc>
}
   b68fe:	b00b      	add	sp, #44	; 0x2c
   b6900:	bd30      	pop	{r4, r5, pc}

000b6902 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6906:	b086      	sub	sp, #24
   b6908:	af00      	add	r7, sp, #0
   b690a:	4605      	mov	r5, r0
   b690c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b690e:	1d38      	adds	r0, r7, #4
   b6910:	2114      	movs	r1, #20
{
   b6912:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6914:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6916:	f7ff fd29 	bl	b636c <vsnprintf>

    if (n<bufsize)
   b691a:	2813      	cmp	r0, #19
   b691c:	d80e      	bhi.n	b693c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b691e:	1d39      	adds	r1, r7, #4
   b6920:	4628      	mov	r0, r5
   b6922:	f7ff ffa1 	bl	b6868 <_ZN5Print5writeEPKc>
   b6926:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6928:	b11e      	cbz	r6, b6932 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b692a:	4628      	mov	r0, r5
   b692c:	f7ff ffb5 	bl	b689a <_ZN5Print7printlnEv>
   b6930:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6932:	4620      	mov	r0, r4
   b6934:	3718      	adds	r7, #24
   b6936:	46bd      	mov	sp, r7
   b6938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b693c:	f100 0308 	add.w	r3, r0, #8
   b6940:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6944:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6946:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b694a:	4622      	mov	r2, r4
   b694c:	1c41      	adds	r1, r0, #1
   b694e:	683b      	ldr	r3, [r7, #0]
   b6950:	4668      	mov	r0, sp
   b6952:	f7ff fd0b 	bl	b636c <vsnprintf>
  return write(str);
   b6956:	4669      	mov	r1, sp
   b6958:	4628      	mov	r0, r5
   b695a:	f7ff ff85 	bl	b6868 <_ZN5Print5writeEPKc>
   b695e:	4604      	mov	r4, r0
   b6960:	46c5      	mov	sp, r8
   b6962:	e7e1      	b.n	b6928 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6964 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6964:	b510      	push	{r4, lr}
   b6966:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6968:	f7ff fac4 	bl	b5ef4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b696c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b696e:	6823      	ldr	r3, [r4, #0]
   b6970:	4620      	mov	r0, r4
   b6972:	695b      	ldr	r3, [r3, #20]
   b6974:	4798      	blx	r3
    if (c >= 0) return c;
   b6976:	2800      	cmp	r0, #0
   b6978:	da08      	bge.n	b698c <_ZN6Stream9timedReadEv+0x28>
   b697a:	f7ff fabb 	bl	b5ef4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b697e:	68e3      	ldr	r3, [r4, #12]
   b6980:	1ac0      	subs	r0, r0, r3
   b6982:	68a3      	ldr	r3, [r4, #8]
   b6984:	4298      	cmp	r0, r3
   b6986:	d3f2      	bcc.n	b696e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6988:	f04f 30ff 	mov.w	r0, #4294967295
}
   b698c:	bd10      	pop	{r4, pc}
	...

000b6990 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b6990:	b538      	push	{r3, r4, r5, lr}
   b6992:	460d      	mov	r5, r1
  String ret;
   b6994:	4907      	ldr	r1, [pc, #28]	; (b69b4 <_ZN6Stream10readStringEv+0x24>)
{
   b6996:	4604      	mov	r4, r0
  String ret;
   b6998:	f7ff feaf 	bl	b66fa <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b699c:	4628      	mov	r0, r5
   b699e:	f7ff ffe1 	bl	b6964 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b69a2:	2800      	cmp	r0, #0
   b69a4:	db04      	blt.n	b69b0 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b69a6:	b2c1      	uxtb	r1, r0
   b69a8:	4620      	mov	r0, r4
   b69aa:	f7ff ff10 	bl	b67ce <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b69ae:	e7f5      	b.n	b699c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b69b0:	4620      	mov	r0, r4
   b69b2:	bd38      	pop	{r3, r4, r5, pc}
   b69b4:	000b84a8 	.word	0x000b84a8

000b69b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b69b8:	4b01      	ldr	r3, [pc, #4]	; (b69c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b69ba:	4a02      	ldr	r2, [pc, #8]	; (b69c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b69bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b69be:	4770      	bx	lr
   b69c0:	2003e6e0 	.word	0x2003e6e0
   b69c4:	000b8c44 	.word	0x000b8c44

000b69c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b69c8:	4b02      	ldr	r3, [pc, #8]	; (b69d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b69ca:	681a      	ldr	r2, [r3, #0]
   b69cc:	4b02      	ldr	r3, [pc, #8]	; (b69d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b69ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b69d0:	4770      	bx	lr
   b69d2:	bf00      	nop
   b69d4:	2003e51c 	.word	0x2003e51c
   b69d8:	2003e6e4 	.word	0x2003e6e4

000b69dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b69dc:	2100      	movs	r1, #0
   b69de:	f7ff bc21 	b.w	b6224 <system_delay_ms>
	...

000b69e4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b69e4:	4b01      	ldr	r3, [pc, #4]	; (b69ec <_GLOBAL__sub_I_RGB+0x8>)
   b69e6:	2200      	movs	r2, #0
   b69e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b69ea:	4770      	bx	lr
   b69ec:	2003e6e8 	.word	0x2003e6e8

000b69f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b69f0:	4b01      	ldr	r3, [pc, #4]	; (b69f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b69f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b69f4:	4770      	bx	lr
   b69f6:	bf00      	nop
   b69f8:	2003e520 	.word	0x2003e520

000b69fc <serialEventRun>:
{
   b69fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b69fe:	4b0b      	ldr	r3, [pc, #44]	; (b6a2c <serialEventRun+0x30>)
   b6a00:	b143      	cbz	r3, b6a14 <serialEventRun+0x18>
   b6a02:	f000 f981 	bl	b6d08 <_Z16_fetch_usbserialv>
   b6a06:	6803      	ldr	r3, [r0, #0]
   b6a08:	691b      	ldr	r3, [r3, #16]
   b6a0a:	4798      	blx	r3
   b6a0c:	2800      	cmp	r0, #0
   b6a0e:	dd01      	ble.n	b6a14 <serialEventRun+0x18>
        serialEvent();
   b6a10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6a14:	4b06      	ldr	r3, [pc, #24]	; (b6a30 <serialEventRun+0x34>)
   b6a16:	b143      	cbz	r3, b6a2a <serialEventRun+0x2e>
   b6a18:	f000 fec4 	bl	b77a4 <_Z22__fetch_global_Serial1v>
   b6a1c:	6803      	ldr	r3, [r0, #0]
   b6a1e:	691b      	ldr	r3, [r3, #16]
   b6a20:	4798      	blx	r3
   b6a22:	2800      	cmp	r0, #0
   b6a24:	dd01      	ble.n	b6a2a <serialEventRun+0x2e>
        serialEvent1();
   b6a26:	f3af 8000 	nop.w
}
   b6a2a:	bd08      	pop	{r3, pc}
	...

000b6a34 <_post_loop>:
{
   b6a34:	b508      	push	{r3, lr}
	serialEventRun();
   b6a36:	f7ff ffe1 	bl	b69fc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6a3a:	f7ff fa5b 	bl	b5ef4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6a3e:	4b01      	ldr	r3, [pc, #4]	; (b6a44 <_post_loop+0x10>)
   b6a40:	6018      	str	r0, [r3, #0]
}
   b6a42:	bd08      	pop	{r3, pc}
   b6a44:	2003e740 	.word	0x2003e740

000b6a48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a48:	4805      	ldr	r0, [pc, #20]	; (b6a60 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6a4a:	4a06      	ldr	r2, [pc, #24]	; (b6a64 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6a4c:	4906      	ldr	r1, [pc, #24]	; (b6a68 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6a4e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a50:	1a12      	subs	r2, r2, r0
   b6a52:	f001 fc43 	bl	b82dc <memcpy>
    __backup_sram_signature = signature;
   b6a56:	4b05      	ldr	r3, [pc, #20]	; (b6a6c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6a58:	4a05      	ldr	r2, [pc, #20]	; (b6a70 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6a5a:	601a      	str	r2, [r3, #0]
}
   b6a5c:	bd08      	pop	{r3, pc}
   b6a5e:	bf00      	nop
   b6a60:	2003f400 	.word	0x2003f400
   b6a64:	2003f404 	.word	0x2003f404
   b6a68:	000b8fd4 	.word	0x000b8fd4
   b6a6c:	2003f400 	.word	0x2003f400
   b6a70:	9a271c1e 	.word	0x9a271c1e

000b6a74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6a74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a76:	2300      	movs	r3, #0
   b6a78:	9300      	str	r3, [sp, #0]
   b6a7a:	461a      	mov	r2, r3
   b6a7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a80:	f7ff fbe2 	bl	b6248 <system_ctrl_set_result>
}
   b6a84:	b003      	add	sp, #12
   b6a86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6a8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6a8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6a8e:	8843      	ldrh	r3, [r0, #2]
   b6a90:	2b0a      	cmp	r3, #10
   b6a92:	d008      	beq.n	b6aa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6a94:	2b50      	cmp	r3, #80	; 0x50
   b6a96:	d10b      	bne.n	b6ab0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6a98:	4b09      	ldr	r3, [pc, #36]	; (b6ac0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6a9a:	681b      	ldr	r3, [r3, #0]
   b6a9c:	b14b      	cbz	r3, b6ab2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6a9e:	b003      	add	sp, #12
   b6aa0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6aa4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6aa6:	f7ff ffe5 	bl	b6a74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6aaa:	b003      	add	sp, #12
   b6aac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6ab0:	2300      	movs	r3, #0
   b6ab2:	9300      	str	r3, [sp, #0]
   b6ab4:	461a      	mov	r2, r3
   b6ab6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6aba:	f7ff fbc5 	bl	b6248 <system_ctrl_set_result>
}
   b6abe:	e7f4      	b.n	b6aaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6ac0:	2003e6fc 	.word	0x2003e6fc

000b6ac4 <module_user_init_hook>:
{
   b6ac4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6ac6:	4812      	ldr	r0, [pc, #72]	; (b6b10 <module_user_init_hook+0x4c>)
   b6ac8:	2100      	movs	r1, #0
   b6aca:	f7ff fc67 	bl	b639c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6ace:	4b11      	ldr	r3, [pc, #68]	; (b6b14 <module_user_init_hook+0x50>)
   b6ad0:	681a      	ldr	r2, [r3, #0]
   b6ad2:	4b11      	ldr	r3, [pc, #68]	; (b6b18 <module_user_init_hook+0x54>)
   b6ad4:	429a      	cmp	r2, r3
   b6ad6:	4b11      	ldr	r3, [pc, #68]	; (b6b1c <module_user_init_hook+0x58>)
   b6ad8:	bf0c      	ite	eq
   b6ada:	2201      	moveq	r2, #1
   b6adc:	2200      	movne	r2, #0
   b6ade:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6ae0:	d001      	beq.n	b6ae6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6ae2:	f7ff ffb1 	bl	b6a48 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6ae6:	f7ff f9ed 	bl	b5ec4 <HAL_RNG_GetRandomNumber>
   b6aea:	4604      	mov	r4, r0
    srand(seed);
   b6aec:	f001 fc0c 	bl	b8308 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6af0:	4b0b      	ldr	r3, [pc, #44]	; (b6b20 <module_user_init_hook+0x5c>)
   b6af2:	b113      	cbz	r3, b6afa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6af4:	4620      	mov	r0, r4
   b6af6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6afa:	2100      	movs	r1, #0
   b6afc:	4808      	ldr	r0, [pc, #32]	; (b6b20 <module_user_init_hook+0x5c>)
   b6afe:	f7ff fc15 	bl	b632c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6b06:	4807      	ldr	r0, [pc, #28]	; (b6b24 <module_user_init_hook+0x60>)
   b6b08:	2100      	movs	r1, #0
   b6b0a:	f7ff bb93 	b.w	b6234 <system_ctrl_set_app_request_handler>
   b6b0e:	bf00      	nop
   b6b10:	000b69f1 	.word	0x000b69f1
   b6b14:	2003f400 	.word	0x2003f400
   b6b18:	9a271c1e 	.word	0x9a271c1e
   b6b1c:	2003e6f8 	.word	0x2003e6f8
   b6b20:	00000000 	.word	0x00000000
   b6b24:	000b6a8d 	.word	0x000b6a8d

000b6b28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6b28:	4770      	bx	lr

000b6b2a <_ZN9IPAddressD0Ev>:
   b6b2a:	b510      	push	{r4, lr}
   b6b2c:	2118      	movs	r1, #24
   b6b2e:	4604      	mov	r4, r0
   b6b30:	f7fd fab5 	bl	b409e <_ZdlPvj>
   b6b34:	4620      	mov	r0, r4
   b6b36:	bd10      	pop	{r4, pc}

000b6b38 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6b38:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6b3a:	7d03      	ldrb	r3, [r0, #20]
   b6b3c:	2b06      	cmp	r3, #6
{
   b6b3e:	b08d      	sub	sp, #52	; 0x34
   b6b40:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b42:	f100 0704 	add.w	r7, r0, #4
   b6b46:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6b4a:	d012      	beq.n	b6b72 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6b4c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6b50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6b54:	220a      	movs	r2, #10
   b6b56:	4630      	mov	r0, r6
   b6b58:	f7ff feb5 	bl	b68c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6b5c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6b5e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6b60:	d019      	beq.n	b6b96 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6b62:	2c00      	cmp	r4, #0
   b6b64:	d0f4      	beq.n	b6b50 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6b66:	212e      	movs	r1, #46	; 0x2e
   b6b68:	4630      	mov	r0, r6
   b6b6a:	f7ff fe93 	bl	b6894 <_ZN5Print5printEc>
   b6b6e:	4404      	add	r4, r0
   b6b70:	e7ee      	b.n	b6b50 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b72:	232f      	movs	r3, #47	; 0x2f
   b6b74:	466a      	mov	r2, sp
   b6b76:	4639      	mov	r1, r7
   b6b78:	200a      	movs	r0, #10
		buf[0] = 0;
   b6b7a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b7e:	f7ff f9d1 	bl	b5f24 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6b82:	4668      	mov	r0, sp
   b6b84:	f001 fc00 	bl	b8388 <strlen>
   b6b88:	6833      	ldr	r3, [r6, #0]
   b6b8a:	4602      	mov	r2, r0
   b6b8c:	68db      	ldr	r3, [r3, #12]
   b6b8e:	4669      	mov	r1, sp
   b6b90:	4630      	mov	r0, r6
   b6b92:	4798      	blx	r3
   b6b94:	4604      	mov	r4, r0
    }
    return n;
}
   b6b96:	4620      	mov	r0, r4
   b6b98:	b00d      	add	sp, #52	; 0x34
   b6b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6b9c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6b9c:	b510      	push	{r4, lr}
   b6b9e:	4b05      	ldr	r3, [pc, #20]	; (b6bb4 <_ZN9IPAddressC1Ev+0x18>)
   b6ba0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6ba2:	2211      	movs	r2, #17
   b6ba4:	f840 3b04 	str.w	r3, [r0], #4
   b6ba8:	2100      	movs	r1, #0
   b6baa:	f001 fba5 	bl	b82f8 <memset>
}
   b6bae:	4620      	mov	r0, r4
   b6bb0:	bd10      	pop	{r4, pc}
   b6bb2:	bf00      	nop
   b6bb4:	000b8c6c 	.word	0x000b8c6c

000b6bb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6bb8:	4603      	mov	r3, r0
   b6bba:	4a07      	ldr	r2, [pc, #28]	; (b6bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6bbc:	b510      	push	{r4, lr}
   b6bbe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6bc2:	f101 0210 	add.w	r2, r1, #16
   b6bc6:	f851 4b04 	ldr.w	r4, [r1], #4
   b6bca:	f843 4b04 	str.w	r4, [r3], #4
   b6bce:	4291      	cmp	r1, r2
   b6bd0:	d1f9      	bne.n	b6bc6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6bd2:	780a      	ldrb	r2, [r1, #0]
   b6bd4:	701a      	strb	r2, [r3, #0]
}
   b6bd6:	bd10      	pop	{r4, pc}
   b6bd8:	000b8c6c 	.word	0x000b8c6c

000b6bdc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6bdc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6bde:	2b04      	cmp	r3, #4
   b6be0:	d104      	bne.n	b6bec <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6be2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6be4:	3800      	subs	r0, #0
   b6be6:	bf18      	it	ne
   b6be8:	2001      	movne	r0, #1
   b6bea:	4770      	bx	lr
    } else if (version() == 6) {
   b6bec:	2b06      	cmp	r3, #6
   b6bee:	d107      	bne.n	b6c00 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6bf0:	6843      	ldr	r3, [r0, #4]
   b6bf2:	b93b      	cbnz	r3, b6c04 <_ZNK9IPAddresscvbEv+0x28>
   b6bf4:	6883      	ldr	r3, [r0, #8]
   b6bf6:	b92b      	cbnz	r3, b6c04 <_ZNK9IPAddresscvbEv+0x28>
   b6bf8:	68c3      	ldr	r3, [r0, #12]
   b6bfa:	b91b      	cbnz	r3, b6c04 <_ZNK9IPAddresscvbEv+0x28>
   b6bfc:	6900      	ldr	r0, [r0, #16]
   b6bfe:	e7f1      	b.n	b6be4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6c00:	2000      	movs	r0, #0
   b6c02:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6c04:	2001      	movs	r0, #1
}
   b6c06:	4770      	bx	lr

000b6c08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6c08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6c0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6c0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6c12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6c16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6c1a:	2304      	movs	r3, #4
   b6c1c:	6041      	str	r1, [r0, #4]
   b6c1e:	7503      	strb	r3, [r0, #20]
}
   b6c20:	bd10      	pop	{r4, pc}
	...

000b6c24 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6c24:	b507      	push	{r0, r1, r2, lr}
   b6c26:	4b06      	ldr	r3, [pc, #24]	; (b6c40 <_ZN9IPAddressC1EPKh+0x1c>)
   b6c28:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6c2a:	78cb      	ldrb	r3, [r1, #3]
   b6c2c:	9300      	str	r3, [sp, #0]
   b6c2e:	788b      	ldrb	r3, [r1, #2]
   b6c30:	784a      	ldrb	r2, [r1, #1]
   b6c32:	7809      	ldrb	r1, [r1, #0]
   b6c34:	f7ff ffe8 	bl	b6c08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6c38:	b003      	add	sp, #12
   b6c3a:	f85d fb04 	ldr.w	pc, [sp], #4
   b6c3e:	bf00      	nop
   b6c40:	000b8c6c 	.word	0x000b8c6c

000b6c44 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c44:	7441      	strb	r1, [r0, #17]
}
   b6c46:	4770      	bx	lr

000b6c48 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c48:	4770      	bx	lr

000b6c4a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6c4a:	4770      	bx	lr

000b6c4c <_ZN9USBSerial4readEv>:
{
   b6c4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6c4e:	2100      	movs	r1, #0
   b6c50:	7c00      	ldrb	r0, [r0, #16]
   b6c52:	f7ff faaf 	bl	b61b4 <HAL_USB_USART_Receive_Data>
}
   b6c56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c5a:	bd08      	pop	{r3, pc}

000b6c5c <_ZN9USBSerial4peekEv>:
{
   b6c5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6c5e:	2101      	movs	r1, #1
   b6c60:	7c00      	ldrb	r0, [r0, #16]
   b6c62:	f7ff faa7 	bl	b61b4 <HAL_USB_USART_Receive_Data>
}
   b6c66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c6a:	bd08      	pop	{r3, pc}

000b6c6c <_ZN9USBSerial17availableForWriteEv>:
{
   b6c6c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6c6e:	7c00      	ldrb	r0, [r0, #16]
   b6c70:	f7ff fa98 	bl	b61a4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6c74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c78:	bd08      	pop	{r3, pc}

000b6c7a <_ZN9USBSerial9availableEv>:
{
   b6c7a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6c7c:	7c00      	ldrb	r0, [r0, #16]
   b6c7e:	f7ff fa89 	bl	b6194 <HAL_USB_USART_Available_Data>
}
   b6c82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c86:	bd08      	pop	{r3, pc}

000b6c88 <_ZN9USBSerial5writeEh>:
{
   b6c88:	b513      	push	{r0, r1, r4, lr}
   b6c8a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c8c:	7c00      	ldrb	r0, [r0, #16]
{
   b6c8e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c90:	f7ff fa88 	bl	b61a4 <HAL_USB_USART_Available_Data_For_Write>
   b6c94:	2800      	cmp	r0, #0
   b6c96:	9901      	ldr	r1, [sp, #4]
   b6c98:	dc01      	bgt.n	b6c9e <_ZN9USBSerial5writeEh+0x16>
   b6c9a:	7c60      	ldrb	r0, [r4, #17]
   b6c9c:	b120      	cbz	r0, b6ca8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6c9e:	7c20      	ldrb	r0, [r4, #16]
   b6ca0:	f7ff fa90 	bl	b61c4 <HAL_USB_USART_Send_Data>
   b6ca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6ca8:	b002      	add	sp, #8
   b6caa:	bd10      	pop	{r4, pc}

000b6cac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6cac:	7c00      	ldrb	r0, [r0, #16]
   b6cae:	f7ff ba91 	b.w	b61d4 <HAL_USB_USART_Flush_Data>

000b6cb2 <_ZN9USBSerialD0Ev>:
   b6cb2:	b510      	push	{r4, lr}
   b6cb4:	2114      	movs	r1, #20
   b6cb6:	4604      	mov	r4, r0
   b6cb8:	f7fd f9f1 	bl	b409e <_ZdlPvj>
   b6cbc:	4620      	mov	r0, r4
   b6cbe:	bd10      	pop	{r4, pc}

000b6cc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6cc0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6cc6:	4604      	mov	r4, r0
   b6cc8:	4608      	mov	r0, r1
   b6cca:	2100      	movs	r1, #0
   b6ccc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6cd0:	4b04      	ldr	r3, [pc, #16]	; (b6ce4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6cd2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6cd4:	2301      	movs	r3, #1
  _serial = serial;
   b6cd6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6cd8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6cda:	4611      	mov	r1, r2
   b6cdc:	f7ff fa4a 	bl	b6174 <HAL_USB_USART_Init>
}
   b6ce0:	4620      	mov	r0, r4
   b6ce2:	bd10      	pop	{r4, pc}
   b6ce4:	000b8c80 	.word	0x000b8c80

000b6ce8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6ce8:	7c00      	ldrb	r0, [r0, #16]
   b6cea:	2200      	movs	r2, #0
   b6cec:	f7ff ba4a 	b.w	b6184 <HAL_USB_USART_Begin>

000b6cf0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6cf0:	7c00      	ldrb	r0, [r0, #16]
   b6cf2:	f7ff ba77 	b.w	b61e4 <HAL_USB_USART_Is_Connected>

000b6cf6 <_Z19acquireSerialBufferv>:
{
   b6cf6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6cf8:	2214      	movs	r2, #20
{
   b6cfa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6cfc:	2100      	movs	r1, #0
   b6cfe:	f001 fafb 	bl	b82f8 <memset>
}
   b6d02:	4620      	mov	r0, r4
   b6d04:	bd10      	pop	{r4, pc}
	...

000b6d08 <_Z16_fetch_usbserialv>:
{
   b6d08:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d0a:	4c0f      	ldr	r4, [pc, #60]	; (b6d48 <_Z16_fetch_usbserialv+0x40>)
{
   b6d0c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6d0e:	a803      	add	r0, sp, #12
   b6d10:	f7ff fff1 	bl	b6cf6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d14:	7821      	ldrb	r1, [r4, #0]
   b6d16:	f3bf 8f5b 	dmb	ish
   b6d1a:	f011 0101 	ands.w	r1, r1, #1
   b6d1e:	d10f      	bne.n	b6d40 <_Z16_fetch_usbserialv+0x38>
   b6d20:	4620      	mov	r0, r4
   b6d22:	9101      	str	r1, [sp, #4]
   b6d24:	f7fd f9ca 	bl	b40bc <__cxa_guard_acquire>
   b6d28:	9901      	ldr	r1, [sp, #4]
   b6d2a:	b148      	cbz	r0, b6d40 <_Z16_fetch_usbserialv+0x38>
   b6d2c:	aa03      	add	r2, sp, #12
   b6d2e:	4807      	ldr	r0, [pc, #28]	; (b6d4c <_Z16_fetch_usbserialv+0x44>)
   b6d30:	f7ff ffc6 	bl	b6cc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6d34:	4620      	mov	r0, r4
   b6d36:	f7fd f9c6 	bl	b40c6 <__cxa_guard_release>
   b6d3a:	4805      	ldr	r0, [pc, #20]	; (b6d50 <_Z16_fetch_usbserialv+0x48>)
   b6d3c:	f001 fac8 	bl	b82d0 <atexit>
	return _usbserial;
}
   b6d40:	4802      	ldr	r0, [pc, #8]	; (b6d4c <_Z16_fetch_usbserialv+0x44>)
   b6d42:	b008      	add	sp, #32
   b6d44:	bd10      	pop	{r4, pc}
   b6d46:	bf00      	nop
   b6d48:	2003e700 	.word	0x2003e700
   b6d4c:	2003e704 	.word	0x2003e704
   b6d50:	000b6c49 	.word	0x000b6c49

000b6d54 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d54:	4770      	bx	lr

000b6d56 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d56:	7441      	strb	r1, [r0, #17]
}
   b6d58:	4770      	bx	lr

000b6d5a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d5a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d5c:	7c00      	ldrb	r0, [r0, #16]
   b6d5e:	f7ff f929 	bl	b5fb4 <hal_usart_available_data_for_write>
}
   b6d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d66:	bd08      	pop	{r3, pc}

000b6d68 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6d68:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6d6a:	7c00      	ldrb	r0, [r0, #16]
   b6d6c:	f7ff f8fa 	bl	b5f64 <hal_usart_available>
}
   b6d70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d74:	bd08      	pop	{r3, pc}

000b6d76 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6d76:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6d78:	7c00      	ldrb	r0, [r0, #16]
   b6d7a:	f7ff f903 	bl	b5f84 <hal_usart_peek>
}
   b6d7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d82:	bd08      	pop	{r3, pc}

000b6d84 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6d84:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6d86:	7c00      	ldrb	r0, [r0, #16]
   b6d88:	f7ff f8f4 	bl	b5f74 <hal_usart_read>
}
   b6d8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d90:	bd08      	pop	{r3, pc}

000b6d92 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6d92:	7c00      	ldrb	r0, [r0, #16]
   b6d94:	f7ff b8fe 	b.w	b5f94 <hal_usart_flush>

000b6d98 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d9a:	7c45      	ldrb	r5, [r0, #17]
{
   b6d9c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d9e:	b12d      	cbz	r5, b6dac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6da0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6da2:	b003      	add	sp, #12
   b6da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6da8:	f7ff b8d4 	b.w	b5f54 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6dac:	7c00      	ldrb	r0, [r0, #16]
   b6dae:	9101      	str	r1, [sp, #4]
   b6db0:	f7ff f900 	bl	b5fb4 <hal_usart_available_data_for_write>
   b6db4:	2800      	cmp	r0, #0
   b6db6:	9901      	ldr	r1, [sp, #4]
   b6db8:	dcf2      	bgt.n	b6da0 <_ZN11USARTSerial5writeEh+0x8>
}
   b6dba:	4628      	mov	r0, r5
   b6dbc:	b003      	add	sp, #12
   b6dbe:	bd30      	pop	{r4, r5, pc}

000b6dc0 <_ZN11USARTSerialD0Ev>:
   b6dc0:	b510      	push	{r4, lr}
   b6dc2:	2114      	movs	r1, #20
   b6dc4:	4604      	mov	r4, r0
   b6dc6:	f7fd f96a 	bl	b409e <_ZdlPvj>
   b6dca:	4620      	mov	r0, r4
   b6dcc:	bd10      	pop	{r4, pc}
	...

000b6dd0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6dd0:	b510      	push	{r4, lr}
   b6dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6dd6:	4604      	mov	r4, r0
   b6dd8:	4608      	mov	r0, r1
   b6dda:	4611      	mov	r1, r2
   b6ddc:	2200      	movs	r2, #0
   b6dde:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6de2:	4b04      	ldr	r3, [pc, #16]	; (b6df4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6de4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6de6:	2301      	movs	r3, #1
  _serial = serial;
   b6de8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6dea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6dec:	f7ff f8ea 	bl	b5fc4 <hal_usart_init_ex>
}
   b6df0:	4620      	mov	r0, r4
   b6df2:	bd10      	pop	{r4, pc}
   b6df4:	000b8cb0 	.word	0x000b8cb0

000b6df8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6df8:	4770      	bx	lr

000b6dfa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dfc:	4606      	mov	r6, r0
   b6dfe:	4615      	mov	r5, r2
   b6e00:	460c      	mov	r4, r1
   b6e02:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6e04:	42bc      	cmp	r4, r7
   b6e06:	d006      	beq.n	b6e16 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6e08:	6833      	ldr	r3, [r6, #0]
   b6e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6e0e:	689b      	ldr	r3, [r3, #8]
   b6e10:	4630      	mov	r0, r6
   b6e12:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6e14:	e7f6      	b.n	b6e04 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6e16:	4628      	mov	r0, r5
   b6e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e1a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6e1a:	7c00      	ldrb	r0, [r0, #16]
   b6e1c:	2200      	movs	r2, #0
   b6e1e:	f7ff b8f1 	b.w	b6004 <hal_i2c_write>

000b6e22 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6e22:	7c00      	ldrb	r0, [r0, #16]
   b6e24:	2100      	movs	r1, #0
   b6e26:	f7ff b8f5 	b.w	b6014 <hal_i2c_available>

000b6e2a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6e2a:	7c00      	ldrb	r0, [r0, #16]
   b6e2c:	2100      	movs	r1, #0
   b6e2e:	f7ff b8f9 	b.w	b6024 <hal_i2c_read>

000b6e32 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6e32:	7c00      	ldrb	r0, [r0, #16]
   b6e34:	2100      	movs	r1, #0
   b6e36:	f7ff b8fd 	b.w	b6034 <hal_i2c_peek>

000b6e3a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6e3a:	7c00      	ldrb	r0, [r0, #16]
   b6e3c:	2100      	movs	r1, #0
   b6e3e:	f7ff b901 	b.w	b6044 <hal_i2c_flush>

000b6e42 <_ZN7TwoWireD0Ev>:
   b6e42:	b510      	push	{r4, lr}
   b6e44:	2114      	movs	r1, #20
   b6e46:	4604      	mov	r4, r0
   b6e48:	f7fd f929 	bl	b409e <_ZdlPvj>
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	bd10      	pop	{r4, pc}

000b6e50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6e50:	b538      	push	{r3, r4, r5, lr}
   b6e52:	4604      	mov	r4, r0
   b6e54:	4615      	mov	r5, r2
   b6e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e5a:	2200      	movs	r2, #0
   b6e5c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6e60:	4b09      	ldr	r3, [pc, #36]	; (b6e88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6e62:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6e64:	4608      	mov	r0, r1
   b6e66:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6e68:	4629      	mov	r1, r5
   b6e6a:	f7ff f8fb 	bl	b6064 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6e6e:	30bf      	adds	r0, #191	; 0xbf
   b6e70:	d108      	bne.n	b6e84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6e72:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6e74:	07db      	lsls	r3, r3, #31
   b6e76:	d505      	bpl.n	b6e84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6e78:	6868      	ldr	r0, [r5, #4]
   b6e7a:	f7ff fa67 	bl	b634c <free>
    free(conf.tx_buffer);
   b6e7e:	68e8      	ldr	r0, [r5, #12]
   b6e80:	f7ff fa64 	bl	b634c <free>
}
   b6e84:	4620      	mov	r0, r4
   b6e86:	bd38      	pop	{r3, r4, r5, pc}
   b6e88:	000b8ce0 	.word	0x000b8ce0

000b6e8c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6e8c:	2300      	movs	r3, #0
   b6e8e:	7c00      	ldrb	r0, [r0, #16]
   b6e90:	461a      	mov	r2, r3
   b6e92:	4619      	mov	r1, r3
   b6e94:	f7ff b89e 	b.w	b5fd4 <hal_i2c_begin>

000b6e98 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6e98:	7c00      	ldrb	r0, [r0, #16]
   b6e9a:	2200      	movs	r2, #0
   b6e9c:	f7ff b8a2 	b.w	b5fe4 <hal_i2c_begin_transmission>

000b6ea0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6ea0:	b2c9      	uxtb	r1, r1
   b6ea2:	f7ff bff9 	b.w	b6e98 <_ZN7TwoWire17beginTransmissionEh>

000b6ea6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6ea6:	7c00      	ldrb	r0, [r0, #16]
   b6ea8:	2200      	movs	r2, #0
   b6eaa:	f7ff b8a3 	b.w	b5ff4 <hal_i2c_end_transmission>

000b6eae <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6eae:	2101      	movs	r1, #1
   b6eb0:	f7ff bff9 	b.w	b6ea6 <_ZN7TwoWire15endTransmissionEh>

000b6eb4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6eb4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6eb6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6eb8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ebc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6ebe:	2201      	movs	r2, #1
   b6ec0:	f04f 33ff 	mov.w	r3, #4294967295
   b6ec4:	f10d 0107 	add.w	r1, sp, #7
   b6ec8:	47a0      	blx	r4
}
   b6eca:	b002      	add	sp, #8
   b6ecc:	bd10      	pop	{r4, pc}

000b6ece <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6ece:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6ed0:	6803      	ldr	r3, [r0, #0]
   b6ed2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6ed4:	f04f 33ff 	mov.w	r3, #4294967295
   b6ed8:	46a4      	mov	ip, r4
}
   b6eda:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6ede:	4760      	bx	ip

000b6ee0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6ee0:	b513      	push	{r0, r1, r4, lr}
   b6ee2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6ee4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6ee6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6eea:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6eec:	f10d 0107 	add.w	r1, sp, #7
   b6ef0:	2201      	movs	r2, #1
   b6ef2:	47a0      	blx	r4
}
   b6ef4:	b002      	add	sp, #8
   b6ef6:	bd10      	pop	{r4, pc}

000b6ef8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6ef8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6efa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6efc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f00:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f04:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6f06:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f08:	d008      	beq.n	b6f1c <_ZN9TCPClient4readEv+0x24>
   b6f0a:	6963      	ldr	r3, [r4, #20]
   b6f0c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6f10:	1c51      	adds	r1, r2, #1
   b6f12:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6f16:	4413      	add	r3, r2
   b6f18:	7918      	ldrb	r0, [r3, #4]
}
   b6f1a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f1c:	6803      	ldr	r3, [r0, #0]
   b6f1e:	691b      	ldr	r3, [r3, #16]
   b6f20:	4798      	blx	r3
   b6f22:	2800      	cmp	r0, #0
   b6f24:	d1f1      	bne.n	b6f0a <_ZN9TCPClient4readEv+0x12>
   b6f26:	f04f 30ff 	mov.w	r0, #4294967295
   b6f2a:	e7f6      	b.n	b6f1a <_ZN9TCPClient4readEv+0x22>

000b6f2c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6f2c:	4770      	bx	lr

000b6f2e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6f2e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6f30:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6f32:	43c0      	mvns	r0, r0
   b6f34:	0fc0      	lsrs	r0, r0, #31
   b6f36:	4770      	bx	lr

000b6f38 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f38:	4770      	bx	lr
	...

000b6f3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f3c:	4b06      	ldr	r3, [pc, #24]	; (b6f58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f3e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f40:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6f42:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f46:	d005      	beq.n	b6f54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f48:	4608      	mov	r0, r1
   b6f4a:	f000 fc91 	bl	b7870 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f4e:	2800      	cmp	r0, #0
   b6f50:	bf08      	it	eq
   b6f52:	2400      	moveq	r4, #0
      }
   b6f54:	4620      	mov	r0, r4
   b6f56:	bd10      	pop	{r4, pc}
   b6f58:	000b8c3c 	.word	0x000b8c3c

000b6f5c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f5c:	b510      	push	{r4, lr}
   b6f5e:	21ac      	movs	r1, #172	; 0xac
   b6f60:	4604      	mov	r4, r0
   b6f62:	f7fd f89c 	bl	b409e <_ZdlPvj>
   b6f66:	4620      	mov	r0, r4
   b6f68:	bd10      	pop	{r4, pc}

000b6f6a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6f6a:	21ac      	movs	r1, #172	; 0xac
   b6f6c:	f7fd b897 	b.w	b409e <_ZdlPvj>

000b6f70 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6f74:	f04f 0800 	mov.w	r8, #0
   b6f78:	b086      	sub	sp, #24
   b6f7a:	461c      	mov	r4, r3
   b6f7c:	f8c0 8004 	str.w	r8, [r0, #4]
   b6f80:	4605      	mov	r5, r0
   b6f82:	460e      	mov	r6, r1
   b6f84:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6f86:	4641      	mov	r1, r8
   b6f88:	2210      	movs	r2, #16
   b6f8a:	a802      	add	r0, sp, #8
   b6f8c:	f001 f9b4 	bl	b82f8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6f90:	1c63      	adds	r3, r4, #1
   b6f92:	d009      	beq.n	b6fa8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f98:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6f9c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6fa0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fa4:	435c      	muls	r4, r3
   b6fa6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6fa8:	6968      	ldr	r0, [r5, #20]
   b6faa:	2310      	movs	r3, #16
   b6fac:	9300      	str	r3, [sp, #0]
   b6fae:	6800      	ldr	r0, [r0, #0]
   b6fb0:	ab02      	add	r3, sp, #8
   b6fb2:	f241 0205 	movw	r2, #4101	; 0x1005
   b6fb6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6fba:	f7ff f85b 	bl	b6074 <sock_setsockopt>
    if (ret < 0) {
   b6fbe:	2800      	cmp	r0, #0
   b6fc0:	da07      	bge.n	b6fd2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6fc2:	f7ff f9db 	bl	b637c <__errno>
   b6fc6:	6803      	ldr	r3, [r0, #0]
   b6fc8:	606b      	str	r3, [r5, #4]
        return 0;
   b6fca:	2000      	movs	r0, #0
}
   b6fcc:	b006      	add	sp, #24
   b6fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6fd2:	6968      	ldr	r0, [r5, #20]
   b6fd4:	2300      	movs	r3, #0
   b6fd6:	6800      	ldr	r0, [r0, #0]
   b6fd8:	463a      	mov	r2, r7
   b6fda:	4631      	mov	r1, r6
   b6fdc:	f7ff f86a 	bl	b60b4 <sock_send>
    if (ret < 0) {
   b6fe0:	1e03      	subs	r3, r0, #0
   b6fe2:	dbee      	blt.n	b6fc2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6fe4:	4618      	mov	r0, r3
   b6fe6:	e7f1      	b.n	b6fcc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6fe8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6fe8:	b530      	push	{r4, r5, lr}
   b6fea:	b087      	sub	sp, #28
   b6fec:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6fee:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6ff0:	4668      	mov	r0, sp
   b6ff2:	f7ff fe17 	bl	b6c24 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ff8:	3404      	adds	r4, #4
   b6ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ffc:	682b      	ldr	r3, [r5, #0]
   b6ffe:	7023      	strb	r3, [r4, #0]
    }
   b7000:	b007      	add	sp, #28
   b7002:	bd30      	pop	{r4, r5, pc}

000b7004 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7004:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7006:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7008:	4b05      	ldr	r3, [pc, #20]	; (b7020 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b700a:	4604      	mov	r4, r0
   b700c:	358c      	adds	r5, #140	; 0x8c
   b700e:	f844 3b04 	str.w	r3, [r4], #4
   b7012:	4606      	mov	r6, r0
   b7014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7018:	682b      	ldr	r3, [r5, #0]
   b701a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b701c:	4630      	mov	r0, r6
   b701e:	bd70      	pop	{r4, r5, r6, pc}
   b7020:	000b8c6c 	.word	0x000b8c6c

000b7024 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7028:	4698      	mov	r8, r3
    stop();
   b702a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b702c:	b093      	sub	sp, #76	; 0x4c
   b702e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7030:	2400      	movs	r4, #0
    stop();
   b7032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7034:	4606      	mov	r6, r0
   b7036:	4617      	mov	r7, r2
    stop();
   b7038:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b703a:	4628      	mov	r0, r5
   b703c:	466b      	mov	r3, sp
   b703e:	4622      	mov	r2, r4
   b7040:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7042:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7044:	f7fe fefe 	bl	b5e44 <netdb_getaddrinfo>
   b7048:	4605      	mov	r5, r0
   b704a:	2800      	cmp	r0, #0
   b704c:	d163      	bne.n	b7116 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b704e:	9b00      	ldr	r3, [sp, #0]
   b7050:	2b00      	cmp	r3, #0
   b7052:	d04b      	beq.n	b70ec <_ZN9TCPClient7connectEPKctm+0xc8>
   b7054:	695b      	ldr	r3, [r3, #20]
   b7056:	2b00      	cmp	r3, #0
   b7058:	d048      	beq.n	b70ec <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b705a:	a806      	add	r0, sp, #24
   b705c:	f7ff fd9e 	bl	b6b9c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7060:	9b00      	ldr	r3, [sp, #0]
   b7062:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7064:	7863      	ldrb	r3, [r4, #1]
   b7066:	2b02      	cmp	r3, #2
   b7068:	d104      	bne.n	b7074 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b706a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b706c:	a806      	add	r0, sp, #24
   b706e:	f7ff ffbb 	bl	b6fe8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7072:	e026      	b.n	b70c2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7074:	2b0a      	cmp	r3, #10
   b7076:	d124      	bne.n	b70c2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7078:	2211      	movs	r2, #17
   b707a:	4629      	mov	r1, r5
   b707c:	a801      	add	r0, sp, #4
   b707e:	f001 f93b 	bl	b82f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7082:	68a3      	ldr	r3, [r4, #8]
   b7084:	2b00      	cmp	r3, #0
   b7086:	d038      	beq.n	b70fa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7088:	f104 0308 	add.w	r3, r4, #8
   b708c:	f10d 0c04 	add.w	ip, sp, #4
   b7090:	3418      	adds	r4, #24
   b7092:	6818      	ldr	r0, [r3, #0]
   b7094:	6859      	ldr	r1, [r3, #4]
   b7096:	4662      	mov	r2, ip
   b7098:	c203      	stmia	r2!, {r0, r1}
   b709a:	3308      	adds	r3, #8
   b709c:	42a3      	cmp	r3, r4
   b709e:	4694      	mov	ip, r2
   b70a0:	d1f7      	bne.n	b7092 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b70a2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b70a4:	a901      	add	r1, sp, #4
   b70a6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b70a8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b70ac:	f7ff fd84 	bl	b6bb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b70b0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b70b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b70b8:	ac07      	add	r4, sp, #28
   b70ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70bc:	f8dc 3000 	ldr.w	r3, [ip]
   b70c0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b70c2:	a806      	add	r0, sp, #24
   b70c4:	f7ff fd8a 	bl	b6bdc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b70c8:	b180      	cbz	r0, b70ec <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b70ca:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b70cc:	ad07      	add	r5, sp, #28
   b70ce:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b70d2:	4b12      	ldr	r3, [pc, #72]	; (b711c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b70d4:	930c      	str	r3, [sp, #48]	; 0x30
   b70d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70d8:	ac0d      	add	r4, sp, #52	; 0x34
   b70da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70dc:	682b      	ldr	r3, [r5, #0]
   b70de:	7023      	strb	r3, [r4, #0]
   b70e0:	463a      	mov	r2, r7
   b70e2:	4643      	mov	r3, r8
   b70e4:	a90c      	add	r1, sp, #48	; 0x30
   b70e6:	4630      	mov	r0, r6
   b70e8:	47c8      	blx	r9
   b70ea:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b70ec:	9800      	ldr	r0, [sp, #0]
   b70ee:	f7fe fea1 	bl	b5e34 <netdb_freeaddrinfo>
}
   b70f2:	4628      	mov	r0, r5
   b70f4:	b013      	add	sp, #76	; 0x4c
   b70f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b70fa:	68e3      	ldr	r3, [r4, #12]
   b70fc:	2b00      	cmp	r3, #0
   b70fe:	d1c3      	bne.n	b7088 <_ZN9TCPClient7connectEPKctm+0x64>
   b7100:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7104:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7108:	f7fe ff14 	bl	b5f34 <inet_htonl>
   b710c:	4581      	cmp	r9, r0
   b710e:	d1bb      	bne.n	b7088 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7110:	f104 0114 	add.w	r1, r4, #20
   b7114:	e7aa      	b.n	b706c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7116:	4625      	mov	r5, r4
   b7118:	e7e8      	b.n	b70ec <_ZN9TCPClient7connectEPKctm+0xc8>
   b711a:	bf00      	nop
   b711c:	000b8c6c 	.word	0x000b8c6c

000b7120 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7120:	b538      	push	{r3, r4, r5, lr}
   b7122:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7124:	681a      	ldr	r2, [r3, #0]
   b7126:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7128:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b712a:	da10      	bge.n	b714e <_ZN9TCPClient9connectedEv+0x2e>
   b712c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7130:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7134:	429a      	cmp	r2, r3
   b7136:	d10a      	bne.n	b714e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7138:	6803      	ldr	r3, [r0, #0]
   b713a:	691b      	ldr	r3, [r3, #16]
   b713c:	4798      	blx	r3
        if (!rv) {
   b713e:	4604      	mov	r4, r0
   b7140:	b928      	cbnz	r0, b714e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7142:	682b      	ldr	r3, [r5, #0]
   b7144:	4628      	mov	r0, r5
   b7146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7148:	4798      	blx	r3
        rv = available();
   b714a:	4620      	mov	r0, r4
}
   b714c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b714e:	2001      	movs	r0, #1
   b7150:	e7fc      	b.n	b714c <_ZN9TCPClient9connectedEv+0x2c>

000b7152 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7152:	b510      	push	{r4, lr}
   b7154:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7156:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b715a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b715e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7160:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7162:	d005      	beq.n	b7170 <_ZN9TCPClient4peekEv+0x1e>
   b7164:	6963      	ldr	r3, [r4, #20]
   b7166:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b716a:	4413      	add	r3, r2
   b716c:	7918      	ldrb	r0, [r3, #4]
}
   b716e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7170:	6803      	ldr	r3, [r0, #0]
   b7172:	691b      	ldr	r3, [r3, #16]
   b7174:	4798      	blx	r3
   b7176:	2800      	cmp	r0, #0
   b7178:	d1f4      	bne.n	b7164 <_ZN9TCPClient4peekEv+0x12>
   b717a:	f04f 30ff 	mov.w	r0, #4294967295
   b717e:	e7f6      	b.n	b716e <_ZN9TCPClient4peekEv+0x1c>

000b7180 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7182:	6943      	ldr	r3, [r0, #20]
   b7184:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7186:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b718a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b718e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7190:	4605      	mov	r5, r0
   b7192:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7194:	d016      	beq.n	b71c4 <_ZN9TCPClient4readEPhj+0x44>
   b7196:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7198:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b719c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b71a0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b71a2:	42bc      	cmp	r4, r7
   b71a4:	bf28      	it	cs
   b71a6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b71a8:	3304      	adds	r3, #4
   b71aa:	4622      	mov	r2, r4
   b71ac:	4419      	add	r1, r3
   b71ae:	4630      	mov	r0, r6
   b71b0:	f001 f894 	bl	b82dc <memcpy>
   b71b4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b71b6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b71ba:	4423      	add	r3, r4
   b71bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b71c0:	4620      	mov	r0, r4
   b71c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b71c4:	6803      	ldr	r3, [r0, #0]
   b71c6:	691b      	ldr	r3, [r3, #16]
   b71c8:	4798      	blx	r3
   b71ca:	2800      	cmp	r0, #0
   b71cc:	d1e3      	bne.n	b7196 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b71ce:	f04f 34ff 	mov.w	r4, #4294967295
   b71d2:	e7f5      	b.n	b71c0 <_ZN9TCPClient4readEPhj+0x40>

000b71d4 <_ZN9TCPClient12flush_bufferEv>:
   b71d4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b71d6:	2300      	movs	r3, #0
   b71d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b71dc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b71de:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b71e2:	4770      	bx	lr

000b71e4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b71e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71e8:	461f      	mov	r7, r3
    stop();
   b71ea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b71ec:	460c      	mov	r4, r1
    stop();
   b71ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b71f0:	b08a      	sub	sp, #40	; 0x28
   b71f2:	4605      	mov	r5, r0
   b71f4:	4616      	mov	r6, r2
    stop();
   b71f6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b71f8:	7d23      	ldrb	r3, [r4, #20]
   b71fa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b71fe:	2b04      	cmp	r3, #4
   b7200:	bf0c      	ite	eq
   b7202:	2002      	moveq	r0, #2
   b7204:	200a      	movne	r0, #10
   b7206:	2206      	movs	r2, #6
   b7208:	2101      	movs	r1, #1
   b720a:	f7fe ff5b 	bl	b60c4 <sock_socket>
   b720e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7212:	696b      	ldr	r3, [r5, #20]
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	2b00      	cmp	r3, #0
   b7218:	da08      	bge.n	b722c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b721a:	682b      	ldr	r3, [r5, #0]
   b721c:	4628      	mov	r0, r5
   b721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7220:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7222:	4798      	blx	r3
}
   b7224:	4620      	mov	r0, r4
   b7226:	b00a      	add	sp, #40	; 0x28
   b7228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b722c:	4628      	mov	r0, r5
   b722e:	f7ff ffd1 	bl	b71d4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7232:	b1b7      	cbz	r7, b7262 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7234:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7236:	a903      	add	r1, sp, #12
   b7238:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b723a:	9303      	str	r3, [sp, #12]
   b723c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7240:	f7fe fe38 	bl	b5eb4 <if_index_to_name>
   b7244:	2800      	cmp	r0, #0
   b7246:	d1e8      	bne.n	b721a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7248:	6968      	ldr	r0, [r5, #20]
   b724a:	2306      	movs	r3, #6
   b724c:	9300      	str	r3, [sp, #0]
   b724e:	6800      	ldr	r0, [r0, #0]
   b7250:	ab03      	add	r3, sp, #12
   b7252:	f241 020b 	movw	r2, #4107	; 0x100b
   b7256:	f640 71ff 	movw	r1, #4095	; 0xfff
   b725a:	f7fe ff0b 	bl	b6074 <sock_setsockopt>
   b725e:	2800      	cmp	r0, #0
   b7260:	d1db      	bne.n	b721a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7262:	221c      	movs	r2, #28
   b7264:	2100      	movs	r1, #0
   b7266:	a803      	add	r0, sp, #12
   b7268:	f001 f846 	bl	b82f8 <memset>
    if (ip.version() == 4) {
   b726c:	7d23      	ldrb	r3, [r4, #20]
   b726e:	2b04      	cmp	r3, #4
   b7270:	d11d      	bne.n	b72ae <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7272:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7276:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7278:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b727c:	f7fe fe62 	bl	b5f44 <inet_htons>
   b7280:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7284:	6860      	ldr	r0, [r4, #4]
   b7286:	f7fe fe55 	bl	b5f34 <inet_htonl>
   b728a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b728c:	696b      	ldr	r3, [r5, #20]
   b728e:	221c      	movs	r2, #28
   b7290:	6818      	ldr	r0, [r3, #0]
   b7292:	a903      	add	r1, sp, #12
   b7294:	f7fe fefe 	bl	b6094 <sock_connect>
   b7298:	2800      	cmp	r0, #0
   b729a:	d1be      	bne.n	b721a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b729c:	3404      	adds	r4, #4
   b729e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72a0:	696d      	ldr	r5, [r5, #20]
   b72a2:	358c      	adds	r5, #140	; 0x8c
   b72a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72a6:	6823      	ldr	r3, [r4, #0]
   b72a8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b72aa:	2401      	movs	r4, #1
   b72ac:	e7ba      	b.n	b7224 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b72ae:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b72b2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b72b4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b72b8:	f7fe fe44 	bl	b5f44 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72bc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b72be:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72c2:	1d23      	adds	r3, r4, #4
   b72c4:	f104 0714 	add.w	r7, r4, #20
   b72c8:	6818      	ldr	r0, [r3, #0]
   b72ca:	6859      	ldr	r1, [r3, #4]
   b72cc:	4632      	mov	r2, r6
   b72ce:	c203      	stmia	r2!, {r0, r1}
   b72d0:	3308      	adds	r3, #8
   b72d2:	42bb      	cmp	r3, r7
   b72d4:	4616      	mov	r6, r2
   b72d6:	d1f7      	bne.n	b72c8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b72d8:	e7d8      	b.n	b728c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b72dc <_ZN9TCPClient9availableEv>:
{
   b72dc:	b530      	push	{r4, r5, lr}
   b72de:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b72e0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b72e4:	b08b      	sub	sp, #44	; 0x2c
   b72e6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b72e8:	b12b      	cbz	r3, b72f6 <_ZN9TCPClient9availableEv+0x1a>
   b72ea:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b72ee:	429a      	cmp	r2, r3
   b72f0:	d101      	bne.n	b72f6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b72f2:	f7ff ff6f 	bl	b71d4 <_ZN9TCPClient12flush_bufferEv>
   b72f6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b72f8:	6808      	ldr	r0, [r1, #0]
   b72fa:	2800      	cmp	r0, #0
   b72fc:	db18      	blt.n	b7330 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b72fe:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7302:	2d7f      	cmp	r5, #127	; 0x7f
   b7304:	d814      	bhi.n	b7330 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7306:	3104      	adds	r1, #4
   b7308:	2308      	movs	r3, #8
   b730a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b730e:	4429      	add	r1, r5
   b7310:	f7fe fec8 	bl	b60a4 <sock_recv>
            if (ret > 0) {
   b7314:	2800      	cmp	r0, #0
   b7316:	dd13      	ble.n	b7340 <_ZN9TCPClient9availableEv+0x64>
   b7318:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b731a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b731e:	b90a      	cbnz	r2, b7324 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7320:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7324:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7326:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b732a:	4410      	add	r0, r2
   b732c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7330:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7332:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7336:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b733a:	1ac0      	subs	r0, r0, r3
   b733c:	b00b      	add	sp, #44	; 0x2c
   b733e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7340:	f7ff f81c 	bl	b637c <__errno>
   b7344:	6803      	ldr	r3, [r0, #0]
   b7346:	2b0b      	cmp	r3, #11
   b7348:	d0f2      	beq.n	b7330 <_ZN9TCPClient9availableEv+0x54>
   b734a:	f7ff f817 	bl	b637c <__errno>
   b734e:	6803      	ldr	r3, [r0, #0]
   b7350:	2b0b      	cmp	r3, #11
   b7352:	d0ed      	beq.n	b7330 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7354:	2320      	movs	r3, #32
   b7356:	2500      	movs	r5, #0
   b7358:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b735c:	f7ff f80e 	bl	b637c <__errno>
   b7360:	6803      	ldr	r3, [r0, #0]
   b7362:	9301      	str	r3, [sp, #4]
   b7364:	4b08      	ldr	r3, [pc, #32]	; (b7388 <_ZN9TCPClient9availableEv+0xac>)
   b7366:	4909      	ldr	r1, [pc, #36]	; (b738c <_ZN9TCPClient9availableEv+0xb0>)
   b7368:	9300      	str	r3, [sp, #0]
   b736a:	aa02      	add	r2, sp, #8
   b736c:	462b      	mov	r3, r5
   b736e:	2032      	movs	r0, #50	; 0x32
   b7370:	f7fe ff48 	bl	b6204 <log_message>
                    sock_close(d_->sock);
   b7374:	6963      	ldr	r3, [r4, #20]
   b7376:	6818      	ldr	r0, [r3, #0]
   b7378:	f7fe fe84 	bl	b6084 <sock_close>
   b737c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b737e:	f04f 32ff 	mov.w	r2, #4294967295
   b7382:	601a      	str	r2, [r3, #0]
   b7384:	e7d4      	b.n	b7330 <_ZN9TCPClient9availableEv+0x54>
   b7386:	bf00      	nop
   b7388:	000b8d07 	.word	0x000b8d07
   b738c:	000b8d00 	.word	0x000b8d00

000b7390 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7390:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7392:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7394:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7396:	6818      	ldr	r0, [r3, #0]
   b7398:	2800      	cmp	r0, #0
   b739a:	db01      	blt.n	b73a0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b739c:	f7fe fe72 	bl	b6084 <sock_close>
   b73a0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b73a2:	f04f 32ff 	mov.w	r2, #4294967295
   b73a6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b73a8:	6960      	ldr	r0, [r4, #20]
   b73aa:	2211      	movs	r2, #17
   b73ac:	2100      	movs	r1, #0
   b73ae:	308c      	adds	r0, #140	; 0x8c
   b73b0:	f000 ffa2 	bl	b82f8 <memset>
    flush_buffer();
   b73b4:	4620      	mov	r0, r4
}
   b73b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b73ba:	f7ff bf0b 	b.w	b71d4 <_ZN9TCPClient12flush_bufferEv>

000b73be <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b73be:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b73c0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b73c2:	4604      	mov	r4, r0
          total(0) {
   b73c4:	6001      	str	r1, [r0, #0]
   b73c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b73ca:	3088      	adds	r0, #136	; 0x88
   b73cc:	f7ff fbe6 	bl	b6b9c <_ZN9IPAddressC1Ev>
}
   b73d0:	4620      	mov	r0, r4
   b73d2:	bd10      	pop	{r4, pc}

000b73d4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b73d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73d6:	2300      	movs	r3, #0
   b73d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b73dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b73e0:	4a0e      	ldr	r2, [pc, #56]	; (b741c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b73e2:	6103      	str	r3, [r0, #16]
   b73e4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b73e6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b73e8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b73ea:	20ac      	movs	r0, #172	; 0xac
   b73ec:	9101      	str	r1, [sp, #4]
   b73ee:	f7fc fe52 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b73f2:	1e05      	subs	r5, r0, #0
   b73f4:	f105 060c 	add.w	r6, r5, #12
   b73f8:	d008      	beq.n	b740c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b73fa:	2301      	movs	r3, #1
   b73fc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7400:	4b07      	ldr	r3, [pc, #28]	; (b7420 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7402:	9901      	ldr	r1, [sp, #4]
   b7404:	602b      	str	r3, [r5, #0]
   b7406:	4630      	mov	r0, r6
   b7408:	f7ff ffd9 	bl	b73be <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b740c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b740e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7412:	f7ff fedf 	bl	b71d4 <_ZN9TCPClient12flush_bufferEv>
}
   b7416:	b002      	add	sp, #8
   b7418:	bd70      	pop	{r4, r5, r6, pc}
   b741a:	bf00      	nop
   b741c:	000b8d3c 	.word	0x000b8d3c
   b7420:	000b8d20 	.word	0x000b8d20

000b7424 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7424:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7426:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b742a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b742c:	f7ff ffd2 	bl	b73d4 <_ZN9TCPClientC1Ei>
}
   b7430:	4620      	mov	r0, r4
   b7432:	bd10      	pop	{r4, pc}

000b7434 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7434:	b510      	push	{r4, lr}
   b7436:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7438:	6800      	ldr	r0, [r0, #0]
   b743a:	2800      	cmp	r0, #0
   b743c:	db01      	blt.n	b7442 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b743e:	f7fe fe21 	bl	b6084 <sock_close>
    }
}
   b7442:	4620      	mov	r0, r4
   b7444:	bd10      	pop	{r4, pc}

000b7446 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7446:	300c      	adds	r0, #12
   b7448:	f7ff bff4 	b.w	b7434 <_ZN9TCPClient4DataD1Ev>

000b744c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b744c:	2200      	movs	r2, #0
   b744e:	6840      	ldr	r0, [r0, #4]
   b7450:	4611      	mov	r1, r2
   b7452:	f7fe bf1b 	b.w	b628c <network_ready>

000b7456 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7456:	2200      	movs	r2, #0
   b7458:	6840      	ldr	r0, [r0, #4]
   b745a:	4611      	mov	r1, r2
   b745c:	f7fe bf36 	b.w	b62cc <network_listening>

000b7460 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7460:	2200      	movs	r2, #0
   b7462:	6840      	ldr	r0, [r0, #4]
   b7464:	4611      	mov	r1, r2
   b7466:	f7fe bf41 	b.w	b62ec <network_get_listen_timeout>

000b746a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b746a:	6840      	ldr	r0, [r0, #4]
   b746c:	2200      	movs	r2, #0
   b746e:	f7fe bf35 	b.w	b62dc <network_set_listen_timeout>

000b7472 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	2200      	movs	r2, #0
   b7476:	f081 0101 	eor.w	r1, r1, #1
   b747a:	f7fe bf1f 	b.w	b62bc <network_listen>

000b747e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b747e:	2300      	movs	r3, #0
   b7480:	6840      	ldr	r0, [r0, #4]
   b7482:	461a      	mov	r2, r3
   b7484:	4619      	mov	r1, r3
   b7486:	f7fe bf11 	b.w	b62ac <network_off>

000b748a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b748a:	2300      	movs	r3, #0
   b748c:	6840      	ldr	r0, [r0, #4]
   b748e:	461a      	mov	r2, r3
   b7490:	4619      	mov	r1, r3
   b7492:	f7fe bf03 	b.w	b629c <network_on>

000b7496 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7496:	2200      	movs	r2, #0
   b7498:	6840      	ldr	r0, [r0, #4]
   b749a:	4611      	mov	r1, r2
   b749c:	f7fe bee6 	b.w	b626c <network_connecting>

000b74a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74a0:	6840      	ldr	r0, [r0, #4]
   b74a2:	2200      	movs	r2, #0
   b74a4:	2102      	movs	r1, #2
   b74a6:	f7fe bee9 	b.w	b627c <network_disconnect>

000b74aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74aa:	2300      	movs	r3, #0
   b74ac:	6840      	ldr	r0, [r0, #4]
   b74ae:	461a      	mov	r2, r3
   b74b0:	f7fe bed4 	b.w	b625c <network_connect>

000b74b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b74b4:	4b02      	ldr	r3, [pc, #8]	; (b74c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b74b6:	2204      	movs	r2, #4
   b74b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b74ba:	4a02      	ldr	r2, [pc, #8]	; (b74c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b74bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b74be:	4770      	bx	lr
   b74c0:	2003e718 	.word	0x2003e718
   b74c4:	000b8d88 	.word	0x000b8d88

000b74c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b74c8:	2300      	movs	r3, #0
   b74ca:	6840      	ldr	r0, [r0, #4]
   b74cc:	461a      	mov	r2, r3
   b74ce:	f7fe bec5 	b.w	b625c <network_connect>

000b74d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b74d2:	6840      	ldr	r0, [r0, #4]
   b74d4:	2200      	movs	r2, #0
   b74d6:	2102      	movs	r1, #2
   b74d8:	f7fe bed0 	b.w	b627c <network_disconnect>

000b74dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b74dc:	2200      	movs	r2, #0
   b74de:	6840      	ldr	r0, [r0, #4]
   b74e0:	4611      	mov	r1, r2
   b74e2:	f7fe bec3 	b.w	b626c <network_connecting>

000b74e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b74e6:	2200      	movs	r2, #0
   b74e8:	6840      	ldr	r0, [r0, #4]
   b74ea:	4611      	mov	r1, r2
   b74ec:	f7fe bece 	b.w	b628c <network_ready>

000b74f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b74f0:	2300      	movs	r3, #0
   b74f2:	6840      	ldr	r0, [r0, #4]
   b74f4:	461a      	mov	r2, r3
   b74f6:	4619      	mov	r1, r3
   b74f8:	f7fe bed0 	b.w	b629c <network_on>

000b74fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b74fc:	2300      	movs	r3, #0
   b74fe:	6840      	ldr	r0, [r0, #4]
   b7500:	461a      	mov	r2, r3
   b7502:	4619      	mov	r1, r3
   b7504:	f7fe bed2 	b.w	b62ac <network_off>

000b7508 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7508:	6840      	ldr	r0, [r0, #4]
   b750a:	2100      	movs	r1, #0
   b750c:	f7fe bef6 	b.w	b62fc <network_is_on>

000b7510 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7510:	6840      	ldr	r0, [r0, #4]
   b7512:	2100      	movs	r1, #0
   b7514:	f7fe befa 	b.w	b630c <network_is_off>

000b7518 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7518:	6840      	ldr	r0, [r0, #4]
   b751a:	2200      	movs	r2, #0
   b751c:	f081 0101 	eor.w	r1, r1, #1
   b7520:	f7fe becc 	b.w	b62bc <network_listen>

000b7524 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7524:	6840      	ldr	r0, [r0, #4]
   b7526:	2200      	movs	r2, #0
   b7528:	f7fe bed8 	b.w	b62dc <network_set_listen_timeout>

000b752c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b752c:	2200      	movs	r2, #0
   b752e:	6840      	ldr	r0, [r0, #4]
   b7530:	4611      	mov	r1, r2
   b7532:	f7fe bedb 	b.w	b62ec <network_get_listen_timeout>

000b7536 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7536:	2200      	movs	r2, #0
   b7538:	6840      	ldr	r0, [r0, #4]
   b753a:	4611      	mov	r1, r2
   b753c:	f7fe bec6 	b.w	b62cc <network_listening>

000b7540 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7544:	b095      	sub	sp, #84	; 0x54
   b7546:	4614      	mov	r4, r2
   b7548:	460d      	mov	r5, r1
   b754a:	4607      	mov	r7, r0
    IPAddress addr;
   b754c:	f7ff fb26 	bl	b6b9c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7550:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7552:	221c      	movs	r2, #28
   b7554:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7556:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7558:	f000 fece 	bl	b82f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b755c:	2340      	movs	r3, #64	; 0x40
   b755e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7560:	4620      	mov	r0, r4
   b7562:	466b      	mov	r3, sp
   b7564:	aa0c      	add	r2, sp, #48	; 0x30
   b7566:	2100      	movs	r1, #0
   b7568:	f7fe fc6c 	bl	b5e44 <netdb_getaddrinfo>
    if (!r) {
   b756c:	4604      	mov	r4, r0
   b756e:	2800      	cmp	r0, #0
   b7570:	d14b      	bne.n	b760a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7572:	4602      	mov	r2, r0
   b7574:	2101      	movs	r1, #1
   b7576:	6868      	ldr	r0, [r5, #4]
   b7578:	f7fe fe88 	bl	b628c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b757c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b757e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7580:	4622      	mov	r2, r4
   b7582:	6868      	ldr	r0, [r5, #4]
   b7584:	f7fe fe82 	bl	b628c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7588:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b758a:	4681      	mov	r9, r0
        bool ok = false;
   b758c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b758e:	2e00      	cmp	r6, #0
   b7590:	d03b      	beq.n	b760a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7592:	2900      	cmp	r1, #0
   b7594:	d139      	bne.n	b760a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7596:	6873      	ldr	r3, [r6, #4]
   b7598:	2b02      	cmp	r3, #2
   b759a:	d003      	beq.n	b75a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b759c:	2b0a      	cmp	r3, #10
   b759e:	d011      	beq.n	b75c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75a0:	69f6      	ldr	r6, [r6, #28]
   b75a2:	e7f4      	b.n	b758e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b75a4:	f1b8 0f00 	cmp.w	r8, #0
   b75a8:	d0fa      	beq.n	b75a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b75aa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b75ac:	a806      	add	r0, sp, #24
   b75ae:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b75b0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b75b2:	f7ff fb37 	bl	b6c24 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b75b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75b8:	1d3c      	adds	r4, r7, #4
   b75ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75bc:	682b      	ldr	r3, [r5, #0]
   b75be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b75c0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b75c2:	e7ed      	b.n	b75a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b75c4:	f1b9 0f00 	cmp.w	r9, #0
   b75c8:	d0ea      	beq.n	b75a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b75ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b75cc:	2210      	movs	r2, #16
   b75ce:	a801      	add	r0, sp, #4
   b75d0:	f000 fe92 	bl	b82f8 <memset>
                    a.v = 6;
   b75d4:	2306      	movs	r3, #6
   b75d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b75da:	ad01      	add	r5, sp, #4
   b75dc:	f104 0308 	add.w	r3, r4, #8
   b75e0:	3418      	adds	r4, #24
   b75e2:	6818      	ldr	r0, [r3, #0]
   b75e4:	6859      	ldr	r1, [r3, #4]
   b75e6:	462a      	mov	r2, r5
   b75e8:	c203      	stmia	r2!, {r0, r1}
   b75ea:	3308      	adds	r3, #8
   b75ec:	42a3      	cmp	r3, r4
   b75ee:	4615      	mov	r5, r2
   b75f0:	d1f7      	bne.n	b75e2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b75f2:	a901      	add	r1, sp, #4
   b75f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b75f6:	ad07      	add	r5, sp, #28
   b75f8:	f7ff fade 	bl	b6bb8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b75fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75fe:	1d3c      	adds	r4, r7, #4
   b7600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7602:	682b      	ldr	r3, [r5, #0]
   b7604:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7606:	4649      	mov	r1, r9
   b7608:	e7ca      	b.n	b75a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b760a:	9800      	ldr	r0, [sp, #0]
   b760c:	f7fe fc12 	bl	b5e34 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7610:	4638      	mov	r0, r7
   b7612:	b015      	add	sp, #84	; 0x54
   b7614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7618 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7618:	4b02      	ldr	r3, [pc, #8]	; (b7624 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b761a:	4a03      	ldr	r2, [pc, #12]	; (b7628 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b761c:	601a      	str	r2, [r3, #0]
   b761e:	2200      	movs	r2, #0
   b7620:	605a      	str	r2, [r3, #4]

} // spark
   b7622:	4770      	bx	lr
   b7624:	2003e720 	.word	0x2003e720
   b7628:	000b8dc4 	.word	0x000b8dc4

000b762c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b762c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b762e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7630:	d902      	bls.n	b7638 <pinAvailable+0xc>
    return false;
   b7632:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7634:	b002      	add	sp, #8
   b7636:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7638:	f1a0 030b 	sub.w	r3, r0, #11
   b763c:	2b02      	cmp	r3, #2
   b763e:	d81a      	bhi.n	b7676 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7640:	4c17      	ldr	r4, [pc, #92]	; (b76a0 <pinAvailable+0x74>)
   b7642:	7821      	ldrb	r1, [r4, #0]
   b7644:	f3bf 8f5b 	dmb	ish
   b7648:	f011 0101 	ands.w	r1, r1, #1
   b764c:	d10b      	bne.n	b7666 <pinAvailable+0x3a>
   b764e:	4620      	mov	r0, r4
   b7650:	9101      	str	r1, [sp, #4]
   b7652:	f7fc fd33 	bl	b40bc <__cxa_guard_acquire>
   b7656:	9901      	ldr	r1, [sp, #4]
   b7658:	b128      	cbz	r0, b7666 <pinAvailable+0x3a>
   b765a:	4812      	ldr	r0, [pc, #72]	; (b76a4 <pinAvailable+0x78>)
   b765c:	f7fe feea 	bl	b6434 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7660:	4620      	mov	r0, r4
   b7662:	f7fc fd30 	bl	b40c6 <__cxa_guard_release>
   b7666:	4b0f      	ldr	r3, [pc, #60]	; (b76a4 <pinAvailable+0x78>)
   b7668:	7818      	ldrb	r0, [r3, #0]
   b766a:	f7fe fd63 	bl	b6134 <hal_spi_is_enabled>
   b766e:	2800      	cmp	r0, #0
   b7670:	d1df      	bne.n	b7632 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7672:	2001      	movs	r0, #1
   b7674:	e7de      	b.n	b7634 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7676:	2801      	cmp	r0, #1
   b7678:	d809      	bhi.n	b768e <pinAvailable+0x62>
   b767a:	f000 f8d3 	bl	b7824 <_Z19__fetch_global_Wirev>
   b767e:	2100      	movs	r1, #0
   b7680:	7c00      	ldrb	r0, [r0, #16]
   b7682:	f7fe fce7 	bl	b6054 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7686:	f080 0001 	eor.w	r0, r0, #1
   b768a:	b2c0      	uxtb	r0, r0
   b768c:	e7d2      	b.n	b7634 <pinAvailable+0x8>
   b768e:	3809      	subs	r0, #9
   b7690:	2801      	cmp	r0, #1
   b7692:	d8ee      	bhi.n	b7672 <pinAvailable+0x46>
   b7694:	f000 f886 	bl	b77a4 <_Z22__fetch_global_Serial1v>
   b7698:	7c00      	ldrb	r0, [r0, #16]
   b769a:	f7fe fc83 	bl	b5fa4 <hal_usart_is_enabled>
   b769e:	e7f2      	b.n	b7686 <pinAvailable+0x5a>
   b76a0:	2003e6b4 	.word	0x2003e6b4
   b76a4:	2003e6b8 	.word	0x2003e6b8

000b76a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76a8:	2823      	cmp	r0, #35	; 0x23
{
   b76aa:	b538      	push	{r3, r4, r5, lr}
   b76ac:	4604      	mov	r4, r0
   b76ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76b0:	d80a      	bhi.n	b76c8 <pinMode+0x20>
   b76b2:	29ff      	cmp	r1, #255	; 0xff
   b76b4:	d008      	beq.n	b76c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b76b6:	f7ff ffb9 	bl	b762c <pinAvailable>
   b76ba:	b128      	cbz	r0, b76c8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b76bc:	4629      	mov	r1, r5
   b76be:	4620      	mov	r0, r4
}
   b76c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b76c4:	f7fe bbd6 	b.w	b5e74 <HAL_Pin_Mode>
}
   b76c8:	bd38      	pop	{r3, r4, r5, pc}

000b76ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b76ca:	b538      	push	{r3, r4, r5, lr}
   b76cc:	4604      	mov	r4, r0
   b76ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b76d0:	f7fe fbd8 	bl	b5e84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b76d4:	28ff      	cmp	r0, #255	; 0xff
   b76d6:	d010      	beq.n	b76fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b76d8:	2806      	cmp	r0, #6
   b76da:	d804      	bhi.n	b76e6 <digitalWrite+0x1c>
   b76dc:	234d      	movs	r3, #77	; 0x4d
   b76de:	fa23 f000 	lsr.w	r0, r3, r0
   b76e2:	07c3      	lsls	r3, r0, #31
   b76e4:	d409      	bmi.n	b76fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b76e6:	4620      	mov	r0, r4
   b76e8:	f7ff ffa0 	bl	b762c <pinAvailable>
   b76ec:	b128      	cbz	r0, b76fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b76ee:	4629      	mov	r1, r5
   b76f0:	4620      	mov	r0, r4
}
   b76f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b76f6:	f7fe bbcd 	b.w	b5e94 <HAL_GPIO_Write>
}
   b76fa:	bd38      	pop	{r3, r4, r5, pc}

000b76fc <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b76fc:	280d      	cmp	r0, #13
{
   b76fe:	b510      	push	{r4, lr}
   b7700:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7702:	bf9c      	itt	ls
   b7704:	340e      	addls	r4, #14
   b7706:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7708:	4620      	mov	r0, r4
   b770a:	f7ff ff8f 	bl	b762c <pinAvailable>
   b770e:	b150      	cbz	r0, b7726 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7710:	2103      	movs	r1, #3
   b7712:	4620      	mov	r0, r4
   b7714:	f7fe fba6 	bl	b5e64 <HAL_Validate_Pin_Function>
   b7718:	2803      	cmp	r0, #3
   b771a:	d104      	bne.n	b7726 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b771c:	4620      	mov	r0, r4
}
   b771e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7722:	f7fe bbbf 	b.w	b5ea4 <hal_adc_read>
}
   b7726:	2000      	movs	r0, #0
   b7728:	bd10      	pop	{r4, pc}

000b772a <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b772a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b772e:	4690      	mov	r8, r2
   b7730:	461f      	mov	r7, r3
   b7732:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7734:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7736:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7738:	f1c4 0107 	rsb	r1, r4, #7
   b773c:	f1b8 0f00 	cmp.w	r8, #0
   b7740:	d112      	bne.n	b7768 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7742:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7746:	f001 0101 	and.w	r1, r1, #1
   b774a:	4630      	mov	r0, r6
   b774c:	f7ff ffbd 	bl	b76ca <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7750:	2101      	movs	r1, #1
   b7752:	4628      	mov	r0, r5
   b7754:	f7ff ffb9 	bl	b76ca <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7758:	2100      	movs	r1, #0
   b775a:	4628      	mov	r0, r5
   b775c:	f7ff ffb5 	bl	b76ca <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7760:	3c01      	subs	r4, #1
   b7762:	d2e9      	bcs.n	b7738 <shiftOut+0xe>
  }
}
   b7764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7768:	fa47 f104 	asr.w	r1, r7, r4
   b776c:	e7eb      	b.n	b7746 <shiftOut+0x1c>

000b776e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b776e:	4770      	bx	lr

000b7770 <_Z20acquireSerial1Bufferv>:
{
   b7770:	b538      	push	{r3, r4, r5, lr}
   b7772:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7774:	2514      	movs	r5, #20
   b7776:	462a      	mov	r2, r5
   b7778:	2100      	movs	r1, #0
   b777a:	f000 fdbd 	bl	b82f8 <memset>
   b777e:	8025      	strh	r5, [r4, #0]
   b7780:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7782:	4907      	ldr	r1, [pc, #28]	; (b77a0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7784:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7786:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7788:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b778a:	f000 f86f 	bl	b786c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b778e:	4904      	ldr	r1, [pc, #16]	; (b77a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7790:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7792:	4628      	mov	r0, r5
   b7794:	f000 f86a 	bl	b786c <_ZnajRKSt9nothrow_t>
    };
   b7798:	60e0      	str	r0, [r4, #12]
}
   b779a:	4620      	mov	r0, r4
   b779c:	bd38      	pop	{r3, r4, r5, pc}
   b779e:	bf00      	nop
   b77a0:	000b8df8 	.word	0x000b8df8

000b77a4 <_Z22__fetch_global_Serial1v>:
{
   b77a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77a6:	4d0e      	ldr	r5, [pc, #56]	; (b77e0 <_Z22__fetch_global_Serial1v+0x3c>)
   b77a8:	7829      	ldrb	r1, [r5, #0]
   b77aa:	f3bf 8f5b 	dmb	ish
   b77ae:	f011 0401 	ands.w	r4, r1, #1
{
   b77b2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77b4:	d111      	bne.n	b77da <_Z22__fetch_global_Serial1v+0x36>
   b77b6:	4628      	mov	r0, r5
   b77b8:	f7fc fc80 	bl	b40bc <__cxa_guard_acquire>
   b77bc:	b168      	cbz	r0, b77da <_Z22__fetch_global_Serial1v+0x36>
   b77be:	a801      	add	r0, sp, #4
   b77c0:	f7ff ffd6 	bl	b7770 <_Z20acquireSerial1Bufferv>
   b77c4:	aa01      	add	r2, sp, #4
   b77c6:	4621      	mov	r1, r4
   b77c8:	4806      	ldr	r0, [pc, #24]	; (b77e4 <_Z22__fetch_global_Serial1v+0x40>)
   b77ca:	f7ff fb01 	bl	b6dd0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b77ce:	4628      	mov	r0, r5
   b77d0:	f7fc fc79 	bl	b40c6 <__cxa_guard_release>
   b77d4:	4804      	ldr	r0, [pc, #16]	; (b77e8 <_Z22__fetch_global_Serial1v+0x44>)
   b77d6:	f000 fd7b 	bl	b82d0 <atexit>
    return serial1;
}
   b77da:	4802      	ldr	r0, [pc, #8]	; (b77e4 <_Z22__fetch_global_Serial1v+0x40>)
   b77dc:	b007      	add	sp, #28
   b77de:	bd30      	pop	{r4, r5, pc}
   b77e0:	2003e728 	.word	0x2003e728
   b77e4:	2003e72c 	.word	0x2003e72c
   b77e8:	000b776f 	.word	0x000b776f

000b77ec <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77ec:	4770      	bx	lr
	...

000b77f0 <_Z17acquireWireBufferv>:
{
   b77f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b77f2:	4b0a      	ldr	r3, [pc, #40]	; (b781c <_Z17acquireWireBufferv+0x2c>)
   b77f4:	6003      	str	r3, [r0, #0]
   b77f6:	2301      	movs	r3, #1
{
   b77f8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b77fa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b77fc:	4908      	ldr	r1, [pc, #32]	; (b7820 <_Z17acquireWireBufferv+0x30>)
   b77fe:	2020      	movs	r0, #32
   b7800:	f000 f834 	bl	b786c <_ZnajRKSt9nothrow_t>
	};
   b7804:	2520      	movs	r5, #32
   b7806:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7808:	4905      	ldr	r1, [pc, #20]	; (b7820 <_Z17acquireWireBufferv+0x30>)
	};
   b780a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b780c:	4628      	mov	r0, r5
   b780e:	f000 f82d 	bl	b786c <_ZnajRKSt9nothrow_t>
	};
   b7812:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7816:	4620      	mov	r0, r4
   b7818:	bd38      	pop	{r3, r4, r5, pc}
   b781a:	bf00      	nop
   b781c:	00010018 	.word	0x00010018
   b7820:	000b8df8 	.word	0x000b8df8

000b7824 <_Z19__fetch_global_Wirev>:
{
   b7824:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7826:	4d0e      	ldr	r5, [pc, #56]	; (b7860 <_Z19__fetch_global_Wirev+0x3c>)
   b7828:	7829      	ldrb	r1, [r5, #0]
   b782a:	f3bf 8f5b 	dmb	ish
   b782e:	f011 0401 	ands.w	r4, r1, #1
{
   b7832:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7834:	d111      	bne.n	b785a <_Z19__fetch_global_Wirev+0x36>
   b7836:	4628      	mov	r0, r5
   b7838:	f7fc fc40 	bl	b40bc <__cxa_guard_acquire>
   b783c:	b168      	cbz	r0, b785a <_Z19__fetch_global_Wirev+0x36>
   b783e:	4668      	mov	r0, sp
   b7840:	f7ff ffd6 	bl	b77f0 <_Z17acquireWireBufferv>
   b7844:	466a      	mov	r2, sp
   b7846:	4621      	mov	r1, r4
   b7848:	4806      	ldr	r0, [pc, #24]	; (b7864 <_Z19__fetch_global_Wirev+0x40>)
   b784a:	f7ff fb01 	bl	b6e50 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b784e:	4628      	mov	r0, r5
   b7850:	f7fc fc39 	bl	b40c6 <__cxa_guard_release>
   b7854:	4804      	ldr	r0, [pc, #16]	; (b7868 <_Z19__fetch_global_Wirev+0x44>)
   b7856:	f000 fd3b 	bl	b82d0 <atexit>
	return wire;
}
   b785a:	4802      	ldr	r0, [pc, #8]	; (b7864 <_Z19__fetch_global_Wirev+0x40>)
   b785c:	b007      	add	sp, #28
   b785e:	bd30      	pop	{r4, r5, pc}
   b7860:	2003e744 	.word	0x2003e744
   b7864:	2003e748 	.word	0x2003e748
   b7868:	000b77ed 	.word	0x000b77ed

000b786c <_ZnajRKSt9nothrow_t>:
   b786c:	f7fc bc15 	b.w	b409a <_Znaj>

000b7870 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7870:	4901      	ldr	r1, [pc, #4]	; (b7878 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7872:	f000 b8f9 	b.w	b7a68 <_ZNKSt9type_infoeqERKS_>
   b7876:	bf00      	nop
   b7878:	000b8e14 	.word	0x000b8e14

000b787c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b787c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b787e:	2400      	movs	r4, #0
   b7880:	2310      	movs	r3, #16
   b7882:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7886:	6803      	ldr	r3, [r0, #0]
   b7888:	4615      	mov	r5, r2
   b788a:	699e      	ldr	r6, [r3, #24]
   b788c:	6812      	ldr	r2, [r2, #0]
   b788e:	466b      	mov	r3, sp
   b7890:	e9cd 4400 	strd	r4, r4, [sp]
   b7894:	47b0      	blx	r6
   b7896:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b789a:	f003 0306 	and.w	r3, r3, #6
   b789e:	2b06      	cmp	r3, #6
   b78a0:	bf03      	ittte	eq
   b78a2:	9b00      	ldreq	r3, [sp, #0]
   b78a4:	602b      	streq	r3, [r5, #0]
   b78a6:	2001      	moveq	r0, #1
   b78a8:	4620      	movne	r0, r4
   b78aa:	b004      	add	sp, #16
   b78ac:	bd70      	pop	{r4, r5, r6, pc}

000b78ae <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b78ae:	9800      	ldr	r0, [sp, #0]
   b78b0:	4290      	cmp	r0, r2
   b78b2:	bf14      	ite	ne
   b78b4:	2001      	movne	r0, #1
   b78b6:	2006      	moveq	r0, #6
   b78b8:	4770      	bx	lr
	...

000b78bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b78bc:	b510      	push	{r4, lr}
   b78be:	4b03      	ldr	r3, [pc, #12]	; (b78cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b78c0:	6003      	str	r3, [r0, #0]
   b78c2:	4604      	mov	r4, r0
   b78c4:	f000 f8cd 	bl	b7a62 <_ZNSt9type_infoD1Ev>
   b78c8:	4620      	mov	r0, r4
   b78ca:	bd10      	pop	{r4, pc}
   b78cc:	000b8e54 	.word	0x000b8e54

000b78d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b78d0:	b510      	push	{r4, lr}
   b78d2:	4604      	mov	r4, r0
   b78d4:	f7ff fff2 	bl	b78bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b78d8:	4620      	mov	r0, r4
   b78da:	2108      	movs	r1, #8
   b78dc:	f7fc fbdf 	bl	b409e <_ZdlPvj>
   b78e0:	4620      	mov	r0, r4
   b78e2:	bd10      	pop	{r4, pc}

000b78e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b78e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78e8:	461f      	mov	r7, r3
   b78ea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b78ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b78f2:	4598      	cmp	r8, r3
   b78f4:	4606      	mov	r6, r0
   b78f6:	4615      	mov	r5, r2
   b78f8:	d107      	bne.n	b790a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b78fa:	9907      	ldr	r1, [sp, #28]
   b78fc:	f000 f8b4 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b7900:	b118      	cbz	r0, b790a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7902:	7165      	strb	r5, [r4, #5]
   b7904:	2000      	movs	r0, #0
   b7906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b790a:	4639      	mov	r1, r7
   b790c:	4630      	mov	r0, r6
   b790e:	f000 f8ab 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b7912:	2800      	cmp	r0, #0
   b7914:	d0f6      	beq.n	b7904 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7916:	2301      	movs	r3, #1
   b7918:	f8c4 8000 	str.w	r8, [r4]
   b791c:	7125      	strb	r5, [r4, #4]
   b791e:	71a3      	strb	r3, [r4, #6]
   b7920:	e7f0      	b.n	b7904 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7922 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7922:	b538      	push	{r3, r4, r5, lr}
   b7924:	4615      	mov	r5, r2
   b7926:	461c      	mov	r4, r3
   b7928:	f000 f89e 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b792c:	b120      	cbz	r0, b7938 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b792e:	2308      	movs	r3, #8
   b7930:	60e3      	str	r3, [r4, #12]
   b7932:	2306      	movs	r3, #6
   b7934:	6025      	str	r5, [r4, #0]
   b7936:	7123      	strb	r3, [r4, #4]
   b7938:	bd38      	pop	{r3, r4, r5, pc}

000b793a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b793a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b793c:	4605      	mov	r5, r0
   b793e:	460c      	mov	r4, r1
   b7940:	9201      	str	r2, [sp, #4]
   b7942:	461e      	mov	r6, r3
   b7944:	f000 f890 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b7948:	b950      	cbnz	r0, b7960 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b794a:	2e03      	cmp	r6, #3
   b794c:	d808      	bhi.n	b7960 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b794e:	6823      	ldr	r3, [r4, #0]
   b7950:	9a01      	ldr	r2, [sp, #4]
   b7952:	695b      	ldr	r3, [r3, #20]
   b7954:	4629      	mov	r1, r5
   b7956:	4620      	mov	r0, r4
   b7958:	b002      	add	sp, #8
   b795a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b795e:	4718      	bx	r3
   b7960:	b002      	add	sp, #8
   b7962:	bd70      	pop	{r4, r5, r6, pc}

000b7964 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7964:	b510      	push	{r4, lr}
   b7966:	4b03      	ldr	r3, [pc, #12]	; (b7974 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7968:	6003      	str	r3, [r0, #0]
   b796a:	4604      	mov	r4, r0
   b796c:	f7ff ffa6 	bl	b78bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7970:	4620      	mov	r0, r4
   b7972:	bd10      	pop	{r4, pc}
   b7974:	000b8eb4 	.word	0x000b8eb4

000b7978 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7978:	b510      	push	{r4, lr}
   b797a:	4604      	mov	r4, r0
   b797c:	f7ff fff2 	bl	b7964 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7980:	4620      	mov	r0, r4
   b7982:	210c      	movs	r1, #12
   b7984:	f7fc fb8b 	bl	b409e <_ZdlPvj>
   b7988:	4620      	mov	r0, r4
   b798a:	bd10      	pop	{r4, pc}

000b798c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b798c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b798e:	9f08      	ldr	r7, [sp, #32]
   b7990:	4297      	cmp	r7, r2
   b7992:	4605      	mov	r5, r0
   b7994:	460e      	mov	r6, r1
   b7996:	4614      	mov	r4, r2
   b7998:	d00a      	beq.n	b79b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b799a:	68a8      	ldr	r0, [r5, #8]
   b799c:	6802      	ldr	r2, [r0, #0]
   b799e:	9708      	str	r7, [sp, #32]
   b79a0:	6a15      	ldr	r5, [r2, #32]
   b79a2:	4631      	mov	r1, r6
   b79a4:	4622      	mov	r2, r4
   b79a6:	46ac      	mov	ip, r5
   b79a8:	b003      	add	sp, #12
   b79aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b79ae:	4760      	bx	ip
   b79b0:	4619      	mov	r1, r3
   b79b2:	9301      	str	r3, [sp, #4]
   b79b4:	f000 f858 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b79b8:	9b01      	ldr	r3, [sp, #4]
   b79ba:	2800      	cmp	r0, #0
   b79bc:	d0ed      	beq.n	b799a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b79be:	2006      	movs	r0, #6
   b79c0:	b003      	add	sp, #12
   b79c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b79c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b79c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79c8:	460d      	mov	r5, r1
   b79ca:	4619      	mov	r1, r3
   b79cc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b79d0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b79d4:	4681      	mov	r9, r0
   b79d6:	4617      	mov	r7, r2
   b79d8:	4698      	mov	r8, r3
   b79da:	f000 f845 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b79de:	b190      	cbz	r0, b7a06 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b79e0:	2d00      	cmp	r5, #0
   b79e2:	6034      	str	r4, [r6, #0]
   b79e4:	7137      	strb	r7, [r6, #4]
   b79e6:	db09      	blt.n	b79fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b79e8:	1961      	adds	r1, r4, r5
   b79ea:	458a      	cmp	sl, r1
   b79ec:	bf0c      	ite	eq
   b79ee:	2106      	moveq	r1, #6
   b79f0:	2101      	movne	r1, #1
   b79f2:	71b1      	strb	r1, [r6, #6]
   b79f4:	2000      	movs	r0, #0
   b79f6:	b001      	add	sp, #4
   b79f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79fc:	3502      	adds	r5, #2
   b79fe:	d1f9      	bne.n	b79f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a00:	2301      	movs	r3, #1
   b7a02:	71b3      	strb	r3, [r6, #6]
   b7a04:	e7f6      	b.n	b79f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a06:	4554      	cmp	r4, sl
   b7a08:	d106      	bne.n	b7a18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7a0a:	4659      	mov	r1, fp
   b7a0c:	4648      	mov	r0, r9
   b7a0e:	f000 f82b 	bl	b7a68 <_ZNKSt9type_infoeqERKS_>
   b7a12:	b108      	cbz	r0, b7a18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7a14:	7177      	strb	r7, [r6, #5]
   b7a16:	e7ed      	b.n	b79f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a18:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7a1c:	6803      	ldr	r3, [r0, #0]
   b7a1e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7a22:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7a26:	69dc      	ldr	r4, [r3, #28]
   b7a28:	463a      	mov	r2, r7
   b7a2a:	4643      	mov	r3, r8
   b7a2c:	4629      	mov	r1, r5
   b7a2e:	46a4      	mov	ip, r4
   b7a30:	b001      	add	sp, #4
   b7a32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a36:	4760      	bx	ip

000b7a38 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a3c:	4607      	mov	r7, r0
   b7a3e:	460c      	mov	r4, r1
   b7a40:	4615      	mov	r5, r2
   b7a42:	461e      	mov	r6, r3
   b7a44:	f7ff ff6d 	bl	b7922 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7a48:	b948      	cbnz	r0, b7a5e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7a4a:	68b8      	ldr	r0, [r7, #8]
   b7a4c:	6803      	ldr	r3, [r0, #0]
   b7a4e:	699f      	ldr	r7, [r3, #24]
   b7a50:	462a      	mov	r2, r5
   b7a52:	4633      	mov	r3, r6
   b7a54:	4621      	mov	r1, r4
   b7a56:	46bc      	mov	ip, r7
   b7a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7a5c:	4760      	bx	ip
   b7a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a62 <_ZNSt9type_infoD1Ev>:
   b7a62:	4770      	bx	lr

000b7a64 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7a64:	2000      	movs	r0, #0
   b7a66:	4770      	bx	lr

000b7a68 <_ZNKSt9type_infoeqERKS_>:
   b7a68:	4281      	cmp	r1, r0
   b7a6a:	b508      	push	{r3, lr}
   b7a6c:	d00e      	beq.n	b7a8c <_ZNKSt9type_infoeqERKS_+0x24>
   b7a6e:	6840      	ldr	r0, [r0, #4]
   b7a70:	7803      	ldrb	r3, [r0, #0]
   b7a72:	2b2a      	cmp	r3, #42	; 0x2a
   b7a74:	d00c      	beq.n	b7a90 <_ZNKSt9type_infoeqERKS_+0x28>
   b7a76:	6849      	ldr	r1, [r1, #4]
   b7a78:	780b      	ldrb	r3, [r1, #0]
   b7a7a:	2b2a      	cmp	r3, #42	; 0x2a
   b7a7c:	bf08      	it	eq
   b7a7e:	3101      	addeq	r1, #1
   b7a80:	f000 fc70 	bl	b8364 <strcmp>
   b7a84:	fab0 f080 	clz	r0, r0
   b7a88:	0940      	lsrs	r0, r0, #5
   b7a8a:	bd08      	pop	{r3, pc}
   b7a8c:	2001      	movs	r0, #1
   b7a8e:	e7fc      	b.n	b7a8a <_ZNKSt9type_infoeqERKS_+0x22>
   b7a90:	2000      	movs	r0, #0
   b7a92:	e7fa      	b.n	b7a8a <_ZNKSt9type_infoeqERKS_+0x22>

000b7a94 <__aeabi_drsub>:
   b7a94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7a98:	e002      	b.n	b7aa0 <__adddf3>
   b7a9a:	bf00      	nop

000b7a9c <__aeabi_dsub>:
   b7a9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7aa0 <__adddf3>:
   b7aa0:	b530      	push	{r4, r5, lr}
   b7aa2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7aa6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7aaa:	ea94 0f05 	teq	r4, r5
   b7aae:	bf08      	it	eq
   b7ab0:	ea90 0f02 	teqeq	r0, r2
   b7ab4:	bf1f      	itttt	ne
   b7ab6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7aba:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7abe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7ac2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7ac6:	f000 80e2 	beq.w	b7c8e <__adddf3+0x1ee>
   b7aca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7ace:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7ad2:	bfb8      	it	lt
   b7ad4:	426d      	neglt	r5, r5
   b7ad6:	dd0c      	ble.n	b7af2 <__adddf3+0x52>
   b7ad8:	442c      	add	r4, r5
   b7ada:	ea80 0202 	eor.w	r2, r0, r2
   b7ade:	ea81 0303 	eor.w	r3, r1, r3
   b7ae2:	ea82 0000 	eor.w	r0, r2, r0
   b7ae6:	ea83 0101 	eor.w	r1, r3, r1
   b7aea:	ea80 0202 	eor.w	r2, r0, r2
   b7aee:	ea81 0303 	eor.w	r3, r1, r3
   b7af2:	2d36      	cmp	r5, #54	; 0x36
   b7af4:	bf88      	it	hi
   b7af6:	bd30      	pophi	{r4, r5, pc}
   b7af8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7afc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7b00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7b04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7b08:	d002      	beq.n	b7b10 <__adddf3+0x70>
   b7b0a:	4240      	negs	r0, r0
   b7b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7b14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7b18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7b1c:	d002      	beq.n	b7b24 <__adddf3+0x84>
   b7b1e:	4252      	negs	r2, r2
   b7b20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b24:	ea94 0f05 	teq	r4, r5
   b7b28:	f000 80a7 	beq.w	b7c7a <__adddf3+0x1da>
   b7b2c:	f1a4 0401 	sub.w	r4, r4, #1
   b7b30:	f1d5 0e20 	rsbs	lr, r5, #32
   b7b34:	db0d      	blt.n	b7b52 <__adddf3+0xb2>
   b7b36:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7b3a:	fa22 f205 	lsr.w	r2, r2, r5
   b7b3e:	1880      	adds	r0, r0, r2
   b7b40:	f141 0100 	adc.w	r1, r1, #0
   b7b44:	fa03 f20e 	lsl.w	r2, r3, lr
   b7b48:	1880      	adds	r0, r0, r2
   b7b4a:	fa43 f305 	asr.w	r3, r3, r5
   b7b4e:	4159      	adcs	r1, r3
   b7b50:	e00e      	b.n	b7b70 <__adddf3+0xd0>
   b7b52:	f1a5 0520 	sub.w	r5, r5, #32
   b7b56:	f10e 0e20 	add.w	lr, lr, #32
   b7b5a:	2a01      	cmp	r2, #1
   b7b5c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7b60:	bf28      	it	cs
   b7b62:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7b66:	fa43 f305 	asr.w	r3, r3, r5
   b7b6a:	18c0      	adds	r0, r0, r3
   b7b6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7b70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7b74:	d507      	bpl.n	b7b86 <__adddf3+0xe6>
   b7b76:	f04f 0e00 	mov.w	lr, #0
   b7b7a:	f1dc 0c00 	rsbs	ip, ip, #0
   b7b7e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7b82:	eb6e 0101 	sbc.w	r1, lr, r1
   b7b86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7b8a:	d31b      	bcc.n	b7bc4 <__adddf3+0x124>
   b7b8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7b90:	d30c      	bcc.n	b7bac <__adddf3+0x10c>
   b7b92:	0849      	lsrs	r1, r1, #1
   b7b94:	ea5f 0030 	movs.w	r0, r0, rrx
   b7b98:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7b9c:	f104 0401 	add.w	r4, r4, #1
   b7ba0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7ba4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7ba8:	f080 809a 	bcs.w	b7ce0 <__adddf3+0x240>
   b7bac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7bb0:	bf08      	it	eq
   b7bb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7bb6:	f150 0000 	adcs.w	r0, r0, #0
   b7bba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7bbe:	ea41 0105 	orr.w	r1, r1, r5
   b7bc2:	bd30      	pop	{r4, r5, pc}
   b7bc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7bc8:	4140      	adcs	r0, r0
   b7bca:	eb41 0101 	adc.w	r1, r1, r1
   b7bce:	3c01      	subs	r4, #1
   b7bd0:	bf28      	it	cs
   b7bd2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7bd6:	d2e9      	bcs.n	b7bac <__adddf3+0x10c>
   b7bd8:	f091 0f00 	teq	r1, #0
   b7bdc:	bf04      	itt	eq
   b7bde:	4601      	moveq	r1, r0
   b7be0:	2000      	moveq	r0, #0
   b7be2:	fab1 f381 	clz	r3, r1
   b7be6:	bf08      	it	eq
   b7be8:	3320      	addeq	r3, #32
   b7bea:	f1a3 030b 	sub.w	r3, r3, #11
   b7bee:	f1b3 0220 	subs.w	r2, r3, #32
   b7bf2:	da0c      	bge.n	b7c0e <__adddf3+0x16e>
   b7bf4:	320c      	adds	r2, #12
   b7bf6:	dd08      	ble.n	b7c0a <__adddf3+0x16a>
   b7bf8:	f102 0c14 	add.w	ip, r2, #20
   b7bfc:	f1c2 020c 	rsb	r2, r2, #12
   b7c00:	fa01 f00c 	lsl.w	r0, r1, ip
   b7c04:	fa21 f102 	lsr.w	r1, r1, r2
   b7c08:	e00c      	b.n	b7c24 <__adddf3+0x184>
   b7c0a:	f102 0214 	add.w	r2, r2, #20
   b7c0e:	bfd8      	it	le
   b7c10:	f1c2 0c20 	rsble	ip, r2, #32
   b7c14:	fa01 f102 	lsl.w	r1, r1, r2
   b7c18:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7c1c:	bfdc      	itt	le
   b7c1e:	ea41 010c 	orrle.w	r1, r1, ip
   b7c22:	4090      	lslle	r0, r2
   b7c24:	1ae4      	subs	r4, r4, r3
   b7c26:	bfa2      	ittt	ge
   b7c28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7c2c:	4329      	orrge	r1, r5
   b7c2e:	bd30      	popge	{r4, r5, pc}
   b7c30:	ea6f 0404 	mvn.w	r4, r4
   b7c34:	3c1f      	subs	r4, #31
   b7c36:	da1c      	bge.n	b7c72 <__adddf3+0x1d2>
   b7c38:	340c      	adds	r4, #12
   b7c3a:	dc0e      	bgt.n	b7c5a <__adddf3+0x1ba>
   b7c3c:	f104 0414 	add.w	r4, r4, #20
   b7c40:	f1c4 0220 	rsb	r2, r4, #32
   b7c44:	fa20 f004 	lsr.w	r0, r0, r4
   b7c48:	fa01 f302 	lsl.w	r3, r1, r2
   b7c4c:	ea40 0003 	orr.w	r0, r0, r3
   b7c50:	fa21 f304 	lsr.w	r3, r1, r4
   b7c54:	ea45 0103 	orr.w	r1, r5, r3
   b7c58:	bd30      	pop	{r4, r5, pc}
   b7c5a:	f1c4 040c 	rsb	r4, r4, #12
   b7c5e:	f1c4 0220 	rsb	r2, r4, #32
   b7c62:	fa20 f002 	lsr.w	r0, r0, r2
   b7c66:	fa01 f304 	lsl.w	r3, r1, r4
   b7c6a:	ea40 0003 	orr.w	r0, r0, r3
   b7c6e:	4629      	mov	r1, r5
   b7c70:	bd30      	pop	{r4, r5, pc}
   b7c72:	fa21 f004 	lsr.w	r0, r1, r4
   b7c76:	4629      	mov	r1, r5
   b7c78:	bd30      	pop	{r4, r5, pc}
   b7c7a:	f094 0f00 	teq	r4, #0
   b7c7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7c82:	bf06      	itte	eq
   b7c84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7c88:	3401      	addeq	r4, #1
   b7c8a:	3d01      	subne	r5, #1
   b7c8c:	e74e      	b.n	b7b2c <__adddf3+0x8c>
   b7c8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7c92:	bf18      	it	ne
   b7c94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7c98:	d029      	beq.n	b7cee <__adddf3+0x24e>
   b7c9a:	ea94 0f05 	teq	r4, r5
   b7c9e:	bf08      	it	eq
   b7ca0:	ea90 0f02 	teqeq	r0, r2
   b7ca4:	d005      	beq.n	b7cb2 <__adddf3+0x212>
   b7ca6:	ea54 0c00 	orrs.w	ip, r4, r0
   b7caa:	bf04      	itt	eq
   b7cac:	4619      	moveq	r1, r3
   b7cae:	4610      	moveq	r0, r2
   b7cb0:	bd30      	pop	{r4, r5, pc}
   b7cb2:	ea91 0f03 	teq	r1, r3
   b7cb6:	bf1e      	ittt	ne
   b7cb8:	2100      	movne	r1, #0
   b7cba:	2000      	movne	r0, #0
   b7cbc:	bd30      	popne	{r4, r5, pc}
   b7cbe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7cc2:	d105      	bne.n	b7cd0 <__adddf3+0x230>
   b7cc4:	0040      	lsls	r0, r0, #1
   b7cc6:	4149      	adcs	r1, r1
   b7cc8:	bf28      	it	cs
   b7cca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7cce:	bd30      	pop	{r4, r5, pc}
   b7cd0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7cd4:	bf3c      	itt	cc
   b7cd6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7cda:	bd30      	popcc	{r4, r5, pc}
   b7cdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ce0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7ce4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7ce8:	f04f 0000 	mov.w	r0, #0
   b7cec:	bd30      	pop	{r4, r5, pc}
   b7cee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7cf2:	bf1a      	itte	ne
   b7cf4:	4619      	movne	r1, r3
   b7cf6:	4610      	movne	r0, r2
   b7cf8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7cfc:	bf1c      	itt	ne
   b7cfe:	460b      	movne	r3, r1
   b7d00:	4602      	movne	r2, r0
   b7d02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7d06:	bf06      	itte	eq
   b7d08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7d0c:	ea91 0f03 	teqeq	r1, r3
   b7d10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7d14:	bd30      	pop	{r4, r5, pc}
   b7d16:	bf00      	nop

000b7d18 <__aeabi_ui2d>:
   b7d18:	f090 0f00 	teq	r0, #0
   b7d1c:	bf04      	itt	eq
   b7d1e:	2100      	moveq	r1, #0
   b7d20:	4770      	bxeq	lr
   b7d22:	b530      	push	{r4, r5, lr}
   b7d24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d2c:	f04f 0500 	mov.w	r5, #0
   b7d30:	f04f 0100 	mov.w	r1, #0
   b7d34:	e750      	b.n	b7bd8 <__adddf3+0x138>
   b7d36:	bf00      	nop

000b7d38 <__aeabi_i2d>:
   b7d38:	f090 0f00 	teq	r0, #0
   b7d3c:	bf04      	itt	eq
   b7d3e:	2100      	moveq	r1, #0
   b7d40:	4770      	bxeq	lr
   b7d42:	b530      	push	{r4, r5, lr}
   b7d44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7d50:	bf48      	it	mi
   b7d52:	4240      	negmi	r0, r0
   b7d54:	f04f 0100 	mov.w	r1, #0
   b7d58:	e73e      	b.n	b7bd8 <__adddf3+0x138>
   b7d5a:	bf00      	nop

000b7d5c <__aeabi_f2d>:
   b7d5c:	0042      	lsls	r2, r0, #1
   b7d5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7d62:	ea4f 0131 	mov.w	r1, r1, rrx
   b7d66:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7d6a:	bf1f      	itttt	ne
   b7d6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7d70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7d74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7d78:	4770      	bxne	lr
   b7d7a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7d7e:	bf08      	it	eq
   b7d80:	4770      	bxeq	lr
   b7d82:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7d86:	bf04      	itt	eq
   b7d88:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7d8c:	4770      	bxeq	lr
   b7d8e:	b530      	push	{r4, r5, lr}
   b7d90:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7d94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7d9c:	e71c      	b.n	b7bd8 <__adddf3+0x138>
   b7d9e:	bf00      	nop

000b7da0 <__aeabi_ul2d>:
   b7da0:	ea50 0201 	orrs.w	r2, r0, r1
   b7da4:	bf08      	it	eq
   b7da6:	4770      	bxeq	lr
   b7da8:	b530      	push	{r4, r5, lr}
   b7daa:	f04f 0500 	mov.w	r5, #0
   b7dae:	e00a      	b.n	b7dc6 <__aeabi_l2d+0x16>

000b7db0 <__aeabi_l2d>:
   b7db0:	ea50 0201 	orrs.w	r2, r0, r1
   b7db4:	bf08      	it	eq
   b7db6:	4770      	bxeq	lr
   b7db8:	b530      	push	{r4, r5, lr}
   b7dba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7dbe:	d502      	bpl.n	b7dc6 <__aeabi_l2d+0x16>
   b7dc0:	4240      	negs	r0, r0
   b7dc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7dc6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7dca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7dce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7dd2:	f43f aed8 	beq.w	b7b86 <__adddf3+0xe6>
   b7dd6:	f04f 0203 	mov.w	r2, #3
   b7dda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7dde:	bf18      	it	ne
   b7de0:	3203      	addne	r2, #3
   b7de2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7de6:	bf18      	it	ne
   b7de8:	3203      	addne	r2, #3
   b7dea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7dee:	f1c2 0320 	rsb	r3, r2, #32
   b7df2:	fa00 fc03 	lsl.w	ip, r0, r3
   b7df6:	fa20 f002 	lsr.w	r0, r0, r2
   b7dfa:	fa01 fe03 	lsl.w	lr, r1, r3
   b7dfe:	ea40 000e 	orr.w	r0, r0, lr
   b7e02:	fa21 f102 	lsr.w	r1, r1, r2
   b7e06:	4414      	add	r4, r2
   b7e08:	e6bd      	b.n	b7b86 <__adddf3+0xe6>
   b7e0a:	bf00      	nop

000b7e0c <__aeabi_dmul>:
   b7e0c:	b570      	push	{r4, r5, r6, lr}
   b7e0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7e12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7e16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7e1a:	bf1d      	ittte	ne
   b7e1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7e20:	ea94 0f0c 	teqne	r4, ip
   b7e24:	ea95 0f0c 	teqne	r5, ip
   b7e28:	f000 f8de 	bleq	b7fe8 <__aeabi_dmul+0x1dc>
   b7e2c:	442c      	add	r4, r5
   b7e2e:	ea81 0603 	eor.w	r6, r1, r3
   b7e32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7e36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7e3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7e3e:	bf18      	it	ne
   b7e40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7e44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7e4c:	d038      	beq.n	b7ec0 <__aeabi_dmul+0xb4>
   b7e4e:	fba0 ce02 	umull	ip, lr, r0, r2
   b7e52:	f04f 0500 	mov.w	r5, #0
   b7e56:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7e5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7e5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7e62:	f04f 0600 	mov.w	r6, #0
   b7e66:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7e6a:	f09c 0f00 	teq	ip, #0
   b7e6e:	bf18      	it	ne
   b7e70:	f04e 0e01 	orrne.w	lr, lr, #1
   b7e74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7e78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7e7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7e80:	d204      	bcs.n	b7e8c <__aeabi_dmul+0x80>
   b7e82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7e86:	416d      	adcs	r5, r5
   b7e88:	eb46 0606 	adc.w	r6, r6, r6
   b7e8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7e90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7e94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7e98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7e9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7ea0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7ea4:	bf88      	it	hi
   b7ea6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7eaa:	d81e      	bhi.n	b7eea <__aeabi_dmul+0xde>
   b7eac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7eb0:	bf08      	it	eq
   b7eb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7eb6:	f150 0000 	adcs.w	r0, r0, #0
   b7eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7ebe:	bd70      	pop	{r4, r5, r6, pc}
   b7ec0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7ec4:	ea46 0101 	orr.w	r1, r6, r1
   b7ec8:	ea40 0002 	orr.w	r0, r0, r2
   b7ecc:	ea81 0103 	eor.w	r1, r1, r3
   b7ed0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7ed4:	bfc2      	ittt	gt
   b7ed6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7eda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7ede:	bd70      	popgt	{r4, r5, r6, pc}
   b7ee0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7ee4:	f04f 0e00 	mov.w	lr, #0
   b7ee8:	3c01      	subs	r4, #1
   b7eea:	f300 80ab 	bgt.w	b8044 <__aeabi_dmul+0x238>
   b7eee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7ef2:	bfde      	ittt	le
   b7ef4:	2000      	movle	r0, #0
   b7ef6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7efa:	bd70      	pople	{r4, r5, r6, pc}
   b7efc:	f1c4 0400 	rsb	r4, r4, #0
   b7f00:	3c20      	subs	r4, #32
   b7f02:	da35      	bge.n	b7f70 <__aeabi_dmul+0x164>
   b7f04:	340c      	adds	r4, #12
   b7f06:	dc1b      	bgt.n	b7f40 <__aeabi_dmul+0x134>
   b7f08:	f104 0414 	add.w	r4, r4, #20
   b7f0c:	f1c4 0520 	rsb	r5, r4, #32
   b7f10:	fa00 f305 	lsl.w	r3, r0, r5
   b7f14:	fa20 f004 	lsr.w	r0, r0, r4
   b7f18:	fa01 f205 	lsl.w	r2, r1, r5
   b7f1c:	ea40 0002 	orr.w	r0, r0, r2
   b7f20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7f28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f2c:	fa21 f604 	lsr.w	r6, r1, r4
   b7f30:	eb42 0106 	adc.w	r1, r2, r6
   b7f34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f38:	bf08      	it	eq
   b7f3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f3e:	bd70      	pop	{r4, r5, r6, pc}
   b7f40:	f1c4 040c 	rsb	r4, r4, #12
   b7f44:	f1c4 0520 	rsb	r5, r4, #32
   b7f48:	fa00 f304 	lsl.w	r3, r0, r4
   b7f4c:	fa20 f005 	lsr.w	r0, r0, r5
   b7f50:	fa01 f204 	lsl.w	r2, r1, r4
   b7f54:	ea40 0002 	orr.w	r0, r0, r2
   b7f58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f60:	f141 0100 	adc.w	r1, r1, #0
   b7f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f68:	bf08      	it	eq
   b7f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f6e:	bd70      	pop	{r4, r5, r6, pc}
   b7f70:	f1c4 0520 	rsb	r5, r4, #32
   b7f74:	fa00 f205 	lsl.w	r2, r0, r5
   b7f78:	ea4e 0e02 	orr.w	lr, lr, r2
   b7f7c:	fa20 f304 	lsr.w	r3, r0, r4
   b7f80:	fa01 f205 	lsl.w	r2, r1, r5
   b7f84:	ea43 0302 	orr.w	r3, r3, r2
   b7f88:	fa21 f004 	lsr.w	r0, r1, r4
   b7f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7f90:	fa21 f204 	lsr.w	r2, r1, r4
   b7f94:	ea20 0002 	bic.w	r0, r0, r2
   b7f98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7fa0:	bf08      	it	eq
   b7fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7fa6:	bd70      	pop	{r4, r5, r6, pc}
   b7fa8:	f094 0f00 	teq	r4, #0
   b7fac:	d10f      	bne.n	b7fce <__aeabi_dmul+0x1c2>
   b7fae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7fb2:	0040      	lsls	r0, r0, #1
   b7fb4:	eb41 0101 	adc.w	r1, r1, r1
   b7fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7fbc:	bf08      	it	eq
   b7fbe:	3c01      	subeq	r4, #1
   b7fc0:	d0f7      	beq.n	b7fb2 <__aeabi_dmul+0x1a6>
   b7fc2:	ea41 0106 	orr.w	r1, r1, r6
   b7fc6:	f095 0f00 	teq	r5, #0
   b7fca:	bf18      	it	ne
   b7fcc:	4770      	bxne	lr
   b7fce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7fd2:	0052      	lsls	r2, r2, #1
   b7fd4:	eb43 0303 	adc.w	r3, r3, r3
   b7fd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7fdc:	bf08      	it	eq
   b7fde:	3d01      	subeq	r5, #1
   b7fe0:	d0f7      	beq.n	b7fd2 <__aeabi_dmul+0x1c6>
   b7fe2:	ea43 0306 	orr.w	r3, r3, r6
   b7fe6:	4770      	bx	lr
   b7fe8:	ea94 0f0c 	teq	r4, ip
   b7fec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7ff0:	bf18      	it	ne
   b7ff2:	ea95 0f0c 	teqne	r5, ip
   b7ff6:	d00c      	beq.n	b8012 <__aeabi_dmul+0x206>
   b7ff8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7ffc:	bf18      	it	ne
   b7ffe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8002:	d1d1      	bne.n	b7fa8 <__aeabi_dmul+0x19c>
   b8004:	ea81 0103 	eor.w	r1, r1, r3
   b8008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b800c:	f04f 0000 	mov.w	r0, #0
   b8010:	bd70      	pop	{r4, r5, r6, pc}
   b8012:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8016:	bf06      	itte	eq
   b8018:	4610      	moveq	r0, r2
   b801a:	4619      	moveq	r1, r3
   b801c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8020:	d019      	beq.n	b8056 <__aeabi_dmul+0x24a>
   b8022:	ea94 0f0c 	teq	r4, ip
   b8026:	d102      	bne.n	b802e <__aeabi_dmul+0x222>
   b8028:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b802c:	d113      	bne.n	b8056 <__aeabi_dmul+0x24a>
   b802e:	ea95 0f0c 	teq	r5, ip
   b8032:	d105      	bne.n	b8040 <__aeabi_dmul+0x234>
   b8034:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8038:	bf1c      	itt	ne
   b803a:	4610      	movne	r0, r2
   b803c:	4619      	movne	r1, r3
   b803e:	d10a      	bne.n	b8056 <__aeabi_dmul+0x24a>
   b8040:	ea81 0103 	eor.w	r1, r1, r3
   b8044:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8048:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b804c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8050:	f04f 0000 	mov.w	r0, #0
   b8054:	bd70      	pop	{r4, r5, r6, pc}
   b8056:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b805a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b805e:	bd70      	pop	{r4, r5, r6, pc}

000b8060 <__aeabi_ddiv>:
   b8060:	b570      	push	{r4, r5, r6, lr}
   b8062:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8066:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b806a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b806e:	bf1d      	ittte	ne
   b8070:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8074:	ea94 0f0c 	teqne	r4, ip
   b8078:	ea95 0f0c 	teqne	r5, ip
   b807c:	f000 f8a7 	bleq	b81ce <__aeabi_ddiv+0x16e>
   b8080:	eba4 0405 	sub.w	r4, r4, r5
   b8084:	ea81 0e03 	eor.w	lr, r1, r3
   b8088:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b808c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8090:	f000 8088 	beq.w	b81a4 <__aeabi_ddiv+0x144>
   b8094:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8098:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b809c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b80a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b80a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b80a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b80ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b80b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b80b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b80b8:	429d      	cmp	r5, r3
   b80ba:	bf08      	it	eq
   b80bc:	4296      	cmpeq	r6, r2
   b80be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b80c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b80c6:	d202      	bcs.n	b80ce <__aeabi_ddiv+0x6e>
   b80c8:	085b      	lsrs	r3, r3, #1
   b80ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b80ce:	1ab6      	subs	r6, r6, r2
   b80d0:	eb65 0503 	sbc.w	r5, r5, r3
   b80d4:	085b      	lsrs	r3, r3, #1
   b80d6:	ea4f 0232 	mov.w	r2, r2, rrx
   b80da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b80de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b80e2:	ebb6 0e02 	subs.w	lr, r6, r2
   b80e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b80ea:	bf22      	ittt	cs
   b80ec:	1ab6      	subcs	r6, r6, r2
   b80ee:	4675      	movcs	r5, lr
   b80f0:	ea40 000c 	orrcs.w	r0, r0, ip
   b80f4:	085b      	lsrs	r3, r3, #1
   b80f6:	ea4f 0232 	mov.w	r2, r2, rrx
   b80fa:	ebb6 0e02 	subs.w	lr, r6, r2
   b80fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8102:	bf22      	ittt	cs
   b8104:	1ab6      	subcs	r6, r6, r2
   b8106:	4675      	movcs	r5, lr
   b8108:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b810c:	085b      	lsrs	r3, r3, #1
   b810e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8112:	ebb6 0e02 	subs.w	lr, r6, r2
   b8116:	eb75 0e03 	sbcs.w	lr, r5, r3
   b811a:	bf22      	ittt	cs
   b811c:	1ab6      	subcs	r6, r6, r2
   b811e:	4675      	movcs	r5, lr
   b8120:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8124:	085b      	lsrs	r3, r3, #1
   b8126:	ea4f 0232 	mov.w	r2, r2, rrx
   b812a:	ebb6 0e02 	subs.w	lr, r6, r2
   b812e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8132:	bf22      	ittt	cs
   b8134:	1ab6      	subcs	r6, r6, r2
   b8136:	4675      	movcs	r5, lr
   b8138:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b813c:	ea55 0e06 	orrs.w	lr, r5, r6
   b8140:	d018      	beq.n	b8174 <__aeabi_ddiv+0x114>
   b8142:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8146:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b814a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b814e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8152:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8156:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b815a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b815e:	d1c0      	bne.n	b80e2 <__aeabi_ddiv+0x82>
   b8160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8164:	d10b      	bne.n	b817e <__aeabi_ddiv+0x11e>
   b8166:	ea41 0100 	orr.w	r1, r1, r0
   b816a:	f04f 0000 	mov.w	r0, #0
   b816e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8172:	e7b6      	b.n	b80e2 <__aeabi_ddiv+0x82>
   b8174:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8178:	bf04      	itt	eq
   b817a:	4301      	orreq	r1, r0
   b817c:	2000      	moveq	r0, #0
   b817e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8182:	bf88      	it	hi
   b8184:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8188:	f63f aeaf 	bhi.w	b7eea <__aeabi_dmul+0xde>
   b818c:	ebb5 0c03 	subs.w	ip, r5, r3
   b8190:	bf04      	itt	eq
   b8192:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8196:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b819a:	f150 0000 	adcs.w	r0, r0, #0
   b819e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b81a2:	bd70      	pop	{r4, r5, r6, pc}
   b81a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b81a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b81ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b81b0:	bfc2      	ittt	gt
   b81b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b81b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b81ba:	bd70      	popgt	{r4, r5, r6, pc}
   b81bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b81c0:	f04f 0e00 	mov.w	lr, #0
   b81c4:	3c01      	subs	r4, #1
   b81c6:	e690      	b.n	b7eea <__aeabi_dmul+0xde>
   b81c8:	ea45 0e06 	orr.w	lr, r5, r6
   b81cc:	e68d      	b.n	b7eea <__aeabi_dmul+0xde>
   b81ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b81d2:	ea94 0f0c 	teq	r4, ip
   b81d6:	bf08      	it	eq
   b81d8:	ea95 0f0c 	teqeq	r5, ip
   b81dc:	f43f af3b 	beq.w	b8056 <__aeabi_dmul+0x24a>
   b81e0:	ea94 0f0c 	teq	r4, ip
   b81e4:	d10a      	bne.n	b81fc <__aeabi_ddiv+0x19c>
   b81e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b81ea:	f47f af34 	bne.w	b8056 <__aeabi_dmul+0x24a>
   b81ee:	ea95 0f0c 	teq	r5, ip
   b81f2:	f47f af25 	bne.w	b8040 <__aeabi_dmul+0x234>
   b81f6:	4610      	mov	r0, r2
   b81f8:	4619      	mov	r1, r3
   b81fa:	e72c      	b.n	b8056 <__aeabi_dmul+0x24a>
   b81fc:	ea95 0f0c 	teq	r5, ip
   b8200:	d106      	bne.n	b8210 <__aeabi_ddiv+0x1b0>
   b8202:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8206:	f43f aefd 	beq.w	b8004 <__aeabi_dmul+0x1f8>
   b820a:	4610      	mov	r0, r2
   b820c:	4619      	mov	r1, r3
   b820e:	e722      	b.n	b8056 <__aeabi_dmul+0x24a>
   b8210:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8214:	bf18      	it	ne
   b8216:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b821a:	f47f aec5 	bne.w	b7fa8 <__aeabi_dmul+0x19c>
   b821e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8222:	f47f af0d 	bne.w	b8040 <__aeabi_dmul+0x234>
   b8226:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b822a:	f47f aeeb 	bne.w	b8004 <__aeabi_dmul+0x1f8>
   b822e:	e712      	b.n	b8056 <__aeabi_dmul+0x24a>

000b8230 <__aeabi_d2f>:
   b8230:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8234:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8238:	bf24      	itt	cs
   b823a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b823e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8242:	d90d      	bls.n	b8260 <__aeabi_d2f+0x30>
   b8244:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8248:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b824c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8250:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8254:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8258:	bf08      	it	eq
   b825a:	f020 0001 	biceq.w	r0, r0, #1
   b825e:	4770      	bx	lr
   b8260:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8264:	d121      	bne.n	b82aa <__aeabi_d2f+0x7a>
   b8266:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b826a:	bfbc      	itt	lt
   b826c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8270:	4770      	bxlt	lr
   b8272:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8276:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b827a:	f1c2 0218 	rsb	r2, r2, #24
   b827e:	f1c2 0c20 	rsb	ip, r2, #32
   b8282:	fa10 f30c 	lsls.w	r3, r0, ip
   b8286:	fa20 f002 	lsr.w	r0, r0, r2
   b828a:	bf18      	it	ne
   b828c:	f040 0001 	orrne.w	r0, r0, #1
   b8290:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8294:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8298:	fa03 fc0c 	lsl.w	ip, r3, ip
   b829c:	ea40 000c 	orr.w	r0, r0, ip
   b82a0:	fa23 f302 	lsr.w	r3, r3, r2
   b82a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b82a8:	e7cc      	b.n	b8244 <__aeabi_d2f+0x14>
   b82aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b82ae:	d107      	bne.n	b82c0 <__aeabi_d2f+0x90>
   b82b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b82b4:	bf1e      	ittt	ne
   b82b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b82ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b82be:	4770      	bxne	lr
   b82c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b82c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b82c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b82cc:	4770      	bx	lr
   b82ce:	bf00      	nop

000b82d0 <atexit>:
   b82d0:	2300      	movs	r3, #0
   b82d2:	4601      	mov	r1, r0
   b82d4:	461a      	mov	r2, r3
   b82d6:	4618      	mov	r0, r3
   b82d8:	f000 b85e 	b.w	b8398 <__register_exitproc>

000b82dc <memcpy>:
   b82dc:	440a      	add	r2, r1
   b82de:	4291      	cmp	r1, r2
   b82e0:	f100 33ff 	add.w	r3, r0, #4294967295
   b82e4:	d100      	bne.n	b82e8 <memcpy+0xc>
   b82e6:	4770      	bx	lr
   b82e8:	b510      	push	{r4, lr}
   b82ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   b82ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82f2:	4291      	cmp	r1, r2
   b82f4:	d1f9      	bne.n	b82ea <memcpy+0xe>
   b82f6:	bd10      	pop	{r4, pc}

000b82f8 <memset>:
   b82f8:	4402      	add	r2, r0
   b82fa:	4603      	mov	r3, r0
   b82fc:	4293      	cmp	r3, r2
   b82fe:	d100      	bne.n	b8302 <memset+0xa>
   b8300:	4770      	bx	lr
   b8302:	f803 1b01 	strb.w	r1, [r3], #1
   b8306:	e7f9      	b.n	b82fc <memset+0x4>

000b8308 <srand>:
   b8308:	b538      	push	{r3, r4, r5, lr}
   b830a:	4b10      	ldr	r3, [pc, #64]	; (b834c <srand+0x44>)
   b830c:	681d      	ldr	r5, [r3, #0]
   b830e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8310:	4604      	mov	r4, r0
   b8312:	b9b3      	cbnz	r3, b8342 <srand+0x3a>
   b8314:	2018      	movs	r0, #24
   b8316:	f7fe f811 	bl	b633c <malloc>
   b831a:	4602      	mov	r2, r0
   b831c:	63a8      	str	r0, [r5, #56]	; 0x38
   b831e:	b920      	cbnz	r0, b832a <srand+0x22>
   b8320:	4b0b      	ldr	r3, [pc, #44]	; (b8350 <srand+0x48>)
   b8322:	480c      	ldr	r0, [pc, #48]	; (b8354 <srand+0x4c>)
   b8324:	2142      	movs	r1, #66	; 0x42
   b8326:	f7fe f831 	bl	b638c <__assert_func>
   b832a:	490b      	ldr	r1, [pc, #44]	; (b8358 <srand+0x50>)
   b832c:	4b0b      	ldr	r3, [pc, #44]	; (b835c <srand+0x54>)
   b832e:	e9c0 1300 	strd	r1, r3, [r0]
   b8332:	4b0b      	ldr	r3, [pc, #44]	; (b8360 <srand+0x58>)
   b8334:	6083      	str	r3, [r0, #8]
   b8336:	230b      	movs	r3, #11
   b8338:	8183      	strh	r3, [r0, #12]
   b833a:	2100      	movs	r1, #0
   b833c:	2001      	movs	r0, #1
   b833e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8342:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8344:	2200      	movs	r2, #0
   b8346:	611c      	str	r4, [r3, #16]
   b8348:	615a      	str	r2, [r3, #20]
   b834a:	bd38      	pop	{r3, r4, r5, pc}
   b834c:	2003e520 	.word	0x2003e520
   b8350:	000b8eed 	.word	0x000b8eed
   b8354:	000b8f04 	.word	0x000b8f04
   b8358:	abcd330e 	.word	0xabcd330e
   b835c:	e66d1234 	.word	0xe66d1234
   b8360:	0005deec 	.word	0x0005deec

000b8364 <strcmp>:
   b8364:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8368:	f811 3b01 	ldrb.w	r3, [r1], #1
   b836c:	2a01      	cmp	r2, #1
   b836e:	bf28      	it	cs
   b8370:	429a      	cmpcs	r2, r3
   b8372:	d0f7      	beq.n	b8364 <strcmp>
   b8374:	1ad0      	subs	r0, r2, r3
   b8376:	4770      	bx	lr

000b8378 <strcpy>:
   b8378:	4603      	mov	r3, r0
   b837a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b837e:	f803 2b01 	strb.w	r2, [r3], #1
   b8382:	2a00      	cmp	r2, #0
   b8384:	d1f9      	bne.n	b837a <strcpy+0x2>
   b8386:	4770      	bx	lr

000b8388 <strlen>:
   b8388:	4603      	mov	r3, r0
   b838a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b838e:	2a00      	cmp	r2, #0
   b8390:	d1fb      	bne.n	b838a <strlen+0x2>
   b8392:	1a18      	subs	r0, r3, r0
   b8394:	3801      	subs	r0, #1
   b8396:	4770      	bx	lr

000b8398 <__register_exitproc>:
   b8398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b839c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8458 <__register_exitproc+0xc0>
   b83a0:	4606      	mov	r6, r0
   b83a2:	f8d8 0000 	ldr.w	r0, [r8]
   b83a6:	461f      	mov	r7, r3
   b83a8:	460d      	mov	r5, r1
   b83aa:	4691      	mov	r9, r2
   b83ac:	f000 f856 	bl	b845c <__retarget_lock_acquire_recursive>
   b83b0:	4b25      	ldr	r3, [pc, #148]	; (b8448 <__register_exitproc+0xb0>)
   b83b2:	681c      	ldr	r4, [r3, #0]
   b83b4:	b934      	cbnz	r4, b83c4 <__register_exitproc+0x2c>
   b83b6:	4c25      	ldr	r4, [pc, #148]	; (b844c <__register_exitproc+0xb4>)
   b83b8:	601c      	str	r4, [r3, #0]
   b83ba:	4b25      	ldr	r3, [pc, #148]	; (b8450 <__register_exitproc+0xb8>)
   b83bc:	b113      	cbz	r3, b83c4 <__register_exitproc+0x2c>
   b83be:	681b      	ldr	r3, [r3, #0]
   b83c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b83c4:	6863      	ldr	r3, [r4, #4]
   b83c6:	2b1f      	cmp	r3, #31
   b83c8:	dd07      	ble.n	b83da <__register_exitproc+0x42>
   b83ca:	f8d8 0000 	ldr.w	r0, [r8]
   b83ce:	f000 f847 	bl	b8460 <__retarget_lock_release_recursive>
   b83d2:	f04f 30ff 	mov.w	r0, #4294967295
   b83d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b83da:	b34e      	cbz	r6, b8430 <__register_exitproc+0x98>
   b83dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b83e0:	b988      	cbnz	r0, b8406 <__register_exitproc+0x6e>
   b83e2:	4b1c      	ldr	r3, [pc, #112]	; (b8454 <__register_exitproc+0xbc>)
   b83e4:	b923      	cbnz	r3, b83f0 <__register_exitproc+0x58>
   b83e6:	f8d8 0000 	ldr.w	r0, [r8]
   b83ea:	f000 f838 	bl	b845e <__retarget_lock_release>
   b83ee:	e7f0      	b.n	b83d2 <__register_exitproc+0x3a>
   b83f0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b83f4:	f7fd ffa2 	bl	b633c <malloc>
   b83f8:	2800      	cmp	r0, #0
   b83fa:	d0f4      	beq.n	b83e6 <__register_exitproc+0x4e>
   b83fc:	2300      	movs	r3, #0
   b83fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8402:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8406:	6863      	ldr	r3, [r4, #4]
   b8408:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b840c:	2201      	movs	r2, #1
   b840e:	409a      	lsls	r2, r3
   b8410:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8414:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8418:	4313      	orrs	r3, r2
   b841a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b841e:	2e02      	cmp	r6, #2
   b8420:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8424:	bf02      	ittt	eq
   b8426:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b842a:	4313      	orreq	r3, r2
   b842c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8430:	6863      	ldr	r3, [r4, #4]
   b8432:	f8d8 0000 	ldr.w	r0, [r8]
   b8436:	1c5a      	adds	r2, r3, #1
   b8438:	3302      	adds	r3, #2
   b843a:	6062      	str	r2, [r4, #4]
   b843c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8440:	f000 f80e 	bl	b8460 <__retarget_lock_release_recursive>
   b8444:	2000      	movs	r0, #0
   b8446:	e7c6      	b.n	b83d6 <__register_exitproc+0x3e>
   b8448:	2003e7e8 	.word	0x2003e7e8
   b844c:	2003e75c 	.word	0x2003e75c
   b8450:	00000000 	.word	0x00000000
   b8454:	000b633d 	.word	0x000b633d
   b8458:	2003e584 	.word	0x2003e584

000b845c <__retarget_lock_acquire_recursive>:
   b845c:	4770      	bx	lr

000b845e <__retarget_lock_release>:
   b845e:	4770      	bx	lr

000b8460 <__retarget_lock_release_recursive>:
   b8460:	4770      	bx	lr

000b8462 <link_code_end>:
	...

000b8464 <dynalib_user>:
   b8464:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8474:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8484:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b8494:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b84a4:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b84b4:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b84c4:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b84d4:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b84e4:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b84f4:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b8504:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   b8514:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   b8524:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b8534:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b8544:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b8554:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b8564:	0a00 754e 526d 6465 3d20 2520 2069 754e     ..NumRed = %i Nu
   b8574:	426d 756c 2065 203d 6925 0a00 6f63 316c     mBlue = %i..col1
   b8584:	3d20 2520 322e 2066 6f63 326c 3d20 2520      = %.2f col2 = %
   b8594:	322e 2066 6f63 336c 3d20 2520 322e 0066     .2f col3 = %.2f.
   b85a4:	500a 6569 6563 6953 6564 3d20 2520 322e     .PieceSide = %.2
   b85b4:	2066 6950 6365 5365 6469 2065 203d 2e25     f PieceSide = %.
   b85c4:	6632 5020 6569 6563 6953 6564 3d20 2520     2f PieceSide = %
   b85d4:	322e 0066 6572 2064 3d20 0020 6c62 6575     .2f.red  = .blue
   b85e4:	3d20 0020 7020 6569 6563 6620 756f 646e      = . piece found
   b85f4:	0a00 206b 203d 6925 6920 3d20 2520 2069     ..k = %i i = %i 
   b8604:	206a 203d 6925                               j = %i.

000b860b <_ZL11hueUsername>:
   b860b:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b861b:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b862b:	7438 334d 4637 5433                          8tM37F3T.

000b8634 <_ZL6COLORS>:
   b8634:	0000 0000 f365 0000 e6ce 0000 d1d2 0000     ....e...........
   b8644:	bcd7 0000 b040 0000 a7db 0000               ....@.......

000b8650 <_ZL8hueHubIP>:
   b8650:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b865c <_ZL9NEOCOLORS>:
   b865c:	0000 00ff 002b 00d5 0055 00aa 0080 0080     ....+...U.......
   b866c:	00aa 0055 00d5 002b 00ff 0000               ..U...+.....

000b8678 <_ZTV16Adafruit_SSD1306>:
	...
   b8680:	4e75 000b 4f05 000b 58dd 000b 683d 000b     uN...O...X..=h..
   b8690:	4e79 000b 52c1 000b 4d01 000b 4b91 000b     yN...R...M...K..
   b86a0:	537f 000b 541d 000b 5453 000b 546f 000b     .S...T..ST..oT..

000b86b0 <_ZL4font>:
   b86b0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b86c0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b86d0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b86e0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b86f0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8700:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8710:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8720:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8730:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8740:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8750:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8760:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8770:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8780:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8790:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b87a0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b87b0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b87c0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b87d0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b87e0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b87f0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8800:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8810:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8820:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8830:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8840:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8850:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8860:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8870:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8880:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8890:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b88a0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b88b0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b88c0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b88d0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b88e0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b88f0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8900:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8910:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8920:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8930:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8940:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8950:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8960:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8970:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8980:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8990:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b89a0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b89b0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b89c0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b89d0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b89e0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b89f0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8a00:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8a10:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8a20:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8a30:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8a40:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8a50:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8a60:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8a70:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8a80:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8a90:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8aa0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8ab0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8ac0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8ad0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8ae0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8af0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b8b00:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b8b10:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8b20:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8b30:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b8b40:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b8b50:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8b60:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8b70:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8b80:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8b90:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8ba0:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8bac <_ZTV12Adafruit_GFX>:
	...
   b8bbc:	58dd 000b 683d 000b 40a5 000b 52c1 000b     .X..=h...@...R..
   b8bcc:	53e7 000b 5403 000b 537f 000b 541d 000b     .S...T...S...T..
   b8bdc:	5453 000b 546f 000b                         ST..oT..

000b8be4 <CSWTCH.88>:
   b8be4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b8bf4:	0050 0000                                   P...

000b8bf8 <_ZTVN5spark13EthernetClassE>:
	...
   b8c00:	640b 000b 6401 000b 63f7 000b 63ed 000b     .d...d...c...c..
   b8c10:	63e1 000b 63d5 000b 7509 000b 7511 000b     .c...c...u...u..
   b8c20:	63c9 000b 63c1 000b 63b7 000b 63ad 000b     .c...c...c...c..
   b8c30:	7541 000b                                   Au..

000b8c34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8c34:	0800 1810 2820 3830                         .... (08

000b8c3c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b8c44:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b8c54:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8c64 <_ZTV9IPAddress>:
	...
   b8c6c:	6b39 000b 6b29 000b 6b2b 000b               9k..)k..+k..

000b8c78 <_ZTV9USBSerial>:
	...
   b8c80:	6c4b 000b 6cb3 000b 6c89 000b 683d 000b     Kl...l...l..=h..
   b8c90:	6c7b 000b 6c4d 000b 6c5d 000b 6cad 000b     {l..Ml..]l...l..
   b8ca0:	6c6d 000b 6c45 000b                         ml..El..

000b8ca8 <_ZTV11USARTSerial>:
	...
   b8cb0:	6d55 000b 6dc1 000b 6d99 000b 683d 000b     Um...m...m..=h..
   b8cc0:	6d69 000b 6d85 000b 6d77 000b 6d93 000b     im...m..wm...m..
   b8cd0:	6d57 000b 6d5b 000b                         Wm..[m..

000b8cd8 <_ZTV7TwoWire>:
	...
   b8ce0:	6df9 000b 6e43 000b 6e1b 000b 6dfb 000b     .m..Cn...n...m..
   b8cf0:	6e23 000b 6e2b 000b 6e33 000b 6e3b 000b     #n..+n..3n..;n..
   b8d00:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b8d10:	2072 203d 6425 0000                         r = %d..

000b8d18 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8d20:	6f39 000b 6f5d 000b 7447 000b 6f6b 000b     9o..]o..Gt..ko..
   b8d30:	6f3d 000b                                   =o..

000b8d34 <_ZTV9TCPClient>:
	...
   b8d3c:	4111 000b 4145 000b 6eb5 000b 6ecf 000b     .A..EA...n...n..
   b8d4c:	72dd 000b 6ef9 000b 7153 000b 6f2d 000b     .r...n..Sq..-o..
   b8d5c:	71e5 000b 7025 000b 7181 000b 7391 000b     .q..%p...q...s..
   b8d6c:	7121 000b 6f2f 000b 6ee1 000b 6f71 000b     !q../o...n..qo..
   b8d7c:	7005 000b                                   .p..

000b8d80 <_ZTVN5spark9WiFiClassE>:
	...
   b8d88:	74ab 000b 74a1 000b 7497 000b 744d 000b     .t...t...t..Mt..
   b8d98:	748b 000b 747f 000b 7509 000b 7511 000b     .t...t...u...u..
   b8da8:	7473 000b 746b 000b 7461 000b 7457 000b     st..kt..at..Wt..
   b8db8:	7541 000b                                   Au..

000b8dbc <_ZTVN5spark12NetworkClassE>:
	...
   b8dc4:	74c9 000b 74d3 000b 74dd 000b 74e7 000b     .t...t...t...t..
   b8dd4:	74f1 000b 74fd 000b 7509 000b 7511 000b     .t...t...u...u..
   b8de4:	7519 000b 7525 000b 752d 000b 7537 000b     .u..%u..-u..7u..
   b8df4:	7541 000b                                   Au..

000b8df8 <_ZSt7nothrow>:
	...

000b8df9 <_ZTSSt19_Sp_make_shared_tag>:
   b8df9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8e09:	6572 5f64 6174 0067 0000                     red_tag....

000b8e14 <_ZTISt19_Sp_make_shared_tag>:
   b8e14:	8e54 000b 8df9 000b                         T.......

000b8e1c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8e1c:	8eb4 000b 8e28 000b 8ed8 000b               ....(.......

000b8e28 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8e28:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8e38:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8e48:	0045 0000                                   E...

000b8e4c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8e4c:	0000 0000 8e1c 000b 78bd 000b 78d1 000b     .........x...x..
   b8e5c:	7a65 000b 7a65 000b 793b 000b 787d 000b     ez..ez..;y..}x..
   b8e6c:	7923 000b 78e5 000b 78af 000b               #y...x...x..

000b8e78 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8e78:	8eb4 000b 8e84 000b 8e1c 000b               ............

000b8e84 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8e84:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8e94:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8ea4:	666e 456f 0000 0000                         nfoE....

000b8eac <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8eac:	0000 0000 8e78 000b 7965 000b 7979 000b     ....x...ey..yy..
   b8ebc:	7a65 000b 7a65 000b 793b 000b 787d 000b     ez..ez..;y..}x..
   b8ecc:	7a39 000b 79c5 000b 798d 000b               9z...y...y..

000b8ed8 <_ZTISt9type_info>:
   b8ed8:	8e54 000b 8ee0 000b                         T.......

000b8ee0 <_ZTSSt9type_info>:
   b8ee0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8ef0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8f00:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8f10:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8f20:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8f30:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8f40:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8f50:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8f60:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8f70:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8f81 <link_const_variable_data_end>:
   b8f81:	00          	.byte	0x00
	...

000b8f84 <link_constructors_location>:
   b8f84:	000b4ae5 	.word	0x000b4ae5
   b8f88:	000b5e25 	.word	0x000b5e25
   b8f8c:	000b6415 	.word	0x000b6415
   b8f90:	000b65a9 	.word	0x000b65a9
   b8f94:	000b682d 	.word	0x000b682d
   b8f98:	000b69b9 	.word	0x000b69b9
   b8f9c:	000b69c9 	.word	0x000b69c9
   b8fa0:	000b69e5 	.word	0x000b69e5
   b8fa4:	000b74b5 	.word	0x000b74b5
   b8fa8:	000b7619 	.word	0x000b7619

000b8fac <link_constructors_end>:
   b8fac:	00000000 	.word	0x00000000
