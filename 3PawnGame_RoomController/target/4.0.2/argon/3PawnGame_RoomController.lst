
c:/Users/cgame/Documents/IoT/CadenG_SmartRoomController/3PawnGame_RoomController/target/4.0.2/argon/3PawnGame_RoomController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000031a0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b71c0  000b71c0  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b71e4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a0  2003e530  000b71e8  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  2003e5d0  2003e5d0  0002e5d0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7288  000b7288  00027288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b72b0  000b72b0  000272b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010bc4f  00000000  00000000  000272b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000120e7  00000000  00000000  00132f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038431  00000000  00000000  00144fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e18  00000000  00000000  0017d41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a360  00000000  00000000  00180233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000379bc  00000000  00000000  0018a593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003be74  00000000  00000000  001c1f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132bbe  00000000  00000000  001fddc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000081e0  00000000  00000000  00330984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fd5d 	bl	b6af0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fd65 	bl	b6b0c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e530 	.word	0x2003e530
   b404c:	000b71e8 	.word	0x000b71e8
   b4050:	2003e5d0 	.word	0x2003e5d0
   b4054:	2003e5d0 	.word	0x2003e5d0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 f96f 	bl	b5344 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b719c 	.word	0x000b719c
   b4080:	000b71c0 	.word	0x000b71c0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b980 	b.w	b4388 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fb67 	bl	b475c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 b90f 	b.w	b52b4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 be47 	b.w	b4d28 <malloc>

000b409a <_Znaj>:
   b409a:	f000 be45 	b.w	b4d28 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 be4b 	b.w	b4d38 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40b2:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40b4:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40b6:	4606      	mov	r6, r0
   b40b8:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40ba:	da0b      	bge.n	b40d4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40bc:	2a0a      	cmp	r2, #10
   b40be:	d109      	bne.n	b40d4 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40c0:	212d      	movs	r1, #45	; 0x2d
   b40c2:	f001 f827 	bl	b5114 <_ZN5Print5printEc>
            val = -n;
   b40c6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40c8:	b2ea      	uxtb	r2, r5
   b40ca:	4630      	mov	r0, r6
    }
}
   b40cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40d0:	f001 b839 	b.w	b5146 <_ZN5Print11printNumberEmh>
            val = n;
   b40d4:	4621      	mov	r1, r4
   b40d6:	e7f7      	b.n	b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40d8 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d8:	b40e      	push	{r1, r2, r3}
   b40da:	b503      	push	{r0, r1, lr}
   b40dc:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40de:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40e6:	f001 f84c 	bl	b5182 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b40ea:	b002      	add	sp, #8
   b40ec:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f0:	b003      	add	sp, #12
   b40f2:	4770      	bx	lr

000b40f4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40f4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40f6:	6984      	ldr	r4, [r0, #24]
   b40f8:	4b0a      	ldr	r3, [pc, #40]	; (b4124 <_ZN9TCPClientD1Ev+0x30>)
   b40fa:	6003      	str	r3, [r0, #0]
   b40fc:	4605      	mov	r5, r0
   b40fe:	b17c      	cbz	r4, b4120 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4100:	6863      	ldr	r3, [r4, #4]
   b4102:	3b01      	subs	r3, #1
   b4104:	6063      	str	r3, [r4, #4]
   b4106:	b95b      	cbnz	r3, b4120 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4108:	6823      	ldr	r3, [r4, #0]
   b410a:	4620      	mov	r0, r4
   b410c:	689b      	ldr	r3, [r3, #8]
   b410e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4110:	68a3      	ldr	r3, [r4, #8]
   b4112:	3b01      	subs	r3, #1
   b4114:	60a3      	str	r3, [r4, #8]
   b4116:	b91b      	cbnz	r3, b4120 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4118:	6823      	ldr	r3, [r4, #0]
   b411a:	4620      	mov	r0, r4
   b411c:	68db      	ldr	r3, [r3, #12]
   b411e:	4798      	blx	r3
   b4120:	4628      	mov	r0, r5
   b4122:	bd38      	pop	{r3, r4, r5, pc}
   b4124:	000b6f54 	.word	0x000b6f54

000b4128 <_ZN9TCPClientD0Ev>:
   b4128:	b510      	push	{r4, lr}
   b412a:	4604      	mov	r4, r0
   b412c:	f7ff ffe2 	bl	b40f4 <_ZN9TCPClientD1Ev>
   b4130:	4620      	mov	r0, r4
   b4132:	211c      	movs	r1, #28
   b4134:	f7ff ffb3 	bl	b409e <_ZdlPvj>
   b4138:	4620      	mov	r0, r4
   b413a:	bd10      	pop	{r4, pc}

000b413c <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4140:	b08c      	sub	sp, #48	; 0x30
   b4142:	4605      	mov	r5, r0
   b4144:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4146:	4668      	mov	r0, sp
   b4148:	4977      	ldr	r1, [pc, #476]	; (b4328 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b414a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b414e:	4614      	mov	r4, r2
   b4150:	461e      	mov	r6, r3
  String command = "";  
   b4152:	f000 ff12 	bl	b4f7a <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4156:	f8df e228 	ldr.w	lr, [pc, #552]	; b4380 <_Z6setHueibiii+0x244>
   b415a:	4974      	ldr	r1, [pc, #464]	; (b432c <_Z6setHueibiii+0x1f0>)
   b415c:	f8de 3000 	ldr.w	r3, [lr]
   b4160:	4873      	ldr	r0, [pc, #460]	; (b4330 <_Z6setHueibiii+0x1f4>)
   b4162:	4a74      	ldr	r2, [pc, #464]	; (b4334 <_Z6setHueibiii+0x1f8>)
   b4164:	f8df c21c 	ldr.w	ip, [pc, #540]	; b4384 <_Z6setHueibiii+0x248>
   b4168:	42ab      	cmp	r3, r5
   b416a:	d119      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b416c:	680b      	ldr	r3, [r1, #0]
   b416e:	42bb      	cmp	r3, r7
   b4170:	d116      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b4172:	6803      	ldr	r3, [r0, #0]
   b4174:	42a3      	cmp	r3, r4
   b4176:	d113      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b4178:	6813      	ldr	r3, [r2, #0]
   b417a:	42b3      	cmp	r3, r6
   b417c:	d110      	bne.n	b41a0 <_Z6setHueibiii+0x64>
   b417e:	f8dc 3000 	ldr.w	r3, [ip]
   b4182:	4543      	cmp	r3, r8
   b4184:	d10c      	bne.n	b41a0 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b4186:	f001 f9ff 	bl	b5588 <_Z16_fetch_usbserialv>
   b418a:	496b      	ldr	r1, [pc, #428]	; (b4338 <_Z6setHueibiii+0x1fc>)
   b418c:	f7ff ffa4 	bl	b40d8 <_ZN5Print6printfEPKcz>
    return false;
   b4190:	2400      	movs	r4, #0
  String command = "";  
   b4192:	4668      	mov	r0, sp
   b4194:	f000 fea6 	bl	b4ee4 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b4198:	4620      	mov	r0, r4
   b419a:	b00c      	add	sp, #48	; 0x30
   b419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41a0:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41a4:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41a6:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41a8:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41aa:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41ae:	2f00      	cmp	r7, #0
   b41b0:	f000 80b5 	beq.w	b431e <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41b4:	4961      	ldr	r1, [pc, #388]	; (b433c <_Z6setHueibiii+0x200>)
   b41b6:	4668      	mov	r0, sp
   b41b8:	f000 ff0d 	bl	b4fd6 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41bc:	4669      	mov	r1, sp
   b41be:	a808      	add	r0, sp, #32
   b41c0:	f000 fefe 	bl	b4fc0 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41c4:	220a      	movs	r2, #10
   b41c6:	4641      	mov	r1, r8
   b41c8:	a804      	add	r0, sp, #16
   b41ca:	f000 ff16 	bl	b4ffa <_ZN6StringC1Eih>
   b41ce:	a904      	add	r1, sp, #16
   b41d0:	a808      	add	r0, sp, #32
   b41d2:	f000 ff49 	bl	b5068 <_ZplRK15StringSumHelperRK6String>
   b41d6:	495a      	ldr	r1, [pc, #360]	; (b4340 <_Z6setHueibiii+0x204>)
   b41d8:	f000 ff52 	bl	b5080 <_ZplRK15StringSumHelperPKc>
   b41dc:	4601      	mov	r1, r0
   b41de:	4668      	mov	r0, sp
   b41e0:	f000 fedf 	bl	b4fa2 <_ZN6StringaSERKS_>
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f000 fe7d 	bl	b4ee4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b41ea:	a808      	add	r0, sp, #32
   b41ec:	f000 fe7a 	bl	b4ee4 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b41f0:	4669      	mov	r1, sp
   b41f2:	a808      	add	r0, sp, #32
   b41f4:	f000 fee4 	bl	b4fc0 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b41f8:	220a      	movs	r2, #10
   b41fa:	4631      	mov	r1, r6
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f000 fefc 	bl	b4ffa <_ZN6StringC1Eih>
   b4202:	a904      	add	r1, sp, #16
   b4204:	a808      	add	r0, sp, #32
   b4206:	f000 ff2f 	bl	b5068 <_ZplRK15StringSumHelperRK6String>
   b420a:	494e      	ldr	r1, [pc, #312]	; (b4344 <_Z6setHueibiii+0x208>)
   b420c:	f000 ff38 	bl	b5080 <_ZplRK15StringSumHelperPKc>
   b4210:	4601      	mov	r1, r0
   b4212:	4668      	mov	r0, sp
   b4214:	f000 fec5 	bl	b4fa2 <_ZN6StringaSERKS_>
   b4218:	a804      	add	r0, sp, #16
   b421a:	f000 fe63 	bl	b4ee4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b421e:	a808      	add	r0, sp, #32
   b4220:	f000 fe60 	bl	b4ee4 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4224:	4669      	mov	r1, sp
   b4226:	a808      	add	r0, sp, #32
   b4228:	f000 feca 	bl	b4fc0 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b422c:	220a      	movs	r2, #10
   b422e:	4621      	mov	r1, r4
   b4230:	a804      	add	r0, sp, #16
   b4232:	f000 fee2 	bl	b4ffa <_ZN6StringC1Eih>
   b4236:	a904      	add	r1, sp, #16
   b4238:	a808      	add	r0, sp, #32
   b423a:	f000 ff15 	bl	b5068 <_ZplRK15StringSumHelperRK6String>
   b423e:	4942      	ldr	r1, [pc, #264]	; (b4348 <_Z6setHueibiii+0x20c>)
   b4240:	f000 ff1e 	bl	b5080 <_ZplRK15StringSumHelperPKc>
   b4244:	4601      	mov	r1, r0
   b4246:	4668      	mov	r0, sp
   b4248:	f000 feab 	bl	b4fa2 <_ZN6StringaSERKS_>
   b424c:	a804      	add	r0, sp, #16
   b424e:	f000 fe49 	bl	b4ee4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4252:	a808      	add	r0, sp, #32
   b4254:	f000 fe46 	bl	b4ee4 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4258:	493c      	ldr	r1, [pc, #240]	; (b434c <_Z6setHueibiii+0x210>)
   b425a:	483d      	ldr	r0, [pc, #244]	; (b4350 <_Z6setHueibiii+0x214>)
   b425c:	2300      	movs	r3, #0
   b425e:	2250      	movs	r2, #80	; 0x50
   b4260:	f001 fb0c 	bl	b587c <_ZN9TCPClient7connectEPKctm>
   b4264:	4604      	mov	r4, r0
   b4266:	2800      	cmp	r0, #0
   b4268:	d093      	beq.n	b4192 <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b426a:	f001 f98d 	bl	b5588 <_Z16_fetch_usbserialv>
   b426e:	4939      	ldr	r1, [pc, #228]	; (b4354 <_Z6setHueibiii+0x218>)
   b4270:	f000 ff5f 	bl	b5132 <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4274:	f001 f988 	bl	b5588 <_Z16_fetch_usbserialv>
   b4278:	9900      	ldr	r1, [sp, #0]
   b427a:	f000 ff5a 	bl	b5132 <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b427e:	4936      	ldr	r1, [pc, #216]	; (b4358 <_Z6setHueibiii+0x21c>)
   b4280:	4833      	ldr	r0, [pc, #204]	; (b4350 <_Z6setHueibiii+0x214>)
   b4282:	f000 ff43 	bl	b510c <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b4286:	4935      	ldr	r1, [pc, #212]	; (b435c <_Z6setHueibiii+0x220>)
   b4288:	4831      	ldr	r0, [pc, #196]	; (b4350 <_Z6setHueibiii+0x214>)
   b428a:	f000 ff3f 	bl	b510c <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b428e:	4934      	ldr	r1, [pc, #208]	; (b4360 <_Z6setHueibiii+0x224>)
   b4290:	482f      	ldr	r0, [pc, #188]	; (b4350 <_Z6setHueibiii+0x214>)
   b4292:	f000 ff3b 	bl	b510c <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b4296:	220a      	movs	r2, #10
   b4298:	482d      	ldr	r0, [pc, #180]	; (b4350 <_Z6setHueibiii+0x214>)
   b429a:	4629      	mov	r1, r5
   b429c:	f7ff ff09 	bl	b40b2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42a0:	4930      	ldr	r1, [pc, #192]	; (b4364 <_Z6setHueibiii+0x228>)
   b42a2:	482b      	ldr	r0, [pc, #172]	; (b4350 <_Z6setHueibiii+0x214>)
   b42a4:	f000 ff45 	bl	b5132 <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42a8:	492f      	ldr	r1, [pc, #188]	; (b4368 <_Z6setHueibiii+0x22c>)
   b42aa:	4829      	ldr	r0, [pc, #164]	; (b4350 <_Z6setHueibiii+0x214>)
   b42ac:	f000 ff41 	bl	b5132 <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42b0:	492e      	ldr	r1, [pc, #184]	; (b436c <_Z6setHueibiii+0x230>)
   b42b2:	4827      	ldr	r0, [pc, #156]	; (b4350 <_Z6setHueibiii+0x214>)
   b42b4:	f000 ff2a 	bl	b510c <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42b8:	4924      	ldr	r1, [pc, #144]	; (b434c <_Z6setHueibiii+0x210>)
   b42ba:	4825      	ldr	r0, [pc, #148]	; (b4350 <_Z6setHueibiii+0x214>)
   b42bc:	f000 ff39 	bl	b5132 <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42c0:	492b      	ldr	r1, [pc, #172]	; (b4370 <_Z6setHueibiii+0x234>)
   b42c2:	4823      	ldr	r0, [pc, #140]	; (b4350 <_Z6setHueibiii+0x214>)
   b42c4:	f000 ff22 	bl	b510c <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42c8:	220a      	movs	r2, #10
   b42ca:	9902      	ldr	r1, [sp, #8]
   b42cc:	4820      	ldr	r0, [pc, #128]	; (b4350 <_Z6setHueibiii+0x214>)
   b42ce:	f000 ff3a 	bl	b5146 <_ZN5Print11printNumberEmh>
        n += println();
   b42d2:	481f      	ldr	r0, [pc, #124]	; (b4350 <_Z6setHueibiii+0x214>)
   b42d4:	f000 ff21 	bl	b511a <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42d8:	4926      	ldr	r1, [pc, #152]	; (b4374 <_Z6setHueibiii+0x238>)
   b42da:	481d      	ldr	r0, [pc, #116]	; (b4350 <_Z6setHueibiii+0x214>)
   b42dc:	f000 ff29 	bl	b5132 <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42e0:	481b      	ldr	r0, [pc, #108]	; (b4350 <_Z6setHueibiii+0x214>)
   b42e2:	f000 ff1a 	bl	b511a <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b42e6:	9900      	ldr	r1, [sp, #0]
   b42e8:	4819      	ldr	r0, [pc, #100]	; (b4350 <_Z6setHueibiii+0x214>)
   b42ea:	f000 ff22 	bl	b5132 <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b42ee:	f001 f94b 	bl	b5588 <_Z16_fetch_usbserialv>
   b42f2:	4921      	ldr	r1, [pc, #132]	; (b4378 <_Z6setHueibiii+0x23c>)
   b42f4:	f000 ff1d 	bl	b5132 <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b42f8:	f001 f946 	bl	b5588 <_Z16_fetch_usbserialv>
   b42fc:	4914      	ldr	r1, [pc, #80]	; (b4350 <_Z6setHueibiii+0x214>)
   b42fe:	4604      	mov	r4, r0
   b4300:	a808      	add	r0, sp, #32
   b4302:	f000 ff85 	bl	b5210 <_ZN6Stream10readStringEv>
   b4306:	9908      	ldr	r1, [sp, #32]
   b4308:	4620      	mov	r0, r4
   b430a:	f000 ff12 	bl	b5132 <_ZN5Print7printlnEPKc>
   b430e:	a808      	add	r0, sp, #32
   b4310:	f000 fde8 	bl	b4ee4 <_ZN6StringD1Ev>
    HueClient.stop();
   b4314:	480e      	ldr	r0, [pc, #56]	; (b4350 <_Z6setHueibiii+0x214>)
   b4316:	f001 fc67 	bl	b5be8 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b431a:	2401      	movs	r4, #1
   b431c:	e739      	b.n	b4192 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b431e:	4917      	ldr	r1, [pc, #92]	; (b437c <_Z6setHueibiii+0x240>)
   b4320:	4668      	mov	r0, sp
   b4322:	f000 fe58 	bl	b4fd6 <_ZN6StringaSEPKc>
   b4326:	e797      	b.n	b4258 <_Z6setHueibiii+0x11c>
   b4328:	000b6ca7 	.word	0x000b6ca7
   b432c:	2003e63c 	.word	0x2003e63c
   b4330:	2003e644 	.word	0x2003e644
   b4334:	2003e634 	.word	0x2003e634
   b4338:	000b6c8c 	.word	0x000b6c8c
   b433c:	000b6ca8 	.word	0x000b6ca8
   b4340:	000b6cba 	.word	0x000b6cba
   b4344:	000b6cc2 	.word	0x000b6cc2
   b4348:	000b6cd5 	.word	0x000b6cd5
   b434c:	000b6e0b 	.word	0x000b6e0b
   b4350:	2003e5d0 	.word	0x2003e5d0
   b4354:	000b6cd7 	.word	0x000b6cd7
   b4358:	000b6cee 	.word	0x000b6cee
   b435c:	000b6de2 	.word	0x000b6de2
   b4360:	000b6cf8 	.word	0x000b6cf8
   b4364:	000b6d01 	.word	0x000b6d01
   b4368:	000b6d11 	.word	0x000b6d11
   b436c:	000b6d1c 	.word	0x000b6d1c
   b4370:	000b6d23 	.word	0x000b6d23
   b4374:	000b6d34 	.word	0x000b6d34
   b4378:	000b6d5b 	.word	0x000b6d5b
   b437c:	000b6cca 	.word	0x000b6cca
   b4380:	2003e638 	.word	0x2003e638
   b4384:	2003e640 	.word	0x2003e640

000b4388 <setup>:

void checkPiecePos ();
void rowSetup ();
void determineAdvantage ();

void setup() {
   b4388:	b530      	push	{r4, r5, lr}
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b438a:	4d34      	ldr	r5, [pc, #208]	; (b445c <setup+0xd4>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b438c:	2300      	movs	r3, #0
   b438e:	b095      	sub	sp, #84	; 0x54
   b4390:	461a      	mov	r2, r3
   b4392:	4619      	mov	r1, r3
   b4394:	6868      	ldr	r0, [r5, #4]
   b4396:	f000 fc6f 	bl	b4c78 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b439a:	2238      	movs	r2, #56	; 0x38
   b439c:	2100      	movs	r1, #0
   b439e:	a806      	add	r0, sp, #24
   b43a0:	f002 fbb4 	bl	b6b0c <memset>
        creds.size = sizeof(creds);
   b43a4:	234c      	movs	r3, #76	; 0x4c
   b43a6:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b43a8:	4b2d      	ldr	r3, [pc, #180]	; (b4460 <setup+0xd8>)
   b43aa:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b43ac:	220a      	movs	r2, #10
   b43ae:	2300      	movs	r3, #0
   b43b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b43b4:	4619      	mov	r1, r3
   b43b6:	aa01      	add	r2, sp, #4
   b43b8:	6868      	ldr	r0, [r5, #4]
        creds.password_len = passwordLen;
   b43ba:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b43bc:	f000 fc7c 	bl	b4cb8 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b43c0:	2300      	movs	r3, #0
   b43c2:	6868      	ldr	r0, [r5, #4]
   b43c4:	461a      	mov	r2, r3
   b43c6:	4619      	mov	r1, r3
   b43c8:	f000 fc36 	bl	b4c38 <network_connect>
        return network_connecting(*this, 0, NULL);
   b43cc:	2200      	movs	r2, #0
   b43ce:	6868      	ldr	r0, [r5, #4]
   b43d0:	4611      	mov	r1, r2
   b43d2:	f000 fc39 	bl	b4c48 <network_connecting>

  WiFi.on();
  WiFi.setCredentials("IoTNetwork");
  WiFi.connect();
  while(WiFi.connecting()) {
   b43d6:	4604      	mov	r4, r0
   b43d8:	b118      	cbz	r0, b43e2 <setup+0x5a>
  delay(1);
   b43da:	2001      	movs	r0, #1
   b43dc:	f000 ff3e 	bl	b525c <delay>
  while(WiFi.connecting()) {
   b43e0:	e7f4      	b.n	b43cc <setup+0x44>
  }

  Serial.begin(9600);
   b43e2:	f001 f8d1 	bl	b5588 <_Z16_fetch_usbserialv>
   b43e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43ea:	f001 f8bd 	bl	b5568 <_ZN9USBSerial5beginEl>
  pinMode(A0,INPUT);
   b43ee:	4621      	mov	r1, r4
   b43f0:	2013      	movs	r0, #19
   b43f2:	f001 fd85 	bl	b5f00 <pinMode>
  pinMode(A1,INPUT);
   b43f6:	4621      	mov	r1, r4
   b43f8:	2012      	movs	r0, #18
   b43fa:	f001 fd81 	bl	b5f00 <pinMode>
  pinMode(A2,INPUT);
   b43fe:	4621      	mov	r1, r4
   b4400:	2011      	movs	r0, #17
   b4402:	f001 fd7d 	bl	b5f00 <pinMode>
  pinMode(D8,OUTPUT);
   b4406:	2101      	movs	r1, #1
   b4408:	2008      	movs	r0, #8
   b440a:	f001 fd79 	bl	b5f00 <pinMode>
  pinMode(D7,OUTPUT);
   b440e:	2101      	movs	r1, #1
   b4410:	2007      	movs	r0, #7
   b4412:	f001 fd75 	bl	b5f00 <pinMode>
  pinMode(D6,OUTPUT);
   b4416:	2101      	movs	r1, #1
   b4418:	2006      	movs	r0, #6
   b441a:	f001 fd71 	bl	b5f00 <pinMode>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b441e:	4620      	mov	r0, r4
   b4420:	f000 fabe 	bl	b49a0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4424:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4428:	4604      	mov	r4, r0
   b442a:	2000      	movs	r0, #0
   b442c:	f000 fab8 	bl	b49a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4430:	1b00      	subs	r0, r0, r4
   b4432:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4436:	42a8      	cmp	r0, r5
   b4438:	f171 0300 	sbcs.w	r3, r1, #0
   b443c:	d207      	bcs.n	b444e <setup+0xc6>
  waitFor(Serial.isConnected,10000);
   b443e:	f001 f8a3 	bl	b5588 <_Z16_fetch_usbserialv>
   b4442:	f001 f895 	bl	b5570 <_ZN9USBSerial11isConnectedEv>
   b4446:	b910      	cbnz	r0, b444e <setup+0xc6>
            spark_process();
   b4448:	f000 fc5e 	bl	b4d08 <spark_process>
        while (_while() && !_condition()) {
   b444c:	e7ed      	b.n	b442a <setup+0xa2>
   b444e:	f001 f89b 	bl	b5588 <_Z16_fetch_usbserialv>
}
   b4452:	b015      	add	sp, #84	; 0x54
   b4454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  waitFor(Serial.isConnected,10000);
   b4458:	f001 b88a 	b.w	b5570 <_ZN9USBSerial11isConnectedEv>
   b445c:	2003e70c 	.word	0x2003e70c
   b4460:	000b6d64 	.word	0x000b6d64

000b4464 <_Z18determineAdvantagev>:
    currentColor = 0;
  }

}

void determineAdvantage () {
   b4464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4468:	f8df 8090 	ldr.w	r8, [pc, #144]	; b44fc <_Z18determineAdvantagev+0x98>
  redPiece = 0;
   b446c:	f8df c090 	ldr.w	ip, [pc, #144]	; b4500 <_Z18determineAdvantagev+0x9c>
  bluePiece = 0;
   b4470:	4f1f      	ldr	r7, [pc, #124]	; (b44f0 <_Z18determineAdvantagev+0x8c>)
  for (j=0;j<3;j++) {
   b4472:	4e20      	ldr	r6, [pc, #128]	; (b44f4 <_Z18determineAdvantagev+0x90>)
   b4474:	f8d8 9000 	ldr.w	r9, [r8]
   b4478:	4c1f      	ldr	r4, [pc, #124]	; (b44f8 <_Z18determineAdvantagev+0x94>)
  redPiece = 0;
   b447a:	2300      	movs	r3, #0
   b447c:	f8cc 3000 	str.w	r3, [ip]
  bluePiece = 0;
   b4480:	603b      	str	r3, [r7, #0]
  for (j=0;j<3;j++) {
   b4482:	6033      	str	r3, [r6, #0]
   b4484:	2504      	movs	r5, #4
   b4486:	4619      	mov	r1, r3
   b4488:	469e      	mov	lr, r3
   b448a:	4618      	mov	r0, r3
   b448c:	461a      	mov	r2, r3
    for (i=0;i<3;i++) {
      if (rowsRead[j][i] == 1) {redPiece ++;}
   b448e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      if (rowsRead[j][i] == 2) {bluePiece ++;}
   b4492:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  for (j=0;j<3;j++) {
   b4496:	3d01      	subs	r5, #1
   b4498:	d01b      	beq.n	b44d2 <_Z18determineAdvantagev+0x6e>
   b449a:	46a1      	mov	r9, r4
   b449c:	2204      	movs	r2, #4
    for (i=0;i<3;i++) {
   b449e:	3a01      	subs	r2, #1
   b44a0:	d012      	beq.n	b44c8 <_Z18determineAdvantagev+0x64>
      if (rowsRead[j][i] == 1) {redPiece ++;}
   b44a2:	ecf9 7a01 	vldmia	r9!, {s15}
   b44a6:	eef4 7a47 	vcmp.f32	s15, s14
   b44aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b44ae:	d103      	bne.n	b44b8 <_Z18determineAdvantagev+0x54>
   b44b0:	3001      	adds	r0, #1
   b44b2:	f04f 0e01 	mov.w	lr, #1
   b44b6:	e7f2      	b.n	b449e <_Z18determineAdvantagev+0x3a>
      if (rowsRead[j][i] == 2) {bluePiece ++;}
   b44b8:	eef4 7a66 	vcmp.f32	s15, s13
   b44bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b44c0:	d1ed      	bne.n	b449e <_Z18determineAdvantagev+0x3a>
   b44c2:	3101      	adds	r1, #1
   b44c4:	2301      	movs	r3, #1
    for (i=0;i<3;i++) {
   b44c6:	e7ea      	b.n	b449e <_Z18determineAdvantagev+0x3a>
  for (j=0;j<3;j++) {
   b44c8:	340c      	adds	r4, #12
   b44ca:	2201      	movs	r2, #1
   b44cc:	f04f 0903 	mov.w	r9, #3
   b44d0:	e7e1      	b.n	b4496 <_Z18determineAdvantagev+0x32>
   b44d2:	b10a      	cbz	r2, b44d8 <_Z18determineAdvantagev+0x74>
   b44d4:	f8c8 9000 	str.w	r9, [r8]
   b44d8:	f1be 0f00 	cmp.w	lr, #0
   b44dc:	d001      	beq.n	b44e2 <_Z18determineAdvantagev+0x7e>
   b44de:	f8cc 0000 	str.w	r0, [ip]
   b44e2:	b103      	cbz	r3, b44e6 <_Z18determineAdvantagev+0x82>
   b44e4:	6039      	str	r1, [r7, #0]
   b44e6:	b10a      	cbz	r2, b44ec <_Z18determineAdvantagev+0x88>
   b44e8:	2303      	movs	r3, #3
   b44ea:	6033      	str	r3, [r6, #0]
    }
  }
}
   b44ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b44f0:	2003e648 	.word	0x2003e648
   b44f4:	2003e68c 	.word	0x2003e68c
   b44f8:	2003e694 	.word	0x2003e694
   b44fc:	2003e688 	.word	0x2003e688
   b4500:	2003e690 	.word	0x2003e690

000b4504 <_Z8rowSetupv>:

void rowSetup () { 
   b4504:	b538      	push	{r3, r4, r5, lr}
  if (currentRow == 0) {
   b4506:	4d2a      	ldr	r5, [pc, #168]	; (b45b0 <_Z8rowSetupv+0xac>)
   b4508:	682c      	ldr	r4, [r5, #0]
   b450a:	b9bc      	cbnz	r4, b453c <_Z8rowSetupv+0x38>
    pinMode(D8,OUTPUT);
   b450c:	2101      	movs	r1, #1
   b450e:	2008      	movs	r0, #8
   b4510:	f001 fcf6 	bl	b5f00 <pinMode>
    pinMode(D7,INPUT);
   b4514:	4621      	mov	r1, r4
   b4516:	2007      	movs	r0, #7
   b4518:	f001 fcf2 	bl	b5f00 <pinMode>
    pinMode(D6,INPUT);
   b451c:	4621      	mov	r1, r4
   b451e:	2006      	movs	r0, #6
   b4520:	f001 fcee 	bl	b5f00 <pinMode>
    digitalWrite(D8,HIGH);
   b4524:	2101      	movs	r1, #1
   b4526:	2008      	movs	r0, #8
   b4528:	f001 fcfb 	bl	b5f22 <digitalWrite>
    digitalWrite(D7,LOW);
   b452c:	4621      	mov	r1, r4
   b452e:	2007      	movs	r0, #7
   b4530:	f001 fcf7 	bl	b5f22 <digitalWrite>
    digitalWrite(D6,LOW);
   b4534:	4621      	mov	r1, r4
   b4536:	2006      	movs	r0, #6
   b4538:	f001 fcf3 	bl	b5f22 <digitalWrite>
  }
  if (currentRow == 1) {
   b453c:	682c      	ldr	r4, [r5, #0]
   b453e:	2c01      	cmp	r4, #1
   b4540:	d117      	bne.n	b4572 <_Z8rowSetupv+0x6e>
    pinMode(D8,INPUT);
   b4542:	2100      	movs	r1, #0
   b4544:	2008      	movs	r0, #8
   b4546:	f001 fcdb 	bl	b5f00 <pinMode>
    pinMode(D7,OUTPUT);
   b454a:	4621      	mov	r1, r4
   b454c:	2007      	movs	r0, #7
   b454e:	f001 fcd7 	bl	b5f00 <pinMode>
    pinMode(D6,INPUT);
   b4552:	2100      	movs	r1, #0
   b4554:	2006      	movs	r0, #6
   b4556:	f001 fcd3 	bl	b5f00 <pinMode>
    digitalWrite(D8,LOW);
   b455a:	2100      	movs	r1, #0
   b455c:	2008      	movs	r0, #8
   b455e:	f001 fce0 	bl	b5f22 <digitalWrite>
    digitalWrite(D7,HIGH);
   b4562:	4621      	mov	r1, r4
   b4564:	2007      	movs	r0, #7
   b4566:	f001 fcdc 	bl	b5f22 <digitalWrite>
    digitalWrite(D6,LOW);
   b456a:	2100      	movs	r1, #0
   b456c:	2006      	movs	r0, #6
   b456e:	f001 fcd8 	bl	b5f22 <digitalWrite>
  }
  if (currentRow == 2) {
   b4572:	682b      	ldr	r3, [r5, #0]
   b4574:	2b02      	cmp	r3, #2
   b4576:	d119      	bne.n	b45ac <_Z8rowSetupv+0xa8>
    pinMode(D8,INPUT);
   b4578:	2100      	movs	r1, #0
   b457a:	2008      	movs	r0, #8
   b457c:	f001 fcc0 	bl	b5f00 <pinMode>
    pinMode(D7,INPUT);
   b4580:	2100      	movs	r1, #0
   b4582:	2007      	movs	r0, #7
   b4584:	f001 fcbc 	bl	b5f00 <pinMode>
    pinMode(D6,OUTPUT);
   b4588:	2101      	movs	r1, #1
   b458a:	2006      	movs	r0, #6
   b458c:	f001 fcb8 	bl	b5f00 <pinMode>
    digitalWrite(D8,LOW);
   b4590:	2100      	movs	r1, #0
   b4592:	2008      	movs	r0, #8
   b4594:	f001 fcc5 	bl	b5f22 <digitalWrite>
    digitalWrite(D7,LOW);
   b4598:	2100      	movs	r1, #0
   b459a:	2007      	movs	r0, #7
   b459c:	f001 fcc1 	bl	b5f22 <digitalWrite>
    digitalWrite(D6,HIGH);
  }
}
   b45a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(D6,HIGH);
   b45a4:	2101      	movs	r1, #1
   b45a6:	2006      	movs	r0, #6
   b45a8:	f001 bcbb 	b.w	b5f22 <digitalWrite>
}
   b45ac:	bd38      	pop	{r3, r4, r5, pc}
   b45ae:	bf00      	nop
   b45b0:	2003e650 	.word	0x2003e650
   b45b4:	00000000 	.word	0x00000000

000b45b8 <_Z13checkPiecePosv>:

void checkPiecePos () {
   b45b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (j=0;j<3;j++) {
   b45bc:	f8df 8198 	ldr.w	r8, [pc, #408]	; b4758 <_Z13checkPiecePosv+0x1a0>
    currentRow = j;
    rowSetup ();
    delay(1000);
    for (i=0;i<3;i++) {
      rowsRead [i][j] = analogRead(i+17)/903.0;
   b45c0:	f8df 9184 	ldr.w	r9, [pc, #388]	; b4748 <_Z13checkPiecePosv+0x190>
   b45c4:	a762      	add	r7, pc, #392	; (adr r7, b4750 <_Z13checkPiecePosv+0x198>)
   b45c6:	e9d7 6700 	ldrd	r6, r7, [r7]
  for (j=0;j<3;j++) {
   b45ca:	2300      	movs	r3, #0
void checkPiecePos () {
   b45cc:	b086      	sub	sp, #24
  for (j=0;j<3;j++) {
   b45ce:	f8c8 3000 	str.w	r3, [r8]
   b45d2:	f8d8 3000 	ldr.w	r3, [r8]
   b45d6:	4c58      	ldr	r4, [pc, #352]	; (b4738 <_Z13checkPiecePosv+0x180>)
   b45d8:	2b02      	cmp	r3, #2
   b45da:	dc5a      	bgt.n	b4692 <_Z13checkPiecePosv+0xda>
    currentRow = j;
   b45dc:	4a57      	ldr	r2, [pc, #348]	; (b473c <_Z13checkPiecePosv+0x184>)
   b45de:	6013      	str	r3, [r2, #0]
    rowSetup ();
   b45e0:	f7ff ff90 	bl	b4504 <_Z8rowSetupv>
    delay(1000);
   b45e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b45e8:	f000 fe38 	bl	b525c <delay>
    for (i=0;i<3;i++) {
   b45ec:	2300      	movs	r3, #0
   b45ee:	6023      	str	r3, [r4, #0]
   b45f0:	6820      	ldr	r0, [r4, #0]
   b45f2:	2802      	cmp	r0, #2
   b45f4:	dc47      	bgt.n	b4686 <_Z13checkPiecePosv+0xce>
      rowsRead [i][j] = analogRead(i+17)/903.0;
   b45f6:	3011      	adds	r0, #17
   b45f8:	b280      	uxth	r0, r0
   b45fa:	f001 fcab 	bl	b5f54 <analogRead>
   b45fe:	f001 ffa5 	bl	b654c <__aeabi_i2d>
   b4602:	4632      	mov	r2, r6
   b4604:	463b      	mov	r3, r7
   b4606:	f002 f935 	bl	b6874 <__aeabi_ddiv>
   b460a:	f002 fa1b 	bl	b6a44 <__aeabi_d2f>
   b460e:	6825      	ldr	r5, [r4, #0]
   b4610:	f8d8 a000 	ldr.w	sl, [r8]
      ead [i][j] = rowsRead [i][j];
   b4614:	494a      	ldr	r1, [pc, #296]	; (b4740 <_Z13checkPiecePosv+0x188>)
      rowsRead [i][j] = analogRead(i+17)/903.0;
   b4616:	ee07 0a90 	vmov	s15, r0
   b461a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      if (rowsRead [i][j] > 1 && rowsRead [i][j] < 2) {rowsRead [i][j] = 1;}
   b461e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      rowsRead [i][j] = analogRead(i+17)/903.0;
   b4622:	4452      	add	r2, sl
      if (rowsRead [i][j] > 1 && rowsRead [i][j] < 2) {rowsRead [i][j] = 1;}
   b4624:	eef4 7ac7 	vcmpe.f32	s15, s14
      rowsRead [i][j] = analogRead(i+17)/903.0;
   b4628:	eb09 0082 	add.w	r0, r9, r2, lsl #2
      if (rowsRead [i][j] > 1 && rowsRead [i][j] < 2) {rowsRead [i][j] = 1;}
   b462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      ead [i][j] = rowsRead [i][j];
   b4630:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      rowsRead [i][j] = analogRead(i+17)/903.0;
   b4634:	ea4f 0345 	mov.w	r3, r5, lsl #1
   b4638:	edc0 7a00 	vstr	s15, [r0]
      ead [i][j] = rowsRead [i][j];
   b463c:	edc2 7a00 	vstr	s15, [r2]
      if (rowsRead [i][j] > 1 && rowsRead [i][j] < 2) {rowsRead [i][j] = 1;}
   b4640:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   b4644:	dd09      	ble.n	b465a <_Z13checkPiecePosv+0xa2>
   b4646:	eef4 7ae6 	vcmpe.f32	s15, s13
   b464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b464e:	d504      	bpl.n	b465a <_Z13checkPiecePosv+0xa2>
   b4650:	ed80 7a00 	vstr	s14, [r0]
    for (i=0;i<3;i++) {
   b4654:	3501      	adds	r5, #1
   b4656:	6025      	str	r5, [r4, #0]
   b4658:	e7ca      	b.n	b45f0 <_Z13checkPiecePosv+0x38>
      if (rowsRead [i][j] > 2) {rowsRead [i][j] = 2;}
   b465a:	eef4 7ae6 	vcmpe.f32	s15, s13
   b465e:	442b      	add	r3, r5
   b4660:	4453      	add	r3, sl
   b4662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4666:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   b466a:	dd02      	ble.n	b4672 <_Z13checkPiecePosv+0xba>
   b466c:	edc3 6a00 	vstr	s13, [r3]
      if (rowsRead [i][j] < 1) {rowsRead [i][j] = 0;}
   b4670:	e7f0      	b.n	b4654 <_Z13checkPiecePosv+0x9c>
   b4672:	edd3 7a00 	vldr	s15, [r3]
   b4676:	eef4 7ac7 	vcmpe.f32	s15, s14
   b467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b467e:	bf44      	itt	mi
   b4680:	2200      	movmi	r2, #0
   b4682:	601a      	strmi	r2, [r3, #0]
   b4684:	e7e6      	b.n	b4654 <_Z13checkPiecePosv+0x9c>
  for (j=0;j<3;j++) {
   b4686:	f8d8 3000 	ldr.w	r3, [r8]
   b468a:	3301      	adds	r3, #1
   b468c:	f8c8 3000 	str.w	r3, [r8]
   b4690:	e79f      	b.n	b45d2 <_Z13checkPiecePosv+0x1a>
    }
  }
  for (i=2;i>=0;i--) {
   b4692:	2302      	movs	r3, #2
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",ead[i][0],ead[i][1],ead[i][2]);
   b4694:	4f2a      	ldr	r7, [pc, #168]	; (b4740 <_Z13checkPiecePosv+0x188>)
   b4696:	4e2b      	ldr	r6, [pc, #172]	; (b4744 <_Z13checkPiecePosv+0x18c>)
  for (i=2;i>=0;i--) {
   b4698:	6023      	str	r3, [r4, #0]
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",ead[i][0],ead[i][1],ead[i][2]);
   b469a:	f04f 080c 	mov.w	r8, #12
   b469e:	f000 ff73 	bl	b5588 <_Z16_fetch_usbserialv>
   b46a2:	6825      	ldr	r5, [r4, #0]
   b46a4:	fb08 7505 	mla	r5, r8, r5, r7
   b46a8:	4681      	mov	r9, r0
   b46aa:	6828      	ldr	r0, [r5, #0]
   b46ac:	f001 ff60 	bl	b6570 <__aeabi_f2d>
   b46b0:	4602      	mov	r2, r0
   b46b2:	460b      	mov	r3, r1
   b46b4:	68a8      	ldr	r0, [r5, #8]
   b46b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b46ba:	f001 ff59 	bl	b6570 <__aeabi_f2d>
   b46be:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b46c2:	6868      	ldr	r0, [r5, #4]
   b46c4:	f001 ff54 	bl	b6570 <__aeabi_f2d>
   b46c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b46cc:	e9cd 0100 	strd	r0, r1, [sp]
   b46d0:	4631      	mov	r1, r6
   b46d2:	4648      	mov	r0, r9
   b46d4:	f7ff fd00 	bl	b40d8 <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b46d8:	6823      	ldr	r3, [r4, #0]
   b46da:	3b01      	subs	r3, #1
   b46dc:	2b00      	cmp	r3, #0
   b46de:	6023      	str	r3, [r4, #0]
   b46e0:	dadd      	bge.n	b469e <_Z13checkPiecePosv+0xe6>
  }
  for (i=2;i>=0;i--) {
   b46e2:	2302      	movs	r3, #2
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",rowsRead[i][0],rowsRead[i][1],rowsRead[i][2]);
   b46e4:	4f18      	ldr	r7, [pc, #96]	; (b4748 <_Z13checkPiecePosv+0x190>)
   b46e6:	4e19      	ldr	r6, [pc, #100]	; (b474c <_Z13checkPiecePosv+0x194>)
  for (i=2;i>=0;i--) {
   b46e8:	6023      	str	r3, [r4, #0]
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",rowsRead[i][0],rowsRead[i][1],rowsRead[i][2]);
   b46ea:	f04f 080c 	mov.w	r8, #12
   b46ee:	f000 ff4b 	bl	b5588 <_Z16_fetch_usbserialv>
   b46f2:	6825      	ldr	r5, [r4, #0]
   b46f4:	fb08 7505 	mla	r5, r8, r5, r7
   b46f8:	4681      	mov	r9, r0
   b46fa:	6828      	ldr	r0, [r5, #0]
   b46fc:	f001 ff38 	bl	b6570 <__aeabi_f2d>
   b4700:	4602      	mov	r2, r0
   b4702:	460b      	mov	r3, r1
   b4704:	68a8      	ldr	r0, [r5, #8]
   b4706:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b470a:	f001 ff31 	bl	b6570 <__aeabi_f2d>
   b470e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4712:	6868      	ldr	r0, [r5, #4]
   b4714:	f001 ff2c 	bl	b6570 <__aeabi_f2d>
   b4718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b471c:	e9cd 0100 	strd	r0, r1, [sp]
   b4720:	4631      	mov	r1, r6
   b4722:	4648      	mov	r0, r9
   b4724:	f7ff fcd8 	bl	b40d8 <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b4728:	6823      	ldr	r3, [r4, #0]
   b472a:	3b01      	subs	r3, #1
   b472c:	2b00      	cmp	r3, #0
   b472e:	6023      	str	r3, [r4, #0]
   b4730:	dadd      	bge.n	b46ee <_Z13checkPiecePosv+0x136>
  }
   b4732:	b006      	add	sp, #24
   b4734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4738:	2003e688 	.word	0x2003e688
   b473c:	2003e650 	.word	0x2003e650
   b4740:	2003e654 	.word	0x2003e654
   b4744:	000b6d6f 	.word	0x000b6d6f
   b4748:	2003e694 	.word	0x2003e694
   b474c:	000b6d94 	.word	0x000b6d94
   b4750:	00000000 	.word	0x00000000
   b4754:	408c3800 	.word	0x408c3800
   b4758:	2003e68c 	.word	0x2003e68c

000b475c <loop>:
void loop() {
   b475c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (redPiece > bluePiece) {currentColor = 3 - (redPiece - bluePiece);}
   b475e:	4d3e      	ldr	r5, [pc, #248]	; (b4858 <loop+0xfc>)
   b4760:	4e3e      	ldr	r6, [pc, #248]	; (b485c <loop+0x100>)
   b4762:	4c3f      	ldr	r4, [pc, #252]	; (b4860 <loop+0x104>)
  checkPiecePos();
   b4764:	f7ff ff28 	bl	b45b8 <_Z13checkPiecePosv>
  determineAdvantage();
   b4768:	f7ff fe7c 	bl	b4464 <_Z18determineAdvantagev>
  if (redPiece > bluePiece) {currentColor = 3 - (redPiece - bluePiece);}
   b476c:	682a      	ldr	r2, [r5, #0]
   b476e:	6833      	ldr	r3, [r6, #0]
   b4770:	429a      	cmp	r2, r3
   b4772:	dd04      	ble.n	b477e <loop+0x22>
   b4774:	1ad3      	subs	r3, r2, r3
   b4776:	f1c3 0303 	rsb	r3, r3, #3
  if (redPiece == bluePiece) {currentColor = 3;}
   b477a:	6023      	str	r3, [r4, #0]
   b477c:	e001      	b.n	b4782 <loop+0x26>
  if (redPiece < bluePiece) {currentColor = 3 + (bluePiece - redPiece);}
   b477e:	db59      	blt.n	b4834 <loop+0xd8>
  if (redPiece == bluePiece) {currentColor = 3;}
   b4780:	d05b      	beq.n	b483a <loop+0xde>
  if (rowsRead[0][0] == 2 || rowsRead[0][1] == 2 || rowsRead[0][2] == 2 /*|| bluePiece == 0*/) {
   b4782:	4f38      	ldr	r7, [pc, #224]	; (b4864 <loop+0x108>)
   b4784:	ed97 7a00 	vldr	s14, [r7]
   b4788:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b478c:	eeb4 7a67 	vcmp.f32	s14, s15
   b4790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4794:	d00d      	beq.n	b47b2 <loop+0x56>
   b4796:	ed97 7a01 	vldr	s14, [r7, #4]
   b479a:	eeb4 7a67 	vcmp.f32	s14, s15
   b479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b47a2:	d006      	beq.n	b47b2 <loop+0x56>
   b47a4:	ed97 7a02 	vldr	s14, [r7, #8]
   b47a8:	eeb4 7a67 	vcmp.f32	s14, s15
   b47ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b47b0:	d10e      	bne.n	b47d0 <loop+0x74>
    setHue(3,false,colors[currentColor],100,255);
   b47b2:	6821      	ldr	r1, [r4, #0]
   b47b4:	4a2c      	ldr	r2, [pc, #176]	; (b4868 <loop+0x10c>)
   b47b6:	23ff      	movs	r3, #255	; 0xff
   b47b8:	9300      	str	r3, [sp, #0]
   b47ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b47be:	2364      	movs	r3, #100	; 0x64
   b47c0:	2100      	movs	r1, #0
   b47c2:	2003      	movs	r0, #3
   b47c4:	f7ff fcba 	bl	b413c <_Z6setHueibiii>
    delay(5000);
   b47c8:	f241 3088 	movw	r0, #5000	; 0x1388
   b47cc:	f000 fd46 	bl	b525c <delay>
  if (rowsRead[2][0] == 1 || rowsRead[2][1] == 1 || rowsRead[2][2] == 1 /*|| redPiece == 0*/) {
   b47d0:	ed97 7a06 	vldr	s14, [r7, #24]
   b47d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b47d8:	eeb4 7a67 	vcmp.f32	s14, s15
   b47dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b47e0:	d00d      	beq.n	b47fe <loop+0xa2>
   b47e2:	ed97 7a07 	vldr	s14, [r7, #28]
   b47e6:	eeb4 7a67 	vcmp.f32	s14, s15
   b47ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b47ee:	d006      	beq.n	b47fe <loop+0xa2>
   b47f0:	ed97 7a08 	vldr	s14, [r7, #32]
   b47f4:	eeb4 7a67 	vcmp.f32	s14, s15
   b47f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b47fc:	d11f      	bne.n	b483e <loop+0xe2>
    setHue(3,true,21485,100,255);
   b47fe:	23ff      	movs	r3, #255	; 0xff
   b4800:	9300      	str	r3, [sp, #0]
   b4802:	f245 32ed 	movw	r2, #21485	; 0x53ed
   b4806:	2364      	movs	r3, #100	; 0x64
   b4808:	2101      	movs	r1, #1
   b480a:	2003      	movs	r0, #3
   b480c:	f7ff fc96 	bl	b413c <_Z6setHueibiii>
    delay(5000);
   b4810:	f241 3088 	movw	r0, #5000	; 0x1388
   b4814:	f000 fd22 	bl	b525c <delay>
  Serial.printf("\nNumRed = %i NumBlue = %i",redPiece,bluePiece);
   b4818:	f000 feb6 	bl	b5588 <_Z16_fetch_usbserialv>
   b481c:	6833      	ldr	r3, [r6, #0]
   b481e:	682a      	ldr	r2, [r5, #0]
   b4820:	4912      	ldr	r1, [pc, #72]	; (b486c <loop+0x110>)
   b4822:	f7ff fc59 	bl	b40d8 <_ZN5Print6printfEPKcz>
  if (currentColor>6) {
   b4826:	6823      	ldr	r3, [r4, #0]
   b4828:	2b06      	cmp	r3, #6
    currentColor = 0;
   b482a:	bfc4      	itt	gt
   b482c:	2300      	movgt	r3, #0
   b482e:	6023      	strgt	r3, [r4, #0]
}
   b4830:	b003      	add	sp, #12
   b4832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (redPiece < bluePiece) {currentColor = 3 + (bluePiece - redPiece);}
   b4834:	1a9b      	subs	r3, r3, r2
   b4836:	3303      	adds	r3, #3
   b4838:	e79f      	b.n	b477a <loop+0x1e>
  if (redPiece == bluePiece) {currentColor = 3;}
   b483a:	2303      	movs	r3, #3
   b483c:	e79d      	b.n	b477a <loop+0x1e>
    setHue(3,true,colors[currentColor],100,255);
   b483e:	6821      	ldr	r1, [r4, #0]
   b4840:	4a09      	ldr	r2, [pc, #36]	; (b4868 <loop+0x10c>)
   b4842:	23ff      	movs	r3, #255	; 0xff
   b4844:	9300      	str	r3, [sp, #0]
   b4846:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b484a:	2364      	movs	r3, #100	; 0x64
   b484c:	2101      	movs	r1, #1
   b484e:	2003      	movs	r0, #3
   b4850:	f7ff fc74 	bl	b413c <_Z6setHueibiii>
   b4854:	e7e0      	b.n	b4818 <loop+0xbc>
   b4856:	bf00      	nop
   b4858:	2003e690 	.word	0x2003e690
   b485c:	2003e648 	.word	0x2003e648
   b4860:	2003e64c 	.word	0x2003e64c
   b4864:	2003e694 	.word	0x2003e694
   b4868:	2003e548 	.word	0x2003e548
   b486c:	000b6dc8 	.word	0x000b6dc8

000b4870 <_GLOBAL__sub_I_SystemMode>:
   b4870:	b508      	push	{r3, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4872:	4b16      	ldr	r3, [pc, #88]	; (b48cc <_GLOBAL__sub_I_SystemMode+0x5c>)
   b4874:	2200      	movs	r2, #0
   b4876:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b487a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b487e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4880:	2003      	movs	r0, #3
   b4882:	f000 f9b5 	bl	b4bf0 <set_system_mode>
String hueCmd;  // Hue command
   b4886:	4912      	ldr	r1, [pc, #72]	; (b48d0 <_GLOBAL__sub_I_SystemMode+0x60>)
   b4888:	4812      	ldr	r0, [pc, #72]	; (b48d4 <_GLOBAL__sub_I_SystemMode+0x64>)
   b488a:	f000 fb76 	bl	b4f7a <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b488e:	4a12      	ldr	r2, [pc, #72]	; (b48d8 <_GLOBAL__sub_I_SystemMode+0x68>)
   b4890:	4b12      	ldr	r3, [pc, #72]	; (b48dc <_GLOBAL__sub_I_SystemMode+0x6c>)
   b4892:	6812      	ldr	r2, [r2, #0]
   b4894:	601a      	str	r2, [r3, #0]
   b4896:	4a12      	ldr	r2, [pc, #72]	; (b48e0 <_GLOBAL__sub_I_SystemMode+0x70>)
TCPClient HueClient;
   b4898:	4812      	ldr	r0, [pc, #72]	; (b48e4 <_GLOBAL__sub_I_SystemMode+0x74>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b489a:	6812      	ldr	r2, [r2, #0]
   b489c:	605a      	str	r2, [r3, #4]
   b489e:	4a12      	ldr	r2, [pc, #72]	; (b48e8 <_GLOBAL__sub_I_SystemMode+0x78>)
   b48a0:	6812      	ldr	r2, [r2, #0]
   b48a2:	609a      	str	r2, [r3, #8]
   b48a4:	4a11      	ldr	r2, [pc, #68]	; (b48ec <_GLOBAL__sub_I_SystemMode+0x7c>)
   b48a6:	6812      	ldr	r2, [r2, #0]
   b48a8:	60da      	str	r2, [r3, #12]
   b48aa:	4a11      	ldr	r2, [pc, #68]	; (b48f0 <_GLOBAL__sub_I_SystemMode+0x80>)
   b48ac:	6812      	ldr	r2, [r2, #0]
   b48ae:	611a      	str	r2, [r3, #16]
   b48b0:	4a10      	ldr	r2, [pc, #64]	; (b48f4 <_GLOBAL__sub_I_SystemMode+0x84>)
   b48b2:	6812      	ldr	r2, [r2, #0]
   b48b4:	615a      	str	r2, [r3, #20]
   b48b6:	4a10      	ldr	r2, [pc, #64]	; (b48f8 <_GLOBAL__sub_I_SystemMode+0x88>)
   b48b8:	6812      	ldr	r2, [r2, #0]
   b48ba:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b48bc:	f001 f9de 	bl	b5c7c <_ZN9TCPClientC1Ev>
   b48c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b48c4:	480d      	ldr	r0, [pc, #52]	; (b48fc <_GLOBAL__sub_I_SystemMode+0x8c>)
   b48c6:	f001 b9d9 	b.w	b5c7c <_ZN9TCPClientC1Ev>
   b48ca:	bf00      	nop
   b48cc:	2003e60c 	.word	0x2003e60c
   b48d0:	000b6ca7 	.word	0x000b6ca7
   b48d4:	2003e678 	.word	0x2003e678
   b48d8:	2003e608 	.word	0x2003e608
   b48dc:	2003e5ec 	.word	0x2003e5ec
   b48e0:	2003e53c 	.word	0x2003e53c
   b48e4:	2003e5d0 	.word	0x2003e5d0
   b48e8:	2003e544 	.word	0x2003e544
   b48ec:	2003e534 	.word	0x2003e534
   b48f0:	2003e530 	.word	0x2003e530
   b48f4:	2003e538 	.word	0x2003e538
   b48f8:	2003e540 	.word	0x2003e540
   b48fc:	2003e618 	.word	0x2003e618

000b4900 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <netdb_freeaddrinfo+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	689b      	ldr	r3, [r3, #8]
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	00030268 	.word	0x00030268

000b4910 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <netdb_getaddrinfo+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	68db      	ldr	r3, [r3, #12]
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	00030268 	.word	0x00030268

000b4920 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <HAL_Validate_Pin_Function+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	685b      	ldr	r3, [r3, #4]
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	0003022c 	.word	0x0003022c

000b4930 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <HAL_Pin_Mode+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	689b      	ldr	r3, [r3, #8]
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	0003022c 	.word	0x0003022c

000b4940 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <HAL_Get_Pin_Mode+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	68db      	ldr	r3, [r3, #12]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	0003022c 	.word	0x0003022c

000b4950 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <HAL_GPIO_Write+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	691b      	ldr	r3, [r3, #16]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	0003022c 	.word	0x0003022c

000b4960 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <hal_adc_read+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	0003022c 	.word	0x0003022c

000b4970 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <if_index_to_name+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	695b      	ldr	r3, [r3, #20]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	0003026c 	.word	0x0003026c

000b4980 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <HAL_RNG_GetRandomNumber+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	685b      	ldr	r3, [r3, #4]
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030218 	.word	0x00030218

000b4990 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	695b      	ldr	r3, [r3, #20]
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030218 	.word	0x00030218

000b49a0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <hal_timer_millis+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030218 	.word	0x00030218

000b49b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <os_mutex_recursive_create+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	00030248 	.word	0x00030248

000b49c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <inet_inet_ntop+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	695b      	ldr	r3, [r3, #20]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	00030264 	.word	0x00030264

000b49d0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <inet_htonl+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	6a1b      	ldr	r3, [r3, #32]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030264 	.word	0x00030264

000b49e0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <inet_htons+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	00030264 	.word	0x00030264

000b49f0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <hal_usart_write+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	68db      	ldr	r3, [r3, #12]
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	0003023c 	.word	0x0003023c

000b4a00 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <hal_usart_available+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	691b      	ldr	r3, [r3, #16]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	0003023c 	.word	0x0003023c

000b4a10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <hal_usart_read+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	695b      	ldr	r3, [r3, #20]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	0003023c 	.word	0x0003023c

000b4a20 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <hal_usart_peek+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	699b      	ldr	r3, [r3, #24]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	0003023c 	.word	0x0003023c

000b4a30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <hal_usart_flush+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	69db      	ldr	r3, [r3, #28]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	0003023c 	.word	0x0003023c

000b4a40 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <hal_usart_is_enabled+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	6a1b      	ldr	r3, [r3, #32]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	0003023c 	.word	0x0003023c

000b4a50 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <hal_usart_available_data_for_write+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	0003023c 	.word	0x0003023c

000b4a60 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <hal_usart_init_ex+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	0003023c 	.word	0x0003023c

000b4a70 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <hal_i2c_write+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6a1b      	ldr	r3, [r3, #32]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030228 	.word	0x00030228

000b4a80 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_i2c_available+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030228 	.word	0x00030228

000b4a90 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_i2c_read+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030228 	.word	0x00030228

000b4aa0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <hal_i2c_peek+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030228 	.word	0x00030228

000b4ab0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <hal_i2c_flush+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030228 	.word	0x00030228

000b4ac0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <hal_i2c_is_enabled+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030228 	.word	0x00030228

000b4ad0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <hal_i2c_init+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030228 	.word	0x00030228

000b4ae0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <sock_setsockopt+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	699b      	ldr	r3, [r3, #24]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030238 	.word	0x00030238

000b4af0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <sock_close+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	69db      	ldr	r3, [r3, #28]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	00030238 	.word	0x00030238

000b4b00 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <sock_connect+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	6a1b      	ldr	r3, [r3, #32]
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030238 	.word	0x00030238

000b4b10 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <sock_recv+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	00030238 	.word	0x00030238

000b4b20 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <sock_send+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030238 	.word	0x00030238

000b4b30 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <sock_socket+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030238 	.word	0x00030238

000b4b40 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <hal_spi_init+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	69db      	ldr	r3, [r3, #28]
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030230 	.word	0x00030230

000b4b50 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <hal_spi_is_enabled+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	6a1b      	ldr	r3, [r3, #32]
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030230 	.word	0x00030230

000b4b60 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <HAL_USB_USART_Init+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	681b      	ldr	r3, [r3, #0]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	0003024c 	.word	0x0003024c

000b4b70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <HAL_USB_USART_Begin+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	685b      	ldr	r3, [r3, #4]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	0003024c 	.word	0x0003024c

000b4b80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <HAL_USB_USART_Available_Data+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	691b      	ldr	r3, [r3, #16]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003024c 	.word	0x0003024c

000b4b90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	0003024c 	.word	0x0003024c

000b4ba0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <HAL_USB_USART_Receive_Data+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	699b      	ldr	r3, [r3, #24]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	0003024c 	.word	0x0003024c

000b4bb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <HAL_USB_USART_Send_Data+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	69db      	ldr	r3, [r3, #28]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	0003024c 	.word	0x0003024c

000b4bc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <HAL_USB_USART_Flush_Data+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	6a1b      	ldr	r3, [r3, #32]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	0003024c 	.word	0x0003024c

000b4bd0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <HAL_USB_USART_Is_Connected+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	0003024c 	.word	0x0003024c

000b4be0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <log_message+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030260 	.word	0x00030260

000b4bf0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <set_system_mode+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	685b      	ldr	r3, [r3, #4]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030220 	.word	0x00030220

000b4c00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <system_delay_ms+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	695b      	ldr	r3, [r3, #20]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030220 	.word	0x00030220

000b4c10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b03      	ldr	r3, [pc, #12]	; (b4c20 <system_ctrl_set_app_request_handler+0x10>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c1a:	9301      	str	r3, [sp, #4]
   b4c1c:	bd08      	pop	{r3, pc}
   b4c1e:	0000      	.short	0x0000
   b4c20:	00030220 	.word	0x00030220

000b4c24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b03      	ldr	r3, [pc, #12]	; (b4c34 <system_ctrl_set_result+0x10>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c2e:	9301      	str	r3, [sp, #4]
   b4c30:	bd08      	pop	{r3, pc}
   b4c32:	0000      	.short	0x0000
   b4c34:	00030220 	.word	0x00030220

000b4c38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <network_connect+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	685b      	ldr	r3, [r3, #4]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030240 	.word	0x00030240

000b4c48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <network_connecting+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	689b      	ldr	r3, [r3, #8]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030240 	.word	0x00030240

000b4c58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <network_disconnect+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	68db      	ldr	r3, [r3, #12]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030240 	.word	0x00030240

000b4c68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <network_ready+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	691b      	ldr	r3, [r3, #16]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030240 	.word	0x00030240

000b4c78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <network_on+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	695b      	ldr	r3, [r3, #20]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030240 	.word	0x00030240

000b4c88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <network_off+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	699b      	ldr	r3, [r3, #24]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030240 	.word	0x00030240

000b4c98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <network_listen+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	69db      	ldr	r3, [r3, #28]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030240 	.word	0x00030240

000b4ca8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <network_listening+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	6a1b      	ldr	r3, [r3, #32]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030240 	.word	0x00030240

000b4cb8 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <network_set_credentials+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030240 	.word	0x00030240

000b4cc8 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <network_set_listen_timeout+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030240 	.word	0x00030240

000b4cd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <network_get_listen_timeout+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030240 	.word	0x00030240

000b4ce8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <network_is_on+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030240 	.word	0x00030240

000b4cf8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <network_is_off+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030240 	.word	0x00030240

000b4d08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <spark_process+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	689b      	ldr	r3, [r3, #8]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030244 	.word	0x00030244

000b4d18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	00030244 	.word	0x00030244

000b4d28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <malloc+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	681b      	ldr	r3, [r3, #0]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003021c 	.word	0x0003021c

000b4d38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <free+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	685b      	ldr	r3, [r3, #4]
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	0003021c 	.word	0x0003021c

000b4d48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <realloc+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	689b      	ldr	r3, [r3, #8]
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	0003021c 	.word	0x0003021c

000b4d58 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <vsnprintf+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	0003021c 	.word	0x0003021c

000b4d68 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <__errno+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	0003021c 	.word	0x0003021c

000b4d78 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <__assert_func+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	0003021c 	.word	0x0003021c

000b4d88 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <newlib_impure_ptr_callback+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	0003021c 	.word	0x0003021c

000b4d98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d98:	2200      	movs	r2, #0
   b4d9a:	6840      	ldr	r0, [r0, #4]
   b4d9c:	4611      	mov	r1, r2
   b4d9e:	f7ff bf83 	b.w	b4ca8 <network_listening>

000b4da2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4da2:	2200      	movs	r2, #0
   b4da4:	6840      	ldr	r0, [r0, #4]
   b4da6:	4611      	mov	r1, r2
   b4da8:	f7ff bf96 	b.w	b4cd8 <network_get_listen_timeout>

000b4dac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	2200      	movs	r2, #0
   b4db0:	f7ff bf8a 	b.w	b4cc8 <network_set_listen_timeout>

000b4db4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	2200      	movs	r2, #0
   b4db8:	f081 0101 	eor.w	r1, r1, #1
   b4dbc:	f7ff bf6c 	b.w	b4c98 <network_listen>

000b4dc0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4dc0:	2300      	movs	r3, #0
   b4dc2:	6840      	ldr	r0, [r0, #4]
   b4dc4:	461a      	mov	r2, r3
   b4dc6:	4619      	mov	r1, r3
   b4dc8:	f7ff bf5e 	b.w	b4c88 <network_off>

000b4dcc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4dcc:	2300      	movs	r3, #0
   b4dce:	6840      	ldr	r0, [r0, #4]
   b4dd0:	461a      	mov	r2, r3
   b4dd2:	4619      	mov	r1, r3
   b4dd4:	f7ff bf50 	b.w	b4c78 <network_on>

000b4dd8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4dd8:	2200      	movs	r2, #0
   b4dda:	6840      	ldr	r0, [r0, #4]
   b4ddc:	4611      	mov	r1, r2
   b4dde:	f7ff bf43 	b.w	b4c68 <network_ready>

000b4de2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4de2:	2200      	movs	r2, #0
   b4de4:	6840      	ldr	r0, [r0, #4]
   b4de6:	4611      	mov	r1, r2
   b4de8:	f7ff bf2e 	b.w	b4c48 <network_connecting>

000b4dec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dec:	6840      	ldr	r0, [r0, #4]
   b4dee:	2200      	movs	r2, #0
   b4df0:	2102      	movs	r1, #2
   b4df2:	f7ff bf31 	b.w	b4c58 <network_disconnect>

000b4df6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4df6:	2300      	movs	r3, #0
   b4df8:	6840      	ldr	r0, [r0, #4]
   b4dfa:	461a      	mov	r2, r3
   b4dfc:	f7ff bf1c 	b.w	b4c38 <network_connect>

000b4e00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e00:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e02:	2203      	movs	r2, #3
   b4e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e06:	4a02      	ldr	r2, [pc, #8]	; (b4e10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e0a:	4770      	bx	lr
   b4e0c:	2003e6b8 	.word	0x2003e6b8
   b4e10:	000b6e20 	.word	0x000b6e20

000b4e14 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e14:	b510      	push	{r4, lr}
   b4e16:	4604      	mov	r4, r0
   b4e18:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e1a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e1c:	f7ff fe90 	bl	b4b40 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e20:	2300      	movs	r3, #0
   b4e22:	6063      	str	r3, [r4, #4]
}
   b4e24:	4620      	mov	r0, r4
   b4e26:	bd10      	pop	{r4, pc}

000b4e28 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e28:	4b05      	ldr	r3, [pc, #20]	; (b4e40 <_GLOBAL__sub_I_System+0x18>)
   b4e2a:	2202      	movs	r2, #2
   b4e2c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e2e:	4b05      	ldr	r3, [pc, #20]	; (b4e44 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e30:	4a05      	ldr	r2, [pc, #20]	; (b4e48 <_GLOBAL__sub_I_System+0x20>)
   b4e32:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e34:	2000      	movs	r0, #0
   b4e36:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e3a:	f7ff bed9 	b.w	b4bf0 <set_system_mode>
   b4e3e:	bf00      	nop
   b4e40:	2003e6cc 	.word	0x2003e6cc
   b4e44:	2003e6c0 	.word	0x2003e6c0
   b4e48:	ffff0000 	.word	0xffff0000

000b4e4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b4e4c:	b510      	push	{r4, lr}
   b4e4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b4e50:	f001 fea4 	bl	b6b9c <strlen>
   b4e54:	3801      	subs	r0, #1
   b4e56:	1823      	adds	r3, r4, r0
   b4e58:	4620      	mov	r0, r4
	while(i<j){
   b4e5a:	4283      	cmp	r3, r0
   b4e5c:	d906      	bls.n	b4e6c <_Z11str_reversePc+0x20>
		c = *i;
   b4e5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4e60:	7819      	ldrb	r1, [r3, #0]
   b4e62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b4e66:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b4e6a:	e7f6      	b.n	b4e5a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b4e6c:	bd10      	pop	{r4, pc}

000b4e6e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b4e6e:	b570      	push	{r4, r5, r6, lr}
   b4e70:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b4e72:	1e91      	subs	r1, r2, #2
   b4e74:	2922      	cmp	r1, #34	; 0x22
   b4e76:	d81d      	bhi.n	b4eb4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b4e78:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b4e7a:	b930      	cbnz	r0, b4e8a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b4e7c:	4423      	add	r3, r4
            *ptr++ = '0';
   b4e7e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b4e80:	429d      	cmp	r5, r3
   b4e82:	d210      	bcs.n	b4ea6 <ultoa+0x38>
            *ptr++ = '0';
   b4e84:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b4e88:	e7fa      	b.n	b4e80 <ultoa+0x12>
            result.quot = a/radix;
   b4e8a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b4e8e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b4e92:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b4e94:	2809      	cmp	r0, #9
                *ptr += '0';
   b4e96:	bf94      	ite	ls
   b4e98:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b4e9a:	3157      	addhi	r1, #87	; 0x57
   b4e9c:	b2c9      	uxtb	r1, r1
   b4e9e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b4ea2:	4630      	mov	r0, r6
	while(a){
   b4ea4:	e7e9      	b.n	b4e7a <ultoa+0xc>

	*ptr = '\0';
   b4ea6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b4ea8:	4620      	mov	r0, r4
	*ptr = '\0';
   b4eaa:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4eac:	f7ff ffce 	bl	b4e4c <_Z11str_reversePc>
	return buffer;
   b4eb0:	4620      	mov	r0, r4
}
   b4eb2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b4eb4:	2000      	movs	r0, #0
   b4eb6:	e7fc      	b.n	b4eb2 <ultoa+0x44>

000b4eb8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4eb8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b4eba:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b4ebc:	460c      	mov	r4, r1
   b4ebe:	4615      	mov	r5, r2
	if(a<0){
   b4ec0:	da0e      	bge.n	b4ee0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b4ec6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b4eca:	bf14      	ite	ne
   b4ecc:	4258      	negne	r0, r3
   b4ece:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b4ed0:	2301      	movs	r3, #1
		*buffer = '-';
   b4ed2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b4ed4:	462a      	mov	r2, r5
   b4ed6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b4ed8:	f7ff ffc9 	bl	b4e6e <ultoa>
	}
	return buffer;
}
   b4edc:	4620      	mov	r0, r4
   b4ede:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b4ee0:	2301      	movs	r3, #1
   b4ee2:	e7f9      	b.n	b4ed8 <itoa+0x20>

000b4ee4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4ee4:	b510      	push	{r4, lr}
   b4ee6:	4604      	mov	r4, r0
{
	free(buffer);
   b4ee8:	6800      	ldr	r0, [r0, #0]
   b4eea:	f7ff ff25 	bl	b4d38 <free>
}
   b4eee:	4620      	mov	r0, r4
   b4ef0:	bd10      	pop	{r4, pc}

000b4ef2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4ef2:	b510      	push	{r4, lr}
   b4ef4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4ef6:	6800      	ldr	r0, [r0, #0]
   b4ef8:	b108      	cbz	r0, b4efe <_ZN6String10invalidateEv+0xc>
   b4efa:	f7ff ff1d 	bl	b4d38 <free>
	buffer = NULL;
   b4efe:	2300      	movs	r3, #0
	capacity = len = 0;
   b4f00:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4f04:	6023      	str	r3, [r4, #0]
}
   b4f06:	bd10      	pop	{r4, pc}

000b4f08 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4f08:	b538      	push	{r3, r4, r5, lr}
   b4f0a:	4604      	mov	r4, r0
   b4f0c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4f0e:	6800      	ldr	r0, [r0, #0]
   b4f10:	3101      	adds	r1, #1
   b4f12:	f7ff ff19 	bl	b4d48 <realloc>
	if (newbuffer) {
   b4f16:	b110      	cbz	r0, b4f1e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4f18:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4f1c:	2001      	movs	r0, #1
	}
	return 0;
}
   b4f1e:	bd38      	pop	{r3, r4, r5, pc}

000b4f20 <_ZN6String7reserveEj>:
{
   b4f20:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4f22:	6803      	ldr	r3, [r0, #0]
{
   b4f24:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4f26:	b123      	cbz	r3, b4f32 <_ZN6String7reserveEj+0x12>
   b4f28:	6843      	ldr	r3, [r0, #4]
   b4f2a:	428b      	cmp	r3, r1
   b4f2c:	d301      	bcc.n	b4f32 <_ZN6String7reserveEj+0x12>
   b4f2e:	2001      	movs	r0, #1
}
   b4f30:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4f32:	4620      	mov	r0, r4
   b4f34:	f7ff ffe8 	bl	b4f08 <_ZN6String12changeBufferEj>
   b4f38:	2800      	cmp	r0, #0
   b4f3a:	d0f9      	beq.n	b4f30 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4f3c:	68a3      	ldr	r3, [r4, #8]
   b4f3e:	2b00      	cmp	r3, #0
   b4f40:	d1f5      	bne.n	b4f2e <_ZN6String7reserveEj+0xe>
   b4f42:	6822      	ldr	r2, [r4, #0]
   b4f44:	7013      	strb	r3, [r2, #0]
   b4f46:	e7f2      	b.n	b4f2e <_ZN6String7reserveEj+0xe>

000b4f48 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4f4a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4f4c:	4611      	mov	r1, r2
   b4f4e:	9201      	str	r2, [sp, #4]
{
   b4f50:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4f52:	f7ff ffe5 	bl	b4f20 <_ZN6String7reserveEj>
   b4f56:	9a01      	ldr	r2, [sp, #4]
   b4f58:	b928      	cbnz	r0, b4f66 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4f5a:	4620      	mov	r0, r4
   b4f5c:	f7ff ffc9 	bl	b4ef2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4f60:	4620      	mov	r0, r4
   b4f62:	b003      	add	sp, #12
   b4f64:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4f66:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4f68:	4629      	mov	r1, r5
   b4f6a:	6820      	ldr	r0, [r4, #0]
   b4f6c:	f001 fdc0 	bl	b6af0 <memcpy>
	buffer[len] = 0;
   b4f70:	6822      	ldr	r2, [r4, #0]
   b4f72:	68a3      	ldr	r3, [r4, #8]
   b4f74:	2100      	movs	r1, #0
   b4f76:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4f78:	e7f2      	b.n	b4f60 <_ZN6String4copyEPKcj+0x18>

000b4f7a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4f7a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4f7c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4f7e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4f82:	4604      	mov	r4, r0
	len = 0;
   b4f84:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4f86:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4f88:	b141      	cbz	r1, b4f9c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4f8a:	4608      	mov	r0, r1
   b4f8c:	9101      	str	r1, [sp, #4]
   b4f8e:	f001 fe05 	bl	b6b9c <strlen>
   b4f92:	9901      	ldr	r1, [sp, #4]
   b4f94:	4602      	mov	r2, r0
   b4f96:	4620      	mov	r0, r4
   b4f98:	f7ff ffd6 	bl	b4f48 <_ZN6String4copyEPKcj>
}
   b4f9c:	4620      	mov	r0, r4
   b4f9e:	b002      	add	sp, #8
   b4fa0:	bd10      	pop	{r4, pc}

000b4fa2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b4fa2:	4288      	cmp	r0, r1
{
   b4fa4:	b510      	push	{r4, lr}
   b4fa6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b4fa8:	d005      	beq.n	b4fb6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b4faa:	680b      	ldr	r3, [r1, #0]
   b4fac:	b12b      	cbz	r3, b4fba <_ZN6StringaSERKS_+0x18>
   b4fae:	688a      	ldr	r2, [r1, #8]
   b4fb0:	4619      	mov	r1, r3
   b4fb2:	f7ff ffc9 	bl	b4f48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	bd10      	pop	{r4, pc}
	else invalidate();
   b4fba:	f7ff ff9a 	bl	b4ef2 <_ZN6String10invalidateEv>
   b4fbe:	e7fa      	b.n	b4fb6 <_ZN6StringaSERKS_+0x14>

000b4fc0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b4fc0:	b510      	push	{r4, lr}
	buffer = NULL;
   b4fc2:	2300      	movs	r3, #0
String::String(const String &value)
   b4fc4:	4604      	mov	r4, r0
	capacity = 0;
   b4fc6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b4fca:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4fcc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b4fce:	f7ff ffe8 	bl	b4fa2 <_ZN6StringaSERKS_>
}
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	bd10      	pop	{r4, pc}

000b4fd6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4fd6:	b513      	push	{r0, r1, r4, lr}
   b4fd8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4fda:	b159      	cbz	r1, b4ff4 <_ZN6StringaSEPKc+0x1e>
   b4fdc:	4608      	mov	r0, r1
   b4fde:	9101      	str	r1, [sp, #4]
   b4fe0:	f001 fddc 	bl	b6b9c <strlen>
   b4fe4:	9901      	ldr	r1, [sp, #4]
   b4fe6:	4602      	mov	r2, r0
   b4fe8:	4620      	mov	r0, r4
   b4fea:	f7ff ffad 	bl	b4f48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4fee:	4620      	mov	r0, r4
   b4ff0:	b002      	add	sp, #8
   b4ff2:	bd10      	pop	{r4, pc}
	else invalidate();
   b4ff4:	f7ff ff7d 	bl	b4ef2 <_ZN6String10invalidateEv>
   b4ff8:	e7f9      	b.n	b4fee <_ZN6StringaSEPKc+0x18>

000b4ffa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b4ffa:	b510      	push	{r4, lr}
   b4ffc:	4604      	mov	r4, r0
   b4ffe:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5000:	2300      	movs	r3, #0
	capacity = 0;
   b5002:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5006:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5008:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b500a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b500c:	a901      	add	r1, sp, #4
   b500e:	f7ff ff53 	bl	b4eb8 <itoa>
	*this = buf;
   b5012:	a901      	add	r1, sp, #4
   b5014:	4620      	mov	r0, r4
   b5016:	f7ff ffde 	bl	b4fd6 <_ZN6StringaSEPKc>
}
   b501a:	4620      	mov	r0, r4
   b501c:	b00a      	add	sp, #40	; 0x28
   b501e:	bd10      	pop	{r4, pc}

000b5020 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5020:	b570      	push	{r4, r5, r6, lr}
   b5022:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5024:	460e      	mov	r6, r1
   b5026:	b909      	cbnz	r1, b502c <_ZN6String6concatEPKcj+0xc>
   b5028:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b502a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b502c:	b16a      	cbz	r2, b504a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b502e:	6884      	ldr	r4, [r0, #8]
   b5030:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5032:	4621      	mov	r1, r4
   b5034:	f7ff ff74 	bl	b4f20 <_ZN6String7reserveEj>
   b5038:	2800      	cmp	r0, #0
   b503a:	d0f5      	beq.n	b5028 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b503c:	6828      	ldr	r0, [r5, #0]
   b503e:	68ab      	ldr	r3, [r5, #8]
   b5040:	4631      	mov	r1, r6
   b5042:	4418      	add	r0, r3
   b5044:	f001 fda2 	bl	b6b8c <strcpy>
	len = newlen;
   b5048:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b504a:	2001      	movs	r0, #1
   b504c:	e7ed      	b.n	b502a <_ZN6String6concatEPKcj+0xa>

000b504e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b504e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5050:	2300      	movs	r3, #0
	buf[0] = c;
   b5052:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5056:	2201      	movs	r2, #1
   b5058:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b505a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b505e:	f7ff ffdf 	bl	b5020 <_ZN6String6concatEPKcj>
}
   b5062:	b003      	add	sp, #12
   b5064:	f85d fb04 	ldr.w	pc, [sp], #4

000b5068 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5068:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b506a:	688a      	ldr	r2, [r1, #8]
   b506c:	6809      	ldr	r1, [r1, #0]
{
   b506e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5070:	f7ff ffd6 	bl	b5020 <_ZN6String6concatEPKcj>
   b5074:	b910      	cbnz	r0, b507c <_ZplRK15StringSumHelperRK6String+0x14>
   b5076:	4620      	mov	r0, r4
   b5078:	f7ff ff3b 	bl	b4ef2 <_ZN6String10invalidateEv>
	return a;
}
   b507c:	4620      	mov	r0, r4
   b507e:	bd10      	pop	{r4, pc}

000b5080 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5080:	b513      	push	{r0, r1, r4, lr}
   b5082:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5084:	b929      	cbnz	r1, b5092 <_ZplRK15StringSumHelperPKc+0x12>
   b5086:	4620      	mov	r0, r4
   b5088:	f7ff ff33 	bl	b4ef2 <_ZN6String10invalidateEv>
	return a;
}
   b508c:	4620      	mov	r0, r4
   b508e:	b002      	add	sp, #8
   b5090:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5092:	4608      	mov	r0, r1
   b5094:	9101      	str	r1, [sp, #4]
   b5096:	f001 fd81 	bl	b6b9c <strlen>
   b509a:	9901      	ldr	r1, [sp, #4]
   b509c:	4602      	mov	r2, r0
   b509e:	4620      	mov	r0, r4
   b50a0:	f7ff ffbe 	bl	b5020 <_ZN6String6concatEPKcj>
   b50a4:	2800      	cmp	r0, #0
   b50a6:	d0ee      	beq.n	b5086 <_ZplRK15StringSumHelperPKc+0x6>
   b50a8:	e7f0      	b.n	b508c <_ZplRK15StringSumHelperPKc+0xc>
	...

000b50ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b50ac:	4802      	ldr	r0, [pc, #8]	; (b50b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b50ae:	2300      	movs	r3, #0
   b50b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b50b2:	f7ff bc7d 	b.w	b49b0 <os_mutex_recursive_create>
   b50b6:	bf00      	nop
   b50b8:	2003e6d0 	.word	0x2003e6d0

000b50bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b50bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50be:	4606      	mov	r6, r0
   b50c0:	460d      	mov	r5, r1
  size_t n = 0;
   b50c2:	188f      	adds	r7, r1, r2
   b50c4:	2400      	movs	r4, #0
  while (size--) {
   b50c6:	42bd      	cmp	r5, r7
   b50c8:	d00c      	beq.n	b50e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b50ca:	6833      	ldr	r3, [r6, #0]
   b50cc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b50d0:	689b      	ldr	r3, [r3, #8]
   b50d2:	4630      	mov	r0, r6
   b50d4:	4798      	blx	r3
     if (chunk>=0)
   b50d6:	1e03      	subs	r3, r0, #0
   b50d8:	db01      	blt.n	b50de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b50da:	441c      	add	r4, r3
  while (size--) {
   b50dc:	e7f3      	b.n	b50c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b50de:	2c00      	cmp	r4, #0
   b50e0:	bf08      	it	eq
   b50e2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b50e4:	4620      	mov	r0, r4
   b50e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b50e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b50e8:	b513      	push	{r0, r1, r4, lr}
   b50ea:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b50ec:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b50ee:	b159      	cbz	r1, b5108 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b50f0:	9101      	str	r1, [sp, #4]
   b50f2:	f001 fd53 	bl	b6b9c <strlen>
   b50f6:	6823      	ldr	r3, [r4, #0]
   b50f8:	9901      	ldr	r1, [sp, #4]
   b50fa:	68db      	ldr	r3, [r3, #12]
   b50fc:	4602      	mov	r2, r0
   b50fe:	4620      	mov	r0, r4
    }
   b5100:	b002      	add	sp, #8
   b5102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5106:	4718      	bx	r3
    }
   b5108:	b002      	add	sp, #8
   b510a:	bd10      	pop	{r4, pc}

000b510c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b510c:	b508      	push	{r3, lr}
  return write(str);
   b510e:	f7ff ffeb 	bl	b50e8 <_ZN5Print5writeEPKc>
}
   b5112:	bd08      	pop	{r3, pc}

000b5114 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5114:	6803      	ldr	r3, [r0, #0]
   b5116:	689b      	ldr	r3, [r3, #8]
   b5118:	4718      	bx	r3

000b511a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b511a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b511c:	210d      	movs	r1, #13
{
   b511e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5120:	f7ff fff8 	bl	b5114 <_ZN5Print5printEc>
  n += print('\n');
   b5124:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5126:	4604      	mov	r4, r0
  n += print('\n');
   b5128:	4628      	mov	r0, r5
   b512a:	f7ff fff3 	bl	b5114 <_ZN5Print5printEc>
  return n;
}
   b512e:	4420      	add	r0, r4
   b5130:	bd38      	pop	{r3, r4, r5, pc}

000b5132 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5132:	b538      	push	{r3, r4, r5, lr}
   b5134:	4605      	mov	r5, r0
  return write(str);
   b5136:	f7ff ffd7 	bl	b50e8 <_ZN5Print5writeEPKc>
   b513a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b513c:	4628      	mov	r0, r5
   b513e:	f7ff ffec 	bl	b511a <_ZN5Print7printlnEv>
  return n;
}
   b5142:	4420      	add	r0, r4
   b5144:	bd38      	pop	{r3, r4, r5, pc}

000b5146 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5146:	b530      	push	{r4, r5, lr}
   b5148:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b514a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b514c:	2a01      	cmp	r2, #1
  *str = '\0';
   b514e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5152:	bf98      	it	ls
   b5154:	220a      	movls	r2, #10
   b5156:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5158:	460d      	mov	r5, r1
   b515a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b515e:	fb01 5312 	mls	r3, r1, r2, r5
   b5162:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5166:	2b09      	cmp	r3, #9
   b5168:	bf94      	ite	ls
   b516a:	3330      	addls	r3, #48	; 0x30
   b516c:	3337      	addhi	r3, #55	; 0x37
   b516e:	b2db      	uxtb	r3, r3
  } while(n);
   b5170:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5172:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5176:	d9ef      	bls.n	b5158 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5178:	4621      	mov	r1, r4
   b517a:	f7ff ffb5 	bl	b50e8 <_ZN5Print5writeEPKc>
}
   b517e:	b00b      	add	sp, #44	; 0x2c
   b5180:	bd30      	pop	{r4, r5, pc}

000b5182 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5186:	b086      	sub	sp, #24
   b5188:	af00      	add	r7, sp, #0
   b518a:	4605      	mov	r5, r0
   b518c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b518e:	1d38      	adds	r0, r7, #4
   b5190:	2114      	movs	r1, #20
{
   b5192:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5194:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5196:	f7ff fddf 	bl	b4d58 <vsnprintf>

    if (n<bufsize)
   b519a:	2813      	cmp	r0, #19
   b519c:	d80e      	bhi.n	b51bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b519e:	1d39      	adds	r1, r7, #4
   b51a0:	4628      	mov	r0, r5
   b51a2:	f7ff ffa1 	bl	b50e8 <_ZN5Print5writeEPKc>
   b51a6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b51a8:	b11e      	cbz	r6, b51b2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b51aa:	4628      	mov	r0, r5
   b51ac:	f7ff ffb5 	bl	b511a <_ZN5Print7printlnEv>
   b51b0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b51b2:	4620      	mov	r0, r4
   b51b4:	3718      	adds	r7, #24
   b51b6:	46bd      	mov	sp, r7
   b51b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b51bc:	f100 0308 	add.w	r3, r0, #8
   b51c0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b51c4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b51c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b51ca:	4622      	mov	r2, r4
   b51cc:	1c41      	adds	r1, r0, #1
   b51ce:	683b      	ldr	r3, [r7, #0]
   b51d0:	4668      	mov	r0, sp
   b51d2:	f7ff fdc1 	bl	b4d58 <vsnprintf>
  return write(str);
   b51d6:	4669      	mov	r1, sp
   b51d8:	4628      	mov	r0, r5
   b51da:	f7ff ff85 	bl	b50e8 <_ZN5Print5writeEPKc>
   b51de:	4604      	mov	r4, r0
   b51e0:	46c5      	mov	sp, r8
   b51e2:	e7e1      	b.n	b51a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b51e4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b51e4:	b510      	push	{r4, lr}
   b51e6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b51e8:	f7ff fbd2 	bl	b4990 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b51ec:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b51ee:	6823      	ldr	r3, [r4, #0]
   b51f0:	4620      	mov	r0, r4
   b51f2:	695b      	ldr	r3, [r3, #20]
   b51f4:	4798      	blx	r3
    if (c >= 0) return c;
   b51f6:	2800      	cmp	r0, #0
   b51f8:	da08      	bge.n	b520c <_ZN6Stream9timedReadEv+0x28>
   b51fa:	f7ff fbc9 	bl	b4990 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b51fe:	68e3      	ldr	r3, [r4, #12]
   b5200:	1ac0      	subs	r0, r0, r3
   b5202:	68a3      	ldr	r3, [r4, #8]
   b5204:	4298      	cmp	r0, r3
   b5206:	d3f2      	bcc.n	b51ee <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5208:	f04f 30ff 	mov.w	r0, #4294967295
}
   b520c:	bd10      	pop	{r4, pc}
	...

000b5210 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b5210:	b538      	push	{r3, r4, r5, lr}
   b5212:	460d      	mov	r5, r1
  String ret;
   b5214:	4907      	ldr	r1, [pc, #28]	; (b5234 <_ZN6Stream10readStringEv+0x24>)
{
   b5216:	4604      	mov	r4, r0
  String ret;
   b5218:	f7ff feaf 	bl	b4f7a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b521c:	4628      	mov	r0, r5
   b521e:	f7ff ffe1 	bl	b51e4 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b5222:	2800      	cmp	r0, #0
   b5224:	db04      	blt.n	b5230 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b5226:	b2c1      	uxtb	r1, r0
   b5228:	4620      	mov	r0, r4
   b522a:	f7ff ff10 	bl	b504e <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b522e:	e7f5      	b.n	b521c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b5230:	4620      	mov	r0, r4
   b5232:	bd38      	pop	{r3, r4, r5, pc}
   b5234:	000b6ca7 	.word	0x000b6ca7

000b5238 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5238:	4b01      	ldr	r3, [pc, #4]	; (b5240 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b523a:	4a02      	ldr	r2, [pc, #8]	; (b5244 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b523c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b523e:	4770      	bx	lr
   b5240:	2003e6d4 	.word	0x2003e6d4
   b5244:	000b6e5c 	.word	0x000b6e5c

000b5248 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5248:	4b02      	ldr	r3, [pc, #8]	; (b5254 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b524a:	681a      	ldr	r2, [r3, #0]
   b524c:	4b02      	ldr	r3, [pc, #8]	; (b5258 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b524e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5250:	4770      	bx	lr
   b5252:	bf00      	nop
   b5254:	2003e564 	.word	0x2003e564
   b5258:	2003e6d8 	.word	0x2003e6d8

000b525c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b525c:	2100      	movs	r1, #0
   b525e:	f7ff bccf 	b.w	b4c00 <system_delay_ms>
	...

000b5264 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5264:	4b01      	ldr	r3, [pc, #4]	; (b526c <_GLOBAL__sub_I_RGB+0x8>)
   b5266:	2200      	movs	r2, #0
   b5268:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b526a:	4770      	bx	lr
   b526c:	2003e6dc 	.word	0x2003e6dc

000b5270 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5270:	4b01      	ldr	r3, [pc, #4]	; (b5278 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5272:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5274:	4770      	bx	lr
   b5276:	bf00      	nop
   b5278:	2003e568 	.word	0x2003e568

000b527c <serialEventRun>:
{
   b527c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b527e:	4b0b      	ldr	r3, [pc, #44]	; (b52ac <serialEventRun+0x30>)
   b5280:	b143      	cbz	r3, b5294 <serialEventRun+0x18>
   b5282:	f000 f981 	bl	b5588 <_Z16_fetch_usbserialv>
   b5286:	6803      	ldr	r3, [r0, #0]
   b5288:	691b      	ldr	r3, [r3, #16]
   b528a:	4798      	blx	r3
   b528c:	2800      	cmp	r0, #0
   b528e:	dd01      	ble.n	b5294 <serialEventRun+0x18>
        serialEvent();
   b5290:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5294:	4b06      	ldr	r3, [pc, #24]	; (b52b0 <serialEventRun+0x34>)
   b5296:	b143      	cbz	r3, b52aa <serialEventRun+0x2e>
   b5298:	f000 fe8e 	bl	b5fb8 <_Z22__fetch_global_Serial1v>
   b529c:	6803      	ldr	r3, [r0, #0]
   b529e:	691b      	ldr	r3, [r3, #16]
   b52a0:	4798      	blx	r3
   b52a2:	2800      	cmp	r0, #0
   b52a4:	dd01      	ble.n	b52aa <serialEventRun+0x2e>
        serialEvent1();
   b52a6:	f3af 8000 	nop.w
}
   b52aa:	bd08      	pop	{r3, pc}
	...

000b52b4 <_post_loop>:
{
   b52b4:	b508      	push	{r3, lr}
	serialEventRun();
   b52b6:	f7ff ffe1 	bl	b527c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b52ba:	f7ff fb69 	bl	b4990 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b52be:	4b01      	ldr	r3, [pc, #4]	; (b52c4 <_post_loop+0x10>)
   b52c0:	6018      	str	r0, [r3, #0]
}
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	2003e740 	.word	0x2003e740

000b52c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b52c8:	4805      	ldr	r0, [pc, #20]	; (b52e0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b52ca:	4a06      	ldr	r2, [pc, #24]	; (b52e4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b52cc:	4906      	ldr	r1, [pc, #24]	; (b52e8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b52ce:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b52d0:	1a12      	subs	r2, r2, r0
   b52d2:	f001 fc0d 	bl	b6af0 <memcpy>
    __backup_sram_signature = signature;
   b52d6:	4b05      	ldr	r3, [pc, #20]	; (b52ec <_Z33system_initialize_user_backup_ramv+0x24>)
   b52d8:	4a05      	ldr	r2, [pc, #20]	; (b52f0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b52da:	601a      	str	r2, [r3, #0]
}
   b52dc:	bd08      	pop	{r3, pc}
   b52de:	bf00      	nop
   b52e0:	2003f400 	.word	0x2003f400
   b52e4:	2003f404 	.word	0x2003f404
   b52e8:	000b71e4 	.word	0x000b71e4
   b52ec:	2003f400 	.word	0x2003f400
   b52f0:	9a271c1e 	.word	0x9a271c1e

000b52f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b52f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b52f6:	2300      	movs	r3, #0
   b52f8:	9300      	str	r3, [sp, #0]
   b52fa:	461a      	mov	r2, r3
   b52fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5300:	f7ff fc90 	bl	b4c24 <system_ctrl_set_result>
}
   b5304:	b003      	add	sp, #12
   b5306:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b530c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b530c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b530e:	8843      	ldrh	r3, [r0, #2]
   b5310:	2b0a      	cmp	r3, #10
   b5312:	d008      	beq.n	b5326 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5314:	2b50      	cmp	r3, #80	; 0x50
   b5316:	d10b      	bne.n	b5330 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5318:	4b09      	ldr	r3, [pc, #36]	; (b5340 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b531a:	681b      	ldr	r3, [r3, #0]
   b531c:	b14b      	cbz	r3, b5332 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b531e:	b003      	add	sp, #12
   b5320:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5324:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5326:	f7ff ffe5 	bl	b52f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b532a:	b003      	add	sp, #12
   b532c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5330:	2300      	movs	r3, #0
   b5332:	9300      	str	r3, [sp, #0]
   b5334:	461a      	mov	r2, r3
   b5336:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b533a:	f7ff fc73 	bl	b4c24 <system_ctrl_set_result>
}
   b533e:	e7f4      	b.n	b532a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5340:	2003e6f0 	.word	0x2003e6f0

000b5344 <module_user_init_hook>:
{
   b5344:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5346:	4812      	ldr	r0, [pc, #72]	; (b5390 <module_user_init_hook+0x4c>)
   b5348:	2100      	movs	r1, #0
   b534a:	f7ff fd1d 	bl	b4d88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b534e:	4b11      	ldr	r3, [pc, #68]	; (b5394 <module_user_init_hook+0x50>)
   b5350:	681a      	ldr	r2, [r3, #0]
   b5352:	4b11      	ldr	r3, [pc, #68]	; (b5398 <module_user_init_hook+0x54>)
   b5354:	429a      	cmp	r2, r3
   b5356:	4b11      	ldr	r3, [pc, #68]	; (b539c <module_user_init_hook+0x58>)
   b5358:	bf0c      	ite	eq
   b535a:	2201      	moveq	r2, #1
   b535c:	2200      	movne	r2, #0
   b535e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5360:	d001      	beq.n	b5366 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5362:	f7ff ffb1 	bl	b52c8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5366:	f7ff fb0b 	bl	b4980 <HAL_RNG_GetRandomNumber>
   b536a:	4604      	mov	r4, r0
    srand(seed);
   b536c:	f001 fbd6 	bl	b6b1c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5370:	4b0b      	ldr	r3, [pc, #44]	; (b53a0 <module_user_init_hook+0x5c>)
   b5372:	b113      	cbz	r3, b537a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5374:	4620      	mov	r0, r4
   b5376:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b537a:	2100      	movs	r1, #0
   b537c:	4808      	ldr	r0, [pc, #32]	; (b53a0 <module_user_init_hook+0x5c>)
   b537e:	f7ff fccb 	bl	b4d18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5386:	4807      	ldr	r0, [pc, #28]	; (b53a4 <module_user_init_hook+0x60>)
   b5388:	2100      	movs	r1, #0
   b538a:	f7ff bc41 	b.w	b4c10 <system_ctrl_set_app_request_handler>
   b538e:	bf00      	nop
   b5390:	000b5271 	.word	0x000b5271
   b5394:	2003f400 	.word	0x2003f400
   b5398:	9a271c1e 	.word	0x9a271c1e
   b539c:	2003e6ec 	.word	0x2003e6ec
   b53a0:	00000000 	.word	0x00000000
   b53a4:	000b530d 	.word	0x000b530d

000b53a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b53a8:	4770      	bx	lr

000b53aa <_ZN9IPAddressD0Ev>:
   b53aa:	b510      	push	{r4, lr}
   b53ac:	2118      	movs	r1, #24
   b53ae:	4604      	mov	r4, r0
   b53b0:	f7fe fe75 	bl	b409e <_ZdlPvj>
   b53b4:	4620      	mov	r0, r4
   b53b6:	bd10      	pop	{r4, pc}

000b53b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b53b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b53ba:	7d03      	ldrb	r3, [r0, #20]
   b53bc:	2b06      	cmp	r3, #6
{
   b53be:	b08d      	sub	sp, #52	; 0x34
   b53c0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53c2:	f100 0704 	add.w	r7, r0, #4
   b53c6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b53ca:	d012      	beq.n	b53f2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b53cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b53d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b53d4:	220a      	movs	r2, #10
   b53d6:	4630      	mov	r0, r6
   b53d8:	f7ff feb5 	bl	b5146 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b53dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b53de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b53e0:	d019      	beq.n	b5416 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b53e2:	2c00      	cmp	r4, #0
   b53e4:	d0f4      	beq.n	b53d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b53e6:	212e      	movs	r1, #46	; 0x2e
   b53e8:	4630      	mov	r0, r6
   b53ea:	f7ff fe93 	bl	b5114 <_ZN5Print5printEc>
   b53ee:	4404      	add	r4, r0
   b53f0:	e7ee      	b.n	b53d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53f2:	232f      	movs	r3, #47	; 0x2f
   b53f4:	466a      	mov	r2, sp
   b53f6:	4639      	mov	r1, r7
   b53f8:	200a      	movs	r0, #10
		buf[0] = 0;
   b53fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53fe:	f7ff fadf 	bl	b49c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5402:	4668      	mov	r0, sp
   b5404:	f001 fbca 	bl	b6b9c <strlen>
   b5408:	6833      	ldr	r3, [r6, #0]
   b540a:	4602      	mov	r2, r0
   b540c:	68db      	ldr	r3, [r3, #12]
   b540e:	4669      	mov	r1, sp
   b5410:	4630      	mov	r0, r6
   b5412:	4798      	blx	r3
   b5414:	4604      	mov	r4, r0
    }
    return n;
}
   b5416:	4620      	mov	r0, r4
   b5418:	b00d      	add	sp, #52	; 0x34
   b541a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b541c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b541c:	b510      	push	{r4, lr}
   b541e:	4b05      	ldr	r3, [pc, #20]	; (b5434 <_ZN9IPAddressC1Ev+0x18>)
   b5420:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5422:	2211      	movs	r2, #17
   b5424:	f840 3b04 	str.w	r3, [r0], #4
   b5428:	2100      	movs	r1, #0
   b542a:	f001 fb6f 	bl	b6b0c <memset>
}
   b542e:	4620      	mov	r0, r4
   b5430:	bd10      	pop	{r4, pc}
   b5432:	bf00      	nop
   b5434:	000b6e84 	.word	0x000b6e84

000b5438 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5438:	4603      	mov	r3, r0
   b543a:	4a07      	ldr	r2, [pc, #28]	; (b5458 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b543c:	b510      	push	{r4, lr}
   b543e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5442:	f101 0210 	add.w	r2, r1, #16
   b5446:	f851 4b04 	ldr.w	r4, [r1], #4
   b544a:	f843 4b04 	str.w	r4, [r3], #4
   b544e:	4291      	cmp	r1, r2
   b5450:	d1f9      	bne.n	b5446 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5452:	780a      	ldrb	r2, [r1, #0]
   b5454:	701a      	strb	r2, [r3, #0]
}
   b5456:	bd10      	pop	{r4, pc}
   b5458:	000b6e84 	.word	0x000b6e84

000b545c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b545c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b545e:	2b04      	cmp	r3, #4
   b5460:	d104      	bne.n	b546c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5462:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5464:	3800      	subs	r0, #0
   b5466:	bf18      	it	ne
   b5468:	2001      	movne	r0, #1
   b546a:	4770      	bx	lr
    } else if (version() == 6) {
   b546c:	2b06      	cmp	r3, #6
   b546e:	d107      	bne.n	b5480 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5470:	6843      	ldr	r3, [r0, #4]
   b5472:	b93b      	cbnz	r3, b5484 <_ZNK9IPAddresscvbEv+0x28>
   b5474:	6883      	ldr	r3, [r0, #8]
   b5476:	b92b      	cbnz	r3, b5484 <_ZNK9IPAddresscvbEv+0x28>
   b5478:	68c3      	ldr	r3, [r0, #12]
   b547a:	b91b      	cbnz	r3, b5484 <_ZNK9IPAddresscvbEv+0x28>
   b547c:	6900      	ldr	r0, [r0, #16]
   b547e:	e7f1      	b.n	b5464 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5480:	2000      	movs	r0, #0
   b5482:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5484:	2001      	movs	r0, #1
}
   b5486:	4770      	bx	lr

000b5488 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5488:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b548a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b548e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5492:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5496:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b549a:	2304      	movs	r3, #4
   b549c:	6041      	str	r1, [r0, #4]
   b549e:	7503      	strb	r3, [r0, #20]
}
   b54a0:	bd10      	pop	{r4, pc}
	...

000b54a4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b54a4:	b507      	push	{r0, r1, r2, lr}
   b54a6:	4b06      	ldr	r3, [pc, #24]	; (b54c0 <_ZN9IPAddressC1EPKh+0x1c>)
   b54a8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b54aa:	78cb      	ldrb	r3, [r1, #3]
   b54ac:	9300      	str	r3, [sp, #0]
   b54ae:	788b      	ldrb	r3, [r1, #2]
   b54b0:	784a      	ldrb	r2, [r1, #1]
   b54b2:	7809      	ldrb	r1, [r1, #0]
   b54b4:	f7ff ffe8 	bl	b5488 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b54b8:	b003      	add	sp, #12
   b54ba:	f85d fb04 	ldr.w	pc, [sp], #4
   b54be:	bf00      	nop
   b54c0:	000b6e84 	.word	0x000b6e84

000b54c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54c4:	7441      	strb	r1, [r0, #17]
}
   b54c6:	4770      	bx	lr

000b54c8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54c8:	4770      	bx	lr

000b54ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b54ca:	4770      	bx	lr

000b54cc <_ZN9USBSerial4readEv>:
{
   b54cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b54ce:	2100      	movs	r1, #0
   b54d0:	7c00      	ldrb	r0, [r0, #16]
   b54d2:	f7ff fb65 	bl	b4ba0 <HAL_USB_USART_Receive_Data>
}
   b54d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54da:	bd08      	pop	{r3, pc}

000b54dc <_ZN9USBSerial4peekEv>:
{
   b54dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b54de:	2101      	movs	r1, #1
   b54e0:	7c00      	ldrb	r0, [r0, #16]
   b54e2:	f7ff fb5d 	bl	b4ba0 <HAL_USB_USART_Receive_Data>
}
   b54e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54ea:	bd08      	pop	{r3, pc}

000b54ec <_ZN9USBSerial17availableForWriteEv>:
{
   b54ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b54ee:	7c00      	ldrb	r0, [r0, #16]
   b54f0:	f7ff fb4e 	bl	b4b90 <HAL_USB_USART_Available_Data_For_Write>
}
   b54f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54f8:	bd08      	pop	{r3, pc}

000b54fa <_ZN9USBSerial9availableEv>:
{
   b54fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b54fc:	7c00      	ldrb	r0, [r0, #16]
   b54fe:	f7ff fb3f 	bl	b4b80 <HAL_USB_USART_Available_Data>
}
   b5502:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5506:	bd08      	pop	{r3, pc}

000b5508 <_ZN9USBSerial5writeEh>:
{
   b5508:	b513      	push	{r0, r1, r4, lr}
   b550a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b550c:	7c00      	ldrb	r0, [r0, #16]
{
   b550e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5510:	f7ff fb3e 	bl	b4b90 <HAL_USB_USART_Available_Data_For_Write>
   b5514:	2800      	cmp	r0, #0
   b5516:	9901      	ldr	r1, [sp, #4]
   b5518:	dc01      	bgt.n	b551e <_ZN9USBSerial5writeEh+0x16>
   b551a:	7c60      	ldrb	r0, [r4, #17]
   b551c:	b120      	cbz	r0, b5528 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b551e:	7c20      	ldrb	r0, [r4, #16]
   b5520:	f7ff fb46 	bl	b4bb0 <HAL_USB_USART_Send_Data>
   b5524:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5528:	b002      	add	sp, #8
   b552a:	bd10      	pop	{r4, pc}

000b552c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b552c:	7c00      	ldrb	r0, [r0, #16]
   b552e:	f7ff bb47 	b.w	b4bc0 <HAL_USB_USART_Flush_Data>

000b5532 <_ZN9USBSerialD0Ev>:
   b5532:	b510      	push	{r4, lr}
   b5534:	2114      	movs	r1, #20
   b5536:	4604      	mov	r4, r0
   b5538:	f7fe fdb1 	bl	b409e <_ZdlPvj>
   b553c:	4620      	mov	r0, r4
   b553e:	bd10      	pop	{r4, pc}

000b5540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5540:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5546:	4604      	mov	r4, r0
   b5548:	4608      	mov	r0, r1
   b554a:	2100      	movs	r1, #0
   b554c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5550:	4b04      	ldr	r3, [pc, #16]	; (b5564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5552:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5554:	2301      	movs	r3, #1
  _serial = serial;
   b5556:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5558:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b555a:	4611      	mov	r1, r2
   b555c:	f7ff fb00 	bl	b4b60 <HAL_USB_USART_Init>
}
   b5560:	4620      	mov	r0, r4
   b5562:	bd10      	pop	{r4, pc}
   b5564:	000b6e98 	.word	0x000b6e98

000b5568 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5568:	7c00      	ldrb	r0, [r0, #16]
   b556a:	2200      	movs	r2, #0
   b556c:	f7ff bb00 	b.w	b4b70 <HAL_USB_USART_Begin>

000b5570 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5570:	7c00      	ldrb	r0, [r0, #16]
   b5572:	f7ff bb2d 	b.w	b4bd0 <HAL_USB_USART_Is_Connected>

000b5576 <_Z19acquireSerialBufferv>:
{
   b5576:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5578:	2214      	movs	r2, #20
{
   b557a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b557c:	2100      	movs	r1, #0
   b557e:	f001 fac5 	bl	b6b0c <memset>
}
   b5582:	4620      	mov	r0, r4
   b5584:	bd10      	pop	{r4, pc}
	...

000b5588 <_Z16_fetch_usbserialv>:
{
   b5588:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b558a:	4c0f      	ldr	r4, [pc, #60]	; (b55c8 <_Z16_fetch_usbserialv+0x40>)
{
   b558c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b558e:	a803      	add	r0, sp, #12
   b5590:	f7ff fff1 	bl	b5576 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5594:	7821      	ldrb	r1, [r4, #0]
   b5596:	f3bf 8f5b 	dmb	ish
   b559a:	f011 0101 	ands.w	r1, r1, #1
   b559e:	d10f      	bne.n	b55c0 <_Z16_fetch_usbserialv+0x38>
   b55a0:	4620      	mov	r0, r4
   b55a2:	9101      	str	r1, [sp, #4]
   b55a4:	f7fe fd7d 	bl	b40a2 <__cxa_guard_acquire>
   b55a8:	9901      	ldr	r1, [sp, #4]
   b55aa:	b148      	cbz	r0, b55c0 <_Z16_fetch_usbserialv+0x38>
   b55ac:	aa03      	add	r2, sp, #12
   b55ae:	4807      	ldr	r0, [pc, #28]	; (b55cc <_Z16_fetch_usbserialv+0x44>)
   b55b0:	f7ff ffc6 	bl	b5540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b55b4:	4620      	mov	r0, r4
   b55b6:	f7fe fd79 	bl	b40ac <__cxa_guard_release>
   b55ba:	4805      	ldr	r0, [pc, #20]	; (b55d0 <_Z16_fetch_usbserialv+0x48>)
   b55bc:	f001 fa92 	bl	b6ae4 <atexit>
	return _usbserial;
}
   b55c0:	4802      	ldr	r0, [pc, #8]	; (b55cc <_Z16_fetch_usbserialv+0x44>)
   b55c2:	b008      	add	sp, #32
   b55c4:	bd10      	pop	{r4, pc}
   b55c6:	bf00      	nop
   b55c8:	2003e6f4 	.word	0x2003e6f4
   b55cc:	2003e6f8 	.word	0x2003e6f8
   b55d0:	000b54c9 	.word	0x000b54c9

000b55d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b55d4:	4770      	bx	lr

000b55d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b55d6:	7441      	strb	r1, [r0, #17]
}
   b55d8:	4770      	bx	lr

000b55da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b55da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b55dc:	7c00      	ldrb	r0, [r0, #16]
   b55de:	f7ff fa37 	bl	b4a50 <hal_usart_available_data_for_write>
}
   b55e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55e6:	bd08      	pop	{r3, pc}

000b55e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b55e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b55ea:	7c00      	ldrb	r0, [r0, #16]
   b55ec:	f7ff fa08 	bl	b4a00 <hal_usart_available>
}
   b55f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55f4:	bd08      	pop	{r3, pc}

000b55f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b55f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b55f8:	7c00      	ldrb	r0, [r0, #16]
   b55fa:	f7ff fa11 	bl	b4a20 <hal_usart_peek>
}
   b55fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5602:	bd08      	pop	{r3, pc}

000b5604 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5604:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5606:	7c00      	ldrb	r0, [r0, #16]
   b5608:	f7ff fa02 	bl	b4a10 <hal_usart_read>
}
   b560c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5610:	bd08      	pop	{r3, pc}

000b5612 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5612:	7c00      	ldrb	r0, [r0, #16]
   b5614:	f7ff ba0c 	b.w	b4a30 <hal_usart_flush>

000b5618 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b561a:	7c45      	ldrb	r5, [r0, #17]
{
   b561c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b561e:	b12d      	cbz	r5, b562c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5620:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5622:	b003      	add	sp, #12
   b5624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5628:	f7ff b9e2 	b.w	b49f0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b562c:	7c00      	ldrb	r0, [r0, #16]
   b562e:	9101      	str	r1, [sp, #4]
   b5630:	f7ff fa0e 	bl	b4a50 <hal_usart_available_data_for_write>
   b5634:	2800      	cmp	r0, #0
   b5636:	9901      	ldr	r1, [sp, #4]
   b5638:	dcf2      	bgt.n	b5620 <_ZN11USARTSerial5writeEh+0x8>
}
   b563a:	4628      	mov	r0, r5
   b563c:	b003      	add	sp, #12
   b563e:	bd30      	pop	{r4, r5, pc}

000b5640 <_ZN11USARTSerialD0Ev>:
   b5640:	b510      	push	{r4, lr}
   b5642:	2114      	movs	r1, #20
   b5644:	4604      	mov	r4, r0
   b5646:	f7fe fd2a 	bl	b409e <_ZdlPvj>
   b564a:	4620      	mov	r0, r4
   b564c:	bd10      	pop	{r4, pc}
	...

000b5650 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5650:	b510      	push	{r4, lr}
   b5652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5656:	4604      	mov	r4, r0
   b5658:	4608      	mov	r0, r1
   b565a:	4611      	mov	r1, r2
   b565c:	2200      	movs	r2, #0
   b565e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5662:	4b04      	ldr	r3, [pc, #16]	; (b5674 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5664:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5666:	2301      	movs	r3, #1
  _serial = serial;
   b5668:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b566a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b566c:	f7ff f9f8 	bl	b4a60 <hal_usart_init_ex>
}
   b5670:	4620      	mov	r0, r4
   b5672:	bd10      	pop	{r4, pc}
   b5674:	000b6ec8 	.word	0x000b6ec8

000b5678 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5678:	4770      	bx	lr

000b567a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b567a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b567c:	4606      	mov	r6, r0
   b567e:	4615      	mov	r5, r2
   b5680:	460c      	mov	r4, r1
   b5682:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5684:	42bc      	cmp	r4, r7
   b5686:	d006      	beq.n	b5696 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5688:	6833      	ldr	r3, [r6, #0]
   b568a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b568e:	689b      	ldr	r3, [r3, #8]
   b5690:	4630      	mov	r0, r6
   b5692:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5694:	e7f6      	b.n	b5684 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5696:	4628      	mov	r0, r5
   b5698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b569a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b569a:	7c00      	ldrb	r0, [r0, #16]
   b569c:	2200      	movs	r2, #0
   b569e:	f7ff b9e7 	b.w	b4a70 <hal_i2c_write>

000b56a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b56a2:	7c00      	ldrb	r0, [r0, #16]
   b56a4:	2100      	movs	r1, #0
   b56a6:	f7ff b9eb 	b.w	b4a80 <hal_i2c_available>

000b56aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b56aa:	7c00      	ldrb	r0, [r0, #16]
   b56ac:	2100      	movs	r1, #0
   b56ae:	f7ff b9ef 	b.w	b4a90 <hal_i2c_read>

000b56b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b56b2:	7c00      	ldrb	r0, [r0, #16]
   b56b4:	2100      	movs	r1, #0
   b56b6:	f7ff b9f3 	b.w	b4aa0 <hal_i2c_peek>

000b56ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b56ba:	7c00      	ldrb	r0, [r0, #16]
   b56bc:	2100      	movs	r1, #0
   b56be:	f7ff b9f7 	b.w	b4ab0 <hal_i2c_flush>

000b56c2 <_ZN7TwoWireD0Ev>:
   b56c2:	b510      	push	{r4, lr}
   b56c4:	2114      	movs	r1, #20
   b56c6:	4604      	mov	r4, r0
   b56c8:	f7fe fce9 	bl	b409e <_ZdlPvj>
   b56cc:	4620      	mov	r0, r4
   b56ce:	bd10      	pop	{r4, pc}

000b56d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b56d0:	b538      	push	{r3, r4, r5, lr}
   b56d2:	4604      	mov	r4, r0
   b56d4:	4615      	mov	r5, r2
   b56d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b56da:	2200      	movs	r2, #0
   b56dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b56e0:	4b09      	ldr	r3, [pc, #36]	; (b5708 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b56e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b56e4:	4608      	mov	r0, r1
   b56e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b56e8:	4629      	mov	r1, r5
   b56ea:	f7ff f9f1 	bl	b4ad0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56ee:	30bf      	adds	r0, #191	; 0xbf
   b56f0:	d108      	bne.n	b5704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b56f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56f4:	07db      	lsls	r3, r3, #31
   b56f6:	d505      	bpl.n	b5704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b56f8:	6868      	ldr	r0, [r5, #4]
   b56fa:	f7ff fb1d 	bl	b4d38 <free>
    free(conf.tx_buffer);
   b56fe:	68e8      	ldr	r0, [r5, #12]
   b5700:	f7ff fb1a 	bl	b4d38 <free>
}
   b5704:	4620      	mov	r0, r4
   b5706:	bd38      	pop	{r3, r4, r5, pc}
   b5708:	000b6ef8 	.word	0x000b6ef8

000b570c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b570c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b570e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5710:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5714:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5716:	2201      	movs	r2, #1
   b5718:	f04f 33ff 	mov.w	r3, #4294967295
   b571c:	f10d 0107 	add.w	r1, sp, #7
   b5720:	47a0      	blx	r4
}
   b5722:	b002      	add	sp, #8
   b5724:	bd10      	pop	{r4, pc}

000b5726 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5726:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5728:	6803      	ldr	r3, [r0, #0]
   b572a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b572c:	f04f 33ff 	mov.w	r3, #4294967295
   b5730:	46a4      	mov	ip, r4
}
   b5732:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5736:	4760      	bx	ip

000b5738 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5738:	b513      	push	{r0, r1, r4, lr}
   b573a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b573c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b573e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5742:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5744:	f10d 0107 	add.w	r1, sp, #7
   b5748:	2201      	movs	r2, #1
   b574a:	47a0      	blx	r4
}
   b574c:	b002      	add	sp, #8
   b574e:	bd10      	pop	{r4, pc}

000b5750 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5750:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5752:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5754:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5758:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b575c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b575e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5760:	d008      	beq.n	b5774 <_ZN9TCPClient4readEv+0x24>
   b5762:	6963      	ldr	r3, [r4, #20]
   b5764:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5768:	1c51      	adds	r1, r2, #1
   b576a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b576e:	4413      	add	r3, r2
   b5770:	7918      	ldrb	r0, [r3, #4]
}
   b5772:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5774:	6803      	ldr	r3, [r0, #0]
   b5776:	691b      	ldr	r3, [r3, #16]
   b5778:	4798      	blx	r3
   b577a:	2800      	cmp	r0, #0
   b577c:	d1f1      	bne.n	b5762 <_ZN9TCPClient4readEv+0x12>
   b577e:	f04f 30ff 	mov.w	r0, #4294967295
   b5782:	e7f6      	b.n	b5772 <_ZN9TCPClient4readEv+0x22>

000b5784 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5784:	4770      	bx	lr

000b5786 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5786:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5788:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b578a:	43c0      	mvns	r0, r0
   b578c:	0fc0      	lsrs	r0, r0, #31
   b578e:	4770      	bx	lr

000b5790 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5790:	4770      	bx	lr
	...

000b5794 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5794:	4b06      	ldr	r3, [pc, #24]	; (b57b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5796:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5798:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b579a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b579e:	d005      	beq.n	b57ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b57a0:	4608      	mov	r0, r1
   b57a2:	f000 fc6f 	bl	b6084 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b57a6:	2800      	cmp	r0, #0
   b57a8:	bf08      	it	eq
   b57aa:	2400      	moveq	r4, #0
      }
   b57ac:	4620      	mov	r0, r4
   b57ae:	bd10      	pop	{r4, pc}
   b57b0:	000b6e54 	.word	0x000b6e54

000b57b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b57b4:	b510      	push	{r4, lr}
   b57b6:	21ac      	movs	r1, #172	; 0xac
   b57b8:	4604      	mov	r4, r0
   b57ba:	f7fe fc70 	bl	b409e <_ZdlPvj>
   b57be:	4620      	mov	r0, r4
   b57c0:	bd10      	pop	{r4, pc}

000b57c2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b57c2:	21ac      	movs	r1, #172	; 0xac
   b57c4:	f7fe bc6b 	b.w	b409e <_ZdlPvj>

000b57c8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b57c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b57cc:	f04f 0800 	mov.w	r8, #0
   b57d0:	b086      	sub	sp, #24
   b57d2:	461c      	mov	r4, r3
   b57d4:	f8c0 8004 	str.w	r8, [r0, #4]
   b57d8:	4605      	mov	r5, r0
   b57da:	460e      	mov	r6, r1
   b57dc:	4617      	mov	r7, r2
    struct timeval tv = {};
   b57de:	4641      	mov	r1, r8
   b57e0:	2210      	movs	r2, #16
   b57e2:	a802      	add	r0, sp, #8
   b57e4:	f001 f992 	bl	b6b0c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b57e8:	1c63      	adds	r3, r4, #1
   b57ea:	d009      	beq.n	b5800 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b57ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57f0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b57f4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b57f8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b57fc:	435c      	muls	r4, r3
   b57fe:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5800:	6968      	ldr	r0, [r5, #20]
   b5802:	2310      	movs	r3, #16
   b5804:	9300      	str	r3, [sp, #0]
   b5806:	6800      	ldr	r0, [r0, #0]
   b5808:	ab02      	add	r3, sp, #8
   b580a:	f241 0205 	movw	r2, #4101	; 0x1005
   b580e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5812:	f7ff f965 	bl	b4ae0 <sock_setsockopt>
    if (ret < 0) {
   b5816:	2800      	cmp	r0, #0
   b5818:	da07      	bge.n	b582a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b581a:	f7ff faa5 	bl	b4d68 <__errno>
   b581e:	6803      	ldr	r3, [r0, #0]
   b5820:	606b      	str	r3, [r5, #4]
        return 0;
   b5822:	2000      	movs	r0, #0
}
   b5824:	b006      	add	sp, #24
   b5826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b582a:	6968      	ldr	r0, [r5, #20]
   b582c:	2300      	movs	r3, #0
   b582e:	6800      	ldr	r0, [r0, #0]
   b5830:	463a      	mov	r2, r7
   b5832:	4631      	mov	r1, r6
   b5834:	f7ff f974 	bl	b4b20 <sock_send>
    if (ret < 0) {
   b5838:	1e03      	subs	r3, r0, #0
   b583a:	dbee      	blt.n	b581a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b583c:	4618      	mov	r0, r3
   b583e:	e7f1      	b.n	b5824 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5840 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b5840:	b530      	push	{r4, r5, lr}
   b5842:	b087      	sub	sp, #28
   b5844:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5846:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5848:	4668      	mov	r0, sp
   b584a:	f7ff fe2b 	bl	b54a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b584e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5850:	3404      	adds	r4, #4
   b5852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5854:	682b      	ldr	r3, [r5, #0]
   b5856:	7023      	strb	r3, [r4, #0]
    }
   b5858:	b007      	add	sp, #28
   b585a:	bd30      	pop	{r4, r5, pc}

000b585c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b585c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b585e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b5860:	4b05      	ldr	r3, [pc, #20]	; (b5878 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b5862:	4604      	mov	r4, r0
   b5864:	358c      	adds	r5, #140	; 0x8c
   b5866:	f844 3b04 	str.w	r3, [r4], #4
   b586a:	4606      	mov	r6, r0
   b586c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b586e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5870:	682b      	ldr	r3, [r5, #0]
   b5872:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5874:	4630      	mov	r0, r6
   b5876:	bd70      	pop	{r4, r5, r6, pc}
   b5878:	000b6e84 	.word	0x000b6e84

000b587c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b587c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5880:	4698      	mov	r8, r3
    stop();
   b5882:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5884:	b093      	sub	sp, #76	; 0x4c
   b5886:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5888:	2400      	movs	r4, #0
    stop();
   b588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b588c:	4606      	mov	r6, r0
   b588e:	4617      	mov	r7, r2
    stop();
   b5890:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5892:	4628      	mov	r0, r5
   b5894:	466b      	mov	r3, sp
   b5896:	4622      	mov	r2, r4
   b5898:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b589a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b589c:	f7ff f838 	bl	b4910 <netdb_getaddrinfo>
   b58a0:	4605      	mov	r5, r0
   b58a2:	2800      	cmp	r0, #0
   b58a4:	d163      	bne.n	b596e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b58a6:	9b00      	ldr	r3, [sp, #0]
   b58a8:	2b00      	cmp	r3, #0
   b58aa:	d04b      	beq.n	b5944 <_ZN9TCPClient7connectEPKctm+0xc8>
   b58ac:	695b      	ldr	r3, [r3, #20]
   b58ae:	2b00      	cmp	r3, #0
   b58b0:	d048      	beq.n	b5944 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b58b2:	a806      	add	r0, sp, #24
   b58b4:	f7ff fdb2 	bl	b541c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b58b8:	9b00      	ldr	r3, [sp, #0]
   b58ba:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b58bc:	7863      	ldrb	r3, [r4, #1]
   b58be:	2b02      	cmp	r3, #2
   b58c0:	d104      	bne.n	b58cc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b58c2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b58c4:	a806      	add	r0, sp, #24
   b58c6:	f7ff ffbb 	bl	b5840 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b58ca:	e026      	b.n	b591a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b58cc:	2b0a      	cmp	r3, #10
   b58ce:	d124      	bne.n	b591a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b58d0:	2211      	movs	r2, #17
   b58d2:	4629      	mov	r1, r5
   b58d4:	a801      	add	r0, sp, #4
   b58d6:	f001 f919 	bl	b6b0c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b58da:	68a3      	ldr	r3, [r4, #8]
   b58dc:	2b00      	cmp	r3, #0
   b58de:	d038      	beq.n	b5952 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b58e0:	f104 0308 	add.w	r3, r4, #8
   b58e4:	f10d 0c04 	add.w	ip, sp, #4
   b58e8:	3418      	adds	r4, #24
   b58ea:	6818      	ldr	r0, [r3, #0]
   b58ec:	6859      	ldr	r1, [r3, #4]
   b58ee:	4662      	mov	r2, ip
   b58f0:	c203      	stmia	r2!, {r0, r1}
   b58f2:	3308      	adds	r3, #8
   b58f4:	42a3      	cmp	r3, r4
   b58f6:	4694      	mov	ip, r2
   b58f8:	d1f7      	bne.n	b58ea <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b58fa:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b58fc:	a901      	add	r1, sp, #4
   b58fe:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5900:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5904:	f7ff fd98 	bl	b5438 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5908:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b590c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5910:	ac07      	add	r4, sp, #28
   b5912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5914:	f8dc 3000 	ldr.w	r3, [ip]
   b5918:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b591a:	a806      	add	r0, sp, #24
   b591c:	f7ff fd9e 	bl	b545c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5920:	b180      	cbz	r0, b5944 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b5922:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5924:	ad07      	add	r5, sp, #28
   b5926:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b592a:	4b12      	ldr	r3, [pc, #72]	; (b5974 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b592c:	930c      	str	r3, [sp, #48]	; 0x30
   b592e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5930:	ac0d      	add	r4, sp, #52	; 0x34
   b5932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5934:	682b      	ldr	r3, [r5, #0]
   b5936:	7023      	strb	r3, [r4, #0]
   b5938:	463a      	mov	r2, r7
   b593a:	4643      	mov	r3, r8
   b593c:	a90c      	add	r1, sp, #48	; 0x30
   b593e:	4630      	mov	r0, r6
   b5940:	47c8      	blx	r9
   b5942:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5944:	9800      	ldr	r0, [sp, #0]
   b5946:	f7fe ffdb 	bl	b4900 <netdb_freeaddrinfo>
}
   b594a:	4628      	mov	r0, r5
   b594c:	b013      	add	sp, #76	; 0x4c
   b594e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5952:	68e3      	ldr	r3, [r4, #12]
   b5954:	2b00      	cmp	r3, #0
   b5956:	d1c3      	bne.n	b58e0 <_ZN9TCPClient7connectEPKctm+0x64>
   b5958:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b595c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b5960:	f7ff f836 	bl	b49d0 <inet_htonl>
   b5964:	4581      	cmp	r9, r0
   b5966:	d1bb      	bne.n	b58e0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5968:	f104 0114 	add.w	r1, r4, #20
   b596c:	e7aa      	b.n	b58c4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b596e:	4625      	mov	r5, r4
   b5970:	e7e8      	b.n	b5944 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5972:	bf00      	nop
   b5974:	000b6e84 	.word	0x000b6e84

000b5978 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5978:	b538      	push	{r3, r4, r5, lr}
   b597a:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b597c:	681a      	ldr	r2, [r3, #0]
   b597e:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5980:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5982:	da10      	bge.n	b59a6 <_ZN9TCPClient9connectedEv+0x2e>
   b5984:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5988:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b598c:	429a      	cmp	r2, r3
   b598e:	d10a      	bne.n	b59a6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5990:	6803      	ldr	r3, [r0, #0]
   b5992:	691b      	ldr	r3, [r3, #16]
   b5994:	4798      	blx	r3
        if (!rv) {
   b5996:	4604      	mov	r4, r0
   b5998:	b928      	cbnz	r0, b59a6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b599a:	682b      	ldr	r3, [r5, #0]
   b599c:	4628      	mov	r0, r5
   b599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59a0:	4798      	blx	r3
        rv = available();
   b59a2:	4620      	mov	r0, r4
}
   b59a4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b59a6:	2001      	movs	r0, #1
   b59a8:	e7fc      	b.n	b59a4 <_ZN9TCPClient9connectedEv+0x2c>

000b59aa <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b59aa:	b510      	push	{r4, lr}
   b59ac:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b59ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b59b6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b59b8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b59ba:	d005      	beq.n	b59c8 <_ZN9TCPClient4peekEv+0x1e>
   b59bc:	6963      	ldr	r3, [r4, #20]
   b59be:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b59c2:	4413      	add	r3, r2
   b59c4:	7918      	ldrb	r0, [r3, #4]
}
   b59c6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b59c8:	6803      	ldr	r3, [r0, #0]
   b59ca:	691b      	ldr	r3, [r3, #16]
   b59cc:	4798      	blx	r3
   b59ce:	2800      	cmp	r0, #0
   b59d0:	d1f4      	bne.n	b59bc <_ZN9TCPClient4peekEv+0x12>
   b59d2:	f04f 30ff 	mov.w	r0, #4294967295
   b59d6:	e7f6      	b.n	b59c6 <_ZN9TCPClient4peekEv+0x1c>

000b59d8 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b59d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59da:	6943      	ldr	r3, [r0, #20]
   b59dc:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b59de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b59e2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b59e6:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b59e8:	4605      	mov	r5, r0
   b59ea:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b59ec:	d016      	beq.n	b5a1c <_ZN9TCPClient4readEPhj+0x44>
   b59ee:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b59f0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b59f4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b59f8:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b59fa:	42bc      	cmp	r4, r7
   b59fc:	bf28      	it	cs
   b59fe:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5a00:	3304      	adds	r3, #4
   b5a02:	4622      	mov	r2, r4
   b5a04:	4419      	add	r1, r3
   b5a06:	4630      	mov	r0, r6
   b5a08:	f001 f872 	bl	b6af0 <memcpy>
   b5a0c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5a0e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b5a12:	4423      	add	r3, r4
   b5a14:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5a18:	4620      	mov	r0, r4
   b5a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5a1c:	6803      	ldr	r3, [r0, #0]
   b5a1e:	691b      	ldr	r3, [r3, #16]
   b5a20:	4798      	blx	r3
   b5a22:	2800      	cmp	r0, #0
   b5a24:	d1e3      	bne.n	b59ee <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5a26:	f04f 34ff 	mov.w	r4, #4294967295
   b5a2a:	e7f5      	b.n	b5a18 <_ZN9TCPClient4readEPhj+0x40>

000b5a2c <_ZN9TCPClient12flush_bufferEv>:
   b5a2c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b5a2e:	2300      	movs	r3, #0
   b5a30:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5a34:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5a36:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5a3a:	4770      	bx	lr

000b5a3c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a40:	461f      	mov	r7, r3
    stop();
   b5a42:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5a44:	460c      	mov	r4, r1
    stop();
   b5a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5a48:	b08a      	sub	sp, #40	; 0x28
   b5a4a:	4605      	mov	r5, r0
   b5a4c:	4616      	mov	r6, r2
    stop();
   b5a4e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b5a50:	7d23      	ldrb	r3, [r4, #20]
   b5a52:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5a56:	2b04      	cmp	r3, #4
   b5a58:	bf0c      	ite	eq
   b5a5a:	2002      	moveq	r0, #2
   b5a5c:	200a      	movne	r0, #10
   b5a5e:	2206      	movs	r2, #6
   b5a60:	2101      	movs	r1, #1
   b5a62:	f7ff f865 	bl	b4b30 <sock_socket>
   b5a66:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5a6a:	696b      	ldr	r3, [r5, #20]
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	2b00      	cmp	r3, #0
   b5a70:	da08      	bge.n	b5a84 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5a72:	682b      	ldr	r3, [r5, #0]
   b5a74:	4628      	mov	r0, r5
   b5a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5a78:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5a7a:	4798      	blx	r3
}
   b5a7c:	4620      	mov	r0, r4
   b5a7e:	b00a      	add	sp, #40	; 0x28
   b5a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5a84:	4628      	mov	r0, r5
   b5a86:	f7ff ffd1 	bl	b5a2c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5a8a:	b1b7      	cbz	r7, b5aba <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5a8c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5a8e:	a903      	add	r1, sp, #12
   b5a90:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5a92:	9303      	str	r3, [sp, #12]
   b5a94:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5a98:	f7fe ff6a 	bl	b4970 <if_index_to_name>
   b5a9c:	2800      	cmp	r0, #0
   b5a9e:	d1e8      	bne.n	b5a72 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5aa0:	6968      	ldr	r0, [r5, #20]
   b5aa2:	2306      	movs	r3, #6
   b5aa4:	9300      	str	r3, [sp, #0]
   b5aa6:	6800      	ldr	r0, [r0, #0]
   b5aa8:	ab03      	add	r3, sp, #12
   b5aaa:	f241 020b 	movw	r2, #4107	; 0x100b
   b5aae:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5ab2:	f7ff f815 	bl	b4ae0 <sock_setsockopt>
   b5ab6:	2800      	cmp	r0, #0
   b5ab8:	d1db      	bne.n	b5a72 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5aba:	221c      	movs	r2, #28
   b5abc:	2100      	movs	r1, #0
   b5abe:	a803      	add	r0, sp, #12
   b5ac0:	f001 f824 	bl	b6b0c <memset>
    if (ip.version() == 4) {
   b5ac4:	7d23      	ldrb	r3, [r4, #20]
   b5ac6:	2b04      	cmp	r3, #4
   b5ac8:	d11d      	bne.n	b5b06 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5aca:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5ace:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5ad0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5ad4:	f7fe ff84 	bl	b49e0 <inet_htons>
   b5ad8:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5adc:	6860      	ldr	r0, [r4, #4]
   b5ade:	f7fe ff77 	bl	b49d0 <inet_htonl>
   b5ae2:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5ae4:	696b      	ldr	r3, [r5, #20]
   b5ae6:	221c      	movs	r2, #28
   b5ae8:	6818      	ldr	r0, [r3, #0]
   b5aea:	a903      	add	r1, sp, #12
   b5aec:	f7ff f808 	bl	b4b00 <sock_connect>
   b5af0:	2800      	cmp	r0, #0
   b5af2:	d1be      	bne.n	b5a72 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5af4:	3404      	adds	r4, #4
   b5af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5af8:	696d      	ldr	r5, [r5, #20]
   b5afa:	358c      	adds	r5, #140	; 0x8c
   b5afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5afe:	6823      	ldr	r3, [r4, #0]
   b5b00:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5b02:	2401      	movs	r4, #1
   b5b04:	e7ba      	b.n	b5a7c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5b06:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5b0a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5b0c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5b10:	f7fe ff66 	bl	b49e0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5b14:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5b16:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5b1a:	1d23      	adds	r3, r4, #4
   b5b1c:	f104 0714 	add.w	r7, r4, #20
   b5b20:	6818      	ldr	r0, [r3, #0]
   b5b22:	6859      	ldr	r1, [r3, #4]
   b5b24:	4632      	mov	r2, r6
   b5b26:	c203      	stmia	r2!, {r0, r1}
   b5b28:	3308      	adds	r3, #8
   b5b2a:	42bb      	cmp	r3, r7
   b5b2c:	4616      	mov	r6, r2
   b5b2e:	d1f7      	bne.n	b5b20 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b5b30:	e7d8      	b.n	b5ae4 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5b34 <_ZN9TCPClient9availableEv>:
{
   b5b34:	b530      	push	{r4, r5, lr}
   b5b36:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5b38:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5b3c:	b08b      	sub	sp, #44	; 0x2c
   b5b3e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b5b40:	b12b      	cbz	r3, b5b4e <_ZN9TCPClient9availableEv+0x1a>
   b5b42:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5b46:	429a      	cmp	r2, r3
   b5b48:	d101      	bne.n	b5b4e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5b4a:	f7ff ff6f 	bl	b5a2c <_ZN9TCPClient12flush_bufferEv>
   b5b4e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b5b50:	6808      	ldr	r0, [r1, #0]
   b5b52:	2800      	cmp	r0, #0
   b5b54:	db18      	blt.n	b5b88 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5b56:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5b5a:	2d7f      	cmp	r5, #127	; 0x7f
   b5b5c:	d814      	bhi.n	b5b88 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b5b5e:	3104      	adds	r1, #4
   b5b60:	2308      	movs	r3, #8
   b5b62:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5b66:	4429      	add	r1, r5
   b5b68:	f7fe ffd2 	bl	b4b10 <sock_recv>
            if (ret > 0) {
   b5b6c:	2800      	cmp	r0, #0
   b5b6e:	dd13      	ble.n	b5b98 <_ZN9TCPClient9availableEv+0x64>
   b5b70:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5b72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5b76:	b90a      	cbnz	r2, b5b7c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5b78:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5b7c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5b7e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5b82:	4410      	add	r0, r2
   b5b84:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5b88:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5b8a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5b8e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5b92:	1ac0      	subs	r0, r0, r3
   b5b94:	b00b      	add	sp, #44	; 0x2c
   b5b96:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5b98:	f7ff f8e6 	bl	b4d68 <__errno>
   b5b9c:	6803      	ldr	r3, [r0, #0]
   b5b9e:	2b0b      	cmp	r3, #11
   b5ba0:	d0f2      	beq.n	b5b88 <_ZN9TCPClient9availableEv+0x54>
   b5ba2:	f7ff f8e1 	bl	b4d68 <__errno>
   b5ba6:	6803      	ldr	r3, [r0, #0]
   b5ba8:	2b0b      	cmp	r3, #11
   b5baa:	d0ed      	beq.n	b5b88 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5bac:	2320      	movs	r3, #32
   b5bae:	2500      	movs	r5, #0
   b5bb0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5bb4:	f7ff f8d8 	bl	b4d68 <__errno>
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	9301      	str	r3, [sp, #4]
   b5bbc:	4b08      	ldr	r3, [pc, #32]	; (b5be0 <_ZN9TCPClient9availableEv+0xac>)
   b5bbe:	4909      	ldr	r1, [pc, #36]	; (b5be4 <_ZN9TCPClient9availableEv+0xb0>)
   b5bc0:	9300      	str	r3, [sp, #0]
   b5bc2:	aa02      	add	r2, sp, #8
   b5bc4:	462b      	mov	r3, r5
   b5bc6:	2032      	movs	r0, #50	; 0x32
   b5bc8:	f7ff f80a 	bl	b4be0 <log_message>
                    sock_close(d_->sock);
   b5bcc:	6963      	ldr	r3, [r4, #20]
   b5bce:	6818      	ldr	r0, [r3, #0]
   b5bd0:	f7fe ff8e 	bl	b4af0 <sock_close>
   b5bd4:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b5bd6:	f04f 32ff 	mov.w	r2, #4294967295
   b5bda:	601a      	str	r2, [r3, #0]
   b5bdc:	e7d4      	b.n	b5b88 <_ZN9TCPClient9availableEv+0x54>
   b5bde:	bf00      	nop
   b5be0:	000b6f1f 	.word	0x000b6f1f
   b5be4:	000b6f18 	.word	0x000b6f18

000b5be8 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5be8:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5bea:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5bec:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5bee:	6818      	ldr	r0, [r3, #0]
   b5bf0:	2800      	cmp	r0, #0
   b5bf2:	db01      	blt.n	b5bf8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5bf4:	f7fe ff7c 	bl	b4af0 <sock_close>
   b5bf8:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5bfa:	f04f 32ff 	mov.w	r2, #4294967295
   b5bfe:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5c00:	6960      	ldr	r0, [r4, #20]
   b5c02:	2211      	movs	r2, #17
   b5c04:	2100      	movs	r1, #0
   b5c06:	308c      	adds	r0, #140	; 0x8c
   b5c08:	f000 ff80 	bl	b6b0c <memset>
    flush_buffer();
   b5c0c:	4620      	mov	r0, r4
}
   b5c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5c12:	f7ff bf0b 	b.w	b5a2c <_ZN9TCPClient12flush_bufferEv>

000b5c16 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5c16:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5c18:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5c1a:	4604      	mov	r4, r0
          total(0) {
   b5c1c:	6001      	str	r1, [r0, #0]
   b5c1e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5c22:	3088      	adds	r0, #136	; 0x88
   b5c24:	f7ff fbfa 	bl	b541c <_ZN9IPAddressC1Ev>
}
   b5c28:	4620      	mov	r0, r4
   b5c2a:	bd10      	pop	{r4, pc}

000b5c2c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5c2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c2e:	2300      	movs	r3, #0
   b5c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c34:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5c38:	4a0e      	ldr	r2, [pc, #56]	; (b5c74 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5c3a:	6103      	str	r3, [r0, #16]
   b5c3c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5c3e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5c40:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5c42:	20ac      	movs	r0, #172	; 0xac
   b5c44:	9101      	str	r1, [sp, #4]
   b5c46:	f7fe fa26 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b5c4a:	1e05      	subs	r5, r0, #0
   b5c4c:	f105 060c 	add.w	r6, r5, #12
   b5c50:	d008      	beq.n	b5c64 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5c52:	2301      	movs	r3, #1
   b5c54:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5c58:	4b07      	ldr	r3, [pc, #28]	; (b5c78 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5c5a:	9901      	ldr	r1, [sp, #4]
   b5c5c:	602b      	str	r3, [r5, #0]
   b5c5e:	4630      	mov	r0, r6
   b5c60:	f7ff ffd9 	bl	b5c16 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5c64:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5c66:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5c6a:	f7ff fedf 	bl	b5a2c <_ZN9TCPClient12flush_bufferEv>
}
   b5c6e:	b002      	add	sp, #8
   b5c70:	bd70      	pop	{r4, r5, r6, pc}
   b5c72:	bf00      	nop
   b5c74:	000b6f54 	.word	0x000b6f54
   b5c78:	000b6f38 	.word	0x000b6f38

000b5c7c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5c7c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5c7e:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5c82:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5c84:	f7ff ffd2 	bl	b5c2c <_ZN9TCPClientC1Ei>
}
   b5c88:	4620      	mov	r0, r4
   b5c8a:	bd10      	pop	{r4, pc}

000b5c8c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5c8c:	b510      	push	{r4, lr}
   b5c8e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5c90:	6800      	ldr	r0, [r0, #0]
   b5c92:	2800      	cmp	r0, #0
   b5c94:	db01      	blt.n	b5c9a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5c96:	f7fe ff2b 	bl	b4af0 <sock_close>
    }
}
   b5c9a:	4620      	mov	r0, r4
   b5c9c:	bd10      	pop	{r4, pc}

000b5c9e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5c9e:	300c      	adds	r0, #12
   b5ca0:	f7ff bff4 	b.w	b5c8c <_ZN9TCPClient4DataD1Ev>

000b5ca4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5ca4:	2200      	movs	r2, #0
   b5ca6:	6840      	ldr	r0, [r0, #4]
   b5ca8:	4611      	mov	r1, r2
   b5caa:	f7fe bfdd 	b.w	b4c68 <network_ready>

000b5cae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5cae:	2200      	movs	r2, #0
   b5cb0:	6840      	ldr	r0, [r0, #4]
   b5cb2:	4611      	mov	r1, r2
   b5cb4:	f7fe bff8 	b.w	b4ca8 <network_listening>

000b5cb8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5cb8:	2200      	movs	r2, #0
   b5cba:	6840      	ldr	r0, [r0, #4]
   b5cbc:	4611      	mov	r1, r2
   b5cbe:	f7ff b80b 	b.w	b4cd8 <network_get_listen_timeout>

000b5cc2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5cc2:	6840      	ldr	r0, [r0, #4]
   b5cc4:	2200      	movs	r2, #0
   b5cc6:	f7fe bfff 	b.w	b4cc8 <network_set_listen_timeout>

000b5cca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5cca:	6840      	ldr	r0, [r0, #4]
   b5ccc:	2200      	movs	r2, #0
   b5cce:	f081 0101 	eor.w	r1, r1, #1
   b5cd2:	f7fe bfe1 	b.w	b4c98 <network_listen>

000b5cd6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5cd6:	2300      	movs	r3, #0
   b5cd8:	6840      	ldr	r0, [r0, #4]
   b5cda:	461a      	mov	r2, r3
   b5cdc:	4619      	mov	r1, r3
   b5cde:	f7fe bfd3 	b.w	b4c88 <network_off>

000b5ce2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ce2:	2300      	movs	r3, #0
   b5ce4:	6840      	ldr	r0, [r0, #4]
   b5ce6:	461a      	mov	r2, r3
   b5ce8:	4619      	mov	r1, r3
   b5cea:	f7fe bfc5 	b.w	b4c78 <network_on>

000b5cee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5cee:	2200      	movs	r2, #0
   b5cf0:	6840      	ldr	r0, [r0, #4]
   b5cf2:	4611      	mov	r1, r2
   b5cf4:	f7fe bfa8 	b.w	b4c48 <network_connecting>

000b5cf8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5cf8:	6840      	ldr	r0, [r0, #4]
   b5cfa:	2200      	movs	r2, #0
   b5cfc:	2102      	movs	r1, #2
   b5cfe:	f7fe bfab 	b.w	b4c58 <network_disconnect>

000b5d02 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5d02:	2300      	movs	r3, #0
   b5d04:	6840      	ldr	r0, [r0, #4]
   b5d06:	461a      	mov	r2, r3
   b5d08:	f7fe bf96 	b.w	b4c38 <network_connect>

000b5d0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5d0c:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5d0e:	2204      	movs	r2, #4
   b5d10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5d12:	4a02      	ldr	r2, [pc, #8]	; (b5d1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5d14:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5d16:	4770      	bx	lr
   b5d18:	2003e70c 	.word	0x2003e70c
   b5d1c:	000b6fa0 	.word	0x000b6fa0

000b5d20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5d20:	2300      	movs	r3, #0
   b5d22:	6840      	ldr	r0, [r0, #4]
   b5d24:	461a      	mov	r2, r3
   b5d26:	f7fe bf87 	b.w	b4c38 <network_connect>

000b5d2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5d2a:	6840      	ldr	r0, [r0, #4]
   b5d2c:	2200      	movs	r2, #0
   b5d2e:	2102      	movs	r1, #2
   b5d30:	f7fe bf92 	b.w	b4c58 <network_disconnect>

000b5d34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5d34:	2200      	movs	r2, #0
   b5d36:	6840      	ldr	r0, [r0, #4]
   b5d38:	4611      	mov	r1, r2
   b5d3a:	f7fe bf85 	b.w	b4c48 <network_connecting>

000b5d3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5d3e:	2200      	movs	r2, #0
   b5d40:	6840      	ldr	r0, [r0, #4]
   b5d42:	4611      	mov	r1, r2
   b5d44:	f7fe bf90 	b.w	b4c68 <network_ready>

000b5d48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5d48:	2300      	movs	r3, #0
   b5d4a:	6840      	ldr	r0, [r0, #4]
   b5d4c:	461a      	mov	r2, r3
   b5d4e:	4619      	mov	r1, r3
   b5d50:	f7fe bf92 	b.w	b4c78 <network_on>

000b5d54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5d54:	2300      	movs	r3, #0
   b5d56:	6840      	ldr	r0, [r0, #4]
   b5d58:	461a      	mov	r2, r3
   b5d5a:	4619      	mov	r1, r3
   b5d5c:	f7fe bf94 	b.w	b4c88 <network_off>

000b5d60 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5d60:	6840      	ldr	r0, [r0, #4]
   b5d62:	2100      	movs	r1, #0
   b5d64:	f7fe bfc0 	b.w	b4ce8 <network_is_on>

000b5d68 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5d68:	6840      	ldr	r0, [r0, #4]
   b5d6a:	2100      	movs	r1, #0
   b5d6c:	f7fe bfc4 	b.w	b4cf8 <network_is_off>

000b5d70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5d70:	6840      	ldr	r0, [r0, #4]
   b5d72:	2200      	movs	r2, #0
   b5d74:	f081 0101 	eor.w	r1, r1, #1
   b5d78:	f7fe bf8e 	b.w	b4c98 <network_listen>

000b5d7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5d7c:	6840      	ldr	r0, [r0, #4]
   b5d7e:	2200      	movs	r2, #0
   b5d80:	f7fe bfa2 	b.w	b4cc8 <network_set_listen_timeout>

000b5d84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5d84:	2200      	movs	r2, #0
   b5d86:	6840      	ldr	r0, [r0, #4]
   b5d88:	4611      	mov	r1, r2
   b5d8a:	f7fe bfa5 	b.w	b4cd8 <network_get_listen_timeout>

000b5d8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5d8e:	2200      	movs	r2, #0
   b5d90:	6840      	ldr	r0, [r0, #4]
   b5d92:	4611      	mov	r1, r2
   b5d94:	f7fe bf88 	b.w	b4ca8 <network_listening>

000b5d98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d9c:	b095      	sub	sp, #84	; 0x54
   b5d9e:	4614      	mov	r4, r2
   b5da0:	460d      	mov	r5, r1
   b5da2:	4607      	mov	r7, r0
    IPAddress addr;
   b5da4:	f7ff fb3a 	bl	b541c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5da8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5daa:	221c      	movs	r2, #28
   b5dac:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5dae:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5db0:	f000 feac 	bl	b6b0c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5db4:	2340      	movs	r3, #64	; 0x40
   b5db6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5db8:	4620      	mov	r0, r4
   b5dba:	466b      	mov	r3, sp
   b5dbc:	aa0c      	add	r2, sp, #48	; 0x30
   b5dbe:	2100      	movs	r1, #0
   b5dc0:	f7fe fda6 	bl	b4910 <netdb_getaddrinfo>
    if (!r) {
   b5dc4:	4604      	mov	r4, r0
   b5dc6:	2800      	cmp	r0, #0
   b5dc8:	d14b      	bne.n	b5e62 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dca:	4602      	mov	r2, r0
   b5dcc:	2101      	movs	r1, #1
   b5dce:	6868      	ldr	r0, [r5, #4]
   b5dd0:	f7fe ff4a 	bl	b4c68 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5dd4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dd6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5dd8:	4622      	mov	r2, r4
   b5dda:	6868      	ldr	r0, [r5, #4]
   b5ddc:	f7fe ff44 	bl	b4c68 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5de0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5de2:	4681      	mov	r9, r0
        bool ok = false;
   b5de4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5de6:	2e00      	cmp	r6, #0
   b5de8:	d03b      	beq.n	b5e62 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5dea:	2900      	cmp	r1, #0
   b5dec:	d139      	bne.n	b5e62 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5dee:	6873      	ldr	r3, [r6, #4]
   b5df0:	2b02      	cmp	r3, #2
   b5df2:	d003      	beq.n	b5dfc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5df4:	2b0a      	cmp	r3, #10
   b5df6:	d011      	beq.n	b5e1c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5df8:	69f6      	ldr	r6, [r6, #28]
   b5dfa:	e7f4      	b.n	b5de6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5dfc:	f1b8 0f00 	cmp.w	r8, #0
   b5e00:	d0fa      	beq.n	b5df8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5e02:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5e04:	a806      	add	r0, sp, #24
   b5e06:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5e08:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5e0a:	f7ff fb4b 	bl	b54a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e10:	1d3c      	adds	r4, r7, #4
   b5e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e14:	682b      	ldr	r3, [r5, #0]
   b5e16:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e18:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5e1a:	e7ed      	b.n	b5df8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5e1c:	f1b9 0f00 	cmp.w	r9, #0
   b5e20:	d0ea      	beq.n	b5df8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5e22:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5e24:	2210      	movs	r2, #16
   b5e26:	a801      	add	r0, sp, #4
   b5e28:	f000 fe70 	bl	b6b0c <memset>
                    a.v = 6;
   b5e2c:	2306      	movs	r3, #6
   b5e2e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e32:	ad01      	add	r5, sp, #4
   b5e34:	f104 0308 	add.w	r3, r4, #8
   b5e38:	3418      	adds	r4, #24
   b5e3a:	6818      	ldr	r0, [r3, #0]
   b5e3c:	6859      	ldr	r1, [r3, #4]
   b5e3e:	462a      	mov	r2, r5
   b5e40:	c203      	stmia	r2!, {r0, r1}
   b5e42:	3308      	adds	r3, #8
   b5e44:	42a3      	cmp	r3, r4
   b5e46:	4615      	mov	r5, r2
   b5e48:	d1f7      	bne.n	b5e3a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5e4a:	a901      	add	r1, sp, #4
   b5e4c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5e4e:	ad07      	add	r5, sp, #28
   b5e50:	f7ff faf2 	bl	b5438 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e56:	1d3c      	adds	r4, r7, #4
   b5e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e5a:	682b      	ldr	r3, [r5, #0]
   b5e5c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e5e:	4649      	mov	r1, r9
   b5e60:	e7ca      	b.n	b5df8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5e62:	9800      	ldr	r0, [sp, #0]
   b5e64:	f7fe fd4c 	bl	b4900 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5e68:	4638      	mov	r0, r7
   b5e6a:	b015      	add	sp, #84	; 0x54
   b5e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5e70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5e70:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5e72:	4a03      	ldr	r2, [pc, #12]	; (b5e80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5e74:	601a      	str	r2, [r3, #0]
   b5e76:	2200      	movs	r2, #0
   b5e78:	605a      	str	r2, [r3, #4]

} // spark
   b5e7a:	4770      	bx	lr
   b5e7c:	2003e714 	.word	0x2003e714
   b5e80:	000b6fdc 	.word	0x000b6fdc

000b5e84 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5e84:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5e86:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5e88:	d902      	bls.n	b5e90 <pinAvailable+0xc>
    return false;
   b5e8a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5e8c:	b002      	add	sp, #8
   b5e8e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5e90:	f1a0 030b 	sub.w	r3, r0, #11
   b5e94:	2b02      	cmp	r3, #2
   b5e96:	d81a      	bhi.n	b5ece <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5e98:	4c17      	ldr	r4, [pc, #92]	; (b5ef8 <pinAvailable+0x74>)
   b5e9a:	7821      	ldrb	r1, [r4, #0]
   b5e9c:	f3bf 8f5b 	dmb	ish
   b5ea0:	f011 0101 	ands.w	r1, r1, #1
   b5ea4:	d10b      	bne.n	b5ebe <pinAvailable+0x3a>
   b5ea6:	4620      	mov	r0, r4
   b5ea8:	9101      	str	r1, [sp, #4]
   b5eaa:	f7fe f8fa 	bl	b40a2 <__cxa_guard_acquire>
   b5eae:	9901      	ldr	r1, [sp, #4]
   b5eb0:	b128      	cbz	r0, b5ebe <pinAvailable+0x3a>
   b5eb2:	4812      	ldr	r0, [pc, #72]	; (b5efc <pinAvailable+0x78>)
   b5eb4:	f7fe ffae 	bl	b4e14 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5eb8:	4620      	mov	r0, r4
   b5eba:	f7fe f8f7 	bl	b40ac <__cxa_guard_release>
   b5ebe:	4b0f      	ldr	r3, [pc, #60]	; (b5efc <pinAvailable+0x78>)
   b5ec0:	7818      	ldrb	r0, [r3, #0]
   b5ec2:	f7fe fe45 	bl	b4b50 <hal_spi_is_enabled>
   b5ec6:	2800      	cmp	r0, #0
   b5ec8:	d1df      	bne.n	b5e8a <pinAvailable+0x6>
  return true; // 'pin' is available
   b5eca:	2001      	movs	r0, #1
   b5ecc:	e7de      	b.n	b5e8c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5ece:	2801      	cmp	r0, #1
   b5ed0:	d809      	bhi.n	b5ee6 <pinAvailable+0x62>
   b5ed2:	f000 f8b1 	bl	b6038 <_Z19__fetch_global_Wirev>
   b5ed6:	2100      	movs	r1, #0
   b5ed8:	7c00      	ldrb	r0, [r0, #16]
   b5eda:	f7fe fdf1 	bl	b4ac0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5ede:	f080 0001 	eor.w	r0, r0, #1
   b5ee2:	b2c0      	uxtb	r0, r0
   b5ee4:	e7d2      	b.n	b5e8c <pinAvailable+0x8>
   b5ee6:	3809      	subs	r0, #9
   b5ee8:	2801      	cmp	r0, #1
   b5eea:	d8ee      	bhi.n	b5eca <pinAvailable+0x46>
   b5eec:	f000 f864 	bl	b5fb8 <_Z22__fetch_global_Serial1v>
   b5ef0:	7c00      	ldrb	r0, [r0, #16]
   b5ef2:	f7fe fda5 	bl	b4a40 <hal_usart_is_enabled>
   b5ef6:	e7f2      	b.n	b5ede <pinAvailable+0x5a>
   b5ef8:	2003e71c 	.word	0x2003e71c
   b5efc:	2003e720 	.word	0x2003e720

000b5f00 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f00:	2823      	cmp	r0, #35	; 0x23
{
   b5f02:	b538      	push	{r3, r4, r5, lr}
   b5f04:	4604      	mov	r4, r0
   b5f06:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f08:	d80a      	bhi.n	b5f20 <pinMode+0x20>
   b5f0a:	29ff      	cmp	r1, #255	; 0xff
   b5f0c:	d008      	beq.n	b5f20 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5f0e:	f7ff ffb9 	bl	b5e84 <pinAvailable>
   b5f12:	b128      	cbz	r0, b5f20 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5f14:	4629      	mov	r1, r5
   b5f16:	4620      	mov	r0, r4
}
   b5f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5f1c:	f7fe bd08 	b.w	b4930 <HAL_Pin_Mode>
}
   b5f20:	bd38      	pop	{r3, r4, r5, pc}

000b5f22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5f22:	b538      	push	{r3, r4, r5, lr}
   b5f24:	4604      	mov	r4, r0
   b5f26:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5f28:	f7fe fd0a 	bl	b4940 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5f2c:	28ff      	cmp	r0, #255	; 0xff
   b5f2e:	d010      	beq.n	b5f52 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5f30:	2806      	cmp	r0, #6
   b5f32:	d804      	bhi.n	b5f3e <digitalWrite+0x1c>
   b5f34:	234d      	movs	r3, #77	; 0x4d
   b5f36:	fa23 f000 	lsr.w	r0, r3, r0
   b5f3a:	07c3      	lsls	r3, r0, #31
   b5f3c:	d409      	bmi.n	b5f52 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5f3e:	4620      	mov	r0, r4
   b5f40:	f7ff ffa0 	bl	b5e84 <pinAvailable>
   b5f44:	b128      	cbz	r0, b5f52 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5f46:	4629      	mov	r1, r5
   b5f48:	4620      	mov	r0, r4
}
   b5f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5f4e:	f7fe bcff 	b.w	b4950 <HAL_GPIO_Write>
}
   b5f52:	bd38      	pop	{r3, r4, r5, pc}

000b5f54 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b5f54:	280d      	cmp	r0, #13
{
   b5f56:	b510      	push	{r4, lr}
   b5f58:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5f5a:	bf9c      	itt	ls
   b5f5c:	340e      	addls	r4, #14
   b5f5e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5f60:	4620      	mov	r0, r4
   b5f62:	f7ff ff8f 	bl	b5e84 <pinAvailable>
   b5f66:	b150      	cbz	r0, b5f7e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5f68:	2103      	movs	r1, #3
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7fe fcd8 	bl	b4920 <HAL_Validate_Pin_Function>
   b5f70:	2803      	cmp	r0, #3
   b5f72:	d104      	bne.n	b5f7e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5f74:	4620      	mov	r0, r4
}
   b5f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5f7a:	f7fe bcf1 	b.w	b4960 <hal_adc_read>
}
   b5f7e:	2000      	movs	r0, #0
   b5f80:	bd10      	pop	{r4, pc}

000b5f82 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f82:	4770      	bx	lr

000b5f84 <_Z20acquireSerial1Bufferv>:
{
   b5f84:	b538      	push	{r3, r4, r5, lr}
   b5f86:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5f88:	2514      	movs	r5, #20
   b5f8a:	462a      	mov	r2, r5
   b5f8c:	2100      	movs	r1, #0
   b5f8e:	f000 fdbd 	bl	b6b0c <memset>
   b5f92:	8025      	strh	r5, [r4, #0]
   b5f94:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f96:	4907      	ldr	r1, [pc, #28]	; (b5fb4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5f98:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f9a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5f9c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f9e:	f000 f86f 	bl	b6080 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fa2:	4904      	ldr	r1, [pc, #16]	; (b5fb4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5fa4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fa6:	4628      	mov	r0, r5
   b5fa8:	f000 f86a 	bl	b6080 <_ZnajRKSt9nothrow_t>
    };
   b5fac:	60e0      	str	r0, [r4, #12]
}
   b5fae:	4620      	mov	r0, r4
   b5fb0:	bd38      	pop	{r3, r4, r5, pc}
   b5fb2:	bf00      	nop
   b5fb4:	000b7010 	.word	0x000b7010

000b5fb8 <_Z22__fetch_global_Serial1v>:
{
   b5fb8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fba:	4d0e      	ldr	r5, [pc, #56]	; (b5ff4 <_Z22__fetch_global_Serial1v+0x3c>)
   b5fbc:	7829      	ldrb	r1, [r5, #0]
   b5fbe:	f3bf 8f5b 	dmb	ish
   b5fc2:	f011 0401 	ands.w	r4, r1, #1
{
   b5fc6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fc8:	d111      	bne.n	b5fee <_Z22__fetch_global_Serial1v+0x36>
   b5fca:	4628      	mov	r0, r5
   b5fcc:	f7fe f869 	bl	b40a2 <__cxa_guard_acquire>
   b5fd0:	b168      	cbz	r0, b5fee <_Z22__fetch_global_Serial1v+0x36>
   b5fd2:	a801      	add	r0, sp, #4
   b5fd4:	f7ff ffd6 	bl	b5f84 <_Z20acquireSerial1Bufferv>
   b5fd8:	aa01      	add	r2, sp, #4
   b5fda:	4621      	mov	r1, r4
   b5fdc:	4806      	ldr	r0, [pc, #24]	; (b5ff8 <_Z22__fetch_global_Serial1v+0x40>)
   b5fde:	f7ff fb37 	bl	b5650 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5fe2:	4628      	mov	r0, r5
   b5fe4:	f7fe f862 	bl	b40ac <__cxa_guard_release>
   b5fe8:	4804      	ldr	r0, [pc, #16]	; (b5ffc <_Z22__fetch_global_Serial1v+0x44>)
   b5fea:	f000 fd7b 	bl	b6ae4 <atexit>
    return serial1;
}
   b5fee:	4802      	ldr	r0, [pc, #8]	; (b5ff8 <_Z22__fetch_global_Serial1v+0x40>)
   b5ff0:	b007      	add	sp, #28
   b5ff2:	bd30      	pop	{r4, r5, pc}
   b5ff4:	2003e728 	.word	0x2003e728
   b5ff8:	2003e72c 	.word	0x2003e72c
   b5ffc:	000b5f83 	.word	0x000b5f83

000b6000 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6000:	4770      	bx	lr
	...

000b6004 <_Z17acquireWireBufferv>:
{
   b6004:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6006:	4b0a      	ldr	r3, [pc, #40]	; (b6030 <_Z17acquireWireBufferv+0x2c>)
   b6008:	6003      	str	r3, [r0, #0]
   b600a:	2301      	movs	r3, #1
{
   b600c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b600e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6010:	4908      	ldr	r1, [pc, #32]	; (b6034 <_Z17acquireWireBufferv+0x30>)
   b6012:	2020      	movs	r0, #32
   b6014:	f000 f834 	bl	b6080 <_ZnajRKSt9nothrow_t>
	};
   b6018:	2520      	movs	r5, #32
   b601a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b601c:	4905      	ldr	r1, [pc, #20]	; (b6034 <_Z17acquireWireBufferv+0x30>)
	};
   b601e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6020:	4628      	mov	r0, r5
   b6022:	f000 f82d 	bl	b6080 <_ZnajRKSt9nothrow_t>
	};
   b6026:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b602a:	4620      	mov	r0, r4
   b602c:	bd38      	pop	{r3, r4, r5, pc}
   b602e:	bf00      	nop
   b6030:	00010018 	.word	0x00010018
   b6034:	000b7010 	.word	0x000b7010

000b6038 <_Z19__fetch_global_Wirev>:
{
   b6038:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b603a:	4d0e      	ldr	r5, [pc, #56]	; (b6074 <_Z19__fetch_global_Wirev+0x3c>)
   b603c:	7829      	ldrb	r1, [r5, #0]
   b603e:	f3bf 8f5b 	dmb	ish
   b6042:	f011 0401 	ands.w	r4, r1, #1
{
   b6046:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6048:	d111      	bne.n	b606e <_Z19__fetch_global_Wirev+0x36>
   b604a:	4628      	mov	r0, r5
   b604c:	f7fe f829 	bl	b40a2 <__cxa_guard_acquire>
   b6050:	b168      	cbz	r0, b606e <_Z19__fetch_global_Wirev+0x36>
   b6052:	4668      	mov	r0, sp
   b6054:	f7ff ffd6 	bl	b6004 <_Z17acquireWireBufferv>
   b6058:	466a      	mov	r2, sp
   b605a:	4621      	mov	r1, r4
   b605c:	4806      	ldr	r0, [pc, #24]	; (b6078 <_Z19__fetch_global_Wirev+0x40>)
   b605e:	f7ff fb37 	bl	b56d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6062:	4628      	mov	r0, r5
   b6064:	f7fe f822 	bl	b40ac <__cxa_guard_release>
   b6068:	4804      	ldr	r0, [pc, #16]	; (b607c <_Z19__fetch_global_Wirev+0x44>)
   b606a:	f000 fd3b 	bl	b6ae4 <atexit>
	return wire;
}
   b606e:	4802      	ldr	r0, [pc, #8]	; (b6078 <_Z19__fetch_global_Wirev+0x40>)
   b6070:	b007      	add	sp, #28
   b6072:	bd30      	pop	{r4, r5, pc}
   b6074:	2003e744 	.word	0x2003e744
   b6078:	2003e748 	.word	0x2003e748
   b607c:	000b6001 	.word	0x000b6001

000b6080 <_ZnajRKSt9nothrow_t>:
   b6080:	f7fe b80b 	b.w	b409a <_Znaj>

000b6084 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6084:	4901      	ldr	r1, [pc, #4]	; (b608c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6086:	f000 b8f9 	b.w	b627c <_ZNKSt9type_infoeqERKS_>
   b608a:	bf00      	nop
   b608c:	000b702c 	.word	0x000b702c

000b6090 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6092:	2400      	movs	r4, #0
   b6094:	2310      	movs	r3, #16
   b6096:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b609a:	6803      	ldr	r3, [r0, #0]
   b609c:	4615      	mov	r5, r2
   b609e:	699e      	ldr	r6, [r3, #24]
   b60a0:	6812      	ldr	r2, [r2, #0]
   b60a2:	466b      	mov	r3, sp
   b60a4:	e9cd 4400 	strd	r4, r4, [sp]
   b60a8:	47b0      	blx	r6
   b60aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b60ae:	f003 0306 	and.w	r3, r3, #6
   b60b2:	2b06      	cmp	r3, #6
   b60b4:	bf03      	ittte	eq
   b60b6:	9b00      	ldreq	r3, [sp, #0]
   b60b8:	602b      	streq	r3, [r5, #0]
   b60ba:	2001      	moveq	r0, #1
   b60bc:	4620      	movne	r0, r4
   b60be:	b004      	add	sp, #16
   b60c0:	bd70      	pop	{r4, r5, r6, pc}

000b60c2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b60c2:	9800      	ldr	r0, [sp, #0]
   b60c4:	4290      	cmp	r0, r2
   b60c6:	bf14      	ite	ne
   b60c8:	2001      	movne	r0, #1
   b60ca:	2006      	moveq	r0, #6
   b60cc:	4770      	bx	lr
	...

000b60d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b60d0:	b510      	push	{r4, lr}
   b60d2:	4b03      	ldr	r3, [pc, #12]	; (b60e0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b60d4:	6003      	str	r3, [r0, #0]
   b60d6:	4604      	mov	r4, r0
   b60d8:	f000 f8cd 	bl	b6276 <_ZNSt9type_infoD1Ev>
   b60dc:	4620      	mov	r0, r4
   b60de:	bd10      	pop	{r4, pc}
   b60e0:	000b706c 	.word	0x000b706c

000b60e4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b60e4:	b510      	push	{r4, lr}
   b60e6:	4604      	mov	r4, r0
   b60e8:	f7ff fff2 	bl	b60d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b60ec:	4620      	mov	r0, r4
   b60ee:	2108      	movs	r1, #8
   b60f0:	f7fd ffd5 	bl	b409e <_ZdlPvj>
   b60f4:	4620      	mov	r0, r4
   b60f6:	bd10      	pop	{r4, pc}

000b60f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b60f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b60fc:	461f      	mov	r7, r3
   b60fe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6102:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6106:	4598      	cmp	r8, r3
   b6108:	4606      	mov	r6, r0
   b610a:	4615      	mov	r5, r2
   b610c:	d107      	bne.n	b611e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b610e:	9907      	ldr	r1, [sp, #28]
   b6110:	f000 f8b4 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b6114:	b118      	cbz	r0, b611e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6116:	7165      	strb	r5, [r4, #5]
   b6118:	2000      	movs	r0, #0
   b611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b611e:	4639      	mov	r1, r7
   b6120:	4630      	mov	r0, r6
   b6122:	f000 f8ab 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b6126:	2800      	cmp	r0, #0
   b6128:	d0f6      	beq.n	b6118 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b612a:	2301      	movs	r3, #1
   b612c:	f8c4 8000 	str.w	r8, [r4]
   b6130:	7125      	strb	r5, [r4, #4]
   b6132:	71a3      	strb	r3, [r4, #6]
   b6134:	e7f0      	b.n	b6118 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6136 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6136:	b538      	push	{r3, r4, r5, lr}
   b6138:	4615      	mov	r5, r2
   b613a:	461c      	mov	r4, r3
   b613c:	f000 f89e 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b6140:	b120      	cbz	r0, b614c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6142:	2308      	movs	r3, #8
   b6144:	60e3      	str	r3, [r4, #12]
   b6146:	2306      	movs	r3, #6
   b6148:	6025      	str	r5, [r4, #0]
   b614a:	7123      	strb	r3, [r4, #4]
   b614c:	bd38      	pop	{r3, r4, r5, pc}

000b614e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b614e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6150:	4605      	mov	r5, r0
   b6152:	460c      	mov	r4, r1
   b6154:	9201      	str	r2, [sp, #4]
   b6156:	461e      	mov	r6, r3
   b6158:	f000 f890 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b615c:	b950      	cbnz	r0, b6174 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b615e:	2e03      	cmp	r6, #3
   b6160:	d808      	bhi.n	b6174 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6162:	6823      	ldr	r3, [r4, #0]
   b6164:	9a01      	ldr	r2, [sp, #4]
   b6166:	695b      	ldr	r3, [r3, #20]
   b6168:	4629      	mov	r1, r5
   b616a:	4620      	mov	r0, r4
   b616c:	b002      	add	sp, #8
   b616e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6172:	4718      	bx	r3
   b6174:	b002      	add	sp, #8
   b6176:	bd70      	pop	{r4, r5, r6, pc}

000b6178 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6178:	b510      	push	{r4, lr}
   b617a:	4b03      	ldr	r3, [pc, #12]	; (b6188 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b617c:	6003      	str	r3, [r0, #0]
   b617e:	4604      	mov	r4, r0
   b6180:	f7ff ffa6 	bl	b60d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6184:	4620      	mov	r0, r4
   b6186:	bd10      	pop	{r4, pc}
   b6188:	000b70cc 	.word	0x000b70cc

000b618c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b618c:	b510      	push	{r4, lr}
   b618e:	4604      	mov	r4, r0
   b6190:	f7ff fff2 	bl	b6178 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6194:	4620      	mov	r0, r4
   b6196:	210c      	movs	r1, #12
   b6198:	f7fd ff81 	bl	b409e <_ZdlPvj>
   b619c:	4620      	mov	r0, r4
   b619e:	bd10      	pop	{r4, pc}

000b61a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b61a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b61a2:	9f08      	ldr	r7, [sp, #32]
   b61a4:	4297      	cmp	r7, r2
   b61a6:	4605      	mov	r5, r0
   b61a8:	460e      	mov	r6, r1
   b61aa:	4614      	mov	r4, r2
   b61ac:	d00a      	beq.n	b61c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b61ae:	68a8      	ldr	r0, [r5, #8]
   b61b0:	6802      	ldr	r2, [r0, #0]
   b61b2:	9708      	str	r7, [sp, #32]
   b61b4:	6a15      	ldr	r5, [r2, #32]
   b61b6:	4631      	mov	r1, r6
   b61b8:	4622      	mov	r2, r4
   b61ba:	46ac      	mov	ip, r5
   b61bc:	b003      	add	sp, #12
   b61be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b61c2:	4760      	bx	ip
   b61c4:	4619      	mov	r1, r3
   b61c6:	9301      	str	r3, [sp, #4]
   b61c8:	f000 f858 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b61cc:	9b01      	ldr	r3, [sp, #4]
   b61ce:	2800      	cmp	r0, #0
   b61d0:	d0ed      	beq.n	b61ae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b61d2:	2006      	movs	r0, #6
   b61d4:	b003      	add	sp, #12
   b61d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b61d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b61dc:	460d      	mov	r5, r1
   b61de:	4619      	mov	r1, r3
   b61e0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b61e4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b61e8:	4681      	mov	r9, r0
   b61ea:	4617      	mov	r7, r2
   b61ec:	4698      	mov	r8, r3
   b61ee:	f000 f845 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b61f2:	b190      	cbz	r0, b621a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b61f4:	2d00      	cmp	r5, #0
   b61f6:	6034      	str	r4, [r6, #0]
   b61f8:	7137      	strb	r7, [r6, #4]
   b61fa:	db09      	blt.n	b6210 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b61fc:	1961      	adds	r1, r4, r5
   b61fe:	458a      	cmp	sl, r1
   b6200:	bf0c      	ite	eq
   b6202:	2106      	moveq	r1, #6
   b6204:	2101      	movne	r1, #1
   b6206:	71b1      	strb	r1, [r6, #6]
   b6208:	2000      	movs	r0, #0
   b620a:	b001      	add	sp, #4
   b620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6210:	3502      	adds	r5, #2
   b6212:	d1f9      	bne.n	b6208 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6214:	2301      	movs	r3, #1
   b6216:	71b3      	strb	r3, [r6, #6]
   b6218:	e7f6      	b.n	b6208 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b621a:	4554      	cmp	r4, sl
   b621c:	d106      	bne.n	b622c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b621e:	4659      	mov	r1, fp
   b6220:	4648      	mov	r0, r9
   b6222:	f000 f82b 	bl	b627c <_ZNKSt9type_infoeqERKS_>
   b6226:	b108      	cbz	r0, b622c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6228:	7177      	strb	r7, [r6, #5]
   b622a:	e7ed      	b.n	b6208 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b622c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6230:	6803      	ldr	r3, [r0, #0]
   b6232:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6236:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b623a:	69dc      	ldr	r4, [r3, #28]
   b623c:	463a      	mov	r2, r7
   b623e:	4643      	mov	r3, r8
   b6240:	4629      	mov	r1, r5
   b6242:	46a4      	mov	ip, r4
   b6244:	b001      	add	sp, #4
   b6246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b624a:	4760      	bx	ip

000b624c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6250:	4607      	mov	r7, r0
   b6252:	460c      	mov	r4, r1
   b6254:	4615      	mov	r5, r2
   b6256:	461e      	mov	r6, r3
   b6258:	f7ff ff6d 	bl	b6136 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b625c:	b948      	cbnz	r0, b6272 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b625e:	68b8      	ldr	r0, [r7, #8]
   b6260:	6803      	ldr	r3, [r0, #0]
   b6262:	699f      	ldr	r7, [r3, #24]
   b6264:	462a      	mov	r2, r5
   b6266:	4633      	mov	r3, r6
   b6268:	4621      	mov	r1, r4
   b626a:	46bc      	mov	ip, r7
   b626c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6270:	4760      	bx	ip
   b6272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6276 <_ZNSt9type_infoD1Ev>:
   b6276:	4770      	bx	lr

000b6278 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6278:	2000      	movs	r0, #0
   b627a:	4770      	bx	lr

000b627c <_ZNKSt9type_infoeqERKS_>:
   b627c:	4281      	cmp	r1, r0
   b627e:	b508      	push	{r3, lr}
   b6280:	d00e      	beq.n	b62a0 <_ZNKSt9type_infoeqERKS_+0x24>
   b6282:	6840      	ldr	r0, [r0, #4]
   b6284:	7803      	ldrb	r3, [r0, #0]
   b6286:	2b2a      	cmp	r3, #42	; 0x2a
   b6288:	d00c      	beq.n	b62a4 <_ZNKSt9type_infoeqERKS_+0x28>
   b628a:	6849      	ldr	r1, [r1, #4]
   b628c:	780b      	ldrb	r3, [r1, #0]
   b628e:	2b2a      	cmp	r3, #42	; 0x2a
   b6290:	bf08      	it	eq
   b6292:	3101      	addeq	r1, #1
   b6294:	f000 fc70 	bl	b6b78 <strcmp>
   b6298:	fab0 f080 	clz	r0, r0
   b629c:	0940      	lsrs	r0, r0, #5
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	2001      	movs	r0, #1
   b62a2:	e7fc      	b.n	b629e <_ZNKSt9type_infoeqERKS_+0x22>
   b62a4:	2000      	movs	r0, #0
   b62a6:	e7fa      	b.n	b629e <_ZNKSt9type_infoeqERKS_+0x22>

000b62a8 <__aeabi_drsub>:
   b62a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b62ac:	e002      	b.n	b62b4 <__adddf3>
   b62ae:	bf00      	nop

000b62b0 <__aeabi_dsub>:
   b62b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b62b4 <__adddf3>:
   b62b4:	b530      	push	{r4, r5, lr}
   b62b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b62ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b62be:	ea94 0f05 	teq	r4, r5
   b62c2:	bf08      	it	eq
   b62c4:	ea90 0f02 	teqeq	r0, r2
   b62c8:	bf1f      	itttt	ne
   b62ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   b62ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   b62d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b62d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b62da:	f000 80e2 	beq.w	b64a2 <__adddf3+0x1ee>
   b62de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b62e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b62e6:	bfb8      	it	lt
   b62e8:	426d      	neglt	r5, r5
   b62ea:	dd0c      	ble.n	b6306 <__adddf3+0x52>
   b62ec:	442c      	add	r4, r5
   b62ee:	ea80 0202 	eor.w	r2, r0, r2
   b62f2:	ea81 0303 	eor.w	r3, r1, r3
   b62f6:	ea82 0000 	eor.w	r0, r2, r0
   b62fa:	ea83 0101 	eor.w	r1, r3, r1
   b62fe:	ea80 0202 	eor.w	r2, r0, r2
   b6302:	ea81 0303 	eor.w	r3, r1, r3
   b6306:	2d36      	cmp	r5, #54	; 0x36
   b6308:	bf88      	it	hi
   b630a:	bd30      	pophi	{r4, r5, pc}
   b630c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6310:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6314:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b631c:	d002      	beq.n	b6324 <__adddf3+0x70>
   b631e:	4240      	negs	r0, r0
   b6320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6324:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6328:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b632c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6330:	d002      	beq.n	b6338 <__adddf3+0x84>
   b6332:	4252      	negs	r2, r2
   b6334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6338:	ea94 0f05 	teq	r4, r5
   b633c:	f000 80a7 	beq.w	b648e <__adddf3+0x1da>
   b6340:	f1a4 0401 	sub.w	r4, r4, #1
   b6344:	f1d5 0e20 	rsbs	lr, r5, #32
   b6348:	db0d      	blt.n	b6366 <__adddf3+0xb2>
   b634a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b634e:	fa22 f205 	lsr.w	r2, r2, r5
   b6352:	1880      	adds	r0, r0, r2
   b6354:	f141 0100 	adc.w	r1, r1, #0
   b6358:	fa03 f20e 	lsl.w	r2, r3, lr
   b635c:	1880      	adds	r0, r0, r2
   b635e:	fa43 f305 	asr.w	r3, r3, r5
   b6362:	4159      	adcs	r1, r3
   b6364:	e00e      	b.n	b6384 <__adddf3+0xd0>
   b6366:	f1a5 0520 	sub.w	r5, r5, #32
   b636a:	f10e 0e20 	add.w	lr, lr, #32
   b636e:	2a01      	cmp	r2, #1
   b6370:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6374:	bf28      	it	cs
   b6376:	f04c 0c02 	orrcs.w	ip, ip, #2
   b637a:	fa43 f305 	asr.w	r3, r3, r5
   b637e:	18c0      	adds	r0, r0, r3
   b6380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b6384:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6388:	d507      	bpl.n	b639a <__adddf3+0xe6>
   b638a:	f04f 0e00 	mov.w	lr, #0
   b638e:	f1dc 0c00 	rsbs	ip, ip, #0
   b6392:	eb7e 0000 	sbcs.w	r0, lr, r0
   b6396:	eb6e 0101 	sbc.w	r1, lr, r1
   b639a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b639e:	d31b      	bcc.n	b63d8 <__adddf3+0x124>
   b63a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b63a4:	d30c      	bcc.n	b63c0 <__adddf3+0x10c>
   b63a6:	0849      	lsrs	r1, r1, #1
   b63a8:	ea5f 0030 	movs.w	r0, r0, rrx
   b63ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b63b0:	f104 0401 	add.w	r4, r4, #1
   b63b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b63b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b63bc:	f080 809a 	bcs.w	b64f4 <__adddf3+0x240>
   b63c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b63c4:	bf08      	it	eq
   b63c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b63ca:	f150 0000 	adcs.w	r0, r0, #0
   b63ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b63d2:	ea41 0105 	orr.w	r1, r1, r5
   b63d6:	bd30      	pop	{r4, r5, pc}
   b63d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b63dc:	4140      	adcs	r0, r0
   b63de:	eb41 0101 	adc.w	r1, r1, r1
   b63e2:	3c01      	subs	r4, #1
   b63e4:	bf28      	it	cs
   b63e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b63ea:	d2e9      	bcs.n	b63c0 <__adddf3+0x10c>
   b63ec:	f091 0f00 	teq	r1, #0
   b63f0:	bf04      	itt	eq
   b63f2:	4601      	moveq	r1, r0
   b63f4:	2000      	moveq	r0, #0
   b63f6:	fab1 f381 	clz	r3, r1
   b63fa:	bf08      	it	eq
   b63fc:	3320      	addeq	r3, #32
   b63fe:	f1a3 030b 	sub.w	r3, r3, #11
   b6402:	f1b3 0220 	subs.w	r2, r3, #32
   b6406:	da0c      	bge.n	b6422 <__adddf3+0x16e>
   b6408:	320c      	adds	r2, #12
   b640a:	dd08      	ble.n	b641e <__adddf3+0x16a>
   b640c:	f102 0c14 	add.w	ip, r2, #20
   b6410:	f1c2 020c 	rsb	r2, r2, #12
   b6414:	fa01 f00c 	lsl.w	r0, r1, ip
   b6418:	fa21 f102 	lsr.w	r1, r1, r2
   b641c:	e00c      	b.n	b6438 <__adddf3+0x184>
   b641e:	f102 0214 	add.w	r2, r2, #20
   b6422:	bfd8      	it	le
   b6424:	f1c2 0c20 	rsble	ip, r2, #32
   b6428:	fa01 f102 	lsl.w	r1, r1, r2
   b642c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6430:	bfdc      	itt	le
   b6432:	ea41 010c 	orrle.w	r1, r1, ip
   b6436:	4090      	lslle	r0, r2
   b6438:	1ae4      	subs	r4, r4, r3
   b643a:	bfa2      	ittt	ge
   b643c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b6440:	4329      	orrge	r1, r5
   b6442:	bd30      	popge	{r4, r5, pc}
   b6444:	ea6f 0404 	mvn.w	r4, r4
   b6448:	3c1f      	subs	r4, #31
   b644a:	da1c      	bge.n	b6486 <__adddf3+0x1d2>
   b644c:	340c      	adds	r4, #12
   b644e:	dc0e      	bgt.n	b646e <__adddf3+0x1ba>
   b6450:	f104 0414 	add.w	r4, r4, #20
   b6454:	f1c4 0220 	rsb	r2, r4, #32
   b6458:	fa20 f004 	lsr.w	r0, r0, r4
   b645c:	fa01 f302 	lsl.w	r3, r1, r2
   b6460:	ea40 0003 	orr.w	r0, r0, r3
   b6464:	fa21 f304 	lsr.w	r3, r1, r4
   b6468:	ea45 0103 	orr.w	r1, r5, r3
   b646c:	bd30      	pop	{r4, r5, pc}
   b646e:	f1c4 040c 	rsb	r4, r4, #12
   b6472:	f1c4 0220 	rsb	r2, r4, #32
   b6476:	fa20 f002 	lsr.w	r0, r0, r2
   b647a:	fa01 f304 	lsl.w	r3, r1, r4
   b647e:	ea40 0003 	orr.w	r0, r0, r3
   b6482:	4629      	mov	r1, r5
   b6484:	bd30      	pop	{r4, r5, pc}
   b6486:	fa21 f004 	lsr.w	r0, r1, r4
   b648a:	4629      	mov	r1, r5
   b648c:	bd30      	pop	{r4, r5, pc}
   b648e:	f094 0f00 	teq	r4, #0
   b6492:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b6496:	bf06      	itte	eq
   b6498:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b649c:	3401      	addeq	r4, #1
   b649e:	3d01      	subne	r5, #1
   b64a0:	e74e      	b.n	b6340 <__adddf3+0x8c>
   b64a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b64a6:	bf18      	it	ne
   b64a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b64ac:	d029      	beq.n	b6502 <__adddf3+0x24e>
   b64ae:	ea94 0f05 	teq	r4, r5
   b64b2:	bf08      	it	eq
   b64b4:	ea90 0f02 	teqeq	r0, r2
   b64b8:	d005      	beq.n	b64c6 <__adddf3+0x212>
   b64ba:	ea54 0c00 	orrs.w	ip, r4, r0
   b64be:	bf04      	itt	eq
   b64c0:	4619      	moveq	r1, r3
   b64c2:	4610      	moveq	r0, r2
   b64c4:	bd30      	pop	{r4, r5, pc}
   b64c6:	ea91 0f03 	teq	r1, r3
   b64ca:	bf1e      	ittt	ne
   b64cc:	2100      	movne	r1, #0
   b64ce:	2000      	movne	r0, #0
   b64d0:	bd30      	popne	{r4, r5, pc}
   b64d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b64d6:	d105      	bne.n	b64e4 <__adddf3+0x230>
   b64d8:	0040      	lsls	r0, r0, #1
   b64da:	4149      	adcs	r1, r1
   b64dc:	bf28      	it	cs
   b64de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b64e2:	bd30      	pop	{r4, r5, pc}
   b64e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b64e8:	bf3c      	itt	cc
   b64ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b64ee:	bd30      	popcc	{r4, r5, pc}
   b64f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b64f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b64f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b64fc:	f04f 0000 	mov.w	r0, #0
   b6500:	bd30      	pop	{r4, r5, pc}
   b6502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6506:	bf1a      	itte	ne
   b6508:	4619      	movne	r1, r3
   b650a:	4610      	movne	r0, r2
   b650c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6510:	bf1c      	itt	ne
   b6512:	460b      	movne	r3, r1
   b6514:	4602      	movne	r2, r0
   b6516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b651a:	bf06      	itte	eq
   b651c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6520:	ea91 0f03 	teqeq	r1, r3
   b6524:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6528:	bd30      	pop	{r4, r5, pc}
   b652a:	bf00      	nop

000b652c <__aeabi_ui2d>:
   b652c:	f090 0f00 	teq	r0, #0
   b6530:	bf04      	itt	eq
   b6532:	2100      	moveq	r1, #0
   b6534:	4770      	bxeq	lr
   b6536:	b530      	push	{r4, r5, lr}
   b6538:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b653c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6540:	f04f 0500 	mov.w	r5, #0
   b6544:	f04f 0100 	mov.w	r1, #0
   b6548:	e750      	b.n	b63ec <__adddf3+0x138>
   b654a:	bf00      	nop

000b654c <__aeabi_i2d>:
   b654c:	f090 0f00 	teq	r0, #0
   b6550:	bf04      	itt	eq
   b6552:	2100      	moveq	r1, #0
   b6554:	4770      	bxeq	lr
   b6556:	b530      	push	{r4, r5, lr}
   b6558:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b655c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6560:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6564:	bf48      	it	mi
   b6566:	4240      	negmi	r0, r0
   b6568:	f04f 0100 	mov.w	r1, #0
   b656c:	e73e      	b.n	b63ec <__adddf3+0x138>
   b656e:	bf00      	nop

000b6570 <__aeabi_f2d>:
   b6570:	0042      	lsls	r2, r0, #1
   b6572:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6576:	ea4f 0131 	mov.w	r1, r1, rrx
   b657a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b657e:	bf1f      	itttt	ne
   b6580:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6584:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6588:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b658c:	4770      	bxne	lr
   b658e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b6592:	bf08      	it	eq
   b6594:	4770      	bxeq	lr
   b6596:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b659a:	bf04      	itt	eq
   b659c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b65a0:	4770      	bxeq	lr
   b65a2:	b530      	push	{r4, r5, lr}
   b65a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b65a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b65ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b65b0:	e71c      	b.n	b63ec <__adddf3+0x138>
   b65b2:	bf00      	nop

000b65b4 <__aeabi_ul2d>:
   b65b4:	ea50 0201 	orrs.w	r2, r0, r1
   b65b8:	bf08      	it	eq
   b65ba:	4770      	bxeq	lr
   b65bc:	b530      	push	{r4, r5, lr}
   b65be:	f04f 0500 	mov.w	r5, #0
   b65c2:	e00a      	b.n	b65da <__aeabi_l2d+0x16>

000b65c4 <__aeabi_l2d>:
   b65c4:	ea50 0201 	orrs.w	r2, r0, r1
   b65c8:	bf08      	it	eq
   b65ca:	4770      	bxeq	lr
   b65cc:	b530      	push	{r4, r5, lr}
   b65ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b65d2:	d502      	bpl.n	b65da <__aeabi_l2d+0x16>
   b65d4:	4240      	negs	r0, r0
   b65d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b65da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b65de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b65e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b65e6:	f43f aed8 	beq.w	b639a <__adddf3+0xe6>
   b65ea:	f04f 0203 	mov.w	r2, #3
   b65ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b65f2:	bf18      	it	ne
   b65f4:	3203      	addne	r2, #3
   b65f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b65fa:	bf18      	it	ne
   b65fc:	3203      	addne	r2, #3
   b65fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6602:	f1c2 0320 	rsb	r3, r2, #32
   b6606:	fa00 fc03 	lsl.w	ip, r0, r3
   b660a:	fa20 f002 	lsr.w	r0, r0, r2
   b660e:	fa01 fe03 	lsl.w	lr, r1, r3
   b6612:	ea40 000e 	orr.w	r0, r0, lr
   b6616:	fa21 f102 	lsr.w	r1, r1, r2
   b661a:	4414      	add	r4, r2
   b661c:	e6bd      	b.n	b639a <__adddf3+0xe6>
   b661e:	bf00      	nop

000b6620 <__aeabi_dmul>:
   b6620:	b570      	push	{r4, r5, r6, lr}
   b6622:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b662a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b662e:	bf1d      	ittte	ne
   b6630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6634:	ea94 0f0c 	teqne	r4, ip
   b6638:	ea95 0f0c 	teqne	r5, ip
   b663c:	f000 f8de 	bleq	b67fc <__aeabi_dmul+0x1dc>
   b6640:	442c      	add	r4, r5
   b6642:	ea81 0603 	eor.w	r6, r1, r3
   b6646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b664a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b664e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6652:	bf18      	it	ne
   b6654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b665c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6660:	d038      	beq.n	b66d4 <__aeabi_dmul+0xb4>
   b6662:	fba0 ce02 	umull	ip, lr, r0, r2
   b6666:	f04f 0500 	mov.w	r5, #0
   b666a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b666e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6672:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6676:	f04f 0600 	mov.w	r6, #0
   b667a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b667e:	f09c 0f00 	teq	ip, #0
   b6682:	bf18      	it	ne
   b6684:	f04e 0e01 	orrne.w	lr, lr, #1
   b6688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b668c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6694:	d204      	bcs.n	b66a0 <__aeabi_dmul+0x80>
   b6696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b669a:	416d      	adcs	r5, r5
   b669c:	eb46 0606 	adc.w	r6, r6, r6
   b66a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b66a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b66a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b66ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b66b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b66b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b66b8:	bf88      	it	hi
   b66ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b66be:	d81e      	bhi.n	b66fe <__aeabi_dmul+0xde>
   b66c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b66c4:	bf08      	it	eq
   b66c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b66ca:	f150 0000 	adcs.w	r0, r0, #0
   b66ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b66d2:	bd70      	pop	{r4, r5, r6, pc}
   b66d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b66d8:	ea46 0101 	orr.w	r1, r6, r1
   b66dc:	ea40 0002 	orr.w	r0, r0, r2
   b66e0:	ea81 0103 	eor.w	r1, r1, r3
   b66e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b66e8:	bfc2      	ittt	gt
   b66ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   b66ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b66f2:	bd70      	popgt	{r4, r5, r6, pc}
   b66f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b66f8:	f04f 0e00 	mov.w	lr, #0
   b66fc:	3c01      	subs	r4, #1
   b66fe:	f300 80ab 	bgt.w	b6858 <__aeabi_dmul+0x238>
   b6702:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6706:	bfde      	ittt	le
   b6708:	2000      	movle	r0, #0
   b670a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b670e:	bd70      	pople	{r4, r5, r6, pc}
   b6710:	f1c4 0400 	rsb	r4, r4, #0
   b6714:	3c20      	subs	r4, #32
   b6716:	da35      	bge.n	b6784 <__aeabi_dmul+0x164>
   b6718:	340c      	adds	r4, #12
   b671a:	dc1b      	bgt.n	b6754 <__aeabi_dmul+0x134>
   b671c:	f104 0414 	add.w	r4, r4, #20
   b6720:	f1c4 0520 	rsb	r5, r4, #32
   b6724:	fa00 f305 	lsl.w	r3, r0, r5
   b6728:	fa20 f004 	lsr.w	r0, r0, r4
   b672c:	fa01 f205 	lsl.w	r2, r1, r5
   b6730:	ea40 0002 	orr.w	r0, r0, r2
   b6734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b673c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6740:	fa21 f604 	lsr.w	r6, r1, r4
   b6744:	eb42 0106 	adc.w	r1, r2, r6
   b6748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b674c:	bf08      	it	eq
   b674e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6752:	bd70      	pop	{r4, r5, r6, pc}
   b6754:	f1c4 040c 	rsb	r4, r4, #12
   b6758:	f1c4 0520 	rsb	r5, r4, #32
   b675c:	fa00 f304 	lsl.w	r3, r0, r4
   b6760:	fa20 f005 	lsr.w	r0, r0, r5
   b6764:	fa01 f204 	lsl.w	r2, r1, r4
   b6768:	ea40 0002 	orr.w	r0, r0, r2
   b676c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6774:	f141 0100 	adc.w	r1, r1, #0
   b6778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b677c:	bf08      	it	eq
   b677e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6782:	bd70      	pop	{r4, r5, r6, pc}
   b6784:	f1c4 0520 	rsb	r5, r4, #32
   b6788:	fa00 f205 	lsl.w	r2, r0, r5
   b678c:	ea4e 0e02 	orr.w	lr, lr, r2
   b6790:	fa20 f304 	lsr.w	r3, r0, r4
   b6794:	fa01 f205 	lsl.w	r2, r1, r5
   b6798:	ea43 0302 	orr.w	r3, r3, r2
   b679c:	fa21 f004 	lsr.w	r0, r1, r4
   b67a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b67a4:	fa21 f204 	lsr.w	r2, r1, r4
   b67a8:	ea20 0002 	bic.w	r0, r0, r2
   b67ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b67b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b67b4:	bf08      	it	eq
   b67b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b67ba:	bd70      	pop	{r4, r5, r6, pc}
   b67bc:	f094 0f00 	teq	r4, #0
   b67c0:	d10f      	bne.n	b67e2 <__aeabi_dmul+0x1c2>
   b67c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b67c6:	0040      	lsls	r0, r0, #1
   b67c8:	eb41 0101 	adc.w	r1, r1, r1
   b67cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b67d0:	bf08      	it	eq
   b67d2:	3c01      	subeq	r4, #1
   b67d4:	d0f7      	beq.n	b67c6 <__aeabi_dmul+0x1a6>
   b67d6:	ea41 0106 	orr.w	r1, r1, r6
   b67da:	f095 0f00 	teq	r5, #0
   b67de:	bf18      	it	ne
   b67e0:	4770      	bxne	lr
   b67e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b67e6:	0052      	lsls	r2, r2, #1
   b67e8:	eb43 0303 	adc.w	r3, r3, r3
   b67ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b67f0:	bf08      	it	eq
   b67f2:	3d01      	subeq	r5, #1
   b67f4:	d0f7      	beq.n	b67e6 <__aeabi_dmul+0x1c6>
   b67f6:	ea43 0306 	orr.w	r3, r3, r6
   b67fa:	4770      	bx	lr
   b67fc:	ea94 0f0c 	teq	r4, ip
   b6800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6804:	bf18      	it	ne
   b6806:	ea95 0f0c 	teqne	r5, ip
   b680a:	d00c      	beq.n	b6826 <__aeabi_dmul+0x206>
   b680c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6810:	bf18      	it	ne
   b6812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6816:	d1d1      	bne.n	b67bc <__aeabi_dmul+0x19c>
   b6818:	ea81 0103 	eor.w	r1, r1, r3
   b681c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6820:	f04f 0000 	mov.w	r0, #0
   b6824:	bd70      	pop	{r4, r5, r6, pc}
   b6826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b682a:	bf06      	itte	eq
   b682c:	4610      	moveq	r0, r2
   b682e:	4619      	moveq	r1, r3
   b6830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6834:	d019      	beq.n	b686a <__aeabi_dmul+0x24a>
   b6836:	ea94 0f0c 	teq	r4, ip
   b683a:	d102      	bne.n	b6842 <__aeabi_dmul+0x222>
   b683c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6840:	d113      	bne.n	b686a <__aeabi_dmul+0x24a>
   b6842:	ea95 0f0c 	teq	r5, ip
   b6846:	d105      	bne.n	b6854 <__aeabi_dmul+0x234>
   b6848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b684c:	bf1c      	itt	ne
   b684e:	4610      	movne	r0, r2
   b6850:	4619      	movne	r1, r3
   b6852:	d10a      	bne.n	b686a <__aeabi_dmul+0x24a>
   b6854:	ea81 0103 	eor.w	r1, r1, r3
   b6858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b685c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6864:	f04f 0000 	mov.w	r0, #0
   b6868:	bd70      	pop	{r4, r5, r6, pc}
   b686a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b686e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6872:	bd70      	pop	{r4, r5, r6, pc}

000b6874 <__aeabi_ddiv>:
   b6874:	b570      	push	{r4, r5, r6, lr}
   b6876:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b687a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b687e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6882:	bf1d      	ittte	ne
   b6884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6888:	ea94 0f0c 	teqne	r4, ip
   b688c:	ea95 0f0c 	teqne	r5, ip
   b6890:	f000 f8a7 	bleq	b69e2 <__aeabi_ddiv+0x16e>
   b6894:	eba4 0405 	sub.w	r4, r4, r5
   b6898:	ea81 0e03 	eor.w	lr, r1, r3
   b689c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b68a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b68a4:	f000 8088 	beq.w	b69b8 <__aeabi_ddiv+0x144>
   b68a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b68ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b68b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b68b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b68b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b68bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b68c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b68c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b68c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b68cc:	429d      	cmp	r5, r3
   b68ce:	bf08      	it	eq
   b68d0:	4296      	cmpeq	r6, r2
   b68d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b68d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b68da:	d202      	bcs.n	b68e2 <__aeabi_ddiv+0x6e>
   b68dc:	085b      	lsrs	r3, r3, #1
   b68de:	ea4f 0232 	mov.w	r2, r2, rrx
   b68e2:	1ab6      	subs	r6, r6, r2
   b68e4:	eb65 0503 	sbc.w	r5, r5, r3
   b68e8:	085b      	lsrs	r3, r3, #1
   b68ea:	ea4f 0232 	mov.w	r2, r2, rrx
   b68ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b68f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b68f6:	ebb6 0e02 	subs.w	lr, r6, r2
   b68fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b68fe:	bf22      	ittt	cs
   b6900:	1ab6      	subcs	r6, r6, r2
   b6902:	4675      	movcs	r5, lr
   b6904:	ea40 000c 	orrcs.w	r0, r0, ip
   b6908:	085b      	lsrs	r3, r3, #1
   b690a:	ea4f 0232 	mov.w	r2, r2, rrx
   b690e:	ebb6 0e02 	subs.w	lr, r6, r2
   b6912:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6916:	bf22      	ittt	cs
   b6918:	1ab6      	subcs	r6, r6, r2
   b691a:	4675      	movcs	r5, lr
   b691c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6920:	085b      	lsrs	r3, r3, #1
   b6922:	ea4f 0232 	mov.w	r2, r2, rrx
   b6926:	ebb6 0e02 	subs.w	lr, r6, r2
   b692a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b692e:	bf22      	ittt	cs
   b6930:	1ab6      	subcs	r6, r6, r2
   b6932:	4675      	movcs	r5, lr
   b6934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6938:	085b      	lsrs	r3, r3, #1
   b693a:	ea4f 0232 	mov.w	r2, r2, rrx
   b693e:	ebb6 0e02 	subs.w	lr, r6, r2
   b6942:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6946:	bf22      	ittt	cs
   b6948:	1ab6      	subcs	r6, r6, r2
   b694a:	4675      	movcs	r5, lr
   b694c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6950:	ea55 0e06 	orrs.w	lr, r5, r6
   b6954:	d018      	beq.n	b6988 <__aeabi_ddiv+0x114>
   b6956:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b695a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b695e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b696a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b696e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6972:	d1c0      	bne.n	b68f6 <__aeabi_ddiv+0x82>
   b6974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6978:	d10b      	bne.n	b6992 <__aeabi_ddiv+0x11e>
   b697a:	ea41 0100 	orr.w	r1, r1, r0
   b697e:	f04f 0000 	mov.w	r0, #0
   b6982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6986:	e7b6      	b.n	b68f6 <__aeabi_ddiv+0x82>
   b6988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b698c:	bf04      	itt	eq
   b698e:	4301      	orreq	r1, r0
   b6990:	2000      	moveq	r0, #0
   b6992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6996:	bf88      	it	hi
   b6998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b699c:	f63f aeaf 	bhi.w	b66fe <__aeabi_dmul+0xde>
   b69a0:	ebb5 0c03 	subs.w	ip, r5, r3
   b69a4:	bf04      	itt	eq
   b69a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b69aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b69ae:	f150 0000 	adcs.w	r0, r0, #0
   b69b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b69b6:	bd70      	pop	{r4, r5, r6, pc}
   b69b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b69bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b69c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b69c4:	bfc2      	ittt	gt
   b69c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b69ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b69ce:	bd70      	popgt	{r4, r5, r6, pc}
   b69d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b69d4:	f04f 0e00 	mov.w	lr, #0
   b69d8:	3c01      	subs	r4, #1
   b69da:	e690      	b.n	b66fe <__aeabi_dmul+0xde>
   b69dc:	ea45 0e06 	orr.w	lr, r5, r6
   b69e0:	e68d      	b.n	b66fe <__aeabi_dmul+0xde>
   b69e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b69e6:	ea94 0f0c 	teq	r4, ip
   b69ea:	bf08      	it	eq
   b69ec:	ea95 0f0c 	teqeq	r5, ip
   b69f0:	f43f af3b 	beq.w	b686a <__aeabi_dmul+0x24a>
   b69f4:	ea94 0f0c 	teq	r4, ip
   b69f8:	d10a      	bne.n	b6a10 <__aeabi_ddiv+0x19c>
   b69fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b69fe:	f47f af34 	bne.w	b686a <__aeabi_dmul+0x24a>
   b6a02:	ea95 0f0c 	teq	r5, ip
   b6a06:	f47f af25 	bne.w	b6854 <__aeabi_dmul+0x234>
   b6a0a:	4610      	mov	r0, r2
   b6a0c:	4619      	mov	r1, r3
   b6a0e:	e72c      	b.n	b686a <__aeabi_dmul+0x24a>
   b6a10:	ea95 0f0c 	teq	r5, ip
   b6a14:	d106      	bne.n	b6a24 <__aeabi_ddiv+0x1b0>
   b6a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6a1a:	f43f aefd 	beq.w	b6818 <__aeabi_dmul+0x1f8>
   b6a1e:	4610      	mov	r0, r2
   b6a20:	4619      	mov	r1, r3
   b6a22:	e722      	b.n	b686a <__aeabi_dmul+0x24a>
   b6a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6a28:	bf18      	it	ne
   b6a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6a2e:	f47f aec5 	bne.w	b67bc <__aeabi_dmul+0x19c>
   b6a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6a36:	f47f af0d 	bne.w	b6854 <__aeabi_dmul+0x234>
   b6a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6a3e:	f47f aeeb 	bne.w	b6818 <__aeabi_dmul+0x1f8>
   b6a42:	e712      	b.n	b686a <__aeabi_dmul+0x24a>

000b6a44 <__aeabi_d2f>:
   b6a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6a4c:	bf24      	itt	cs
   b6a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b6a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6a56:	d90d      	bls.n	b6a74 <__aeabi_d2f+0x30>
   b6a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b6a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6a6c:	bf08      	it	eq
   b6a6e:	f020 0001 	biceq.w	r0, r0, #1
   b6a72:	4770      	bx	lr
   b6a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6a78:	d121      	bne.n	b6abe <__aeabi_d2f+0x7a>
   b6a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b6a7e:	bfbc      	itt	lt
   b6a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6a84:	4770      	bxlt	lr
   b6a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b6a8e:	f1c2 0218 	rsb	r2, r2, #24
   b6a92:	f1c2 0c20 	rsb	ip, r2, #32
   b6a96:	fa10 f30c 	lsls.w	r3, r0, ip
   b6a9a:	fa20 f002 	lsr.w	r0, r0, r2
   b6a9e:	bf18      	it	ne
   b6aa0:	f040 0001 	orrne.w	r0, r0, #1
   b6aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6aac:	fa03 fc0c 	lsl.w	ip, r3, ip
   b6ab0:	ea40 000c 	orr.w	r0, r0, ip
   b6ab4:	fa23 f302 	lsr.w	r3, r3, r2
   b6ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6abc:	e7cc      	b.n	b6a58 <__aeabi_d2f+0x14>
   b6abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b6ac2:	d107      	bne.n	b6ad4 <__aeabi_d2f+0x90>
   b6ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6ac8:	bf1e      	ittt	ne
   b6aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b6ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b6ad2:	4770      	bxne	lr
   b6ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b6ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b6adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b6ae0:	4770      	bx	lr
   b6ae2:	bf00      	nop

000b6ae4 <atexit>:
   b6ae4:	2300      	movs	r3, #0
   b6ae6:	4601      	mov	r1, r0
   b6ae8:	461a      	mov	r2, r3
   b6aea:	4618      	mov	r0, r3
   b6aec:	f000 b85e 	b.w	b6bac <__register_exitproc>

000b6af0 <memcpy>:
   b6af0:	440a      	add	r2, r1
   b6af2:	4291      	cmp	r1, r2
   b6af4:	f100 33ff 	add.w	r3, r0, #4294967295
   b6af8:	d100      	bne.n	b6afc <memcpy+0xc>
   b6afa:	4770      	bx	lr
   b6afc:	b510      	push	{r4, lr}
   b6afe:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6b02:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6b06:	4291      	cmp	r1, r2
   b6b08:	d1f9      	bne.n	b6afe <memcpy+0xe>
   b6b0a:	bd10      	pop	{r4, pc}

000b6b0c <memset>:
   b6b0c:	4402      	add	r2, r0
   b6b0e:	4603      	mov	r3, r0
   b6b10:	4293      	cmp	r3, r2
   b6b12:	d100      	bne.n	b6b16 <memset+0xa>
   b6b14:	4770      	bx	lr
   b6b16:	f803 1b01 	strb.w	r1, [r3], #1
   b6b1a:	e7f9      	b.n	b6b10 <memset+0x4>

000b6b1c <srand>:
   b6b1c:	b538      	push	{r3, r4, r5, lr}
   b6b1e:	4b10      	ldr	r3, [pc, #64]	; (b6b60 <srand+0x44>)
   b6b20:	681d      	ldr	r5, [r3, #0]
   b6b22:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6b24:	4604      	mov	r4, r0
   b6b26:	b9b3      	cbnz	r3, b6b56 <srand+0x3a>
   b6b28:	2018      	movs	r0, #24
   b6b2a:	f7fe f8fd 	bl	b4d28 <malloc>
   b6b2e:	4602      	mov	r2, r0
   b6b30:	63a8      	str	r0, [r5, #56]	; 0x38
   b6b32:	b920      	cbnz	r0, b6b3e <srand+0x22>
   b6b34:	4b0b      	ldr	r3, [pc, #44]	; (b6b64 <srand+0x48>)
   b6b36:	480c      	ldr	r0, [pc, #48]	; (b6b68 <srand+0x4c>)
   b6b38:	2142      	movs	r1, #66	; 0x42
   b6b3a:	f7fe f91d 	bl	b4d78 <__assert_func>
   b6b3e:	490b      	ldr	r1, [pc, #44]	; (b6b6c <srand+0x50>)
   b6b40:	4b0b      	ldr	r3, [pc, #44]	; (b6b70 <srand+0x54>)
   b6b42:	e9c0 1300 	strd	r1, r3, [r0]
   b6b46:	4b0b      	ldr	r3, [pc, #44]	; (b6b74 <srand+0x58>)
   b6b48:	6083      	str	r3, [r0, #8]
   b6b4a:	230b      	movs	r3, #11
   b6b4c:	8183      	strh	r3, [r0, #12]
   b6b4e:	2100      	movs	r1, #0
   b6b50:	2001      	movs	r0, #1
   b6b52:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6b56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6b58:	2200      	movs	r2, #0
   b6b5a:	611c      	str	r4, [r3, #16]
   b6b5c:	615a      	str	r2, [r3, #20]
   b6b5e:	bd38      	pop	{r3, r4, r5, pc}
   b6b60:	2003e568 	.word	0x2003e568
   b6b64:	000b7105 	.word	0x000b7105
   b6b68:	000b711c 	.word	0x000b711c
   b6b6c:	abcd330e 	.word	0xabcd330e
   b6b70:	e66d1234 	.word	0xe66d1234
   b6b74:	0005deec 	.word	0x0005deec

000b6b78 <strcmp>:
   b6b78:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6b80:	2a01      	cmp	r2, #1
   b6b82:	bf28      	it	cs
   b6b84:	429a      	cmpcs	r2, r3
   b6b86:	d0f7      	beq.n	b6b78 <strcmp>
   b6b88:	1ad0      	subs	r0, r2, r3
   b6b8a:	4770      	bx	lr

000b6b8c <strcpy>:
   b6b8c:	4603      	mov	r3, r0
   b6b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6b92:	f803 2b01 	strb.w	r2, [r3], #1
   b6b96:	2a00      	cmp	r2, #0
   b6b98:	d1f9      	bne.n	b6b8e <strcpy+0x2>
   b6b9a:	4770      	bx	lr

000b6b9c <strlen>:
   b6b9c:	4603      	mov	r3, r0
   b6b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6ba2:	2a00      	cmp	r2, #0
   b6ba4:	d1fb      	bne.n	b6b9e <strlen+0x2>
   b6ba6:	1a18      	subs	r0, r3, r0
   b6ba8:	3801      	subs	r0, #1
   b6baa:	4770      	bx	lr

000b6bac <__register_exitproc>:
   b6bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6bb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6c6c <__register_exitproc+0xc0>
   b6bb4:	4606      	mov	r6, r0
   b6bb6:	f8d8 0000 	ldr.w	r0, [r8]
   b6bba:	461f      	mov	r7, r3
   b6bbc:	460d      	mov	r5, r1
   b6bbe:	4691      	mov	r9, r2
   b6bc0:	f000 f856 	bl	b6c70 <__retarget_lock_acquire_recursive>
   b6bc4:	4b25      	ldr	r3, [pc, #148]	; (b6c5c <__register_exitproc+0xb0>)
   b6bc6:	681c      	ldr	r4, [r3, #0]
   b6bc8:	b934      	cbnz	r4, b6bd8 <__register_exitproc+0x2c>
   b6bca:	4c25      	ldr	r4, [pc, #148]	; (b6c60 <__register_exitproc+0xb4>)
   b6bcc:	601c      	str	r4, [r3, #0]
   b6bce:	4b25      	ldr	r3, [pc, #148]	; (b6c64 <__register_exitproc+0xb8>)
   b6bd0:	b113      	cbz	r3, b6bd8 <__register_exitproc+0x2c>
   b6bd2:	681b      	ldr	r3, [r3, #0]
   b6bd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6bd8:	6863      	ldr	r3, [r4, #4]
   b6bda:	2b1f      	cmp	r3, #31
   b6bdc:	dd07      	ble.n	b6bee <__register_exitproc+0x42>
   b6bde:	f8d8 0000 	ldr.w	r0, [r8]
   b6be2:	f000 f847 	bl	b6c74 <__retarget_lock_release_recursive>
   b6be6:	f04f 30ff 	mov.w	r0, #4294967295
   b6bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6bee:	b34e      	cbz	r6, b6c44 <__register_exitproc+0x98>
   b6bf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6bf4:	b988      	cbnz	r0, b6c1a <__register_exitproc+0x6e>
   b6bf6:	4b1c      	ldr	r3, [pc, #112]	; (b6c68 <__register_exitproc+0xbc>)
   b6bf8:	b923      	cbnz	r3, b6c04 <__register_exitproc+0x58>
   b6bfa:	f8d8 0000 	ldr.w	r0, [r8]
   b6bfe:	f000 f838 	bl	b6c72 <__retarget_lock_release>
   b6c02:	e7f0      	b.n	b6be6 <__register_exitproc+0x3a>
   b6c04:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6c08:	f7fe f88e 	bl	b4d28 <malloc>
   b6c0c:	2800      	cmp	r0, #0
   b6c0e:	d0f4      	beq.n	b6bfa <__register_exitproc+0x4e>
   b6c10:	2300      	movs	r3, #0
   b6c12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6c16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6c1a:	6863      	ldr	r3, [r4, #4]
   b6c1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6c20:	2201      	movs	r2, #1
   b6c22:	409a      	lsls	r2, r3
   b6c24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6c28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6c2c:	4313      	orrs	r3, r2
   b6c2e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6c32:	2e02      	cmp	r6, #2
   b6c34:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6c38:	bf02      	ittt	eq
   b6c3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6c3e:	4313      	orreq	r3, r2
   b6c40:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6c44:	6863      	ldr	r3, [r4, #4]
   b6c46:	f8d8 0000 	ldr.w	r0, [r8]
   b6c4a:	1c5a      	adds	r2, r3, #1
   b6c4c:	3302      	adds	r3, #2
   b6c4e:	6062      	str	r2, [r4, #4]
   b6c50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6c54:	f000 f80e 	bl	b6c74 <__retarget_lock_release_recursive>
   b6c58:	2000      	movs	r0, #0
   b6c5a:	e7c6      	b.n	b6bea <__register_exitproc+0x3e>
   b6c5c:	2003e7e8 	.word	0x2003e7e8
   b6c60:	2003e75c 	.word	0x2003e75c
   b6c64:	00000000 	.word	0x00000000
   b6c68:	000b4d29 	.word	0x000b4d29
   b6c6c:	2003e5cc 	.word	0x2003e5cc

000b6c70 <__retarget_lock_acquire_recursive>:
   b6c70:	4770      	bx	lr

000b6c72 <__retarget_lock_release>:
   b6c72:	4770      	bx	lr

000b6c74 <__retarget_lock_release_recursive>:
   b6c74:	4770      	bx	lr

000b6c76 <link_code_end>:
	...

000b6c78 <dynalib_user>:
   b6c78:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6c88:	0000 0000 6f4e 4320 6168 676e 2065 202d     ....No Change - 
   b6c98:	6143 636e 6c65 696c 676e 4320 444d 000a     Cancelling CMD..
   b6ca8:	227b 6e6f 3a22 7274 6575 222c 6173 2274     {"on":true,"sat"
   b6cb8:	003a 222c 7262 2269 003a 222c 7568 2265     :.,"bri":.,"hue"
   b6cc8:	003a 227b 6e6f 3a22 6166 736c 7d65 5300     :.{"on":false}.S
   b6cd8:	6e65 6964 676e 4320 6d6f 616d 646e 7420     ending Command t
   b6ce8:	206f 7548 0065 5550 2054 612f 6970 002f     o Hue.PUT /api/.
   b6cf8:	6c2f 6769 7468 2f73 2f00 7473 7461 2065     /lights/./state 
   b6d08:	5448 5054 312f 312e 6b00 6565 2d70 6c61     HTTP/1.1.keep-al
   b6d18:	7669 0065 6f48 7473 203a 4300 6e6f 6574     ive.Host: .Conte
   b6d28:	746e 4c2d 6e65 7467 3a68 0020 6f43 746e     nt-Length: .Cont
   b6d38:	6e65 2d74 7954 6570 203a 6574 7478 702f     ent-Type: text/p
   b6d48:	616c 6e69 633b 6168 7372 7465 553d 4654     lain;charset=UTF
   b6d58:	382d 4600 6f72 206d 7548 0065 6f49 4e54     -8.From Hue.IoTN
   b6d68:	7465 6f77 6b72 0a00 6f63 316c 3d20 2520     etwork..col1 = %
   b6d78:	322e 2066 6f63 326c 3d20 2520 322e 2066     .2f col2 = %.2f 
   b6d88:	6f63 336c 3d20 2520 322e 0066 500a 6569     col3 = %.2f..Pie
   b6d98:	6563 6953 6564 3d20 2520 322e 2066 6950     ceSide = %.2f Pi
   b6da8:	6365 5365 6469 2065 203d 2e25 6632 5020     eceSide = %.2f P
   b6db8:	6569 6563 6953 6564 3d20 2520 322e 0066     ieceSide = %.2f.
   b6dc8:	4e0a 6d75 6552 2064 203d 6925 4e20 6d75     .NumRed = %i Num
   b6dd8:	6c42 6575 3d20 2520 0069                    Blue = %i.

000b6de2 <_ZL11hueUsername>:
   b6de2:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b6df2:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b6e02:	7438 334d 4637 5433                          8tM37F3T.

000b6e0b <_ZL8hueHubIP>:
   b6e0b:	3931 2e32 3631 2e38 2e31 0035                192.168.1.5..

000b6e18 <_ZTVN5spark13EthernetClassE>:
	...
   b6e20:	4df7 000b 4ded 000b 4de3 000b 4dd9 000b     .M...M...M...M..
   b6e30:	4dcd 000b 4dc1 000b 5d61 000b 5d69 000b     .M...M..a]..i]..
   b6e40:	4db5 000b 4dad 000b 4da3 000b 4d99 000b     .M...M...M...M..
   b6e50:	5d99 000b                                   .]..

000b6e54 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b6e5c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b6e6c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6e7c <_ZTV9IPAddress>:
	...
   b6e84:	53b9 000b 53a9 000b 53ab 000b               .S...S...S..

000b6e90 <_ZTV9USBSerial>:
	...
   b6e98:	54cb 000b 5533 000b 5509 000b 50bd 000b     .T..3U...U...P..
   b6ea8:	54fb 000b 54cd 000b 54dd 000b 552d 000b     .T...T...T..-U..
   b6eb8:	54ed 000b 54c5 000b                         .T...T..

000b6ec0 <_ZTV11USARTSerial>:
	...
   b6ec8:	55d5 000b 5641 000b 5619 000b 50bd 000b     .U..AV...V...P..
   b6ed8:	55e9 000b 5605 000b 55f7 000b 5613 000b     .U...V...U...V..
   b6ee8:	55d7 000b 55db 000b                         .U...U..

000b6ef0 <_ZTV7TwoWire>:
	...
   b6ef8:	5679 000b 56c3 000b 569b 000b 567b 000b     yV...V...V..{V..
   b6f08:	56a3 000b 56ab 000b 56b3 000b 56bb 000b     .V...V...V...V..
   b6f18:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b6f28:	2072 203d 6425 0000                         r = %d..

000b6f30 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6f38:	5791 000b 57b5 000b 5c9f 000b 57c3 000b     .W...W...\...W..
   b6f48:	5795 000b                                   .W..

000b6f4c <_ZTV9TCPClient>:
	...
   b6f54:	40f5 000b 4129 000b 570d 000b 5727 000b     .@..)A...W..'W..
   b6f64:	5b35 000b 5751 000b 59ab 000b 5785 000b     5[..QW...Y...W..
   b6f74:	5a3d 000b 587d 000b 59d9 000b 5be9 000b     =Z..}X...Y...[..
   b6f84:	5979 000b 5787 000b 5739 000b 57c9 000b     yY...W..9W...W..
   b6f94:	585d 000b                                   ]X..

000b6f98 <_ZTVN5spark9WiFiClassE>:
	...
   b6fa0:	5d03 000b 5cf9 000b 5cef 000b 5ca5 000b     .]...\...\...\..
   b6fb0:	5ce3 000b 5cd7 000b 5d61 000b 5d69 000b     .\...\..a]..i]..
   b6fc0:	5ccb 000b 5cc3 000b 5cb9 000b 5caf 000b     .\...\...\...\..
   b6fd0:	5d99 000b                                   .]..

000b6fd4 <_ZTVN5spark12NetworkClassE>:
	...
   b6fdc:	5d21 000b 5d2b 000b 5d35 000b 5d3f 000b     !]..+]..5]..?]..
   b6fec:	5d49 000b 5d55 000b 5d61 000b 5d69 000b     I]..U]..a]..i]..
   b6ffc:	5d71 000b 5d7d 000b 5d85 000b 5d8f 000b     q]..}]...]...]..
   b700c:	5d99 000b                                   .]..

000b7010 <_ZSt7nothrow>:
	...

000b7011 <_ZTSSt19_Sp_make_shared_tag>:
   b7011:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7021:	6572 5f64 6174 0067 0000                     red_tag....

000b702c <_ZTISt19_Sp_make_shared_tag>:
   b702c:	706c 000b 7011 000b                         lp...p..

000b7034 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7034:	70cc 000b 7040 000b 70f0 000b               .p..@p...p..

000b7040 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7040:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7050:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7060:	0045 0000                                   E...

000b7064 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7064:	0000 0000 7034 000b 60d1 000b 60e5 000b     ....4p...`...`..
   b7074:	6279 000b 6279 000b 614f 000b 6091 000b     yb..yb..Oa...`..
   b7084:	6137 000b 60f9 000b 60c3 000b               7a...`...`..

000b7090 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7090:	70cc 000b 709c 000b 7034 000b               .p...p..4p..

000b709c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b709c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b70ac:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b70bc:	666e 456f 0000 0000                         nfoE....

000b70c4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b70c4:	0000 0000 7090 000b 6179 000b 618d 000b     .....p..ya...a..
   b70d4:	6279 000b 6279 000b 614f 000b 6091 000b     yb..yb..Oa...`..
   b70e4:	624d 000b 61d9 000b 61a1 000b               Mb...a...a..

000b70f0 <_ZTISt9type_info>:
   b70f0:	706c 000b 70f8 000b                         lp...p..

000b70f8 <_ZTSSt9type_info>:
   b70f8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7108:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7118:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7128:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7138:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7148:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7158:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7168:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7178:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7188:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7199 <link_const_variable_data_end>:
   b7199:	00          	.byte	0x00
	...

000b719c <link_constructors_location>:
   b719c:	000b4871 	.word	0x000b4871
   b71a0:	000b4e01 	.word	0x000b4e01
   b71a4:	000b4e29 	.word	0x000b4e29
   b71a8:	000b50ad 	.word	0x000b50ad
   b71ac:	000b5239 	.word	0x000b5239
   b71b0:	000b5249 	.word	0x000b5249
   b71b4:	000b5265 	.word	0x000b5265
   b71b8:	000b5d0d 	.word	0x000b5d0d
   b71bc:	000b5e71 	.word	0x000b5e71
