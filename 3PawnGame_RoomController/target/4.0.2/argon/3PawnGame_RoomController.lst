
c:/Users/cgame/Documents/IoT/CadenG_SmartRoomController/3PawnGame_RoomController/target/4.0.2/argon/3PawnGame_RoomController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005534  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9550  000b9550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9574  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004fc  2003e094  000b9578  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000260  2003e590  2003e590  0002e590  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9a74  000b9a74  00029a74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9a9c  000b9a9c  00029a9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00125bfd  00000000  00000000  00029aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00014a87  00000000  00000000  0014f69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003dda2  00000000  00000000  00164124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030f0  00000000  00000000  001a1ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a9c8  00000000  00000000  001a4fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c1c4  00000000  00000000  001af97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004635e  00000000  00000000  001ebb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134b2b  00000000  00000000  00231ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008c0c  00000000  00000000  003669cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fa7b 	bl	b8528 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fa83 	bl	b8544 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e094 	.word	0x2003e094
   b4048:	000b9578 	.word	0x000b9578
   b404c:	2003e590 	.word	0x2003e590
   b4050:	2003e590 	.word	0x2003e590
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fe57 	bl	b6d10 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9528 	.word	0x000b9528
   b407c:	000b9550 	.word	0x000b9550

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 ba52 	b.w	b4528 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fd89 	bl	b4b9c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bdf7 	b.w	b6c80 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 ba69 	b.w	b6568 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 ba67 	b.w	b6568 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 ba6d 	b.w	b6578 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f9b2 	bl	b6410 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b60f1 	.word	0x000b60f1
   b40b4:	000b86c4 	.word	0x000b86c4

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40c8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ca:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40cc:	4606      	mov	r6, r0
   b40ce:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d0:	da0b      	bge.n	b40ea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d2:	2a0a      	cmp	r2, #10
   b40d4:	d109      	bne.n	b40ea <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40d6:	212d      	movs	r1, #45	; 0x2d
   b40d8:	f002 fd02 	bl	b6ae0 <_ZN5Print5printEc>
            val = -n;
   b40dc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40de:	b2ea      	uxtb	r2, r5
   b40e0:	4630      	mov	r0, r6
    }
}
   b40e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40e6:	f002 bd14 	b.w	b6b12 <_ZN5Print11printNumberEmh>
            val = n;
   b40ea:	4621      	mov	r1, r4
   b40ec:	e7f7      	b.n	b40de <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40ee <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ee:	b40e      	push	{r1, r2, r3}
   b40f0:	b503      	push	{r0, r1, lr}
   b40f2:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fa:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40fc:	f002 fd27 	bl	b6b4e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4100:	b002      	add	sp, #8
   b4102:	f85d eb04 	ldr.w	lr, [sp], #4
   b4106:	b003      	add	sp, #12
   b4108:	4770      	bx	lr
	...

000b410c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b410c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b410e:	6984      	ldr	r4, [r0, #24]
   b4110:	4b0a      	ldr	r3, [pc, #40]	; (b413c <_ZN9TCPClientD1Ev+0x30>)
   b4112:	6003      	str	r3, [r0, #0]
   b4114:	4605      	mov	r5, r0
   b4116:	b17c      	cbz	r4, b4138 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b4118:	6863      	ldr	r3, [r4, #4]
   b411a:	3b01      	subs	r3, #1
   b411c:	6063      	str	r3, [r4, #4]
   b411e:	b95b      	cbnz	r3, b4138 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4120:	6823      	ldr	r3, [r4, #0]
   b4122:	4620      	mov	r0, r4
   b4124:	689b      	ldr	r3, [r3, #8]
   b4126:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4128:	68a3      	ldr	r3, [r4, #8]
   b412a:	3b01      	subs	r3, #1
   b412c:	60a3      	str	r3, [r4, #8]
   b412e:	b91b      	cbnz	r3, b4138 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4130:	6823      	ldr	r3, [r4, #0]
   b4132:	4620      	mov	r0, r4
   b4134:	68db      	ldr	r3, [r3, #12]
   b4136:	4798      	blx	r3
   b4138:	4628      	mov	r0, r5
   b413a:	bd38      	pop	{r3, r4, r5, pc}
   b413c:	000b92e0 	.word	0x000b92e0

000b4140 <_ZN9TCPClientD0Ev>:
   b4140:	b510      	push	{r4, lr}
   b4142:	4604      	mov	r4, r0
   b4144:	f7ff ffe2 	bl	b410c <_ZN9TCPClientD1Ev>
   b4148:	4620      	mov	r0, r4
   b414a:	211c      	movs	r1, #28
   b414c:	f7ff ffa5 	bl	b409a <_ZdlPvj>
   b4150:	4620      	mov	r0, r4
   b4152:	bd10      	pop	{r4, pc}

000b4154 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4158:	b08c      	sub	sp, #48	; 0x30
   b415a:	4605      	mov	r5, r0
   b415c:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b415e:	4668      	mov	r0, sp
   b4160:	4977      	ldr	r1, [pc, #476]	; (b4340 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4162:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b4166:	4614      	mov	r4, r2
   b4168:	461e      	mov	r6, r3
  String command = "";  
   b416a:	f002 fbdc 	bl	b6926 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b416e:	f8df e228 	ldr.w	lr, [pc, #552]	; b4398 <_Z6setHueibiii+0x244>
   b4172:	4974      	ldr	r1, [pc, #464]	; (b4344 <_Z6setHueibiii+0x1f0>)
   b4174:	f8de 3000 	ldr.w	r3, [lr]
   b4178:	4873      	ldr	r0, [pc, #460]	; (b4348 <_Z6setHueibiii+0x1f4>)
   b417a:	4a74      	ldr	r2, [pc, #464]	; (b434c <_Z6setHueibiii+0x1f8>)
   b417c:	f8df c21c 	ldr.w	ip, [pc, #540]	; b439c <_Z6setHueibiii+0x248>
   b4180:	42ab      	cmp	r3, r5
   b4182:	d119      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4184:	680b      	ldr	r3, [r1, #0]
   b4186:	42bb      	cmp	r3, r7
   b4188:	d116      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b418a:	6803      	ldr	r3, [r0, #0]
   b418c:	42a3      	cmp	r3, r4
   b418e:	d113      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4190:	6813      	ldr	r3, [r2, #0]
   b4192:	42b3      	cmp	r3, r6
   b4194:	d110      	bne.n	b41b8 <_Z6setHueibiii+0x64>
   b4196:	f8dc 3000 	ldr.w	r3, [ip]
   b419a:	4543      	cmp	r3, r8
   b419c:	d10c      	bne.n	b41b8 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b419e:	f002 fed9 	bl	b6f54 <_Z16_fetch_usbserialv>
   b41a2:	496b      	ldr	r1, [pc, #428]	; (b4350 <_Z6setHueibiii+0x1fc>)
   b41a4:	f7ff ffa3 	bl	b40ee <_ZN5Print6printfEPKcz>
    return false;
   b41a8:	2400      	movs	r4, #0
  String command = "";  
   b41aa:	4668      	mov	r0, sp
   b41ac:	f002 fb70 	bl	b6890 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b0:	4620      	mov	r0, r4
   b41b2:	b00c      	add	sp, #48	; 0x30
   b41b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41b8:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41bc:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41be:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c0:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c2:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41c6:	2f00      	cmp	r7, #0
   b41c8:	f000 80b5 	beq.w	b4336 <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41cc:	4961      	ldr	r1, [pc, #388]	; (b4354 <_Z6setHueibiii+0x200>)
   b41ce:	4668      	mov	r0, sp
   b41d0:	f002 fbd7 	bl	b6982 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d4:	4669      	mov	r1, sp
   b41d6:	a808      	add	r0, sp, #32
   b41d8:	f002 fbc8 	bl	b696c <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41dc:	220a      	movs	r2, #10
   b41de:	4641      	mov	r1, r8
   b41e0:	a804      	add	r0, sp, #16
   b41e2:	f002 fbe0 	bl	b69a6 <_ZN6StringC1Eih>
   b41e6:	a904      	add	r1, sp, #16
   b41e8:	a808      	add	r0, sp, #32
   b41ea:	f002 fc24 	bl	b6a36 <_ZplRK15StringSumHelperRK6String>
   b41ee:	495a      	ldr	r1, [pc, #360]	; (b4358 <_Z6setHueibiii+0x204>)
   b41f0:	f002 fc2d 	bl	b6a4e <_ZplRK15StringSumHelperPKc>
   b41f4:	4601      	mov	r1, r0
   b41f6:	4668      	mov	r0, sp
   b41f8:	f002 fba9 	bl	b694e <_ZN6StringaSERKS_>
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	f002 fb47 	bl	b6890 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4202:	a808      	add	r0, sp, #32
   b4204:	f002 fb44 	bl	b6890 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4208:	4669      	mov	r1, sp
   b420a:	a808      	add	r0, sp, #32
   b420c:	f002 fbae 	bl	b696c <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4210:	220a      	movs	r2, #10
   b4212:	4631      	mov	r1, r6
   b4214:	a804      	add	r0, sp, #16
   b4216:	f002 fbc6 	bl	b69a6 <_ZN6StringC1Eih>
   b421a:	a904      	add	r1, sp, #16
   b421c:	a808      	add	r0, sp, #32
   b421e:	f002 fc0a 	bl	b6a36 <_ZplRK15StringSumHelperRK6String>
   b4222:	494e      	ldr	r1, [pc, #312]	; (b435c <_Z6setHueibiii+0x208>)
   b4224:	f002 fc13 	bl	b6a4e <_ZplRK15StringSumHelperPKc>
   b4228:	4601      	mov	r1, r0
   b422a:	4668      	mov	r0, sp
   b422c:	f002 fb8f 	bl	b694e <_ZN6StringaSERKS_>
   b4230:	a804      	add	r0, sp, #16
   b4232:	f002 fb2d 	bl	b6890 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4236:	a808      	add	r0, sp, #32
   b4238:	f002 fb2a 	bl	b6890 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b423c:	4669      	mov	r1, sp
   b423e:	a808      	add	r0, sp, #32
   b4240:	f002 fb94 	bl	b696c <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4244:	220a      	movs	r2, #10
   b4246:	4621      	mov	r1, r4
   b4248:	a804      	add	r0, sp, #16
   b424a:	f002 fbac 	bl	b69a6 <_ZN6StringC1Eih>
   b424e:	a904      	add	r1, sp, #16
   b4250:	a808      	add	r0, sp, #32
   b4252:	f002 fbf0 	bl	b6a36 <_ZplRK15StringSumHelperRK6String>
   b4256:	4942      	ldr	r1, [pc, #264]	; (b4360 <_Z6setHueibiii+0x20c>)
   b4258:	f002 fbf9 	bl	b6a4e <_ZplRK15StringSumHelperPKc>
   b425c:	4601      	mov	r1, r0
   b425e:	4668      	mov	r0, sp
   b4260:	f002 fb75 	bl	b694e <_ZN6StringaSERKS_>
   b4264:	a804      	add	r0, sp, #16
   b4266:	f002 fb13 	bl	b6890 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426a:	a808      	add	r0, sp, #32
   b426c:	f002 fb10 	bl	b6890 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4270:	493c      	ldr	r1, [pc, #240]	; (b4364 <_Z6setHueibiii+0x210>)
   b4272:	483d      	ldr	r0, [pc, #244]	; (b4368 <_Z6setHueibiii+0x214>)
   b4274:	2300      	movs	r3, #0
   b4276:	2250      	movs	r2, #80	; 0x50
   b4278:	f002 fffa 	bl	b7270 <_ZN9TCPClient7connectEPKctm>
   b427c:	4604      	mov	r4, r0
   b427e:	2800      	cmp	r0, #0
   b4280:	d093      	beq.n	b41aa <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4282:	f002 fe67 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4286:	4939      	ldr	r1, [pc, #228]	; (b436c <_Z6setHueibiii+0x218>)
   b4288:	f002 fc39 	bl	b6afe <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b428c:	f002 fe62 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4290:	9900      	ldr	r1, [sp, #0]
   b4292:	f002 fc34 	bl	b6afe <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b4296:	4936      	ldr	r1, [pc, #216]	; (b4370 <_Z6setHueibiii+0x21c>)
   b4298:	4833      	ldr	r0, [pc, #204]	; (b4368 <_Z6setHueibiii+0x214>)
   b429a:	f002 fc1d 	bl	b6ad8 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b429e:	4935      	ldr	r1, [pc, #212]	; (b4374 <_Z6setHueibiii+0x220>)
   b42a0:	4831      	ldr	r0, [pc, #196]	; (b4368 <_Z6setHueibiii+0x214>)
   b42a2:	f002 fc19 	bl	b6ad8 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42a6:	4934      	ldr	r1, [pc, #208]	; (b4378 <_Z6setHueibiii+0x224>)
   b42a8:	482f      	ldr	r0, [pc, #188]	; (b4368 <_Z6setHueibiii+0x214>)
   b42aa:	f002 fc15 	bl	b6ad8 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42ae:	220a      	movs	r2, #10
   b42b0:	482d      	ldr	r0, [pc, #180]	; (b4368 <_Z6setHueibiii+0x214>)
   b42b2:	4629      	mov	r1, r5
   b42b4:	f7ff ff08 	bl	b40c8 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42b8:	4930      	ldr	r1, [pc, #192]	; (b437c <_Z6setHueibiii+0x228>)
   b42ba:	482b      	ldr	r0, [pc, #172]	; (b4368 <_Z6setHueibiii+0x214>)
   b42bc:	f002 fc1f 	bl	b6afe <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c0:	492f      	ldr	r1, [pc, #188]	; (b4380 <_Z6setHueibiii+0x22c>)
   b42c2:	4829      	ldr	r0, [pc, #164]	; (b4368 <_Z6setHueibiii+0x214>)
   b42c4:	f002 fc1b 	bl	b6afe <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42c8:	492e      	ldr	r1, [pc, #184]	; (b4384 <_Z6setHueibiii+0x230>)
   b42ca:	4827      	ldr	r0, [pc, #156]	; (b4368 <_Z6setHueibiii+0x214>)
   b42cc:	f002 fc04 	bl	b6ad8 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d0:	4924      	ldr	r1, [pc, #144]	; (b4364 <_Z6setHueibiii+0x210>)
   b42d2:	4825      	ldr	r0, [pc, #148]	; (b4368 <_Z6setHueibiii+0x214>)
   b42d4:	f002 fc13 	bl	b6afe <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42d8:	492b      	ldr	r1, [pc, #172]	; (b4388 <_Z6setHueibiii+0x234>)
   b42da:	4823      	ldr	r0, [pc, #140]	; (b4368 <_Z6setHueibiii+0x214>)
   b42dc:	f002 fbfc 	bl	b6ad8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e0:	220a      	movs	r2, #10
   b42e2:	9902      	ldr	r1, [sp, #8]
   b42e4:	4820      	ldr	r0, [pc, #128]	; (b4368 <_Z6setHueibiii+0x214>)
   b42e6:	f002 fc14 	bl	b6b12 <_ZN5Print11printNumberEmh>
        n += println();
   b42ea:	481f      	ldr	r0, [pc, #124]	; (b4368 <_Z6setHueibiii+0x214>)
   b42ec:	f002 fbfb 	bl	b6ae6 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f0:	4926      	ldr	r1, [pc, #152]	; (b438c <_Z6setHueibiii+0x238>)
   b42f2:	481d      	ldr	r0, [pc, #116]	; (b4368 <_Z6setHueibiii+0x214>)
   b42f4:	f002 fc03 	bl	b6afe <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42f8:	481b      	ldr	r0, [pc, #108]	; (b4368 <_Z6setHueibiii+0x214>)
   b42fa:	f002 fbf4 	bl	b6ae6 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b42fe:	9900      	ldr	r1, [sp, #0]
   b4300:	4819      	ldr	r0, [pc, #100]	; (b4368 <_Z6setHueibiii+0x214>)
   b4302:	f002 fbfc 	bl	b6afe <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b4306:	f002 fe25 	bl	b6f54 <_Z16_fetch_usbserialv>
   b430a:	4921      	ldr	r1, [pc, #132]	; (b4390 <_Z6setHueibiii+0x23c>)
   b430c:	f002 fbf7 	bl	b6afe <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4310:	f002 fe20 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4314:	4914      	ldr	r1, [pc, #80]	; (b4368 <_Z6setHueibiii+0x214>)
   b4316:	4604      	mov	r4, r0
   b4318:	a808      	add	r0, sp, #32
   b431a:	f002 fc5f 	bl	b6bdc <_ZN6Stream10readStringEv>
   b431e:	9908      	ldr	r1, [sp, #32]
   b4320:	4620      	mov	r0, r4
   b4322:	f002 fbec 	bl	b6afe <_ZN5Print7printlnEPKc>
   b4326:	a808      	add	r0, sp, #32
   b4328:	f002 fab2 	bl	b6890 <_ZN6StringD1Ev>
    HueClient.stop();
   b432c:	480e      	ldr	r0, [pc, #56]	; (b4368 <_Z6setHueibiii+0x214>)
   b432e:	f003 f955 	bl	b75dc <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4332:	2401      	movs	r4, #1
   b4334:	e739      	b.n	b41aa <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b4336:	4917      	ldr	r1, [pc, #92]	; (b4394 <_Z6setHueibiii+0x240>)
   b4338:	4668      	mov	r0, sp
   b433a:	f002 fb22 	bl	b6982 <_ZN6StringaSEPKc>
   b433e:	e797      	b.n	b4270 <_Z6setHueibiii+0x11c>
   b4340:	000b8990 	.word	0x000b8990
   b4344:	2003e5fc 	.word	0x2003e5fc
   b4348:	2003e604 	.word	0x2003e604
   b434c:	2003e5f4 	.word	0x2003e5f4
   b4350:	000b86d9 	.word	0x000b86d9
   b4354:	000b86f5 	.word	0x000b86f5
   b4358:	000b8707 	.word	0x000b8707
   b435c:	000b870f 	.word	0x000b870f
   b4360:	000b8722 	.word	0x000b8722
   b4364:	000b8bf4 	.word	0x000b8bf4
   b4368:	2003e590 	.word	0x2003e590
   b436c:	000b8724 	.word	0x000b8724
   b4370:	000b873b 	.word	0x000b873b
   b4374:	000b8baf 	.word	0x000b8baf
   b4378:	000b8745 	.word	0x000b8745
   b437c:	000b874e 	.word	0x000b874e
   b4380:	000b8977 	.word	0x000b8977
   b4384:	000b875e 	.word	0x000b875e
   b4388:	000b8765 	.word	0x000b8765
   b438c:	000b8776 	.word	0x000b8776
   b4390:	000b879d 	.word	0x000b879d
   b4394:	000b8717 	.word	0x000b8717
   b4398:	2003e5f8 	.word	0x2003e5f8
   b439c:	2003e600 	.word	0x2003e600

000b43a0 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b43a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b43a2:	4925      	ldr	r1, [pc, #148]	; (b4438 <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b43a4:	4604      	mov	r4, r0
  String data1;
   b43a6:	4668      	mov	r0, sp
   b43a8:	f002 fabd 	bl	b6926 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b43ac:	f002 fdd2 	bl	b6f54 <_Z16_fetch_usbserialv>
   b43b0:	4622      	mov	r2, r4
   b43b2:	4922      	ldr	r1, [pc, #136]	; (b443c <_Z8switchONi+0x9c>)
   b43b4:	f7ff fe9b 	bl	b40ee <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b43b8:	4921      	ldr	r1, [pc, #132]	; (b4440 <_Z8switchONi+0xa0>)
   b43ba:	4668      	mov	r0, sp
   b43bc:	f002 fb1d 	bl	b69fa <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b43c0:	4a20      	ldr	r2, [pc, #128]	; (b4444 <_Z8switchONi+0xa4>)
   b43c2:	4921      	ldr	r1, [pc, #132]	; (b4448 <_Z8switchONi+0xa8>)
   b43c4:	8812      	ldrh	r2, [r2, #0]
   b43c6:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b43ca:	4820      	ldr	r0, [pc, #128]	; (b444c <_Z8switchONi+0xac>)
   b43cc:	2300      	movs	r3, #0
   b43ce:	f002 ff4f 	bl	b7270 <_ZN9TCPClient7connectEPKctm>
   b43d2:	b328      	cbz	r0, b4420 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b43d4:	491e      	ldr	r1, [pc, #120]	; (b4450 <_Z8switchONi+0xb0>)
   b43d6:	481d      	ldr	r0, [pc, #116]	; (b444c <_Z8switchONi+0xac>)
   b43d8:	f002 fb91 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b43dc:	491d      	ldr	r1, [pc, #116]	; (b4454 <_Z8switchONi+0xb4>)
   b43de:	481b      	ldr	r0, [pc, #108]	; (b444c <_Z8switchONi+0xac>)
   b43e0:	f002 fb8d 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b43e4:	491c      	ldr	r1, [pc, #112]	; (b4458 <_Z8switchONi+0xb8>)
   b43e6:	4819      	ldr	r0, [pc, #100]	; (b444c <_Z8switchONi+0xac>)
   b43e8:	f002 fb89 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b43ec:	491b      	ldr	r1, [pc, #108]	; (b445c <_Z8switchONi+0xbc>)
   b43ee:	4817      	ldr	r0, [pc, #92]	; (b444c <_Z8switchONi+0xac>)
   b43f0:	f002 fb85 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b43f4:	491a      	ldr	r1, [pc, #104]	; (b4460 <_Z8switchONi+0xc0>)
   b43f6:	4815      	ldr	r0, [pc, #84]	; (b444c <_Z8switchONi+0xac>)
   b43f8:	f002 fb6e 	bl	b6ad8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b43fc:	9902      	ldr	r1, [sp, #8]
   b43fe:	4813      	ldr	r0, [pc, #76]	; (b444c <_Z8switchONi+0xac>)
   b4400:	220a      	movs	r2, #10
   b4402:	f002 fb86 	bl	b6b12 <_ZN5Print11printNumberEmh>
        n += println();
   b4406:	4811      	ldr	r0, [pc, #68]	; (b444c <_Z8switchONi+0xac>)
   b4408:	f002 fb6d 	bl	b6ae6 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b440c:	480f      	ldr	r0, [pc, #60]	; (b444c <_Z8switchONi+0xac>)
   b440e:	f002 fb6a 	bl	b6ae6 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4412:	9900      	ldr	r1, [sp, #0]
   b4414:	480d      	ldr	r0, [pc, #52]	; (b444c <_Z8switchONi+0xac>)
   b4416:	f002 fb5f 	bl	b6ad8 <_ZN5Print5printEPKc>
        WemoClient.println();
   b441a:	480c      	ldr	r0, [pc, #48]	; (b444c <_Z8switchONi+0xac>)
   b441c:	f002 fb63 	bl	b6ae6 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b4420:	480a      	ldr	r0, [pc, #40]	; (b444c <_Z8switchONi+0xac>)
   b4422:	f002 ffa3 	bl	b736c <_ZN9TCPClient9connectedEv>
   b4426:	b110      	cbz	r0, b442e <_Z8switchONi+0x8e>
     WemoClient.stop();
   b4428:	4808      	ldr	r0, [pc, #32]	; (b444c <_Z8switchONi+0xac>)
   b442a:	f003 f8d7 	bl	b75dc <_ZN9TCPClient4stopEv>
  String data1;
   b442e:	4668      	mov	r0, sp
   b4430:	f002 fa2e 	bl	b6890 <_ZN6StringD1Ev>
  }
}
   b4434:	b004      	add	sp, #16
   b4436:	bd10      	pop	{r4, pc}
   b4438:	000b8990 	.word	0x000b8990
   b443c:	000b87a6 	.word	0x000b87a6
   b4440:	000b87b4 	.word	0x000b87b4
   b4444:	2003e110 	.word	0x2003e110
   b4448:	2003e0fc 	.word	0x2003e0fc
   b444c:	2003e5d8 	.word	0x2003e5d8
   b4450:	000b88e0 	.word	0x000b88e0
   b4454:	000b8908 	.word	0x000b8908
   b4458:	000b892e 	.word	0x000b892e
   b445c:	000b896b 	.word	0x000b896b
   b4460:	000b8765 	.word	0x000b8765

000b4464 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b4466:	4925      	ldr	r1, [pc, #148]	; (b44fc <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b4468:	4604      	mov	r4, r0
  String data1;
   b446a:	4668      	mov	r0, sp
   b446c:	f002 fa5b 	bl	b6926 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b4470:	f002 fd70 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4474:	4622      	mov	r2, r4
   b4476:	4922      	ldr	r1, [pc, #136]	; (b4500 <_Z9switchOFFi+0x9c>)
   b4478:	f7ff fe39 	bl	b40ee <_ZN5Print6printfEPKcz>
   b447c:	4921      	ldr	r1, [pc, #132]	; (b4504 <_Z9switchOFFi+0xa0>)
   b447e:	4668      	mov	r0, sp
   b4480:	f002 fabb 	bl	b69fa <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4484:	4a20      	ldr	r2, [pc, #128]	; (b4508 <_Z9switchOFFi+0xa4>)
   b4486:	4921      	ldr	r1, [pc, #132]	; (b450c <_Z9switchOFFi+0xa8>)
   b4488:	8812      	ldrh	r2, [r2, #0]
   b448a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b448e:	4820      	ldr	r0, [pc, #128]	; (b4510 <_Z9switchOFFi+0xac>)
   b4490:	2300      	movs	r3, #0
   b4492:	f002 feed 	bl	b7270 <_ZN9TCPClient7connectEPKctm>
   b4496:	b328      	cbz	r0, b44e4 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4498:	491e      	ldr	r1, [pc, #120]	; (b4514 <_Z9switchOFFi+0xb0>)
   b449a:	481d      	ldr	r0, [pc, #116]	; (b4510 <_Z9switchOFFi+0xac>)
   b449c:	f002 fb2f 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b44a0:	491d      	ldr	r1, [pc, #116]	; (b4518 <_Z9switchOFFi+0xb4>)
   b44a2:	481b      	ldr	r0, [pc, #108]	; (b4510 <_Z9switchOFFi+0xac>)
   b44a4:	f002 fb2b 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b44a8:	491c      	ldr	r1, [pc, #112]	; (b451c <_Z9switchOFFi+0xb8>)
   b44aa:	4819      	ldr	r0, [pc, #100]	; (b4510 <_Z9switchOFFi+0xac>)
   b44ac:	f002 fb27 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b44b0:	491b      	ldr	r1, [pc, #108]	; (b4520 <_Z9switchOFFi+0xbc>)
   b44b2:	4817      	ldr	r0, [pc, #92]	; (b4510 <_Z9switchOFFi+0xac>)
   b44b4:	f002 fb23 	bl	b6afe <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b44b8:	491a      	ldr	r1, [pc, #104]	; (b4524 <_Z9switchOFFi+0xc0>)
   b44ba:	4815      	ldr	r0, [pc, #84]	; (b4510 <_Z9switchOFFi+0xac>)
   b44bc:	f002 fb0c 	bl	b6ad8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b44c0:	9902      	ldr	r1, [sp, #8]
   b44c2:	4813      	ldr	r0, [pc, #76]	; (b4510 <_Z9switchOFFi+0xac>)
   b44c4:	220a      	movs	r2, #10
   b44c6:	f002 fb24 	bl	b6b12 <_ZN5Print11printNumberEmh>
        n += println();
   b44ca:	4811      	ldr	r0, [pc, #68]	; (b4510 <_Z9switchOFFi+0xac>)
   b44cc:	f002 fb0b 	bl	b6ae6 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b44d0:	480f      	ldr	r0, [pc, #60]	; (b4510 <_Z9switchOFFi+0xac>)
   b44d2:	f002 fb08 	bl	b6ae6 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b44d6:	9900      	ldr	r1, [sp, #0]
   b44d8:	480d      	ldr	r0, [pc, #52]	; (b4510 <_Z9switchOFFi+0xac>)
   b44da:	f002 fafd 	bl	b6ad8 <_ZN5Print5printEPKc>
        WemoClient.println();
   b44de:	480c      	ldr	r0, [pc, #48]	; (b4510 <_Z9switchOFFi+0xac>)
   b44e0:	f002 fb01 	bl	b6ae6 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b44e4:	480a      	ldr	r0, [pc, #40]	; (b4510 <_Z9switchOFFi+0xac>)
   b44e6:	f002 ff41 	bl	b736c <_ZN9TCPClient9connectedEv>
   b44ea:	b110      	cbz	r0, b44f2 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b44ec:	4808      	ldr	r0, [pc, #32]	; (b4510 <_Z9switchOFFi+0xac>)
   b44ee:	f003 f875 	bl	b75dc <_ZN9TCPClient4stopEv>
  String data1;
   b44f2:	4668      	mov	r0, sp
   b44f4:	f002 f9cc 	bl	b6890 <_ZN6StringD1Ev>
  }
}
   b44f8:	b004      	add	sp, #16
   b44fa:	bd10      	pop	{r4, pc}
   b44fc:	000b8990 	.word	0x000b8990
   b4500:	000b8982 	.word	0x000b8982
   b4504:	000b8991 	.word	0x000b8991
   b4508:	2003e110 	.word	0x2003e110
   b450c:	2003e0fc 	.word	0x2003e0fc
   b4510:	2003e5d8 	.word	0x2003e5d8
   b4514:	000b88e0 	.word	0x000b88e0
   b4518:	000b8908 	.word	0x000b8908
   b451c:	000b892e 	.word	0x000b892e
   b4520:	000b896b 	.word	0x000b896b
   b4524:	000b8765 	.word	0x000b8765

000b4528 <setup>:

Adafruit_NeoPixel neopix(12,A4,WS2812B);
Adafruit_SSD1306 display(D2);


void setup() {
   b4528:	b530      	push	{r4, r5, lr}
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b452a:	4d3d      	ldr	r5, [pc, #244]	; (b4620 <setup+0xf8>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b452c:	2300      	movs	r3, #0
   b452e:	b095      	sub	sp, #84	; 0x54
   b4530:	461a      	mov	r2, r3
   b4532:	4619      	mov	r1, r3
   b4534:	6868      	ldr	r0, [r5, #4]
   b4536:	f001 ffbf 	bl	b64b8 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b453a:	2238      	movs	r2, #56	; 0x38
   b453c:	2100      	movs	r1, #0
   b453e:	a806      	add	r0, sp, #24
   b4540:	f004 f800 	bl	b8544 <memset>
        creds.size = sizeof(creds);
   b4544:	234c      	movs	r3, #76	; 0x4c
   b4546:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b4548:	4b36      	ldr	r3, [pc, #216]	; (b4624 <setup+0xfc>)
   b454a:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b454c:	220a      	movs	r2, #10
   b454e:	2300      	movs	r3, #0
   b4550:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4554:	4619      	mov	r1, r3
   b4556:	aa01      	add	r2, sp, #4
   b4558:	6868      	ldr	r0, [r5, #4]
        creds.password_len = passwordLen;
   b455a:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b455c:	f001 ffcc 	bl	b64f8 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b4560:	2300      	movs	r3, #0
   b4562:	6868      	ldr	r0, [r5, #4]
   b4564:	461a      	mov	r2, r3
   b4566:	4619      	mov	r1, r3
   b4568:	f001 ff86 	bl	b6478 <network_connect>
        return network_connecting(*this, 0, NULL);
   b456c:	2200      	movs	r2, #0
   b456e:	6868      	ldr	r0, [r5, #4]
   b4570:	4611      	mov	r1, r2
   b4572:	f001 ff89 	bl	b6488 <network_connecting>

  WiFi.on();
  WiFi.setCredentials("IoTNetwork");
  WiFi.connect();
  //forces the system to wait for the wifi to connect
  while(WiFi.connecting()) {
   b4576:	4604      	mov	r4, r0
   b4578:	b118      	cbz	r0, b4582 <setup+0x5a>
  delay(1);
   b457a:	2001      	movs	r0, #1
   b457c:	f002 fb54 	bl	b6c28 <delay>
  while(WiFi.connecting()) {
   b4580:	e7f4      	b.n	b456c <setup+0x44>
  }

  neopix.setBrightness(8);
   b4582:	2108      	movs	r1, #8
   b4584:	4828      	ldr	r0, [pc, #160]	; (b4628 <setup+0x100>)
   b4586:	f001 fd34 	bl	b5ff2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  neopix.show();
   b458a:	4827      	ldr	r0, [pc, #156]	; (b4628 <setup+0x100>)
   b458c:	f001 fb42 	bl	b5c14 <_ZN17Adafruit_NeoPixel4showEv>

  display.begin(SSD1306_SWITCHCAPVCC,0x3C);
   b4590:	223c      	movs	r2, #60	; 0x3c
   b4592:	2102      	movs	r1, #2
   b4594:	4825      	ldr	r0, [pc, #148]	; (b462c <setup+0x104>)
   b4596:	f000 fec9 	bl	b532c <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b459a:	4824      	ldr	r0, [pc, #144]	; (b462c <setup+0x104>)
   b459c:	f000 fdde 	bl	b515c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b45a0:	4822      	ldr	r0, [pc, #136]	; (b462c <setup+0x104>)
   b45a2:	f000 fe53 	bl	b524c <_ZN16Adafruit_SSD13067displayEv>

  Serial.begin(9600);
   b45a6:	f002 fcd5 	bl	b6f54 <_Z16_fetch_usbserialv>
   b45aa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45ae:	f002 fcc1 	bl	b6f34 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b45b2:	4620      	mov	r0, r4
   b45b4:	f001 fdb4 	bl	b6120 <hal_timer_millis>
        while (_while() && !_condition()) {
   b45b8:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b45bc:	4604      	mov	r4, r0
   b45be:	2000      	movs	r0, #0
   b45c0:	f001 fdae 	bl	b6120 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b45c4:	1b00      	subs	r0, r0, r4
   b45c6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b45ca:	42a8      	cmp	r0, r5
   b45cc:	f171 0300 	sbcs.w	r3, r1, #0
   b45d0:	d207      	bcs.n	b45e2 <setup+0xba>
  waitFor(Serial.isConnected,10000);
   b45d2:	f002 fcbf 	bl	b6f54 <_Z16_fetch_usbserialv>
   b45d6:	f002 fcb1 	bl	b6f3c <_ZN9USBSerial11isConnectedEv>
   b45da:	b910      	cbnz	r0, b45e2 <setup+0xba>
            spark_process();
   b45dc:	f001 ffb4 	bl	b6548 <spark_process>
        while (_while() && !_condition()) {
   b45e0:	e7ed      	b.n	b45be <setup+0x96>
   b45e2:	f002 fcb7 	bl	b6f54 <_Z16_fetch_usbserialv>
   b45e6:	f002 fca9 	bl	b6f3c <_ZN9USBSerial11isConnectedEv>

  pinMode(A0,INPUT);
   b45ea:	2100      	movs	r1, #0
   b45ec:	2013      	movs	r0, #19
   b45ee:	f003 f981 	bl	b78f4 <pinMode>
  pinMode(A1,INPUT);
   b45f2:	2100      	movs	r1, #0
   b45f4:	2012      	movs	r0, #18
   b45f6:	f003 f97d 	bl	b78f4 <pinMode>
  pinMode(A2,INPUT);
   b45fa:	2100      	movs	r1, #0
   b45fc:	2011      	movs	r0, #17
   b45fe:	f003 f979 	bl	b78f4 <pinMode>
  pinMode(D8,OUTPUT);
   b4602:	2101      	movs	r1, #1
   b4604:	2008      	movs	r0, #8
   b4606:	f003 f975 	bl	b78f4 <pinMode>
  pinMode(D7,OUTPUT);
   b460a:	2101      	movs	r1, #1
   b460c:	2007      	movs	r0, #7
   b460e:	f003 f971 	bl	b78f4 <pinMode>
  pinMode(D6,OUTPUT);
   b4612:	2101      	movs	r1, #1
   b4614:	2006      	movs	r0, #6
}
   b4616:	b015      	add	sp, #84	; 0x54
   b4618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  pinMode(D6,OUTPUT);
   b461c:	f003 b96a 	b.w	b78f4 <pinMode>
   b4620:	2003e718 	.word	0x2003e718
   b4624:	000b8abd 	.word	0x000b8abd
   b4628:	2003e678 	.word	0x2003e678
   b462c:	2003e638 	.word	0x2003e638

000b4630 <_Z18determineAdvantagev>:
    switchOFF(wemo2);
    pixelFill(0,12,NEOCOLORS[currentColor]);
  }
}
//looks through the nominal read and adds a red or blue piece if the values match
void determineAdvantage () {
   b4630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4634:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b4704 <_Z18determineAdvantagev+0xd4>
  //reset values
  redPiece = 0;
   b4638:	4c2d      	ldr	r4, [pc, #180]	; (b46f0 <_Z18determineAdvantagev+0xc0>)
  bluePiece = 0;
   b463a:	4d2e      	ldr	r5, [pc, #184]	; (b46f4 <_Z18determineAdvantagev+0xc4>)
  //read the number of red and blue pieces
  for (j=0;j<3;j++) {
   b463c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; b4708 <_Z18determineAdvantagev+0xd8>
   b4640:	f8d8 9000 	ldr.w	r9, [r8]
   b4644:	4e2c      	ldr	r6, [pc, #176]	; (b46f8 <_Z18determineAdvantagev+0xc8>)
  redPiece = 0;
   b4646:	2300      	movs	r3, #0
   b4648:	6023      	str	r3, [r4, #0]
  bluePiece = 0;
   b464a:	602b      	str	r3, [r5, #0]
  for (j=0;j<3;j++) {
   b464c:	f8cc 3000 	str.w	r3, [ip]
   b4650:	2704      	movs	r7, #4
   b4652:	4619      	mov	r1, r3
   b4654:	469e      	mov	lr, r3
   b4656:	4618      	mov	r0, r3
   b4658:	461a      	mov	r2, r3
    for (i=0;i<3;i++) {
      if (nominalRead[j][i] == 1) {redPiece ++;}
   b465a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      if (nominalRead[j][i] == 2) {bluePiece ++;}
   b465e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  for (j=0;j<3;j++) {
   b4662:	3f01      	subs	r7, #1
   b4664:	d01b      	beq.n	b469e <_Z18determineAdvantagev+0x6e>
   b4666:	46b1      	mov	r9, r6
   b4668:	2204      	movs	r2, #4
    for (i=0;i<3;i++) {
   b466a:	3a01      	subs	r2, #1
   b466c:	d012      	beq.n	b4694 <_Z18determineAdvantagev+0x64>
      if (nominalRead[j][i] == 1) {redPiece ++;}
   b466e:	ecf9 7a01 	vldmia	r9!, {s15}
   b4672:	eef4 7a47 	vcmp.f32	s15, s14
   b4676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b467a:	d103      	bne.n	b4684 <_Z18determineAdvantagev+0x54>
   b467c:	3001      	adds	r0, #1
   b467e:	f04f 0e01 	mov.w	lr, #1
   b4682:	e7f2      	b.n	b466a <_Z18determineAdvantagev+0x3a>
      if (nominalRead[j][i] == 2) {bluePiece ++;}
   b4684:	eef4 7a66 	vcmp.f32	s15, s13
   b4688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b468c:	d1ed      	bne.n	b466a <_Z18determineAdvantagev+0x3a>
   b468e:	3101      	adds	r1, #1
   b4690:	2301      	movs	r3, #1
    for (i=0;i<3;i++) {
   b4692:	e7ea      	b.n	b466a <_Z18determineAdvantagev+0x3a>
  for (j=0;j<3;j++) {
   b4694:	360c      	adds	r6, #12
   b4696:	2201      	movs	r2, #1
   b4698:	f04f 0903 	mov.w	r9, #3
   b469c:	e7e1      	b.n	b4662 <_Z18determineAdvantagev+0x32>
   b469e:	b10a      	cbz	r2, b46a4 <_Z18determineAdvantagev+0x74>
   b46a0:	f8c8 9000 	str.w	r9, [r8]
   b46a4:	f1be 0f00 	cmp.w	lr, #0
   b46a8:	d000      	beq.n	b46ac <_Z18determineAdvantagev+0x7c>
   b46aa:	6020      	str	r0, [r4, #0]
   b46ac:	b103      	cbz	r3, b46b0 <_Z18determineAdvantagev+0x80>
   b46ae:	6029      	str	r1, [r5, #0]
   b46b0:	b112      	cbz	r2, b46b8 <_Z18determineAdvantagev+0x88>
   b46b2:	2303      	movs	r3, #3
   b46b4:	f8cc 3000 	str.w	r3, [ip]
    }
  }
  //adjust colors
  if (redPiece > bluePiece) {
   b46b8:	6822      	ldr	r2, [r4, #0]
   b46ba:	682b      	ldr	r3, [r5, #0]
   b46bc:	429a      	cmp	r2, r3
   b46be:	dd05      	ble.n	b46cc <_Z18determineAdvantagev+0x9c>
    currentColor = 3 - (redPiece - bluePiece); 
   b46c0:	1ad3      	subs	r3, r2, r3
   b46c2:	f1c3 0303 	rsb	r3, r3, #3
  }
  if (redPiece < bluePiece) {
    currentColor = 3 + (bluePiece - redPiece);
   b46c6:	4a0d      	ldr	r2, [pc, #52]	; (b46fc <_Z18determineAdvantagev+0xcc>)
   b46c8:	6013      	str	r3, [r2, #0]
  }
  if (redPiece == bluePiece) {
   b46ca:	e001      	b.n	b46d0 <_Z18determineAdvantagev+0xa0>
  if (redPiece < bluePiece) {
   b46cc:	db09      	blt.n	b46e2 <_Z18determineAdvantagev+0xb2>
  if (redPiece == bluePiece) {
   b46ce:	d00b      	beq.n	b46e8 <_Z18determineAdvantagev+0xb8>
    currentColor = 3;
  }
  Serial.printf("\nNumRed = %i NumBlue = %i",redPiece,bluePiece);
   b46d0:	f002 fc40 	bl	b6f54 <_Z16_fetch_usbserialv>
   b46d4:	682b      	ldr	r3, [r5, #0]
   b46d6:	6822      	ldr	r2, [r4, #0]
   b46d8:	4909      	ldr	r1, [pc, #36]	; (b4700 <_Z18determineAdvantagev+0xd0>)
   b46da:	f7ff fd08 	bl	b40ee <_ZN5Print6printfEPKcz>
}
   b46de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currentColor = 3 + (bluePiece - redPiece);
   b46e2:	1a9b      	subs	r3, r3, r2
   b46e4:	3303      	adds	r3, #3
   b46e6:	e7ee      	b.n	b46c6 <_Z18determineAdvantagev+0x96>
    currentColor = 3;
   b46e8:	4b04      	ldr	r3, [pc, #16]	; (b46fc <_Z18determineAdvantagev+0xcc>)
   b46ea:	2203      	movs	r2, #3
   b46ec:	601a      	str	r2, [r3, #0]
   b46ee:	e7ef      	b.n	b46d0 <_Z18determineAdvantagev+0xa0>
   b46f0:	2003e6b0 	.word	0x2003e6b0
   b46f4:	2003e62c 	.word	0x2003e62c
   b46f8:	2003e68c 	.word	0x2003e68c
   b46fc:	2003e630 	.word	0x2003e630
   b4700:	000b8ac8 	.word	0x000b8ac8
   b4704:	2003e66c 	.word	0x2003e66c
   b4708:	2003e670 	.word	0x2003e670

000b470c <_Z8rowSetupv>:
  for (i=2;i>=0;i--) {
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
  }
}
//switches the D pins between input/output and high/low turning one on at a time (setting to low is required for consistent reading)
void rowSetup () { 
   b470c:	b538      	push	{r3, r4, r5, lr}
  //first column
  if (currentRow == 0) {
   b470e:	4d2a      	ldr	r5, [pc, #168]	; (b47b8 <_Z8rowSetupv+0xac>)
   b4710:	682c      	ldr	r4, [r5, #0]
   b4712:	b9bc      	cbnz	r4, b4744 <_Z8rowSetupv+0x38>
    pinMode(D8,OUTPUT);
   b4714:	2101      	movs	r1, #1
   b4716:	2008      	movs	r0, #8
   b4718:	f003 f8ec 	bl	b78f4 <pinMode>
    pinMode(D7,INPUT);
   b471c:	4621      	mov	r1, r4
   b471e:	2007      	movs	r0, #7
   b4720:	f003 f8e8 	bl	b78f4 <pinMode>
    pinMode(D6,INPUT);
   b4724:	4621      	mov	r1, r4
   b4726:	2006      	movs	r0, #6
   b4728:	f003 f8e4 	bl	b78f4 <pinMode>
    digitalWrite(D8,HIGH);
   b472c:	2101      	movs	r1, #1
   b472e:	2008      	movs	r0, #8
   b4730:	f003 f8f1 	bl	b7916 <digitalWrite>
    digitalWrite(D7,LOW);
   b4734:	4621      	mov	r1, r4
   b4736:	2007      	movs	r0, #7
   b4738:	f003 f8ed 	bl	b7916 <digitalWrite>
    digitalWrite(D6,LOW);
   b473c:	4621      	mov	r1, r4
   b473e:	2006      	movs	r0, #6
   b4740:	f003 f8e9 	bl	b7916 <digitalWrite>
  }
  //second column
  if (currentRow == 1) { 
   b4744:	682c      	ldr	r4, [r5, #0]
   b4746:	2c01      	cmp	r4, #1
   b4748:	d117      	bne.n	b477a <_Z8rowSetupv+0x6e>
    pinMode(D8,INPUT);
   b474a:	2100      	movs	r1, #0
   b474c:	2008      	movs	r0, #8
   b474e:	f003 f8d1 	bl	b78f4 <pinMode>
    pinMode(D7,OUTPUT);
   b4752:	4621      	mov	r1, r4
   b4754:	2007      	movs	r0, #7
   b4756:	f003 f8cd 	bl	b78f4 <pinMode>
    pinMode(D6,INPUT);
   b475a:	2100      	movs	r1, #0
   b475c:	2006      	movs	r0, #6
   b475e:	f003 f8c9 	bl	b78f4 <pinMode>
    digitalWrite(D8,LOW);
   b4762:	2100      	movs	r1, #0
   b4764:	2008      	movs	r0, #8
   b4766:	f003 f8d6 	bl	b7916 <digitalWrite>
    digitalWrite(D7,HIGH);
   b476a:	4621      	mov	r1, r4
   b476c:	2007      	movs	r0, #7
   b476e:	f003 f8d2 	bl	b7916 <digitalWrite>
    digitalWrite(D6,LOW); 
   b4772:	2100      	movs	r1, #0
   b4774:	2006      	movs	r0, #6
   b4776:	f003 f8ce 	bl	b7916 <digitalWrite>
  }
  //third column
  if (currentRow == 2) {
   b477a:	682b      	ldr	r3, [r5, #0]
   b477c:	2b02      	cmp	r3, #2
   b477e:	d119      	bne.n	b47b4 <_Z8rowSetupv+0xa8>
    pinMode(D8,INPUT);
   b4780:	2100      	movs	r1, #0
   b4782:	2008      	movs	r0, #8
   b4784:	f003 f8b6 	bl	b78f4 <pinMode>
    pinMode(D7,INPUT);
   b4788:	2100      	movs	r1, #0
   b478a:	2007      	movs	r0, #7
   b478c:	f003 f8b2 	bl	b78f4 <pinMode>
    pinMode(D6,OUTPUT);
   b4790:	2101      	movs	r1, #1
   b4792:	2006      	movs	r0, #6
   b4794:	f003 f8ae 	bl	b78f4 <pinMode>
    digitalWrite(D8,LOW);
   b4798:	2100      	movs	r1, #0
   b479a:	2008      	movs	r0, #8
   b479c:	f003 f8bb 	bl	b7916 <digitalWrite>
    digitalWrite(D7,LOW);
   b47a0:	2100      	movs	r1, #0
   b47a2:	2007      	movs	r0, #7
   b47a4:	f003 f8b7 	bl	b7916 <digitalWrite>
    digitalWrite(D6,HIGH);
  }
}
   b47a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(D6,HIGH);
   b47ac:	2101      	movs	r1, #1
   b47ae:	2006      	movs	r0, #6
   b47b0:	f003 b8b1 	b.w	b7916 <digitalWrite>
}
   b47b4:	bd38      	pop	{r3, r4, r5, pc}
   b47b6:	bf00      	nop
   b47b8:	2003e634 	.word	0x2003e634

000b47bc <_Z13checkPiecePosv>:
void checkPiecePos () {
   b47bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (j=0;j<3;j++) {
   b47c0:	f8df 818c 	ldr.w	r8, [pc, #396]	; b4950 <_Z13checkPiecePosv+0x194>
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b47c4:	4f5b      	ldr	r7, [pc, #364]	; (b4934 <_Z13checkPiecePosv+0x178>)
   b47c6:	f8df 9180 	ldr.w	r9, [pc, #384]	; b4948 <_Z13checkPiecePosv+0x18c>
  for (j=0;j<3;j++) {
   b47ca:	2300      	movs	r3, #0
void checkPiecePos () {
   b47cc:	b086      	sub	sp, #24
  for (j=0;j<3;j++) {
   b47ce:	f8c8 3000 	str.w	r3, [r8]
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b47d2:	2600      	movs	r6, #0
  for (j=0;j<3;j++) {
   b47d4:	f8d8 3000 	ldr.w	r3, [r8]
   b47d8:	4c57      	ldr	r4, [pc, #348]	; (b4938 <_Z13checkPiecePosv+0x17c>)
   b47da:	2b02      	cmp	r3, #2
   b47dc:	dc56      	bgt.n	b488c <_Z13checkPiecePosv+0xd0>
    currentRow = j;
   b47de:	4a57      	ldr	r2, [pc, #348]	; (b493c <_Z13checkPiecePosv+0x180>)
   b47e0:	6013      	str	r3, [r2, #0]
    rowSetup ();
   b47e2:	f7ff ff93 	bl	b470c <_Z8rowSetupv>
    for (i=0;i<3;i++) {
   b47e6:	2300      	movs	r3, #0
   b47e8:	6023      	str	r3, [r4, #0]
   b47ea:	6820      	ldr	r0, [r4, #0]
   b47ec:	2802      	cmp	r0, #2
   b47ee:	dc47      	bgt.n	b4880 <_Z13checkPiecePosv+0xc4>
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b47f0:	3011      	adds	r0, #17
   b47f2:	b280      	uxth	r0, r0
   b47f4:	f003 f8a8 	bl	b7948 <analogRead>
   b47f8:	f003 fbc4 	bl	b7f84 <__aeabi_i2d>
   b47fc:	4632      	mov	r2, r6
   b47fe:	463b      	mov	r3, r7
   b4800:	f003 fd54 	bl	b82ac <__aeabi_ddiv>
   b4804:	f003 fe3a 	bl	b847c <__aeabi_d2f>
   b4808:	6825      	ldr	r5, [r4, #0]
   b480a:	f8d8 a000 	ldr.w	sl, [r8]
      actualRead [i][j] = nominalRead [i][j];
   b480e:	494c      	ldr	r1, [pc, #304]	; (b4940 <_Z13checkPiecePosv+0x184>)
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b4810:	ee07 0a90 	vmov	s15, r0
   b4814:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b481c:	4452      	add	r2, sl
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b481e:	eef4 7ac7 	vcmpe.f32	s15, s14
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b4822:	eb09 0082 	add.w	r0, r9, r2, lsl #2
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      actualRead [i][j] = nominalRead [i][j];
   b482a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      nominalRead [i][j] = analogRead(i+17)/723.0;
   b482e:	ea4f 0345 	mov.w	r3, r5, lsl #1
   b4832:	edc0 7a00 	vstr	s15, [r0]
      actualRead [i][j] = nominalRead [i][j];
   b4836:	edc2 7a00 	vstr	s15, [r2]
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b483a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   b483e:	dd09      	ble.n	b4854 <_Z13checkPiecePosv+0x98>
   b4840:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4848:	d504      	bpl.n	b4854 <_Z13checkPiecePosv+0x98>
   b484a:	ed80 7a00 	vstr	s14, [r0]
    for (i=0;i<3;i++) {
   b484e:	3501      	adds	r5, #1
   b4850:	6025      	str	r5, [r4, #0]
   b4852:	e7ca      	b.n	b47ea <_Z13checkPiecePosv+0x2e>
      if (nominalRead [i][j] > 2) {nominalRead [i][j] = 2;}
   b4854:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4858:	442b      	add	r3, r5
   b485a:	4453      	add	r3, sl
   b485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4860:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   b4864:	dd02      	ble.n	b486c <_Z13checkPiecePosv+0xb0>
   b4866:	edc3 6a00 	vstr	s13, [r3]
      if (nominalRead [i][j] < 1) {nominalRead [i][j] = 0;}
   b486a:	e7f0      	b.n	b484e <_Z13checkPiecePosv+0x92>
   b486c:	edd3 7a00 	vldr	s15, [r3]
   b4870:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4878:	bf44      	itt	mi
   b487a:	2200      	movmi	r2, #0
   b487c:	601a      	strmi	r2, [r3, #0]
   b487e:	e7e6      	b.n	b484e <_Z13checkPiecePosv+0x92>
  for (j=0;j<3;j++) {
   b4880:	f8d8 3000 	ldr.w	r3, [r8]
   b4884:	3301      	adds	r3, #1
   b4886:	f8c8 3000 	str.w	r3, [r8]
   b488a:	e7a3      	b.n	b47d4 <_Z13checkPiecePosv+0x18>
  for (i=2;i>=0;i--) {
   b488c:	2302      	movs	r3, #2
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",actualRead[i][0],actualRead[i][1],actualRead[i][2]);
   b488e:	4f2c      	ldr	r7, [pc, #176]	; (b4940 <_Z13checkPiecePosv+0x184>)
   b4890:	4e2c      	ldr	r6, [pc, #176]	; (b4944 <_Z13checkPiecePosv+0x188>)
  for (i=2;i>=0;i--) {
   b4892:	6023      	str	r3, [r4, #0]
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",actualRead[i][0],actualRead[i][1],actualRead[i][2]);
   b4894:	f04f 080c 	mov.w	r8, #12
   b4898:	f002 fb5c 	bl	b6f54 <_Z16_fetch_usbserialv>
   b489c:	6825      	ldr	r5, [r4, #0]
   b489e:	fb08 7505 	mla	r5, r8, r5, r7
   b48a2:	4681      	mov	r9, r0
   b48a4:	6828      	ldr	r0, [r5, #0]
   b48a6:	f003 fb7f 	bl	b7fa8 <__aeabi_f2d>
   b48aa:	4602      	mov	r2, r0
   b48ac:	460b      	mov	r3, r1
   b48ae:	68a8      	ldr	r0, [r5, #8]
   b48b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b48b4:	f003 fb78 	bl	b7fa8 <__aeabi_f2d>
   b48b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b48bc:	6868      	ldr	r0, [r5, #4]
   b48be:	f003 fb73 	bl	b7fa8 <__aeabi_f2d>
   b48c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b48c6:	e9cd 0100 	strd	r0, r1, [sp]
   b48ca:	4631      	mov	r1, r6
   b48cc:	4648      	mov	r0, r9
   b48ce:	f7ff fc0e 	bl	b40ee <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b48d2:	6823      	ldr	r3, [r4, #0]
   b48d4:	3b01      	subs	r3, #1
   b48d6:	2b00      	cmp	r3, #0
   b48d8:	6023      	str	r3, [r4, #0]
   b48da:	dadd      	bge.n	b4898 <_Z13checkPiecePosv+0xdc>
  for (i=2;i>=0;i--) {
   b48dc:	2302      	movs	r3, #2
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
   b48de:	4f1a      	ldr	r7, [pc, #104]	; (b4948 <_Z13checkPiecePosv+0x18c>)
   b48e0:	4e1a      	ldr	r6, [pc, #104]	; (b494c <_Z13checkPiecePosv+0x190>)
  for (i=2;i>=0;i--) {
   b48e2:	6023      	str	r3, [r4, #0]
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
   b48e4:	f04f 080c 	mov.w	r8, #12
   b48e8:	f002 fb34 	bl	b6f54 <_Z16_fetch_usbserialv>
   b48ec:	6825      	ldr	r5, [r4, #0]
   b48ee:	fb08 7505 	mla	r5, r8, r5, r7
   b48f2:	4681      	mov	r9, r0
   b48f4:	6828      	ldr	r0, [r5, #0]
   b48f6:	f003 fb57 	bl	b7fa8 <__aeabi_f2d>
   b48fa:	4602      	mov	r2, r0
   b48fc:	460b      	mov	r3, r1
   b48fe:	68a8      	ldr	r0, [r5, #8]
   b4900:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b4904:	f003 fb50 	bl	b7fa8 <__aeabi_f2d>
   b4908:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b490c:	6868      	ldr	r0, [r5, #4]
   b490e:	f003 fb4b 	bl	b7fa8 <__aeabi_f2d>
   b4912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4916:	e9cd 0100 	strd	r0, r1, [sp]
   b491a:	4631      	mov	r1, r6
   b491c:	4648      	mov	r0, r9
   b491e:	f7ff fbe6 	bl	b40ee <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b4922:	6823      	ldr	r3, [r4, #0]
   b4924:	3b01      	subs	r3, #1
   b4926:	2b00      	cmp	r3, #0
   b4928:	6023      	str	r3, [r4, #0]
   b492a:	dadd      	bge.n	b48e8 <_Z13checkPiecePosv+0x12c>
}
   b492c:	b006      	add	sp, #24
   b492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4932:	bf00      	nop
   b4934:	40869800 	.word	0x40869800
   b4938:	2003e66c 	.word	0x2003e66c
   b493c:	2003e634 	.word	0x2003e634
   b4940:	2003e608 	.word	0x2003e608
   b4944:	000b8ae2 	.word	0x000b8ae2
   b4948:	2003e68c 	.word	0x2003e68c
   b494c:	000b8b07 	.word	0x000b8b07
   b4950:	2003e670 	.word	0x2003e670

000b4954 <_Z9drawBoardv>:
//resets the board on the display (without showing changes)
void drawBoard () {
   b4954:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  display.clearDisplay();
   b4956:	4c3b      	ldr	r4, [pc, #236]	; (b4a44 <_Z9drawBoardv+0xf0>)
   b4958:	4620      	mov	r0, r4
  //left edge
  display.drawLine(6,6,6,57,WHITE);
   b495a:	2501      	movs	r5, #1
   b495c:	2639      	movs	r6, #57	; 0x39
  display.clearDisplay();
   b495e:	f000 fbfd 	bl	b515c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.drawLine(6,6,6,57,WHITE);
   b4962:	2306      	movs	r3, #6
   b4964:	e9cd 6500 	strd	r6, r5, [sp]
   b4968:	461a      	mov	r2, r3
   b496a:	4619      	mov	r1, r3
   b496c:	4620      	mov	r0, r4
   b496e:	f000 fdb5 	bl	b54dc <_ZN12Adafruit_GFX8drawLineEsssst>
  //right edge
  display.drawLine(57,6,57,57,WHITE);
   b4972:	e9cd 6500 	strd	r6, r5, [sp]
   b4976:	4633      	mov	r3, r6
   b4978:	4631      	mov	r1, r6
   b497a:	4620      	mov	r0, r4
   b497c:	2206      	movs	r2, #6
   b497e:	f000 fdad 	bl	b54dc <_ZN12Adafruit_GFX8drawLineEsssst>
  //top edge
  display.drawLine(6,6,57,6,WHITE);
   b4982:	2106      	movs	r1, #6
   b4984:	9100      	str	r1, [sp, #0]
   b4986:	4633      	mov	r3, r6
   b4988:	460a      	mov	r2, r1
   b498a:	4620      	mov	r0, r4
   b498c:	9501      	str	r5, [sp, #4]
   b498e:	f000 fda5 	bl	b54dc <_ZN12Adafruit_GFX8drawLineEsssst>
  //bottom edge
  display.drawLine(6,57,57,57,WHITE);
   b4992:	e9cd 6500 	strd	r6, r5, [sp]
   b4996:	4633      	mov	r3, r6
   b4998:	4632      	mov	r2, r6
   b499a:	4620      	mov	r0, r4
  //white squares
  display.fillRect(24,7,16,16,WHITE);
   b499c:	2610      	movs	r6, #16
  display.drawLine(6,57,57,57,WHITE);
   b499e:	2106      	movs	r1, #6
   b49a0:	f000 fd9c 	bl	b54dc <_ZN12Adafruit_GFX8drawLineEsssst>
  display.fillRect(24,7,16,16,WHITE);
   b49a4:	4633      	mov	r3, r6
   b49a6:	4620      	mov	r0, r4
   b49a8:	9501      	str	r5, [sp, #4]
   b49aa:	9600      	str	r6, [sp, #0]
   b49ac:	2207      	movs	r2, #7
   b49ae:	2118      	movs	r1, #24
   b49b0:	f000 fe42 	bl	b5638 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(7,24,16,16,WHITE);
   b49b4:	4633      	mov	r3, r6
   b49b6:	4620      	mov	r0, r4
   b49b8:	e9cd 6500 	strd	r6, r5, [sp]
   b49bc:	2218      	movs	r2, #24
   b49be:	2107      	movs	r1, #7
   b49c0:	f000 fe3a 	bl	b5638 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(41,24,16,16,WHITE);
   b49c4:	4633      	mov	r3, r6
   b49c6:	4620      	mov	r0, r4
   b49c8:	e9cd 6500 	strd	r6, r5, [sp]
   b49cc:	2218      	movs	r2, #24
   b49ce:	2129      	movs	r1, #41	; 0x29
   b49d0:	f000 fe32 	bl	b5638 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(24,41,16,16,WHITE);
   b49d4:	4633      	mov	r3, r6
   b49d6:	2229      	movs	r2, #41	; 0x29
   b49d8:	4620      	mov	r0, r4
   b49da:	e9cd 6500 	strd	r6, r5, [sp]
   b49de:	2118      	movs	r1, #24
   b49e0:	f000 fe2a 	bl	b5638 <_ZN12Adafruit_GFX8fillRectEsssst>
  //text and symbols
  display.setTextColor(WHITE);
   b49e4:	4629      	mov	r1, r5
   b49e6:	4620      	mov	r0, r4
   b49e8:	f001 f8c0 	bl	b5b6c <_ZN12Adafruit_GFX12setTextColorEt>
  display.setTextSize(1);
   b49ec:	4629      	mov	r1, r5
   b49ee:	4620      	mov	r0, r4
   b49f0:	f001 f8b7 	bl	b5b62 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(68,16);
   b49f4:	4632      	mov	r2, r6
   b49f6:	4620      	mov	r0, r4
   b49f8:	2144      	movs	r1, #68	; 0x44
   b49fa:	f001 f8af 	bl	b5b5c <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("red  = ");
   b49fe:	4912      	ldr	r1, [pc, #72]	; (b4a48 <_Z9drawBoardv+0xf4>)
   b4a00:	4620      	mov	r0, r4
   b4a02:	f7ff fb74 	bl	b40ee <_ZN5Print6printfEPKcz>
  display.setCursor(68,43);
   b4a06:	222b      	movs	r2, #43	; 0x2b
   b4a08:	4620      	mov	r0, r4
   b4a0a:	2144      	movs	r1, #68	; 0x44
   b4a0c:	f001 f8a6 	bl	b5b5c <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("blue = ");
   b4a10:	490e      	ldr	r1, [pc, #56]	; (b4a4c <_Z9drawBoardv+0xf8>)
   b4a12:	4620      	mov	r0, r4
   b4a14:	f7ff fb6b 	bl	b40ee <_ZN5Print6printfEPKcz>
  display.fillCircle(118,18,4,WHITE);
   b4a18:	4620      	mov	r0, r4
   b4a1a:	9500      	str	r5, [sp, #0]
   b4a1c:	2304      	movs	r3, #4
   b4a1e:	2212      	movs	r2, #18
   b4a20:	2176      	movs	r1, #118	; 0x76
   b4a22:	f000 fee0 	bl	b57e6 <_ZN12Adafruit_GFX10fillCircleEssst>
  display.fillTriangle(118,41,114,49,122,49,WHITE);
   b4a26:	2331      	movs	r3, #49	; 0x31
   b4a28:	227a      	movs	r2, #122	; 0x7a
   b4a2a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   b4a2e:	9300      	str	r3, [sp, #0]
   b4a30:	9503      	str	r5, [sp, #12]
   b4a32:	2372      	movs	r3, #114	; 0x72
   b4a34:	2229      	movs	r2, #41	; 0x29
   b4a36:	2176      	movs	r1, #118	; 0x76
   b4a38:	4620      	mov	r0, r4
   b4a3a:	f000 fefa 	bl	b5832 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
}
   b4a3e:	b004      	add	sp, #16
   b4a40:	bd70      	pop	{r4, r5, r6, pc}
   b4a42:	bf00      	nop
   b4a44:	2003e638 	.word	0x2003e638
   b4a48:	000b8b3b 	.word	0x000b8b3b
   b4a4c:	000b8b43 	.word	0x000b8b43

000b4a50 <_Z10drawPiecesv>:
//reads the nominal array and puts a circle or triangle in the correct square
void drawPieces () {
   b4a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  //ensures the color swaps between black and white with every square
  bool whiteBlack;
  for (j=0;j<3;j++) {
   b4a54:	4e3f      	ldr	r6, [pc, #252]	; (b4b54 <_Z10drawPiecesv+0x104>)
    k = 0;
    for (i=0;i<3;i++) {
      whiteBlack = !whiteBlack;
      //checks if there is a red piece in the nominal read array and puts it in the correct square
      if (nominalRead [i][j] == 1) {
   b4a56:	f8df 8114 	ldr.w	r8, [pc, #276]	; b4b6c <_Z10drawPiecesv+0x11c>
void drawPieces () {
   b4a5a:	2700      	movs	r7, #0
   b4a5c:	b085      	sub	sp, #20
  for (j=0;j<3;j++) {
   b4a5e:	6037      	str	r7, [r6, #0]
    k = 0;
   b4a60:	4d3d      	ldr	r5, [pc, #244]	; (b4b58 <_Z10drawPiecesv+0x108>)
    for (i=0;i<3;i++) {
   b4a62:	4c3e      	ldr	r4, [pc, #248]	; (b4b5c <_Z10drawPiecesv+0x10c>)
        display.fillCircle(piecePos[j][k],piecePos[j][k+1],4,whiteBlack);
   b4a64:	f8df 9108 	ldr.w	r9, [pc, #264]	; b4b70 <_Z10drawPiecesv+0x120>
    k = 0;
   b4a68:	2300      	movs	r3, #0
   b4a6a:	602b      	str	r3, [r5, #0]
    for (i=0;i<3;i++) {
   b4a6c:	6023      	str	r3, [r4, #0]
   b4a6e:	6822      	ldr	r2, [r4, #0]
      if (nominalRead [i][j] == 1) {
   b4a70:	6833      	ldr	r3, [r6, #0]
    for (i=0;i<3;i++) {
   b4a72:	2a02      	cmp	r2, #2
   b4a74:	dc66      	bgt.n	b4b44 <_Z10drawPiecesv+0xf4>
      if (nominalRead [i][j] == 1) {
   b4a76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b4a7a:	441a      	add	r2, r3
   b4a7c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   b4a80:	ed92 7a00 	vldr	s14, [r2]
   b4a84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b4a88:	eeb4 7a67 	vcmp.f32	s14, s15
   b4a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      whiteBlack = !whiteBlack;
   b4a90:	f087 0701 	eor.w	r7, r7, #1
      if (nominalRead [i][j] == 1) {
   b4a94:	d114      	bne.n	b4ac0 <_Z10drawPiecesv+0x70>
        display.fillCircle(piecePos[j][k],piecePos[j][k+1],4,whiteBlack);
   b4a96:	6829      	ldr	r1, [r5, #0]
   b4a98:	4831      	ldr	r0, [pc, #196]	; (b4b60 <_Z10drawPiecesv+0x110>)
   b4a9a:	2206      	movs	r2, #6
   b4a9c:	4353      	muls	r3, r2
   b4a9e:	1c4a      	adds	r2, r1, #1
   b4aa0:	441a      	add	r2, r3
   b4aa2:	4419      	add	r1, r3
   b4aa4:	b2bb      	uxth	r3, r7
   b4aa6:	f939 1021 	ldrsh.w	r1, [r9, r1, lsl #2]
   b4aaa:	f939 2022 	ldrsh.w	r2, [r9, r2, lsl #2]
   b4aae:	9300      	str	r3, [sp, #0]
   b4ab0:	2304      	movs	r3, #4
   b4ab2:	f000 fe98 	bl	b57e6 <_ZN12Adafruit_GFX10fillCircleEssst>
        Serial.printf(" piece found");
   b4ab6:	f002 fa4d 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4aba:	492a      	ldr	r1, [pc, #168]	; (b4b64 <_Z10drawPiecesv+0x114>)
   b4abc:	f7ff fb17 	bl	b40ee <_ZN5Print6printfEPKcz>
      }
      //checks if there is a blue piece in the nominal read array and puts it in the correct square
      if (nominalRead [i][j] == 2) {
   b4ac0:	6823      	ldr	r3, [r4, #0]
   b4ac2:	6832      	ldr	r2, [r6, #0]
   b4ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4ac8:	4413      	add	r3, r2
   b4aca:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   b4ace:	ed93 7a00 	vldr	s14, [r3]
   b4ad2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b4ad6:	eeb4 7a67 	vcmp.f32	s14, s15
   b4ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ade:	d121      	bne.n	b4b24 <_Z10drawPiecesv+0xd4>
        display.fillTriangle(piecePos[j][k],piecePos[j][k+1]-4,piecePos[j][k]-4,piecePos[j][k+1]+4,piecePos[j][k]+4,piecePos[j][k+1]+4,whiteBlack);
   b4ae0:	6828      	ldr	r0, [r5, #0]
   b4ae2:	2306      	movs	r3, #6
   b4ae4:	4353      	muls	r3, r2
   b4ae6:	181a      	adds	r2, r3, r0
   b4ae8:	3001      	adds	r0, #1
   b4aea:	4403      	add	r3, r0
   b4aec:	f859 1022 	ldr.w	r1, [r9, r2, lsl #2]
   b4af0:	f839 2023 	ldrh.w	r2, [r9, r3, lsl #2]
   b4af4:	b288      	uxth	r0, r1
   b4af6:	f1a0 0c04 	sub.w	ip, r0, #4
   b4afa:	1d13      	adds	r3, r2, #4
   b4afc:	3004      	adds	r0, #4
   b4afe:	b21b      	sxth	r3, r3
   b4b00:	b200      	sxth	r0, r0
   b4b02:	3a04      	subs	r2, #4
   b4b04:	e9cd 3000 	strd	r3, r0, [sp]
   b4b08:	b209      	sxth	r1, r1
   b4b0a:	e9cd 3702 	strd	r3, r7, [sp, #8]
   b4b0e:	4814      	ldr	r0, [pc, #80]	; (b4b60 <_Z10drawPiecesv+0x110>)
   b4b10:	fa0f f38c 	sxth.w	r3, ip
   b4b14:	b212      	sxth	r2, r2
   b4b16:	f000 fe8c 	bl	b5832 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
        Serial.printf(" piece found");
   b4b1a:	f002 fa1b 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4b1e:	4911      	ldr	r1, [pc, #68]	; (b4b64 <_Z10drawPiecesv+0x114>)
   b4b20:	f7ff fae5 	bl	b40ee <_ZN5Print6printfEPKcz>
      }
      Serial.printf("\nk = %i i = %i j = %i",k,i,j);
   b4b24:	f002 fa16 	bl	b6f54 <_Z16_fetch_usbserialv>
   b4b28:	6833      	ldr	r3, [r6, #0]
   b4b2a:	9300      	str	r3, [sp, #0]
   b4b2c:	682a      	ldr	r2, [r5, #0]
   b4b2e:	6823      	ldr	r3, [r4, #0]
   b4b30:	490d      	ldr	r1, [pc, #52]	; (b4b68 <_Z10drawPiecesv+0x118>)
   b4b32:	f7ff fadc 	bl	b40ee <_ZN5Print6printfEPKcz>
      //k increase keeps x and y cordinates seperated in the array
      k+=2;
   b4b36:	682b      	ldr	r3, [r5, #0]
   b4b38:	3302      	adds	r3, #2
   b4b3a:	602b      	str	r3, [r5, #0]
    for (i=0;i<3;i++) {
   b4b3c:	6823      	ldr	r3, [r4, #0]
   b4b3e:	3301      	adds	r3, #1
   b4b40:	6023      	str	r3, [r4, #0]
   b4b42:	e794      	b.n	b4a6e <_Z10drawPiecesv+0x1e>
  for (j=0;j<3;j++) {
   b4b44:	3301      	adds	r3, #1
   b4b46:	2b02      	cmp	r3, #2
   b4b48:	6033      	str	r3, [r6, #0]
   b4b4a:	dd89      	ble.n	b4a60 <_Z10drawPiecesv+0x10>
    }
  }
}
   b4b4c:	b005      	add	sp, #20
   b4b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4b52:	bf00      	nop
   b4b54:	2003e670 	.word	0x2003e670
   b4b58:	2003e674 	.word	0x2003e674
   b4b5c:	2003e66c 	.word	0x2003e66c
   b4b60:	2003e638 	.word	0x2003e638
   b4b64:	000b8b4b 	.word	0x000b8b4b
   b4b68:	000b8b58 	.word	0x000b8b58
   b4b6c:	2003e68c 	.word	0x2003e68c
   b4b70:	2003e0ac 	.word	0x2003e0ac

000b4b74 <_Z9pixelFilliii>:
//takes a start and end position and runs through a for loop until all pixels are on
void pixelFill(int start, int end,int color) {
   b4b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int neopixNum;
  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
    neopix.setPixelColor(neopixNum, color);
   b4b76:	4e08      	ldr	r6, [pc, #32]	; (b4b98 <_Z9pixelFilliii+0x24>)
void pixelFill(int start, int end,int color) {
   b4b78:	4604      	mov	r4, r0
   b4b7a:	460d      	mov	r5, r1
   b4b7c:	4617      	mov	r7, r2
  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
   b4b7e:	42ac      	cmp	r4, r5
   b4b80:	da09      	bge.n	b4b96 <_Z9pixelFilliii+0x22>
    neopix.setPixelColor(neopixNum, color);
   b4b82:	b2a1      	uxth	r1, r4
   b4b84:	463a      	mov	r2, r7
   b4b86:	4630      	mov	r0, r6
   b4b88:	f001 f9f0 	bl	b5f6c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    neopix.show();
   b4b8c:	4630      	mov	r0, r6
   b4b8e:	f001 f841 	bl	b5c14 <_ZN17Adafruit_NeoPixel4showEv>
  for ( neopixNum = start; neopixNum < end; neopixNum ++) {
   b4b92:	3401      	adds	r4, #1
   b4b94:	e7f3      	b.n	b4b7e <_Z9pixelFilliii+0xa>
  } 
   b4b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4b98:	2003e678 	.word	0x2003e678

000b4b9c <loop>:
void loop() {
   b4b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (nominalRead[0][0] == 2 || nominalRead[0][1] == 2 || nominalRead[0][2] == 2) {
   b4b9e:	4d50      	ldr	r5, [pc, #320]	; (b4ce0 <loop+0x144>)
   b4ba0:	4c50      	ldr	r4, [pc, #320]	; (b4ce4 <loop+0x148>)
  checkPiecePos();
   b4ba2:	f7ff fe0b 	bl	b47bc <_Z13checkPiecePosv>
  determineAdvantage();
   b4ba6:	f7ff fd43 	bl	b4630 <_Z18determineAdvantagev>
  drawBoard();
   b4baa:	f7ff fed3 	bl	b4954 <_Z9drawBoardv>
  drawPieces();
   b4bae:	f7ff ff4f 	bl	b4a50 <_Z10drawPiecesv>
  display.display();
   b4bb2:	484d      	ldr	r0, [pc, #308]	; (b4ce8 <loop+0x14c>)
   b4bb4:	f000 fb4a 	bl	b524c <_ZN16Adafruit_SSD13067displayEv>
  if (nominalRead[0][0] == 2 || nominalRead[0][1] == 2 || nominalRead[0][2] == 2) {
   b4bb8:	ed95 7a00 	vldr	s14, [r5]
   b4bbc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b4bc0:	eeb4 7a67 	vcmp.f32	s14, s15
   b4bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bc8:	d00d      	beq.n	b4be6 <loop+0x4a>
   b4bca:	ed95 7a01 	vldr	s14, [r5, #4]
   b4bce:	eeb4 7a67 	vcmp.f32	s14, s15
   b4bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bd6:	d006      	beq.n	b4be6 <loop+0x4a>
   b4bd8:	ed95 7a02 	vldr	s14, [r5, #8]
   b4bdc:	eeb4 7a67 	vcmp.f32	s14, s15
   b4be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4be4:	d11d      	bne.n	b4c22 <loop+0x86>
    for (i=0;i<7;i++) {
   b4be6:	2300      	movs	r3, #0
   b4be8:	6023      	str	r3, [r4, #0]
      setHue(i,true,COLORS[6],255,255);
   b4bea:	26ff      	movs	r6, #255	; 0xff
    for (i=0;i<7;i++) {
   b4bec:	6820      	ldr	r0, [r4, #0]
   b4bee:	2806      	cmp	r0, #6
   b4bf0:	dc0a      	bgt.n	b4c08 <loop+0x6c>
      setHue(i,true,COLORS[6],255,255);
   b4bf2:	23ff      	movs	r3, #255	; 0xff
   b4bf4:	9600      	str	r6, [sp, #0]
   b4bf6:	f24a 72db 	movw	r2, #42971	; 0xa7db
   b4bfa:	2101      	movs	r1, #1
   b4bfc:	f7ff faaa 	bl	b4154 <_Z6setHueibiii>
    for (i=0;i<7;i++) {
   b4c00:	6823      	ldr	r3, [r4, #0]
   b4c02:	3301      	adds	r3, #1
   b4c04:	6023      	str	r3, [r4, #0]
   b4c06:	e7f1      	b.n	b4bec <loop+0x50>
    pixelFill(0,12,NEOCOLORS[6]);
   b4c08:	22ff      	movs	r2, #255	; 0xff
   b4c0a:	210c      	movs	r1, #12
   b4c0c:	2000      	movs	r0, #0
   b4c0e:	f7ff ffb1 	bl	b4b74 <_Z9pixelFilliii>
    switchON(wemo1);
   b4c12:	4b36      	ldr	r3, [pc, #216]	; (b4cec <loop+0x150>)
   b4c14:	6818      	ldr	r0, [r3, #0]
   b4c16:	f7ff fbc3 	bl	b43a0 <_Z8switchONi>
    delay(5000);
   b4c1a:	f241 3088 	movw	r0, #5000	; 0x1388
   b4c1e:	f002 f803 	bl	b6c28 <delay>
  if (nominalRead[2][0] == 1 || nominalRead[2][1] == 1 || nominalRead[2][2] == 1) {
   b4c22:	ed95 7a06 	vldr	s14, [r5, #24]
   b4c26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b4c2a:	eeb4 7a67 	vcmp.f32	s14, s15
   b4c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c32:	d00d      	beq.n	b4c50 <loop+0xb4>
   b4c34:	ed95 7a07 	vldr	s14, [r5, #28]
   b4c38:	eeb4 7a67 	vcmp.f32	s14, s15
   b4c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c40:	d006      	beq.n	b4c50 <loop+0xb4>
   b4c42:	ed95 7a08 	vldr	s14, [r5, #32]
   b4c46:	eeb4 7a67 	vcmp.f32	s14, s15
   b4c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4c4e:	d120      	bne.n	b4c92 <loop+0xf6>
    for (i=0;i<7;i++) {
   b4c50:	2300      	movs	r3, #0
   b4c52:	6023      	str	r3, [r4, #0]
      setHue(i,true,COLORS[0],255,255);
   b4c54:	25ff      	movs	r5, #255	; 0xff
    for (i=0;i<7;i++) {
   b4c56:	6820      	ldr	r0, [r4, #0]
   b4c58:	2806      	cmp	r0, #6
   b4c5a:	dc09      	bgt.n	b4c70 <loop+0xd4>
      setHue(i,true,COLORS[0],255,255);
   b4c5c:	23ff      	movs	r3, #255	; 0xff
   b4c5e:	9500      	str	r5, [sp, #0]
   b4c60:	2200      	movs	r2, #0
   b4c62:	2101      	movs	r1, #1
   b4c64:	f7ff fa76 	bl	b4154 <_Z6setHueibiii>
    for (i=0;i<7;i++) {
   b4c68:	6823      	ldr	r3, [r4, #0]
   b4c6a:	3301      	adds	r3, #1
   b4c6c:	6023      	str	r3, [r4, #0]
   b4c6e:	e7f2      	b.n	b4c56 <loop+0xba>
    pixelFill(0,12,NEOCOLORS[0]);
   b4c70:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
   b4c74:	210c      	movs	r1, #12
   b4c76:	2000      	movs	r0, #0
   b4c78:	f7ff ff7c 	bl	b4b74 <_Z9pixelFilliii>
    switchON(wemo2);
   b4c7c:	4b1c      	ldr	r3, [pc, #112]	; (b4cf0 <loop+0x154>)
   b4c7e:	6818      	ldr	r0, [r3, #0]
   b4c80:	f7ff fb8e 	bl	b43a0 <_Z8switchONi>
    delay(5000);
   b4c84:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b4c88:	b003      	add	sp, #12
   b4c8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    delay(5000);
   b4c8e:	f001 bfcb 	b.w	b6c28 <delay>
    for (i=0;i<7;i++) {
   b4c92:	2300      	movs	r3, #0
   b4c94:	4d17      	ldr	r5, [pc, #92]	; (b4cf4 <loop+0x158>)
      setHue(i,true,COLORS[currentColor],100,255);
   b4c96:	4e18      	ldr	r6, [pc, #96]	; (b4cf8 <loop+0x15c>)
    for (i=0;i<7;i++) {
   b4c98:	6023      	str	r3, [r4, #0]
      setHue(i,true,COLORS[currentColor],100,255);
   b4c9a:	27ff      	movs	r7, #255	; 0xff
    for (i=0;i<7;i++) {
   b4c9c:	6820      	ldr	r0, [r4, #0]
   b4c9e:	2806      	cmp	r0, #6
   b4ca0:	dc0b      	bgt.n	b4cba <loop+0x11e>
      setHue(i,true,COLORS[currentColor],100,255);
   b4ca2:	682a      	ldr	r2, [r5, #0]
   b4ca4:	9700      	str	r7, [sp, #0]
   b4ca6:	2364      	movs	r3, #100	; 0x64
   b4ca8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   b4cac:	2101      	movs	r1, #1
   b4cae:	f7ff fa51 	bl	b4154 <_Z6setHueibiii>
    for (i=0;i<7;i++) {
   b4cb2:	6823      	ldr	r3, [r4, #0]
   b4cb4:	3301      	adds	r3, #1
   b4cb6:	6023      	str	r3, [r4, #0]
   b4cb8:	e7f0      	b.n	b4c9c <loop+0x100>
    switchOFF(wemo1);
   b4cba:	4b0c      	ldr	r3, [pc, #48]	; (b4cec <loop+0x150>)
   b4cbc:	6818      	ldr	r0, [r3, #0]
   b4cbe:	f7ff fbd1 	bl	b4464 <_Z9switchOFFi>
    switchOFF(wemo2);
   b4cc2:	4b0b      	ldr	r3, [pc, #44]	; (b4cf0 <loop+0x154>)
   b4cc4:	6818      	ldr	r0, [r3, #0]
   b4cc6:	f7ff fbcd 	bl	b4464 <_Z9switchOFFi>
    pixelFill(0,12,NEOCOLORS[currentColor]);
   b4cca:	682a      	ldr	r2, [r5, #0]
   b4ccc:	4b0b      	ldr	r3, [pc, #44]	; (b4cfc <loop+0x160>)
   b4cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   b4cd2:	210c      	movs	r1, #12
   b4cd4:	2000      	movs	r0, #0
}
   b4cd6:	b003      	add	sp, #12
   b4cd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    pixelFill(0,12,NEOCOLORS[currentColor]);
   b4cdc:	f7ff bf4a 	b.w	b4b74 <_Z9pixelFilliii>
   b4ce0:	2003e68c 	.word	0x2003e68c
   b4ce4:	2003e66c 	.word	0x2003e66c
   b4ce8:	2003e638 	.word	0x2003e638
   b4cec:	2003e0f4 	.word	0x2003e0f4
   b4cf0:	2003e0f8 	.word	0x2003e0f8
   b4cf4:	2003e630 	.word	0x2003e630
   b4cf8:	000b8bd8 	.word	0x000b8bd8
   b4cfc:	000b8c00 	.word	0x000b8c00

000b4d00 <_GLOBAL__sub_I_SystemMode>:
   b4d00:	b508      	push	{r3, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4d02:	4b1b      	ldr	r3, [pc, #108]	; (b4d70 <_GLOBAL__sub_I_SystemMode+0x70>)
   b4d04:	2200      	movs	r2, #0
   b4d06:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4d0a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4d0e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4d10:	2002      	movs	r0, #2
   b4d12:	f001 fb8d 	bl	b6430 <set_system_mode>
String hueCmd;  // Hue command
   b4d16:	4917      	ldr	r1, [pc, #92]	; (b4d74 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4d18:	4817      	ldr	r0, [pc, #92]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x78>)
   b4d1a:	f001 fe04 	bl	b6926 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4d1e:	4a17      	ldr	r2, [pc, #92]	; (b4d7c <_GLOBAL__sub_I_SystemMode+0x7c>)
   b4d20:	4b17      	ldr	r3, [pc, #92]	; (b4d80 <_GLOBAL__sub_I_SystemMode+0x80>)
   b4d22:	6812      	ldr	r2, [r2, #0]
   b4d24:	601a      	str	r2, [r3, #0]
   b4d26:	4a17      	ldr	r2, [pc, #92]	; (b4d84 <_GLOBAL__sub_I_SystemMode+0x84>)
TCPClient HueClient;
   b4d28:	4817      	ldr	r0, [pc, #92]	; (b4d88 <_GLOBAL__sub_I_SystemMode+0x88>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4d2a:	6812      	ldr	r2, [r2, #0]
   b4d2c:	605a      	str	r2, [r3, #4]
   b4d2e:	4a17      	ldr	r2, [pc, #92]	; (b4d8c <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4d30:	6812      	ldr	r2, [r2, #0]
   b4d32:	609a      	str	r2, [r3, #8]
   b4d34:	4a16      	ldr	r2, [pc, #88]	; (b4d90 <_GLOBAL__sub_I_SystemMode+0x90>)
   b4d36:	6812      	ldr	r2, [r2, #0]
   b4d38:	60da      	str	r2, [r3, #12]
   b4d3a:	4a16      	ldr	r2, [pc, #88]	; (b4d94 <_GLOBAL__sub_I_SystemMode+0x94>)
   b4d3c:	6812      	ldr	r2, [r2, #0]
   b4d3e:	611a      	str	r2, [r3, #16]
   b4d40:	4a15      	ldr	r2, [pc, #84]	; (b4d98 <_GLOBAL__sub_I_SystemMode+0x98>)
   b4d42:	6812      	ldr	r2, [r2, #0]
   b4d44:	615a      	str	r2, [r3, #20]
   b4d46:	4a15      	ldr	r2, [pc, #84]	; (b4d9c <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4d48:	6812      	ldr	r2, [r2, #0]
   b4d4a:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4d4c:	f002 fc90 	bl	b7670 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b4d50:	4813      	ldr	r0, [pc, #76]	; (b4da0 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4d52:	f002 fc8d 	bl	b7670 <_ZN9TCPClientC1Ev>
Adafruit_NeoPixel neopix(12,A4,WS2812B);
   b4d56:	2302      	movs	r3, #2
   b4d58:	210c      	movs	r1, #12
   b4d5a:	4812      	ldr	r0, [pc, #72]	; (b4da4 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4d5c:	220f      	movs	r2, #15
   b4d5e:	f000 ff47 	bl	b5bf0 <_ZN17Adafruit_NeoPixelC1Ethh>
   b4d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SSD1306 display(D2);
   b4d66:	4810      	ldr	r0, [pc, #64]	; (b4da8 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4d68:	2102      	movs	r1, #2
   b4d6a:	f000 b9e1 	b.w	b5130 <_ZN16Adafruit_SSD1306C1Ea>
   b4d6e:	bf00      	nop
   b4d70:	2003e5cc 	.word	0x2003e5cc
   b4d74:	000b8990 	.word	0x000b8990
   b4d78:	2003e65c 	.word	0x2003e65c
   b4d7c:	2003e5c8 	.word	0x2003e5c8
   b4d80:	2003e5ac 	.word	0x2003e5ac
   b4d84:	2003e0a0 	.word	0x2003e0a0
   b4d88:	2003e590 	.word	0x2003e590
   b4d8c:	2003e0a8 	.word	0x2003e0a8
   b4d90:	2003e098 	.word	0x2003e098
   b4d94:	2003e094 	.word	0x2003e094
   b4d98:	2003e09c 	.word	0x2003e09c
   b4d9c:	2003e0a4 	.word	0x2003e0a4
   b4da0:	2003e5d8 	.word	0x2003e5d8
   b4da4:	2003e678 	.word	0x2003e678
   b4da8:	2003e638 	.word	0x2003e638

000b4dac <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4dac:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4dae:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4db0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4db4:	2d02      	cmp	r5, #2
   b4db6:	d069      	beq.n	b4e8c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4db8:	2d03      	cmp	r5, #3
   b4dba:	f000 8099 	beq.w	b4ef0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4dbe:	2d01      	cmp	r5, #1
   b4dc0:	d16c      	bne.n	b4e9c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4dc2:	8905      	ldrh	r5, [r0, #8]
   b4dc4:	43d2      	mvns	r2, r2
   b4dc6:	442a      	add	r2, r5
   b4dc8:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4dca:	2a00      	cmp	r2, #0
   b4dcc:	db5d      	blt.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4dce:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4dd2:	4295      	cmp	r5, r2
   b4dd4:	dd59      	ble.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4dd6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4dd8:	bfbe      	ittt	lt
   b4dda:	185b      	addlt	r3, r3, r1
   b4ddc:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4dde:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4de0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4de4:	18cd      	adds	r5, r1, r3
   b4de6:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4de8:	bfc4      	itt	gt
   b4dea:	1a43      	subgt	r3, r0, r1
   b4dec:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4dee:	2b00      	cmp	r3, #0
   b4df0:	dd4b      	ble.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4df2:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4df6:	f8df c120 	ldr.w	ip, [pc, #288]	; b4f18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4dfa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4dfe:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4e02:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4e04:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4e08:	d01a      	beq.n	b4e40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4e0a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4e0e:	4e40      	ldr	r6, [pc, #256]	; (b4f10 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4e10:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4e12:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4e14:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4e16:	bf3f      	itttt	cc
   b4e18:	eba5 0e03 	subcc.w	lr, r5, r3
   b4e1c:	26ff      	movcc	r6, #255	; 0xff
   b4e1e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4e22:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4e24:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4e28:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e2a:	bf0c      	ite	eq
   b4e2c:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4e2e:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4e30:	42ab      	cmp	r3, r5
   b4e32:	f80c 6002 	strb.w	r6, [ip, r2]
   b4e36:	d328      	bcc.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4e38:	3908      	subs	r1, #8
   b4e3a:	440b      	add	r3, r1
   b4e3c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4e3e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4e40:	2b07      	cmp	r3, #7
   b4e42:	d919      	bls.n	b4e78 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4e44:	2c01      	cmp	r4, #1
   b4e46:	f04f 35ff 	mov.w	r5, #4294967295
   b4e4a:	bf18      	it	ne
   b4e4c:	2500      	movne	r5, #0
   b4e4e:	b2ed      	uxtb	r5, r5
   b4e50:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4e54:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4e56:	3a08      	subs	r2, #8
   b4e58:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4e5a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4e5c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4e60:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4e64:	d8f7      	bhi.n	b4e56 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4e66:	f1a3 0208 	sub.w	r2, r3, #8
   b4e6a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4e6e:	3201      	adds	r2, #1
   b4e70:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4e74:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4e78:	b13b      	cbz	r3, b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4e7a:	4a26      	ldr	r2, [pc, #152]	; (b4f14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4e7c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4e7e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4e80:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e82:	bf0c      	ite	eq
   b4e84:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4e86:	4393      	bicne	r3, r2
   b4e88:	7003      	strb	r3, [r0, #0]
}
   b4e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4e8c:	8945      	ldrh	r5, [r0, #10]
   b4e8e:	43d2      	mvns	r2, r2
   b4e90:	442a      	add	r2, r5
      x -= (w-1);
   b4e92:	18cd      	adds	r5, r1, r3
   b4e94:	8901      	ldrh	r1, [r0, #8]
   b4e96:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4e98:	b212      	sxth	r2, r2
      x -= (w-1);
   b4e9a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4e9c:	2a00      	cmp	r2, #0
   b4e9e:	dbf4      	blt.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4ea0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4ea4:	4295      	cmp	r5, r2
   b4ea6:	ddf0      	ble.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4ea8:	2900      	cmp	r1, #0
    w += x;
   b4eaa:	bfbe      	ittt	lt
   b4eac:	185b      	addlt	r3, r3, r1
   b4eae:	b21b      	sxthlt	r3, r3
    x = 0;
   b4eb0:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4eb2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4eb6:	18ce      	adds	r6, r1, r3
   b4eb8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4eba:	bfc4      	itt	gt
   b4ebc:	1a6b      	subgt	r3, r5, r1
   b4ebe:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4ec0:	2b00      	cmp	r3, #0
   b4ec2:	dde2      	ble.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4ec4:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4ec6:	2580      	movs	r5, #128	; 0x80
   b4ec8:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4ecc:	4812      	ldr	r0, [pc, #72]	; (b4f18 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4ece:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4ed0:	f002 0007 	and.w	r0, r2, #7
   b4ed4:	2201      	movs	r2, #1
   b4ed6:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4ed8:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4eda:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4edc:	440b      	add	r3, r1
   b4ede:	d10c      	bne.n	b4efa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4ee0:	428b      	cmp	r3, r1
   b4ee2:	d0d2      	beq.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4ee4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4ee8:	4310      	orrs	r0, r2
   b4eea:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4eee:	e7f7      	b.n	b4ee0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4ef0:	18cd      	adds	r5, r1, r3
   b4ef2:	8941      	ldrh	r1, [r0, #10]
   b4ef4:	1b49      	subs	r1, r1, r5
   b4ef6:	b209      	sxth	r1, r1
      break;
   b4ef8:	e767      	b.n	b4dca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4efa:	43d2      	mvns	r2, r2
   b4efc:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4efe:	428b      	cmp	r3, r1
   b4f00:	d0c3      	beq.n	b4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4f02:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4f06:	4010      	ands	r0, r2
   b4f08:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4f0c:	e7f7      	b.n	b4efe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4f0e:	bf00      	nop
   b4f10:	2003e11c 	.word	0x2003e11c
   b4f14:	2003e114 	.word	0x2003e114
   b4f18:	2003e124 	.word	0x2003e124

000b4f1c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4f1e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4f20:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4f24:	2d02      	cmp	r5, #2
   b4f26:	d034      	beq.n	b4f92 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4f28:	2d03      	cmp	r5, #3
   b4f2a:	f000 809b 	beq.w	b5064 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4f2e:	2d01      	cmp	r5, #1
   b4f30:	d137      	bne.n	b4fa2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4f32:	18d5      	adds	r5, r2, r3
   b4f34:	8902      	ldrh	r2, [r0, #8]
   b4f36:	1b52      	subs	r2, r2, r5
   b4f38:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4f3a:	2900      	cmp	r1, #0
   b4f3c:	f2c0 8091 	blt.w	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f40:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4f44:	428d      	cmp	r5, r1
   b4f46:	f340 808c 	ble.w	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4f4a:	2a00      	cmp	r2, #0
    w += x;
   b4f4c:	bfbe      	ittt	lt
   b4f4e:	189b      	addlt	r3, r3, r2
   b4f50:	b21b      	sxthlt	r3, r3
    x = 0;
   b4f52:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4f54:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4f58:	18d6      	adds	r6, r2, r3
   b4f5a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4f5c:	bfc4      	itt	gt
   b4f5e:	1aab      	subgt	r3, r5, r2
   b4f60:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4f62:	2b00      	cmp	r3, #0
   b4f64:	dd7d      	ble.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4f66:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4f68:	2580      	movs	r5, #128	; 0x80
   b4f6a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4f6e:	4845      	ldr	r0, [pc, #276]	; (b5084 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4f70:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4f72:	f001 0007 	and.w	r0, r1, #7
   b4f76:	2101      	movs	r1, #1
   b4f78:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4f7a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4f7c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4f7e:	4413      	add	r3, r2
   b4f80:	d175      	bne.n	b506e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4f82:	429a      	cmp	r2, r3
   b4f84:	d06d      	beq.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4f86:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4f8a:	4308      	orrs	r0, r1
   b4f8c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4f90:	e7f7      	b.n	b4f82 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4f92:	8905      	ldrh	r5, [r0, #8]
   b4f94:	43c9      	mvns	r1, r1
   b4f96:	4429      	add	r1, r5
      y -= (h-1);
   b4f98:	18d5      	adds	r5, r2, r3
   b4f9a:	8942      	ldrh	r2, [r0, #10]
   b4f9c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4f9e:	b209      	sxth	r1, r1
      y -= (h-1);
   b4fa0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4fa2:	2900      	cmp	r1, #0
   b4fa4:	db5d      	blt.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4fa6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4faa:	428d      	cmp	r5, r1
   b4fac:	dd59      	ble.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4fae:	2a00      	cmp	r2, #0
    __h += __y;
   b4fb0:	bfbe      	ittt	lt
   b4fb2:	189b      	addlt	r3, r3, r2
   b4fb4:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4fb6:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4fb8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4fbc:	18d5      	adds	r5, r2, r3
   b4fbe:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4fc0:	bfc4      	itt	gt
   b4fc2:	1a83      	subgt	r3, r0, r2
   b4fc4:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4fc6:	2b00      	cmp	r3, #0
   b4fc8:	dd4b      	ble.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4fca:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4fce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5084 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4fd2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4fd6:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4fda:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4fdc:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4fe0:	d01a      	beq.n	b5018 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4fe2:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4fe6:	4e28      	ldr	r6, [pc, #160]	; (b5088 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4fe8:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4fea:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4fec:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4fee:	bf3f      	itttt	cc
   b4ff0:	eba5 0e03 	subcc.w	lr, r5, r3
   b4ff4:	26ff      	movcc	r6, #255	; 0xff
   b4ff6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4ffa:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4ffc:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5000:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5002:	bf0c      	ite	eq
   b5004:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5006:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5008:	42ab      	cmp	r3, r5
   b500a:	f80c 6001 	strb.w	r6, [ip, r1]
   b500e:	d328      	bcc.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5010:	3a08      	subs	r2, #8
   b5012:	4413      	add	r3, r2
   b5014:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5016:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5018:	2b07      	cmp	r3, #7
   b501a:	d919      	bls.n	b5050 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b501c:	2c01      	cmp	r4, #1
   b501e:	f04f 35ff 	mov.w	r5, #4294967295
   b5022:	bf18      	it	ne
   b5024:	2500      	movne	r5, #0
   b5026:	b2ed      	uxtb	r5, r5
   b5028:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b502c:	461a      	mov	r2, r3
      h -= 8;
   b502e:	3a08      	subs	r2, #8
   b5030:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5032:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5034:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5038:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b503c:	d8f7      	bhi.n	b502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b503e:	f1a3 0208 	sub.w	r2, r3, #8
   b5042:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5046:	3201      	adds	r2, #1
   b5048:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b504c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5050:	b13b      	cbz	r3, b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5052:	4a0e      	ldr	r2, [pc, #56]	; (b508c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5054:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5056:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5058:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b505a:	bf0c      	ite	eq
   b505c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b505e:	4393      	bicne	r3, r2
   b5060:	7003      	strb	r3, [r0, #0]
}
   b5062:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5064:	8945      	ldrh	r5, [r0, #10]
   b5066:	43c9      	mvns	r1, r1
   b5068:	4429      	add	r1, r5
   b506a:	b209      	sxth	r1, r1
      break;
   b506c:	e765      	b.n	b4f3a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b506e:	43c9      	mvns	r1, r1
   b5070:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5072:	429a      	cmp	r2, r3
   b5074:	d0f5      	beq.n	b5062 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5076:	f812 0b01 	ldrb.w	r0, [r2], #1
   b507a:	4008      	ands	r0, r1
   b507c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5080:	e7f7      	b.n	b5072 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5082:	bf00      	nop
   b5084:	2003e124 	.word	0x2003e124
   b5088:	2003e11c 	.word	0x2003e11c
   b508c:	2003e114 	.word	0x2003e114

000b5090 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5090:	4770      	bx	lr
	...

000b5094 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5096:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5098:	4606      	mov	r6, r0
   b509a:	4614      	mov	r4, r2
   b509c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b509e:	db2d      	blt.n	b50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b50a0:	f000 fd69 	bl	b5b76 <_ZN12Adafruit_GFX5widthEv>
   b50a4:	42a8      	cmp	r0, r5
   b50a6:	dd29      	ble.n	b50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b50a8:	2c00      	cmp	r4, #0
   b50aa:	db27      	blt.n	b50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b50ac:	4630      	mov	r0, r6
   b50ae:	f000 fd65 	bl	b5b7c <_ZN12Adafruit_GFX6heightEv>
   b50b2:	42a0      	cmp	r0, r4
   b50b4:	dd22      	ble.n	b50fc <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b50b6:	4630      	mov	r0, r6
   b50b8:	f000 fd5b 	bl	b5b72 <_ZN12Adafruit_GFX11getRotationEv>
   b50bc:	2802      	cmp	r0, #2
   b50be:	d01e      	beq.n	b50fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b50c0:	2803      	cmp	r0, #3
   b50c2:	d025      	beq.n	b5110 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b50c4:	2801      	cmp	r0, #1
   b50c6:	d104      	bne.n	b50d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b50c8:	8933      	ldrh	r3, [r6, #8]
   b50ca:	43e2      	mvns	r2, r4
   b50cc:	441a      	add	r2, r3
    break;
   b50ce:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b50d0:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b50d2:	2c00      	cmp	r4, #0
   b50d4:	4622      	mov	r2, r4
   b50d6:	bfb8      	it	lt
   b50d8:	1de2      	addlt	r2, r4, #7
   b50da:	10d2      	asrs	r2, r2, #3
   b50dc:	2180      	movs	r1, #128	; 0x80
   b50de:	fb12 5501 	smlabb	r5, r2, r1, r5
   b50e2:	490e      	ldr	r1, [pc, #56]	; (b511c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b50e4:	2201      	movs	r2, #1
   b50e6:	f004 0407 	and.w	r4, r4, #7
   b50ea:	574b      	ldrsb	r3, [r1, r5]
   b50ec:	fa02 f404 	lsl.w	r4, r2, r4
   b50f0:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b50f2:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b50f4:	bf0c      	ite	eq
   b50f6:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b50f8:	43a3      	bicne	r3, r4
   b50fa:	554b      	strb	r3, [r1, r5]
}
   b50fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b50fe:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5100:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5102:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5104:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5106:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5108:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b510a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b510c:	b224      	sxth	r4, r4
    break;
   b510e:	e7e0      	b.n	b50d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5110:	8973      	ldrh	r3, [r6, #10]
   b5112:	3b01      	subs	r3, #1
   b5114:	1b5b      	subs	r3, r3, r5
    break;
   b5116:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5118:	b21c      	sxth	r4, r3
    break;
   b511a:	e7da      	b.n	b50d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b511c:	2003e124 	.word	0x2003e124

000b5120 <_ZN16Adafruit_SSD1306D0Ev>:
   b5120:	b510      	push	{r4, lr}
   b5122:	2124      	movs	r1, #36	; 0x24
   b5124:	4604      	mov	r4, r0
   b5126:	f7fe ffb8 	bl	b409a <_ZdlPvj>
   b512a:	4620      	mov	r0, r4
   b512c:	bd10      	pop	{r4, pc}
	...

000b5130 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5130:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5132:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5134:	4604      	mov	r4, r0
   b5136:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5138:	2180      	movs	r1, #128	; 0x80
   b513a:	f000 faa7 	bl	b568c <_ZN12Adafruit_GFXC1Ess>
   b513e:	4b06      	ldr	r3, [pc, #24]	; (b5158 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5140:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5142:	23ff      	movs	r3, #255	; 0xff
   b5144:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5148:	7763      	strb	r3, [r4, #29]
   b514a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b514e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5150:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5154:	4620      	mov	r0, r4
   b5156:	bd38      	pop	{r3, r4, r5, pc}
   b5158:	000b8c24 	.word	0x000b8c24

000b515c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b515c:	4802      	ldr	r0, [pc, #8]	; (b5168 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b515e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5162:	2100      	movs	r1, #0
   b5164:	f003 b9ee 	b.w	b8544 <memset>
   b5168:	2003e124 	.word	0x2003e124

000b516c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b516c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b516e:	4c0b      	ldr	r4, [pc, #44]	; (b519c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5170:	7821      	ldrb	r1, [r4, #0]
   b5172:	f3bf 8f5b 	dmb	ish
   b5176:	f011 0101 	ands.w	r1, r1, #1
   b517a:	d10b      	bne.n	b5194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b517c:	4620      	mov	r0, r4
   b517e:	9101      	str	r1, [sp, #4]
   b5180:	f7fe ff9a 	bl	b40b8 <__cxa_guard_acquire>
   b5184:	9901      	ldr	r1, [sp, #4]
   b5186:	b128      	cbz	r0, b5194 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5188:	4805      	ldr	r0, [pc, #20]	; (b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b518a:	f001 fa69 	bl	b6660 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b518e:	4620      	mov	r0, r4
   b5190:	f7fe ff97 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b5194:	4802      	ldr	r0, [pc, #8]	; (b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5196:	b002      	add	sp, #8
   b5198:	bd10      	pop	{r4, pc}
   b519a:	bf00      	nop
   b519c:	2003e6b4 	.word	0x2003e6b4
   b51a0:	2003e6b8 	.word	0x2003e6b8

000b51a4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b51a4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b51a6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b51aa:	b143      	cbz	r3, b51be <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b51ac:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b51ae:	f7ff ffdd 	bl	b516c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51b2:	9901      	ldr	r1, [sp, #4]
}
   b51b4:	b003      	add	sp, #12
   b51b6:	f85d eb04 	ldr.w	lr, [sp], #4
   b51ba:	f001 bb05 	b.w	b67c8 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b51be:	460b      	mov	r3, r1
   b51c0:	7f81      	ldrb	r1, [r0, #30]
   b51c2:	7f40      	ldrb	r0, [r0, #29]
   b51c4:	2201      	movs	r2, #1
}
   b51c6:	b003      	add	sp, #12
   b51c8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b51cc:	f002 bbd3 	b.w	b7976 <shiftOut>

000b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b51d0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b51d2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b51d6:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b51d8:	4604      	mov	r4, r0
   b51da:	460d      	mov	r5, r1
  if (sid != -1)
   b51dc:	d01d      	beq.n	b521a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b51de:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b51e2:	2101      	movs	r1, #1
   b51e4:	b280      	uxth	r0, r0
   b51e6:	f002 fb96 	bl	b7916 <digitalWrite>
    digitalWrite(dc, LOW);
   b51ea:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b51ee:	2100      	movs	r1, #0
   b51f0:	b280      	uxth	r0, r0
   b51f2:	f002 fb90 	bl	b7916 <digitalWrite>
    digitalWrite(cs, LOW);
   b51f6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b51fa:	2100      	movs	r1, #0
   b51fc:	b280      	uxth	r0, r0
   b51fe:	f002 fb8a 	bl	b7916 <digitalWrite>
    fastSPIwrite(c);
   b5202:	4629      	mov	r1, r5
   b5204:	4620      	mov	r0, r4
   b5206:	f7ff ffcd 	bl	b51a4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b520a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b520e:	2101      	movs	r1, #1
}
   b5210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5214:	b280      	uxth	r0, r0
   b5216:	f002 bb7e 	b.w	b7916 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b521a:	f002 fc29 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b521e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5222:	f001 ff63 	bl	b70ec <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5226:	f002 fc23 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b522a:	6803      	ldr	r3, [r0, #0]
   b522c:	2100      	movs	r1, #0
   b522e:	689b      	ldr	r3, [r3, #8]
   b5230:	4798      	blx	r3
    Wire.write(c);
   b5232:	f002 fc1d 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b5236:	6803      	ldr	r3, [r0, #0]
   b5238:	4629      	mov	r1, r5
   b523a:	689b      	ldr	r3, [r3, #8]
   b523c:	4798      	blx	r3
    Wire.endTransmission();
   b523e:	f002 fc17 	bl	b7a70 <_Z19__fetch_global_Wirev>
}
   b5242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5246:	f001 bf58 	b.w	b70fa <_ZN7TwoWire15endTransmissionEv>
	...

000b524c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b524e:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5250:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5252:	f7ff ffbd 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5256:	2100      	movs	r1, #0
   b5258:	4620      	mov	r0, r4
   b525a:	f7ff ffb9 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b525e:	217f      	movs	r1, #127	; 0x7f
   b5260:	4620      	mov	r0, r4
   b5262:	f7ff ffb5 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5266:	2122      	movs	r1, #34	; 0x22
   b5268:	4620      	mov	r0, r4
   b526a:	f7ff ffb1 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b526e:	2100      	movs	r1, #0
   b5270:	4620      	mov	r0, r4
   b5272:	f7ff ffad 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5276:	2107      	movs	r1, #7
   b5278:	4620      	mov	r0, r4
   b527a:	f7ff ffa9 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b527e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5282:	4f29      	ldr	r7, [pc, #164]	; (b5328 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5284:	3301      	adds	r3, #1
   b5286:	d02a      	beq.n	b52de <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5288:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b528c:	2101      	movs	r1, #1
   b528e:	b280      	uxth	r0, r0
   b5290:	f002 fb41 	bl	b7916 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5294:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5298:	2101      	movs	r1, #1
   b529a:	b280      	uxth	r0, r0
   b529c:	f002 fb3b 	bl	b7916 <digitalWrite>
    digitalWrite(cs, LOW);
   b52a0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b52a4:	2100      	movs	r1, #0
   b52a6:	b280      	uxth	r0, r0
   b52a8:	f002 fb35 	bl	b7916 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b52ac:	2001      	movs	r0, #1
   b52ae:	f000 ff1f 	bl	b60f0 <HAL_Delay_Microseconds>
   b52b2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b52b6:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b52b8:	f817 1b01 	ldrb.w	r1, [r7], #1
   b52bc:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b52be:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b52c0:	f7ff ff70 	bl	b51a4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b52c4:	2d00      	cmp	r5, #0
   b52c6:	d1f6      	bne.n	b52b6 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b52c8:	2001      	movs	r0, #1
   b52ca:	f000 ff11 	bl	b60f0 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b52ce:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b52d2:	2101      	movs	r1, #1
}
   b52d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b52d8:	b280      	uxth	r0, r0
   b52da:	f002 bb1c 	b.w	b7916 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b52de:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b52e0:	f002 fbc6 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b52e4:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b52e8:	f001 ff00 	bl	b70ec <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b52ec:	f002 fbc0 	bl	b7a70 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b52f0:	6803      	ldr	r3, [r0, #0]
   b52f2:	2140      	movs	r1, #64	; 0x40
   b52f4:	689b      	ldr	r3, [r3, #8]
   b52f6:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b52f8:	f105 0610 	add.w	r6, r5, #16
   b52fc:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b52fe:	f002 fbb7 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b5302:	6803      	ldr	r3, [r0, #0]
   b5304:	5d79      	ldrb	r1, [r7, r5]
   b5306:	689b      	ldr	r3, [r3, #8]
   b5308:	4798      	blx	r3
		i++;
   b530a:	1c6b      	adds	r3, r5, #1
   b530c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b530e:	42ae      	cmp	r6, r5
   b5310:	d1f5      	bne.n	b52fe <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5312:	f002 fbad 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b5316:	f001 fef0 	bl	b70fa <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b531a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b531e:	d100      	bne.n	b5322 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b5320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5322:	4635      	mov	r5, r6
   b5324:	e7dc      	b.n	b52e0 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b5326:	bf00      	nop
   b5328:	2003e124 	.word	0x2003e124

000b532c <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b532c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b532e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5332:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5334:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5336:	4604      	mov	r4, r0
   b5338:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b533a:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b533c:	f000 80c9 	beq.w	b54d2 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b5340:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5344:	2101      	movs	r1, #1
   b5346:	b280      	uxth	r0, r0
   b5348:	f002 fad4 	bl	b78f4 <pinMode>
    pinMode(cs, OUTPUT);
   b534c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5350:	2101      	movs	r1, #1
   b5352:	b280      	uxth	r0, r0
   b5354:	f002 face 	bl	b78f4 <pinMode>
    if (!hwSPI){
   b5358:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b535c:	2b00      	cmp	r3, #0
   b535e:	f000 80a6 	beq.w	b54ae <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5362:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5366:	2101      	movs	r1, #1
   b5368:	b280      	uxth	r0, r0
   b536a:	f002 fad4 	bl	b7916 <digitalWrite>
        instance().setBitOrder(order);
   b536e:	f7ff fefd 	bl	b516c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5372:	2101      	movs	r1, #1
   b5374:	f001 f992 	bl	b669c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5378:	f7ff fef8 	bl	b516c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b537c:	2110      	movs	r1, #16
   b537e:	f001 f9fd 	bl	b677c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5382:	f7ff fef3 	bl	b516c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5386:	2100      	movs	r1, #0
   b5388:	f001 f99c 	bl	b66c4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b538c:	f7ff feee 	bl	b516c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5390:	f001 f970 	bl	b6674 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5394:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5398:	2101      	movs	r1, #1
   b539a:	b280      	uxth	r0, r0
   b539c:	f002 faaa 	bl	b78f4 <pinMode>
  digitalWrite(rst, HIGH);
   b53a0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b53a4:	2101      	movs	r1, #1
   b53a6:	b280      	uxth	r0, r0
   b53a8:	f002 fab5 	bl	b7916 <digitalWrite>
  delay(1);
   b53ac:	2001      	movs	r0, #1
   b53ae:	f001 fc3b 	bl	b6c28 <delay>
  digitalWrite(rst, LOW);
   b53b2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b53b6:	2100      	movs	r1, #0
   b53b8:	b280      	uxth	r0, r0
   b53ba:	f002 faac 	bl	b7916 <digitalWrite>
  delay(10);
   b53be:	200a      	movs	r0, #10
   b53c0:	f001 fc32 	bl	b6c28 <delay>
  digitalWrite(rst, HIGH);
   b53c4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b53c8:	2101      	movs	r1, #1
   b53ca:	b280      	uxth	r0, r0
   b53cc:	f002 faa3 	bl	b7916 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b53d0:	4620      	mov	r0, r4
   b53d2:	21ae      	movs	r1, #174	; 0xae
   b53d4:	f7ff fefc 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b53d8:	4620      	mov	r0, r4
   b53da:	21d5      	movs	r1, #213	; 0xd5
   b53dc:	f7ff fef8 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b53e0:	4620      	mov	r0, r4
   b53e2:	2180      	movs	r1, #128	; 0x80
   b53e4:	f7ff fef4 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b53e8:	4620      	mov	r0, r4
   b53ea:	21a8      	movs	r1, #168	; 0xa8
   b53ec:	f7ff fef0 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b53f0:	4620      	mov	r0, r4
   b53f2:	213f      	movs	r1, #63	; 0x3f
   b53f4:	f7ff feec 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b53f8:	4620      	mov	r0, r4
   b53fa:	21d3      	movs	r1, #211	; 0xd3
   b53fc:	f7ff fee8 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5400:	4620      	mov	r0, r4
   b5402:	2100      	movs	r1, #0
   b5404:	f7ff fee4 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5408:	4620      	mov	r0, r4
   b540a:	2140      	movs	r1, #64	; 0x40
   b540c:	f7ff fee0 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5410:	218d      	movs	r1, #141	; 0x8d
   b5412:	4620      	mov	r0, r4
   b5414:	f7ff fedc 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5418:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b541a:	bf0c      	ite	eq
   b541c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b541e:	2114      	movne	r1, #20
   b5420:	4620      	mov	r0, r4
   b5422:	f7ff fed5 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5426:	4620      	mov	r0, r4
   b5428:	2120      	movs	r1, #32
   b542a:	f7ff fed1 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b542e:	4620      	mov	r0, r4
   b5430:	2100      	movs	r1, #0
   b5432:	f7ff fecd 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5436:	4620      	mov	r0, r4
   b5438:	21a1      	movs	r1, #161	; 0xa1
   b543a:	f7ff fec9 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b543e:	4620      	mov	r0, r4
   b5440:	21c8      	movs	r1, #200	; 0xc8
   b5442:	f7ff fec5 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5446:	4620      	mov	r0, r4
   b5448:	21da      	movs	r1, #218	; 0xda
   b544a:	f7ff fec1 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b544e:	4620      	mov	r0, r4
   b5450:	2112      	movs	r1, #18
   b5452:	f7ff febd 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5456:	2181      	movs	r1, #129	; 0x81
   b5458:	4620      	mov	r0, r4
   b545a:	f7ff feb9 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b545e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5460:	bf0c      	ite	eq
   b5462:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5464:	21cf      	movne	r1, #207	; 0xcf
   b5466:	4620      	mov	r0, r4
   b5468:	f7ff feb2 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b546c:	21d9      	movs	r1, #217	; 0xd9
   b546e:	4620      	mov	r0, r4
   b5470:	f7ff feae 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5474:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5476:	bf0c      	ite	eq
   b5478:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b547a:	21f1      	movne	r1, #241	; 0xf1
   b547c:	4620      	mov	r0, r4
   b547e:	f7ff fea7 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5482:	4620      	mov	r0, r4
   b5484:	21db      	movs	r1, #219	; 0xdb
   b5486:	f7ff fea3 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b548a:	4620      	mov	r0, r4
   b548c:	2140      	movs	r1, #64	; 0x40
   b548e:	f7ff fe9f 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5492:	4620      	mov	r0, r4
   b5494:	21a4      	movs	r1, #164	; 0xa4
   b5496:	f7ff fe9b 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b549a:	4620      	mov	r0, r4
   b549c:	21a6      	movs	r1, #166	; 0xa6
   b549e:	f7ff fe97 	bl	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b54a2:	4620      	mov	r0, r4
   b54a4:	21af      	movs	r1, #175	; 0xaf
}
   b54a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b54aa:	f7ff be91 	b.w	b51d0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b54ae:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b54b2:	2101      	movs	r1, #1
   b54b4:	b280      	uxth	r0, r0
   b54b6:	f002 fa1d 	bl	b78f4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b54ba:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b54be:	2101      	movs	r1, #1
   b54c0:	b280      	uxth	r0, r0
   b54c2:	f002 fa17 	bl	b78f4 <pinMode>
    if (hwSPI){
   b54c6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b54ca:	2b00      	cmp	r3, #0
   b54cc:	f43f af62 	beq.w	b5394 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b54d0:	e747      	b.n	b5362 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b54d2:	f002 facd 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b54d6:	f001 fdff 	bl	b70d8 <_ZN7TwoWire5beginEv>
   b54da:	e75b      	b.n	b5394 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b54dc <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b54dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54e0:	b085      	sub	sp, #20
   b54e2:	461f      	mov	r7, r3
   b54e4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b54e8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b54ec:	eba8 0902 	sub.w	r9, r8, r2
   b54f0:	eba7 0a01 	sub.w	sl, r7, r1
   b54f4:	f1b9 0f00 	cmp.w	r9, #0
   b54f8:	bfb8      	it	lt
   b54fa:	f1c9 0900 	rsblt	r9, r9, #0
   b54fe:	f1ba 0f00 	cmp.w	sl, #0
   b5502:	bfb8      	it	lt
   b5504:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5508:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b550a:	4683      	mov	fp, r0
   b550c:	460c      	mov	r4, r1
   b550e:	4615      	mov	r5, r2
  if (steep) {
   b5510:	dd04      	ble.n	b551c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5512:	463a      	mov	r2, r7
    swap(x0, y0);
   b5514:	462c      	mov	r4, r5
    swap(x1, y1);
   b5516:	4647      	mov	r7, r8
    swap(x0, y0);
   b5518:	460d      	mov	r5, r1
    swap(x1, y1);
   b551a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b551c:	42bc      	cmp	r4, r7
   b551e:	dd05      	ble.n	b552c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5520:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5522:	4645      	mov	r5, r8
   b5524:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5526:	4622      	mov	r2, r4
   b5528:	463c      	mov	r4, r7
   b552a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b552c:	1b3e      	subs	r6, r7, r4
   b552e:	b2b2      	uxth	r2, r6
   b5530:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5532:	eba8 0205 	sub.w	r2, r8, r5
   b5536:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b553a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b553e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5542:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5546:	4545      	cmp	r5, r8
   b5548:	bfb4      	ite	lt
   b554a:	2201      	movlt	r2, #1
   b554c:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b5550:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b5552:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b5554:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b5556:	42bc      	cmp	r4, r7
   b5558:	dc1c      	bgt.n	b5594 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b555a:	f8db 2000 	ldr.w	r2, [fp]
   b555e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5560:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5562:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5566:	bfc7      	ittee	gt
   b5568:	4629      	movgt	r1, r5
   b556a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b556c:	462a      	movle	r2, r5
   b556e:	4621      	movle	r1, r4
   b5570:	4658      	mov	r0, fp
   b5572:	47c0      	blx	r8
    }
    err -= dy;
   b5574:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5576:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5578:	1ab6      	subs	r6, r6, r2
   b557a:	b2b1      	uxth	r1, r6
   b557c:	b236      	sxth	r6, r6
    if (err < 0) {
   b557e:	2e00      	cmp	r6, #0
   b5580:	da05      	bge.n	b558e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5582:	9a02      	ldr	r2, [sp, #8]
   b5584:	4415      	add	r5, r2
      err += dx;
   b5586:	9a00      	ldr	r2, [sp, #0]
   b5588:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b558a:	b22d      	sxth	r5, r5
      err += dx;
   b558c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b558e:	3401      	adds	r4, #1
   b5590:	b224      	sxth	r4, r4
   b5592:	e7e0      	b.n	b5556 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5594:	b005      	add	sp, #20
   b5596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b559a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b559a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b559e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b55a2:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b55a4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b55a8:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b55ac:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b55ae:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b55b0:	4616      	mov	r6, r2
   b55b2:	468a      	mov	sl, r1
   b55b4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b55b6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b55b8:	6823      	ldr	r3, [r4, #0]
   b55ba:	f8cd 8000 	str.w	r8, [sp]
   b55be:	f109 32ff 	add.w	r2, r9, #4294967295
   b55c2:	4432      	add	r2, r6
   b55c4:	69df      	ldr	r7, [r3, #28]
   b55c6:	4651      	mov	r1, sl
   b55c8:	462b      	mov	r3, r5
   b55ca:	4620      	mov	r0, r4
   b55cc:	b212      	sxth	r2, r2
   b55ce:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b55d0:	6823      	ldr	r3, [r4, #0]
   b55d2:	f8cd 8000 	str.w	r8, [sp]
   b55d6:	699f      	ldr	r7, [r3, #24]
   b55d8:	4632      	mov	r2, r6
   b55da:	464b      	mov	r3, r9
   b55dc:	4651      	mov	r1, sl
   b55de:	4620      	mov	r0, r4
   b55e0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b55e2:	1e6b      	subs	r3, r5, #1
   b55e4:	eb03 010a 	add.w	r1, r3, sl
   b55e8:	6823      	ldr	r3, [r4, #0]
   b55ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b55ee:	699d      	ldr	r5, [r3, #24]
   b55f0:	4632      	mov	r2, r6
   b55f2:	464b      	mov	r3, r9
   b55f4:	b209      	sxth	r1, r1
   b55f6:	4620      	mov	r0, r4
   b55f8:	46ac      	mov	ip, r5
}
   b55fa:	b002      	add	sp, #8
   b55fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5600:	4760      	bx	ip

000b5602 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5602:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5604:	3b01      	subs	r3, #1
   b5606:	4413      	add	r3, r2
   b5608:	6804      	ldr	r4, [r0, #0]
   b560a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b560e:	9501      	str	r5, [sp, #4]
   b5610:	b21b      	sxth	r3, r3
   b5612:	9300      	str	r3, [sp, #0]
   b5614:	6964      	ldr	r4, [r4, #20]
   b5616:	460b      	mov	r3, r1
   b5618:	47a0      	blx	r4
}
   b561a:	b003      	add	sp, #12
   b561c:	bd30      	pop	{r4, r5, pc}

000b561e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b561e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5620:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5624:	6804      	ldr	r4, [r0, #0]
   b5626:	e9cd 2500 	strd	r2, r5, [sp]
   b562a:	3b01      	subs	r3, #1
   b562c:	440b      	add	r3, r1
   b562e:	6964      	ldr	r4, [r4, #20]
   b5630:	b21b      	sxth	r3, r3
   b5632:	47a0      	blx	r4
}
   b5634:	b003      	add	sp, #12
   b5636:	bd30      	pop	{r4, r5, pc}

000b5638 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5638:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b563c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5640:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5644:	4605      	mov	r5, r0
   b5646:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5648:	460c      	mov	r4, r1
   b564a:	18ce      	adds	r6, r1, r3
   b564c:	42b4      	cmp	r4, r6
   b564e:	da0b      	bge.n	b5668 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5650:	682b      	ldr	r3, [r5, #0]
   b5652:	f8cd 8000 	str.w	r8, [sp]
   b5656:	699f      	ldr	r7, [r3, #24]
   b5658:	4621      	mov	r1, r4
   b565a:	464b      	mov	r3, r9
   b565c:	4652      	mov	r2, sl
   b565e:	4628      	mov	r0, r5
   b5660:	3401      	adds	r4, #1
   b5662:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5664:	b224      	sxth	r4, r4
   b5666:	e7f1      	b.n	b564c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5668:	b002      	add	sp, #8
   b566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b566e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b566e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5670:	6802      	ldr	r2, [r0, #0]
   b5672:	9101      	str	r1, [sp, #4]
   b5674:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5678:	9100      	str	r1, [sp, #0]
   b567a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b567c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5680:	2200      	movs	r2, #0
   b5682:	4611      	mov	r1, r2
   b5684:	47a0      	blx	r4
}
   b5686:	b002      	add	sp, #8
   b5688:	bd10      	pop	{r4, pc}

000b568a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b568a:	4770      	bx	lr

000b568c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b568c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b568e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5690:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5692:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b5696:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5698:	4d05      	ldr	r5, [pc, #20]	; (b56b0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b569a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b569c:	2201      	movs	r2, #1
   b569e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b56a0:	6005      	str	r5, [r0, #0]
   b56a2:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b56a4:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b56a6:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b56a8:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b56aa:	7682      	strb	r2, [r0, #26]
}
   b56ac:	bd30      	pop	{r4, r5, pc}
   b56ae:	bf00      	nop
   b56b0:	000b9158 	.word	0x000b9158

000b56b4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    uint8_t cornername, int16_t delta, uint16_t color) {
   b56b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56b8:	b08d      	sub	sp, #52	; 0x34
   b56ba:	461c      	mov	r4, r3
   b56bc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b56c0:	9309      	str	r3, [sp, #36]	; 0x24
   b56c2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   b56c6:	930a      	str	r3, [sp, #40]	; 0x28
   b56c8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   b56cc:	9304      	str	r3, [sp, #16]
  int16_t f     = 1 - r;
   b56ce:	b2a3      	uxth	r3, r4
   b56d0:	f1c3 0501 	rsb	r5, r3, #1
  int16_t ddF_y = -2 * r;
   b56d4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b56d8:	005b      	lsls	r3, r3, #1
   b56da:	b21b      	sxth	r3, r3
   b56dc:	9307      	str	r3, [sp, #28]
  int16_t x     = 0;
   b56de:	2300      	movs	r3, #0
   b56e0:	9306      	str	r3, [sp, #24]
    if (cornername & 0x1) {
   b56e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t cornername, int16_t delta, uint16_t color) {
   b56e4:	9208      	str	r2, [sp, #32]
    if (cornername & 0x1) {
   b56e6:	f003 0301 	and.w	r3, r3, #1
  int16_t f     = 1 - r;
   b56ea:	b22a      	sxth	r2, r5
    if (cornername & 0x1) {
   b56ec:	930b      	str	r3, [sp, #44]	; 0x2c
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   b56ee:	b28b      	uxth	r3, r1
    uint8_t cornername, int16_t delta, uint16_t color) {
   b56f0:	4683      	mov	fp, r0
  int16_t f     = 1 - r;
   b56f2:	9203      	str	r2, [sp, #12]
  int16_t ddF_y = -2 * r;
   b56f4:	2703      	movs	r7, #3
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   b56f6:	9305      	str	r3, [sp, #20]
  while (x<y) {
   b56f8:	9b06      	ldr	r3, [sp, #24]
   b56fa:	42a3      	cmp	r3, r4
   b56fc:	da70      	bge.n	b57e0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x12c>
    if (f >= 0) {
   b56fe:	9b03      	ldr	r3, [sp, #12]
   b5700:	2b00      	cmp	r3, #0
   b5702:	db0a      	blt.n	b571a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x66>
      ddF_y += 2;
   b5704:	9b07      	ldr	r3, [sp, #28]
   b5706:	3302      	adds	r3, #2
   b5708:	b21a      	sxth	r2, r3
   b570a:	9207      	str	r2, [sp, #28]
      f     += ddF_y;
   b570c:	9a03      	ldr	r2, [sp, #12]
   b570e:	fa12 f583 	uxtah	r5, r2, r3
      y--;
   b5712:	3c01      	subs	r4, #1
      f     += ddF_y;
   b5714:	b22b      	sxth	r3, r5
      y--;
   b5716:	b224      	sxth	r4, r4
      f     += ddF_y;
   b5718:	9303      	str	r3, [sp, #12]
    x++;
   b571a:	9b06      	ldr	r3, [sp, #24]
   b571c:	3301      	adds	r3, #1
   b571e:	fa1f fa83 	uxth.w	sl, r3
   b5722:	b21b      	sxth	r3, r3
   b5724:	9306      	str	r3, [sp, #24]
    f     += ddF_x;
   b5726:	9b03      	ldr	r3, [sp, #12]
   b5728:	443b      	add	r3, r7
   b572a:	b21b      	sxth	r3, r3
   b572c:	9303      	str	r3, [sp, #12]
    if (cornername & 0x1) {
   b572e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b5730:	b33b      	cbz	r3, b5782 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xce>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   b5732:	9804      	ldr	r0, [sp, #16]
   b5734:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   b5738:	9000      	str	r0, [sp, #0]
   b573a:	f8db 0000 	ldr.w	r0, [fp]
   b573e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   b5742:	9905      	ldr	r1, [sp, #20]
   b5744:	6980      	ldr	r0, [r0, #24]
   b5746:	b2a6      	uxth	r6, r4
   b5748:	f108 0301 	add.w	r3, r8, #1
   b574c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   b5750:	eba9 0206 	sub.w	r2, r9, r6
   b5754:	4451      	add	r1, sl
   b5756:	4605      	mov	r5, r0
   b5758:	b21b      	sxth	r3, r3
   b575a:	b212      	sxth	r2, r2
   b575c:	b209      	sxth	r1, r1
   b575e:	4658      	mov	r0, fp
   b5760:	47a8      	blx	r5
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
   b5762:	9905      	ldr	r1, [sp, #20]
   b5764:	9804      	ldr	r0, [sp, #16]
   b5766:	9000      	str	r0, [sp, #0]
   b5768:	4431      	add	r1, r6
   b576a:	f8db 6000 	ldr.w	r6, [fp]
   b576e:	eb08 0307 	add.w	r3, r8, r7
   b5772:	eba9 020a 	sub.w	r2, r9, sl
   b5776:	69b6      	ldr	r6, [r6, #24]
   b5778:	b21b      	sxth	r3, r3
   b577a:	b212      	sxth	r2, r2
   b577c:	b209      	sxth	r1, r1
   b577e:	4658      	mov	r0, fp
   b5780:	47b0      	blx	r6
    if (cornername & 0x2) {
   b5782:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5784:	079b      	lsls	r3, r3, #30
   b5786:	d528      	bpl.n	b57da <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x126>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
   b5788:	9804      	ldr	r0, [sp, #16]
   b578a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   b578e:	9000      	str	r0, [sp, #0]
   b5790:	f8db 0000 	ldr.w	r0, [fp]
   b5794:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   b5798:	9905      	ldr	r1, [sp, #20]
   b579a:	6980      	ldr	r0, [r0, #24]
   b579c:	b2a6      	uxth	r6, r4
   b579e:	f109 0301 	add.w	r3, r9, #1
   b57a2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   b57a6:	eba8 0206 	sub.w	r2, r8, r6
   b57aa:	eba1 010a 	sub.w	r1, r1, sl
   b57ae:	4605      	mov	r5, r0
   b57b0:	b21b      	sxth	r3, r3
   b57b2:	b212      	sxth	r2, r2
   b57b4:	b209      	sxth	r1, r1
   b57b6:	4658      	mov	r0, fp
   b57b8:	47a8      	blx	r5
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
   b57ba:	9905      	ldr	r1, [sp, #20]
   b57bc:	9804      	ldr	r0, [sp, #16]
   b57be:	9000      	str	r0, [sp, #0]
   b57c0:	1b89      	subs	r1, r1, r6
   b57c2:	f8db 6000 	ldr.w	r6, [fp]
   b57c6:	eb09 0307 	add.w	r3, r9, r7
   b57ca:	eba8 020a 	sub.w	r2, r8, sl
   b57ce:	69b6      	ldr	r6, [r6, #24]
   b57d0:	b21b      	sxth	r3, r3
   b57d2:	b212      	sxth	r2, r2
   b57d4:	b209      	sxth	r1, r1
   b57d6:	4658      	mov	r0, fp
   b57d8:	47b0      	blx	r6
   b57da:	3702      	adds	r7, #2
   b57dc:	b2bf      	uxth	r7, r7
   b57de:	e78b      	b.n	b56f8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x44>
}
   b57e0:	b00d      	add	sp, #52	; 0x34
   b57e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b57e6 <_ZN12Adafruit_GFX10fillCircleEssst>:
			      uint16_t color) {
   b57e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b57ea:	b085      	sub	sp, #20
   b57ec:	4615      	mov	r5, r2
   b57ee:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
  drawFastVLine(x0, y0-r, 2*r+1, color);
   b57f2:	f8cd 8000 	str.w	r8, [sp]
   b57f6:	b29a      	uxth	r2, r3
			      uint16_t color) {
   b57f8:	461e      	mov	r6, r3
  drawFastVLine(x0, y0-r, 2*r+1, color);
   b57fa:	0053      	lsls	r3, r2, #1
   b57fc:	f103 0c01 	add.w	ip, r3, #1
   b5800:	6803      	ldr	r3, [r0, #0]
   b5802:	1aaa      	subs	r2, r5, r2
   b5804:	f8d3 9018 	ldr.w	r9, [r3, #24]
   b5808:	b212      	sxth	r2, r2
   b580a:	fa0f f38c 	sxth.w	r3, ip
			      uint16_t color) {
   b580e:	4604      	mov	r4, r0
   b5810:	460f      	mov	r7, r1
  drawFastVLine(x0, y0-r, 2*r+1, color);
   b5812:	47c8      	blx	r9
  fillCircleHelper(x0, y0, r, 3, 0, color);
   b5814:	2303      	movs	r3, #3
   b5816:	2200      	movs	r2, #0
   b5818:	e9cd 3200 	strd	r3, r2, [sp]
   b581c:	f8cd 8008 	str.w	r8, [sp, #8]
   b5820:	4633      	mov	r3, r6
   b5822:	462a      	mov	r2, r5
   b5824:	4639      	mov	r1, r7
   b5826:	4620      	mov	r0, r4
   b5828:	f7ff ff44 	bl	b56b4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
}
   b582c:	b005      	add	sp, #20
   b582e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5832 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
				  int16_t x2, int16_t y2, uint16_t color) {
   b5832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5836:	b08d      	sub	sp, #52	; 0x34
   b5838:	4614      	mov	r4, r2
   b583a:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b583e:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
   b5842:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b5846:	9204      	str	r2, [sp, #16]
  if (y0 > y1) {
   b5848:	42b4      	cmp	r4, r6
				  int16_t x2, int16_t y2, uint16_t color) {
   b584a:	460d      	mov	r5, r1
   b584c:	4683      	mov	fp, r0
   b584e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  if (y0 > y1) {
   b5852:	dd58      	ble.n	b5906 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xd4>
  if (y1 > y2) {
   b5854:	42bc      	cmp	r4, r7
   b5856:	dc5e      	bgt.n	b5916 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xe4>
  if (y0 > y1) {
   b5858:	4622      	mov	r2, r4
   b585a:	4634      	mov	r4, r6
   b585c:	4616      	mov	r6, r2
   b585e:	462a      	mov	r2, r5
   b5860:	461d      	mov	r5, r3
   b5862:	4613      	mov	r3, r2
  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b5864:	42bc      	cmp	r4, r7
   b5866:	d15e      	bne.n	b5926 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xf4>
    if(x1 < a)      a = x1;
   b5868:	429d      	cmp	r5, r3
   b586a:	bfc2      	ittt	gt
   b586c:	462a      	movgt	r2, r5
   b586e:	461d      	movgt	r5, r3
   b5870:	4613      	movgt	r3, r2
    if(x2 < a)      a = x2;
   b5872:	428d      	cmp	r5, r1
   b5874:	dc04      	bgt.n	b5880 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
    else if(x2 > b) b = x2;
   b5876:	428b      	cmp	r3, r1
   b5878:	bfb8      	it	lt
   b587a:	460b      	movlt	r3, r1
   b587c:	b21b      	sxth	r3, r3
   b587e:	4629      	mov	r1, r5
    drawFastHLine(a, y0, b-a+1, color);
   b5880:	f8db 2000 	ldr.w	r2, [fp]
   b5884:	9804      	ldr	r0, [sp, #16]
   b5886:	9016      	str	r0, [sp, #88]	; 0x58
   b5888:	69d5      	ldr	r5, [r2, #28]
   b588a:	3301      	adds	r3, #1
   b588c:	1a5b      	subs	r3, r3, r1
   b588e:	b21b      	sxth	r3, r3
   b5890:	4622      	mov	r2, r4
   b5892:	4658      	mov	r0, fp
   b5894:	46ac      	mov	ip, r5
}
   b5896:	b00d      	add	sp, #52	; 0x34
   b5898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    drawFastHLine(a, y0, b-a+1, color);
   b589c:	4760      	bx	ip
  sa = dx12 * (y - y1);
   b589e:	9b05      	ldr	r3, [sp, #20]
   b58a0:	1b96      	subs	r6, r2, r6
  sb = dx02 * (y - y0);
   b58a2:	1b14      	subs	r4, r2, r4
  sa = dx12 * (y - y1);
   b58a4:	fb16 f603 	smulbb	r6, r6, r3
  sb = dx02 * (y - y0);
   b58a8:	fb14 f409 	smulbb	r4, r4, r9
  sa = dx12 * (y - y1);
   b58ac:	b236      	sxth	r6, r6
  sb = dx02 * (y - y0);
   b58ae:	b224      	sxth	r4, r4
  for(; y<=y2; y++) {
   b58b0:	42ba      	cmp	r2, r7
   b58b2:	f300 8096 	bgt.w	b59e2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1b0>
    a   = x1 + sa / dy12;
   b58b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b   = x0 + sb / dy02;
   b58b8:	9802      	ldr	r0, [sp, #8]
    a   = x1 + sa / dy12;
   b58ba:	fb96 f1f3 	sdiv	r1, r6, r3
   b58be:	9b03      	ldr	r3, [sp, #12]
    drawFastHLine(a, y, b-a+1, color);
   b58c0:	9206      	str	r2, [sp, #24]
    a   = x1 + sa / dy12;
   b58c2:	4419      	add	r1, r3
    b   = x0 + sb / dy02;
   b58c4:	9b07      	ldr	r3, [sp, #28]
   b58c6:	fb94 f3f3 	sdiv	r3, r4, r3
   b58ca:	4403      	add	r3, r0
    a   = x1 + sa / dy12;
   b58cc:	b209      	sxth	r1, r1
    b   = x0 + sb / dy02;
   b58ce:	b21b      	sxth	r3, r3
    if(a > b) swap(a,b);
   b58d0:	4299      	cmp	r1, r3
   b58d2:	9805      	ldr	r0, [sp, #20]
   b58d4:	bfc8      	it	gt
   b58d6:	468c      	movgt	ip, r1
   b58d8:	4406      	add	r6, r0
   b58da:	bfc8      	it	gt
   b58dc:	4619      	movgt	r1, r3
    drawFastHLine(a, y, b-a+1, color);
   b58de:	9804      	ldr	r0, [sp, #16]
   b58e0:	9000      	str	r0, [sp, #0]
    if(a > b) swap(a,b);
   b58e2:	bfc8      	it	gt
   b58e4:	4663      	movgt	r3, ip
    drawFastHLine(a, y, b-a+1, color);
   b58e6:	f8db 0000 	ldr.w	r0, [fp]
   b58ea:	3301      	adds	r3, #1
   b58ec:	1a5b      	subs	r3, r3, r1
   b58ee:	f8d0 801c 	ldr.w	r8, [r0, #28]
   b58f2:	b21b      	sxth	r3, r3
   b58f4:	4658      	mov	r0, fp
   b58f6:	47c0      	blx	r8
   b58f8:	9a06      	ldr	r2, [sp, #24]
   b58fa:	444c      	add	r4, r9
   b58fc:	3201      	adds	r2, #1
   b58fe:	b236      	sxth	r6, r6
    sb += dx02;
   b5900:	b224      	sxth	r4, r4
  for(; y<=y2; y++) {
   b5902:	b212      	sxth	r2, r2
   b5904:	e7d4      	b.n	b58b0 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x7e>
  if (y1 > y2) {
   b5906:	42be      	cmp	r6, r7
   b5908:	ddac      	ble.n	b5864 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x32>
   b590a:	4622      	mov	r2, r4
   b590c:	4634      	mov	r4, r6
   b590e:	4616      	mov	r6, r2
   b5910:	462a      	mov	r2, r5
   b5912:	461d      	mov	r5, r3
   b5914:	4613      	mov	r3, r2
  if (y0 > y1) {
   b5916:	4622      	mov	r2, r4
   b5918:	42b7      	cmp	r7, r6
   b591a:	463c      	mov	r4, r7
   b591c:	4617      	mov	r7, r2
   b591e:	462a      	mov	r2, r5
   b5920:	460d      	mov	r5, r1
   b5922:	4611      	mov	r1, r2
   b5924:	da98      	bge.n	b5858 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x26>
    dx01 = x1 - x0,
   b5926:	b29b      	uxth	r3, r3
   b5928:	9303      	str	r3, [sp, #12]
   b592a:	b2ab      	uxth	r3, r5
   b592c:	9302      	str	r3, [sp, #8]
   b592e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5932:	1a9b      	subs	r3, r3, r2
   b5934:	b29b      	uxth	r3, r3
    dy01 = y1 - y0,
   b5936:	fa1f fc84 	uxth.w	ip, r4
    dx01 = x1 - x0,
   b593a:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b593c:	b2b3      	uxth	r3, r6
   b593e:	eba3 020c 	sub.w	r2, r3, ip
   b5942:	b212      	sxth	r2, r2
   b5944:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b5946:	9a02      	ldr	r2, [sp, #8]
   b5948:	b289      	uxth	r1, r1
   b594a:	eba1 0902 	sub.w	r9, r1, r2
    dy02 = y2 - y0,
   b594e:	b2ba      	uxth	r2, r7
   b5950:	eba2 0c0c 	sub.w	ip, r2, ip
   b5954:	fa0f f08c 	sxth.w	r0, ip
   b5958:	9007      	str	r0, [sp, #28]
    dx12 = x2 - x1,
   b595a:	9803      	ldr	r0, [sp, #12]
  if(y1 == y2) last = y1;   // Include y1 scanline
   b595c:	42b7      	cmp	r7, r6
    dy12 = y2 - y1,
   b595e:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b5962:	eba1 0100 	sub.w	r1, r1, r0
  else         last = y1-1; // Skip it
   b5966:	bf18      	it	ne
   b5968:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1,
   b596c:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b596e:	b289      	uxth	r1, r1
  else         last = y1-1; // Skip it
   b5970:	bf18      	it	ne
   b5972:	b21b      	sxthne	r3, r3
    sb   = 0;
   b5974:	f04f 0800 	mov.w	r8, #0
    dy12 = y2 - y1,
   b5978:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b597a:	fa1f f989 	uxth.w	r9, r9
    dx12 = x2 - x1,
   b597e:	9105      	str	r1, [sp, #20]
  else         last = y1-1; // Skip it
   b5980:	bf14      	ite	ne
   b5982:	9306      	strne	r3, [sp, #24]
   b5984:	9706      	streq	r7, [sp, #24]
  for(y=y0; y<=last; y++) {
   b5986:	4622      	mov	r2, r4
    sa   = 0,
   b5988:	46c2      	mov	sl, r8
  for(y=y0; y<=last; y++) {
   b598a:	9b06      	ldr	r3, [sp, #24]
   b598c:	429a      	cmp	r2, r3
   b598e:	dc86      	bgt.n	b589e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x6c>
    a   = x0 + sa / dy01;
   b5990:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b   = x0 + sb / dy02;
   b5992:	9802      	ldr	r0, [sp, #8]
    a   = x0 + sa / dy01;
   b5994:	fb9a f1f3 	sdiv	r1, sl, r3
   b5998:	9b02      	ldr	r3, [sp, #8]
    drawFastHLine(a, y, b-a+1, color);
   b599a:	920b      	str	r2, [sp, #44]	; 0x2c
    a   = x0 + sa / dy01;
   b599c:	4419      	add	r1, r3
    b   = x0 + sb / dy02;
   b599e:	9b07      	ldr	r3, [sp, #28]
   b59a0:	fb98 f3f3 	sdiv	r3, r8, r3
   b59a4:	4403      	add	r3, r0
   b59a6:	9808      	ldr	r0, [sp, #32]
    a   = x0 + sa / dy01;
   b59a8:	b209      	sxth	r1, r1
    b   = x0 + sb / dy02;
   b59aa:	b21b      	sxth	r3, r3
    if(a > b) swap(a,b);
   b59ac:	4299      	cmp	r1, r3
   b59ae:	4482      	add	sl, r0
    drawFastHLine(a, y, b-a+1, color);
   b59b0:	9804      	ldr	r0, [sp, #16]
   b59b2:	9000      	str	r0, [sp, #0]
    if(a > b) swap(a,b);
   b59b4:	bfc8      	it	gt
   b59b6:	468c      	movgt	ip, r1
    drawFastHLine(a, y, b-a+1, color);
   b59b8:	f8db 0000 	ldr.w	r0, [fp]
    if(a > b) swap(a,b);
   b59bc:	bfc4      	itt	gt
   b59be:	4619      	movgt	r1, r3
   b59c0:	4663      	movgt	r3, ip
    drawFastHLine(a, y, b-a+1, color);
   b59c2:	69c0      	ldr	r0, [r0, #28]
   b59c4:	3301      	adds	r3, #1
   b59c6:	1a5b      	subs	r3, r3, r1
   b59c8:	4605      	mov	r5, r0
   b59ca:	b21b      	sxth	r3, r3
   b59cc:	4658      	mov	r0, fp
   b59ce:	47a8      	blx	r5
   b59d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b59d2:	44c8      	add	r8, r9
   b59d4:	3201      	adds	r2, #1
   b59d6:	fa0f fa8a 	sxth.w	sl, sl
    sb += dx02;
   b59da:	fa0f f888 	sxth.w	r8, r8
  for(y=y0; y<=last; y++) {
   b59de:	b212      	sxth	r2, r2
   b59e0:	e7d3      	b.n	b598a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x158>
}
   b59e2:	b00d      	add	sp, #52	; 0x34
   b59e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b59e8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b59e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59ec:	ed2d 8b02 	vpush	{d8}
   b59f0:	b08d      	sub	sp, #52	; 0x34
   b59f2:	4607      	mov	r7, r0
   b59f4:	9104      	str	r1, [sp, #16]
   b59f6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b59fa:	9105      	str	r1, [sp, #20]
   b59fc:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5a00:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5a02:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5a06:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5a08:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5a0c:	4281      	cmp	r1, r0
   b5a0e:	dd52      	ble.n	b5ab6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5a10:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5a14:	4291      	cmp	r1, r2
   b5a16:	dd4e      	ble.n	b5ab6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5a18:	2106      	movs	r1, #6
   b5a1a:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5a1e:	2c00      	cmp	r4, #0
   b5a20:	dd49      	ble.n	b5ab6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5a22:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5a26:	2c00      	cmp	r4, #0
   b5a28:	dd45      	ble.n	b5ab6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5a2e:	930b      	str	r3, [sp, #44]	; 0x2c
   b5a30:	b293      	uxth	r3, r2
   b5a32:	9307      	str	r3, [sp, #28]
   b5a34:	3308      	adds	r3, #8
   b5a36:	b29b      	uxth	r3, r3
   b5a38:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5a3a:	2400      	movs	r4, #0
   b5a3c:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5a3e:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5a40:	bf1c      	itt	ne
   b5a42:	4b2c      	ldrne	r3, [pc, #176]	; (b5af4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b5a44:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b5a46:	9e07      	ldr	r6, [sp, #28]
   b5a48:	bf16      	itet	ne
   b5a4a:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5a4c:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5a4e:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5a50:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5a52:	9a04      	ldr	r2, [sp, #16]
   b5a54:	b2ab      	uxth	r3, r5
   b5a56:	930a      	str	r3, [sp, #40]	; 0x28
   b5a58:	fb04 f305 	mul.w	r3, r4, r5
   b5a5c:	fa13 f382 	uxtah	r3, r3, r2
   b5a60:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5a62:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5a66:	ee08 3a10 	vmov	s16, r3
   b5a6a:	46b0      	mov	r8, r6
   b5a6c:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5a70:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5a74:	9b03      	ldr	r3, [sp, #12]
   b5a76:	07db      	lsls	r3, r3, #31
   b5a78:	d52f      	bpl.n	b5ada <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5a7a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5a7c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5a7e:	d11f      	bne.n	b5ac0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5a80:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5a84:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5a86:	b232      	sxth	r2, r6
   b5a88:	4651      	mov	r1, sl
   b5a8a:	4638      	mov	r0, r7
   b5a8c:	47d8      	blx	fp
      line >>= 1;
   b5a8e:	9b03      	ldr	r3, [sp, #12]
   b5a90:	085b      	lsrs	r3, r3, #1
   b5a92:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5a96:	3601      	adds	r6, #1
   b5a98:	4498      	add	r8, r3
   b5a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5a9c:	b2b6      	uxth	r6, r6
   b5a9e:	42b3      	cmp	r3, r6
   b5aa0:	fa1f f888 	uxth.w	r8, r8
   b5aa4:	d1e6      	bne.n	b5a74 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5aa6:	9b08      	ldr	r3, [sp, #32]
   b5aa8:	3b01      	subs	r3, #1
   b5aaa:	3401      	adds	r4, #1
   b5aac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5ab0:	b264      	sxtb	r4, r4
   b5ab2:	9308      	str	r3, [sp, #32]
   b5ab4:	d1c3      	bne.n	b5a3e <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5ab6:	b00d      	add	sp, #52	; 0x34
   b5ab8:	ecbd 8b02 	vpop	{d8}
   b5abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5ac0:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5ac2:	e9cd 9200 	strd	r9, r2, [sp]
   b5ac6:	ee18 1a10 	vmov	r1, s16
   b5aca:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5ace:	fa0f f288 	sxth.w	r2, r8
   b5ad2:	464b      	mov	r3, r9
   b5ad4:	4638      	mov	r0, r7
   b5ad6:	47d8      	blx	fp
   b5ad8:	e7d9      	b.n	b5a8e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5ada:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5ade:	4293      	cmp	r3, r2
   b5ae0:	d0d5      	beq.n	b5a8e <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5ae2:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5ae4:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5ae6:	d103      	bne.n	b5af0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5ae8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5aec:	9b06      	ldr	r3, [sp, #24]
   b5aee:	e7ca      	b.n	b5a86 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5af0:	9a06      	ldr	r2, [sp, #24]
   b5af2:	e7e6      	b.n	b5ac2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5af4:	000b8c54 	.word	0x000b8c54

000b5af8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5af8:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5afa:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5afc:	b085      	sub	sp, #20
   b5afe:	4604      	mov	r4, r0
  if (c == '\n') {
   b5b00:	d107      	bne.n	b5b12 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5b02:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5b04:	8a63      	ldrh	r3, [r4, #18]
   b5b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5b0a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5b0c:	2300      	movs	r3, #0
   b5b0e:	8223      	strh	r3, [r4, #16]
   b5b10:	e021      	b.n	b5b56 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5b12:	290d      	cmp	r1, #13
   b5b14:	d01f      	beq.n	b5b56 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5b16:	7e03      	ldrb	r3, [r0, #24]
   b5b18:	9302      	str	r3, [sp, #8]
   b5b1a:	8ac3      	ldrh	r3, [r0, #22]
   b5b1c:	9301      	str	r3, [sp, #4]
   b5b1e:	8a83      	ldrh	r3, [r0, #20]
   b5b20:	9300      	str	r3, [sp, #0]
   b5b22:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5b26:	460b      	mov	r3, r1
   b5b28:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5b2c:	f7ff ff5c 	bl	b59e8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5b30:	7e20      	ldrb	r0, [r4, #24]
   b5b32:	8a23      	ldrh	r3, [r4, #16]
   b5b34:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5b38:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5b3c:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5b3e:	b21b      	sxth	r3, r3
   b5b40:	4602      	mov	r2, r0
   b5b42:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5b44:	b139      	cbz	r1, b5b56 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b5b46:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5b4a:	f06f 0505 	mvn.w	r5, #5
   b5b4e:	fb05 1100 	mla	r1, r5, r0, r1
   b5b52:	428b      	cmp	r3, r1
   b5b54:	dcd6      	bgt.n	b5b04 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b5b56:	2001      	movs	r0, #1
   b5b58:	b005      	add	sp, #20
   b5b5a:	bd30      	pop	{r4, r5, pc}

000b5b5c <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5b5c:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5b5e:	8242      	strh	r2, [r0, #18]
}
   b5b60:	4770      	bx	lr

000b5b62 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5b62:	2901      	cmp	r1, #1
   b5b64:	bf38      	it	cc
   b5b66:	2101      	movcc	r1, #1
   b5b68:	7601      	strb	r1, [r0, #24]
}
   b5b6a:	4770      	bx	lr

000b5b6c <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5b6c:	82c1      	strh	r1, [r0, #22]
   b5b6e:	8281      	strh	r1, [r0, #20]
}
   b5b70:	4770      	bx	lr

000b5b72 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5b72:	7e40      	ldrb	r0, [r0, #25]
   b5b74:	4770      	bx	lr

000b5b76 <_ZN12Adafruit_GFX5widthEv>:
}
   b5b76:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5b7a:	4770      	bx	lr

000b5b7c <_ZN12Adafruit_GFX6heightEv>:
}
   b5b7c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5b80:	4770      	bx	lr

000b5b82 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5b82:	b538      	push	{r3, r4, r5, lr}
   b5b84:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b5b86:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b5b88:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b5b8a:	b108      	cbz	r0, b5b90 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b5b8c:	f000 fcf4 	bl	b6578 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b5b90:	79a3      	ldrb	r3, [r4, #6]
   b5b92:	2b06      	cmp	r3, #6
   b5b94:	bf0c      	ite	eq
   b5b96:	2004      	moveq	r0, #4
   b5b98:	2003      	movne	r0, #3
   b5b9a:	fb10 f005 	smulbb	r0, r0, r5
   b5b9e:	b280      	uxth	r0, r0
   b5ba0:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b5ba2:	f000 fce1 	bl	b6568 <malloc>
   b5ba6:	60e0      	str	r0, [r4, #12]
   b5ba8:	b128      	cbz	r0, b5bb6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b5baa:	88a2      	ldrh	r2, [r4, #4]
   b5bac:	2100      	movs	r1, #0
   b5bae:	f002 fcc9 	bl	b8544 <memset>
    numLEDs = n;
   b5bb2:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b5bb4:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b5bb6:	80a0      	strh	r0, [r4, #4]
   b5bb8:	8060      	strh	r0, [r4, #2]
}
   b5bba:	e7fb      	b.n	b5bb4 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b5bbc <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b5bbe:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b5bc0:	4605      	mov	r5, r0
   b5bc2:	460c      	mov	r4, r1
    if (begun) {
   b5bc4:	b11b      	cbz	r3, b5bce <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b5bc6:	79c0      	ldrb	r0, [r0, #7]
   b5bc8:	2100      	movs	r1, #0
   b5bca:	f001 fe93 	bl	b78f4 <pinMode>
    }
    pin = p;
    if (begun) {
   b5bce:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b5bd0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b5bd2:	b15b      	cbz	r3, b5bec <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b5bd4:	b2a0      	uxth	r0, r4
   b5bd6:	2101      	movs	r1, #1
   b5bd8:	9001      	str	r0, [sp, #4]
   b5bda:	f001 fe8b 	bl	b78f4 <pinMode>
        digitalWrite(p, LOW);
   b5bde:	9801      	ldr	r0, [sp, #4]
   b5be0:	2100      	movs	r1, #0
    }
}
   b5be2:	b003      	add	sp, #12
   b5be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b5be8:	f001 be95 	b.w	b7916 <digitalWrite>
}
   b5bec:	b003      	add	sp, #12
   b5bee:	bd30      	pop	{r4, r5, pc}

000b5bf0 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5bf0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5bf2:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b5bf4:	4604      	mov	r4, r0
   b5bf6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b5bf8:	7183      	strb	r3, [r0, #6]
   b5bfa:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b5bfe:	7005      	strb	r5, [r0, #0]
   b5c00:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b5c02:	f7ff ffbe 	bl	b5b82 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b5c06:	4620      	mov	r0, r4
   b5c08:	4631      	mov	r1, r6
   b5c0a:	f7ff ffd7 	bl	b5bbc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b5c0e:	4620      	mov	r0, r4
   b5c10:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5c14 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b5c14:	68c3      	ldr	r3, [r0, #12]
   b5c16:	2b00      	cmp	r3, #0
   b5c18:	f000 81a4 	beq.w	b5f64 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b5c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c20:	7983      	ldrb	r3, [r0, #6]
   b5c22:	3b02      	subs	r3, #2
   b5c24:	b2db      	uxtb	r3, r3
   b5c26:	2b04      	cmp	r3, #4
   b5c28:	bf9c      	itt	ls
   b5c2a:	4abf      	ldrls	r2, [pc, #764]	; (b5f28 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b5c2c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b5c30:	b085      	sub	sp, #20
   b5c32:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b5c34:	bf88      	it	hi
   b5c36:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5c38:	f000 fa62 	bl	b6100 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b5c3c:	692b      	ldr	r3, [r5, #16]
   b5c3e:	1ac0      	subs	r0, r0, r3
   b5c40:	42a0      	cmp	r0, r4
   b5c42:	d3f9      	bcc.n	b5c38 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b5c44:	4cb9      	ldr	r4, [pc, #740]	; (b5f2c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5c46:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b5c48:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c4c:	b91b      	cbnz	r3, b5c56 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c4e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5c52:	2b00      	cmp	r3, #0
   b5c54:	db7e      	blt.n	b5d54 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b5c56:	4cb6      	ldr	r4, [pc, #728]	; (b5f30 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b5c58:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c5c:	b923      	cbnz	r3, b5c68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c5e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5c62:	2b00      	cmp	r3, #0
   b5c64:	f2c0 816e 	blt.w	b5f44 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b5c68:	4cb2      	ldr	r4, [pc, #712]	; (b5f34 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b5c6a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5c6e:	2b00      	cmp	r3, #0
   b5c70:	f000 8144 	beq.w	b5efc <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c74:	79eb      	ldrb	r3, [r5, #7]
   b5c76:	4ab0      	ldr	r2, [pc, #704]	; (b5f38 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5c78:	4cb0      	ldr	r4, [pc, #704]	; (b5f3c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c7a:	6812      	ldr	r2, [r2, #0]
   b5c7c:	0119      	lsls	r1, r3, #4
   b5c7e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b5c82:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5c84:	49ae      	ldr	r1, [pc, #696]	; (b5f40 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c86:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b5c88:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b5c8c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b5c90:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5c94:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5c96:	f003 031f 	and.w	r3, r3, #31
   b5c9a:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b5c9e:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b5ca0:	433a      	orrs	r2, r7
   b5ca2:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b5ca4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5ca6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5caa:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5cae:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b5cb0:	2900      	cmp	r1, #0
   b5cb2:	d044      	beq.n	b5d3e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b5cb4:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b5cb8:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b5cba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b5cbe:	f818 cb01 	ldrb.w	ip, [r8], #1
   b5cc2:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5cc4:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5cc6:	6863      	ldr	r3, [r4, #4]
   b5cc8:	1a9b      	subs	r3, r3, r2
   b5cca:	2b46      	cmp	r3, #70	; 0x46
   b5ccc:	d9fb      	bls.n	b5cc6 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b5cce:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b5cd0:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b5cd4:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b5cd8:	ea43 0307 	orr.w	r3, r3, r7
   b5cdc:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b5ce0:	d02f      	beq.n	b5d42 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b5ce2:	6863      	ldr	r3, [r4, #4]
   b5ce4:	1a9b      	subs	r3, r3, r2
   b5ce6:	2b28      	cmp	r3, #40	; 0x28
   b5ce8:	d9fb      	bls.n	b5ce2 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b5cea:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5cee:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5cf0:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5cf4:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b5cf8:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b5cfc:	d1e3      	bne.n	b5cc6 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b5cfe:	88ab      	ldrh	r3, [r5, #4]
   b5d00:	f10e 0e01 	add.w	lr, lr, #1
   b5d04:	fa1f fe8e 	uxth.w	lr, lr
   b5d08:	4573      	cmp	r3, lr
   b5d0a:	d8d8      	bhi.n	b5cbe <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5d0c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b5d10:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b5d14:	6863      	ldr	r3, [r4, #4]
   b5d16:	1a9b      	subs	r3, r3, r2
   b5d18:	2b46      	cmp	r3, #70	; 0x46
   b5d1a:	d9fb      	bls.n	b5d14 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b5d1c:	6863      	ldr	r3, [r4, #4]
   b5d1e:	eba3 0909 	sub.w	r9, r3, r9
   b5d22:	4589      	cmp	r9, r1
   b5d24:	f0c0 80e4 	bcc.w	b5ef0 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5d28:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5d2c:	f000 f9e0 	bl	b60f0 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b5d30:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b5d32:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b5d36:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b5d3a:	2900      	cmp	r1, #0
   b5d3c:	d1ba      	bne.n	b5cb4 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b5d3e:	460a      	mov	r2, r1
   b5d40:	e7e8      	b.n	b5d14 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b5d42:	6863      	ldr	r3, [r4, #4]
   b5d44:	1a9b      	subs	r3, r3, r2
   b5d46:	2b11      	cmp	r3, #17
   b5d48:	d8cf      	bhi.n	b5cea <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b5d4a:	6863      	ldr	r3, [r4, #4]
   b5d4c:	1a9b      	subs	r3, r3, r2
   b5d4e:	2b11      	cmp	r3, #17
   b5d50:	d9f7      	bls.n	b5d42 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b5d52:	e7ca      	b.n	b5cea <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d54:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d58:	2b00      	cmp	r3, #0
   b5d5a:	f6bf af7c 	bge.w	b5c56 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d5e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d62:	2b00      	cmp	r3, #0
   b5d64:	f6bf af77 	bge.w	b5c56 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5d68:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5d6c:	2b00      	cmp	r3, #0
   b5d6e:	f6bf af72 	bge.w	b5c56 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5d72:	0136      	lsls	r6, r6, #4
   b5d74:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5d76:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b5d78:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b5d7a:	f000 fbf5 	bl	b6568 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b5d7e:	2800      	cmp	r0, #0
   b5d80:	f43f af78 	beq.w	b5c74 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b5d84:	88ab      	ldrh	r3, [r5, #4]
   b5d86:	2b00      	cmp	r3, #0
   b5d88:	f000 80ed 	beq.w	b5f66 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b5d8c:	68ea      	ldr	r2, [r5, #12]
   b5d8e:	3b01      	subs	r3, #1
   b5d90:	fa12 f783 	uxtah	r7, r2, r3
   b5d94:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b5d98:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5d9a:	f248 0206 	movw	r2, #32774	; 0x8006
   b5d9e:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b5da2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5da6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b5daa:	bf0c      	ite	eq
   b5dac:	4693      	moveq	fp, r2
   b5dae:	468b      	movne	fp, r1
   b5db0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b5db4:	bf0c      	ite	eq
   b5db6:	4616      	moveq	r6, r2
   b5db8:	460e      	movne	r6, r1
   b5dba:	f01c 0f20 	tst.w	ip, #32
   b5dbe:	bf0c      	ite	eq
   b5dc0:	4690      	moveq	r8, r2
   b5dc2:	4688      	movne	r8, r1
        pos++;
   b5dc4:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5dc8:	f8cd 8008 	str.w	r8, [sp, #8]
   b5dcc:	9601      	str	r6, [sp, #4]
        pos++;
   b5dce:	f103 0802 	add.w	r8, r3, #2
   b5dd2:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5dd6:	9e01      	ldr	r6, [sp, #4]
   b5dd8:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b5ddc:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5de0:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b5de4:	9e02      	ldr	r6, [sp, #8]
   b5de6:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b5dea:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5dee:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b5df2:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5df6:	bf0c      	ite	eq
   b5df8:	4693      	moveq	fp, r2
   b5dfa:	468b      	movne	fp, r1
   b5dfc:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5e00:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e04:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b5e08:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e0c:	bf0c      	ite	eq
   b5e0e:	4693      	moveq	fp, r2
   b5e10:	468b      	movne	fp, r1
   b5e12:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5e16:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e1a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b5e1e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e22:	bf0c      	ite	eq
   b5e24:	4693      	moveq	fp, r2
   b5e26:	468b      	movne	fp, r1
   b5e28:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b5e2c:	f103 0a08 	add.w	sl, r3, #8
   b5e30:	f103 0806 	add.w	r8, r3, #6
   b5e34:	3307      	adds	r3, #7
   b5e36:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e38:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b5e3c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e40:	bf0c      	ite	eq
   b5e42:	4693      	moveq	fp, r2
   b5e44:	468b      	movne	fp, r1
        pos++;
   b5e46:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b5e4a:	f01c 0f01 	tst.w	ip, #1
   b5e4e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b5e52:	bf15      	itete	ne
   b5e54:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b5e58:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b5e5c:	fa1f f38a 	uxthne.w	r3, sl
   b5e60:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b5e64:	4577      	cmp	r7, lr
   b5e66:	d19c      	bne.n	b5da2 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e68:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e6a:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e6c:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e6e:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e70:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e72:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e74:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b5e78:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5e7a:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b5e7c:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5e7e:	4b2e      	ldr	r3, [pc, #184]	; (b5f38 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5e80:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5e82:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5e84:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5e86:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b5e88:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b5e8c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b5e90:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b5e94:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b5e98:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b5e9c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b5ea0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b5ea4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b5ea8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5eac:	79eb      	ldrb	r3, [r5, #7]
   b5eae:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b5eb2:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b5eb4:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b5eb6:	5cfe      	ldrb	r6, [r7, r3]
   b5eb8:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b5ebc:	f003 031f 	and.w	r3, r3, #31
   b5ec0:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b5ec4:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b5ec8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b5ecc:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b5ed0:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b5ed2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b5ed6:	2b00      	cmp	r3, #0
   b5ed8:	d0fb      	beq.n	b5ed2 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b5eda:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5edc:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b5ee0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b5ee4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b5ee8:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b5eec:	f000 fb44 	bl	b6578 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5ef0:	f000 f906 	bl	b6100 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b5ef4:	6128      	str	r0, [r5, #16]
}
   b5ef6:	b005      	add	sp, #20
   b5ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5efc:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b5f00:	2b00      	cmp	r3, #0
   b5f02:	f6bf aeb7 	bge.w	b5c74 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f06:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f0a:	2b00      	cmp	r3, #0
   b5f0c:	f6bf aeb2 	bge.w	b5c74 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f10:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f14:	2b00      	cmp	r3, #0
   b5f16:	f6bf aead 	bge.w	b5c74 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5f1a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f1e:	2b00      	cmp	r3, #0
   b5f20:	f6bf aea8 	bge.w	b5c74 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b5f24:	e725      	b.n	b5d72 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5f26:	bf00      	nop
   b5f28:	000b9188 	.word	0x000b9188
   b5f2c:	4001c000 	.word	0x4001c000
   b5f30:	40021000 	.word	0x40021000
   b5f34:	40022000 	.word	0x40022000
   b5f38:	2003e6c0 	.word	0x2003e6c0
   b5f3c:	e0001000 	.word	0xe0001000
   b5f40:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f44:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f48:	2b00      	cmp	r3, #0
   b5f4a:	f6bf ae8d 	bge.w	b5c68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f4e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f52:	2b00      	cmp	r3, #0
   b5f54:	f6bf ae88 	bge.w	b5c68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b5f58:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b5f5c:	2b00      	cmp	r3, #0
   b5f5e:	f6bf ae83 	bge.w	b5c68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b5f62:	e706      	b.n	b5d72 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b5f64:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b5f66:	2304      	movs	r3, #4
   b5f68:	2102      	movs	r1, #2
   b5f6a:	e783      	b.n	b5e74 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b5f6c <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b5f6c:	8843      	ldrh	r3, [r0, #2]
   b5f6e:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b5f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b5f72:	d92d      	bls.n	b5fd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b5f74:	7a06      	ldrb	r6, [r0, #8]
   b5f76:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b5f7a:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b5f7e:	b2d5      	uxtb	r5, r2
   b5f80:	b13e      	cbz	r6, b5f92 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b5f82:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b5f84:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b5f86:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b5f88:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b5f8c:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b5f90:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b5f92:	f890 c006 	ldrb.w	ip, [r0, #6]
   b5f96:	68c7      	ldr	r7, [r0, #12]
   b5f98:	f1bc 0f06 	cmp.w	ip, #6
   b5f9c:	bf0c      	ite	eq
   b5f9e:	2604      	moveq	r6, #4
   b5fa0:	2603      	movne	r6, #3
   b5fa2:	434e      	muls	r6, r1
   b5fa4:	f1ac 0c02 	sub.w	ip, ip, #2
   b5fa8:	19b9      	adds	r1, r7, r6
    switch(type) {
   b5faa:	f1bc 0f06 	cmp.w	ip, #6
   b5fae:	d81d      	bhi.n	b5fec <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b5fb0:	e8df f00c 	tbb	[pc, ip]
   b5fb4:	04081c04 	.word	0x04081c04
   b5fb8:	040f      	.short	0x040f
   b5fba:	04          	.byte	0x04
   b5fbb:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b5fbc:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b5fbe:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b5fc0:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b5fc2:	e005      	b.n	b5fd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b5fc4:	2bfe      	cmp	r3, #254	; 0xfe
   b5fc6:	bf28      	it	cs
   b5fc8:	23fe      	movcs	r3, #254	; 0xfe
   b5fca:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b5fcc:	704d      	strb	r5, [r1, #1]
          *p = g;
   b5fce:	708c      	strb	r4, [r1, #2]
}
   b5fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b5fd2:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5fd4:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b5fd6:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5fd8:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b5fda:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5fdc:	b913      	cbnz	r3, b5fe4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b5fde:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5fe0:	70ca      	strb	r2, [r1, #3]
        } break;
   b5fe2:	e7f5      	b.n	b5fd0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b5fe4:	435a      	muls	r2, r3
   b5fe6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b5fea:	e7f9      	b.n	b5fe0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b5fec:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b5fee:	704c      	strb	r4, [r1, #1]
   b5ff0:	e7e6      	b.n	b5fc0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b5ff2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b5ff2:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b5ff4:	1c4a      	adds	r2, r1, #1
   b5ff6:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b5ff8:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b5ffa:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b5ffc:	d01f      	beq.n	b603e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b5ffe:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b6000:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b6004:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b6006:	d00c      	beq.n	b6022 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b6008:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b600a:	bf1f      	itttt	ne
   b600c:	0211      	lslne	r1, r2, #8
   b600e:	f101 31ff 	addne.w	r1, r1, #4294967295
   b6012:	fbb1 f3f3 	udivne	r3, r1, r3
   b6016:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b6018:	bf04      	itt	eq
   b601a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b601e:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b6022:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b6024:	8886      	ldrh	r6, [r0, #4]
   b6026:	1b29      	subs	r1, r5, r4
   b6028:	b289      	uxth	r1, r1
   b602a:	428e      	cmp	r6, r1
   b602c:	d906      	bls.n	b603c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b602e:	7829      	ldrb	r1, [r5, #0]
   b6030:	4359      	muls	r1, r3
   b6032:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b6036:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b603a:	e7f3      	b.n	b6024 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b603c:	7202      	strb	r2, [r0, #8]
  }
}
   b603e:	bd70      	pop	{r4, r5, r6, pc}

000b6040 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b6040:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b6042:	f000 f815 	bl	b6070 <HAL_Pin_Map>
   b6046:	4b01      	ldr	r3, [pc, #4]	; (b604c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b6048:	6018      	str	r0, [r3, #0]
}
   b604a:	bd08      	pop	{r3, pc}
   b604c:	2003e6c0 	.word	0x2003e6c0

000b6050 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <netdb_freeaddrinfo+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	689b      	ldr	r3, [r3, #8]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	00030268 	.word	0x00030268

000b6060 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <netdb_getaddrinfo+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	68db      	ldr	r3, [r3, #12]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030268 	.word	0x00030268

000b6070 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <HAL_Pin_Map+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	681b      	ldr	r3, [r3, #0]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003022c 	.word	0x0003022c

000b6080 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <HAL_Validate_Pin_Function+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	685b      	ldr	r3, [r3, #4]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	0003022c 	.word	0x0003022c

000b6090 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <HAL_Pin_Mode+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	689b      	ldr	r3, [r3, #8]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	0003022c 	.word	0x0003022c

000b60a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <HAL_Get_Pin_Mode+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	68db      	ldr	r3, [r3, #12]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	0003022c 	.word	0x0003022c

000b60b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <HAL_GPIO_Write+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	691b      	ldr	r3, [r3, #16]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	0003022c 	.word	0x0003022c

000b60c0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_adc_read+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	0003022c 	.word	0x0003022c

000b60d0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <if_index_to_name+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	695b      	ldr	r3, [r3, #20]
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	0003026c 	.word	0x0003026c

000b60e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <HAL_RNG_GetRandomNumber+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	685b      	ldr	r3, [r3, #4]
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030218 	.word	0x00030218

000b60f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <HAL_Delay_Microseconds+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	68db      	ldr	r3, [r3, #12]
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030218 	.word	0x00030218

000b6100 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	691b      	ldr	r3, [r3, #16]
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030218 	.word	0x00030218

000b6110 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	695b      	ldr	r3, [r3, #20]
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030218 	.word	0x00030218

000b6120 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <hal_timer_millis+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030218 	.word	0x00030218

000b6130 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <os_mutex_recursive_create+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030248 	.word	0x00030248

000b6140 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <inet_inet_ntop+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	695b      	ldr	r3, [r3, #20]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030264 	.word	0x00030264

000b6150 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <inet_htonl+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6a1b      	ldr	r3, [r3, #32]
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030264 	.word	0x00030264

000b6160 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <inet_htons+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030264 	.word	0x00030264

000b6170 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <hal_usart_write+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	68db      	ldr	r3, [r3, #12]
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	0003023c 	.word	0x0003023c

000b6180 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <hal_usart_available+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	691b      	ldr	r3, [r3, #16]
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	0003023c 	.word	0x0003023c

000b6190 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <hal_usart_read+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	695b      	ldr	r3, [r3, #20]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	0003023c 	.word	0x0003023c

000b61a0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <hal_usart_peek+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	699b      	ldr	r3, [r3, #24]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	0003023c 	.word	0x0003023c

000b61b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <hal_usart_flush+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	69db      	ldr	r3, [r3, #28]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	0003023c 	.word	0x0003023c

000b61c0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <hal_usart_is_enabled+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	6a1b      	ldr	r3, [r3, #32]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	0003023c 	.word	0x0003023c

000b61d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <hal_usart_available_data_for_write+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	0003023c 	.word	0x0003023c

000b61e0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <hal_usart_init_ex+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	0003023c 	.word	0x0003023c

000b61f0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <hal_i2c_begin+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	68db      	ldr	r3, [r3, #12]
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	00030228 	.word	0x00030228

000b6200 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <hal_i2c_begin_transmission+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	699b      	ldr	r3, [r3, #24]
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	00030228 	.word	0x00030228

000b6210 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <hal_i2c_end_transmission+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	69db      	ldr	r3, [r3, #28]
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	00030228 	.word	0x00030228

000b6220 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <hal_i2c_write+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6a1b      	ldr	r3, [r3, #32]
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	00030228 	.word	0x00030228

000b6230 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <hal_i2c_available+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	00030228 	.word	0x00030228

000b6240 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6240:	b508      	push	{r3, lr}
   b6242:	4b02      	ldr	r3, [pc, #8]	; (b624c <hal_i2c_read+0xc>)
   b6244:	681b      	ldr	r3, [r3, #0]
   b6246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6248:	9301      	str	r3, [sp, #4]
   b624a:	bd08      	pop	{r3, pc}
   b624c:	00030228 	.word	0x00030228

000b6250 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6250:	b508      	push	{r3, lr}
   b6252:	4b02      	ldr	r3, [pc, #8]	; (b625c <hal_i2c_peek+0xc>)
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6258:	9301      	str	r3, [sp, #4]
   b625a:	bd08      	pop	{r3, pc}
   b625c:	00030228 	.word	0x00030228

000b6260 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6260:	b508      	push	{r3, lr}
   b6262:	4b02      	ldr	r3, [pc, #8]	; (b626c <hal_i2c_flush+0xc>)
   b6264:	681b      	ldr	r3, [r3, #0]
   b6266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6268:	9301      	str	r3, [sp, #4]
   b626a:	bd08      	pop	{r3, pc}
   b626c:	00030228 	.word	0x00030228

000b6270 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6270:	b508      	push	{r3, lr}
   b6272:	4b02      	ldr	r3, [pc, #8]	; (b627c <hal_i2c_is_enabled+0xc>)
   b6274:	681b      	ldr	r3, [r3, #0]
   b6276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6278:	9301      	str	r3, [sp, #4]
   b627a:	bd08      	pop	{r3, pc}
   b627c:	00030228 	.word	0x00030228

000b6280 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <hal_i2c_init+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030228 	.word	0x00030228

000b6290 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <sock_setsockopt+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	699b      	ldr	r3, [r3, #24]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030238 	.word	0x00030238

000b62a0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <sock_close+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	69db      	ldr	r3, [r3, #28]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030238 	.word	0x00030238

000b62b0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <sock_connect+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	6a1b      	ldr	r3, [r3, #32]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030238 	.word	0x00030238

000b62c0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <sock_recv+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030238 	.word	0x00030238

000b62d0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <sock_send+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030238 	.word	0x00030238

000b62e0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <sock_socket+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030238 	.word	0x00030238

000b62f0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <hal_spi_begin+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	681b      	ldr	r3, [r3, #0]
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030230 	.word	0x00030230

000b6300 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <hal_spi_set_bit_order+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	689b      	ldr	r3, [r3, #8]
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	00030230 	.word	0x00030230

000b6310 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <hal_spi_set_data_mode+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	68db      	ldr	r3, [r3, #12]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	00030230 	.word	0x00030230

000b6320 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <hal_spi_set_clock_divider+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	691b      	ldr	r3, [r3, #16]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030230 	.word	0x00030230

000b6330 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <hal_spi_transfer+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	695b      	ldr	r3, [r3, #20]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030230 	.word	0x00030230

000b6340 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <hal_spi_init+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	69db      	ldr	r3, [r3, #28]
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030230 	.word	0x00030230

000b6350 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <hal_spi_is_enabled+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6a1b      	ldr	r3, [r3, #32]
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030230 	.word	0x00030230

000b6360 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <hal_spi_info+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030230 	.word	0x00030230

000b6370 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <hal_spi_acquire+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030230 	.word	0x00030230

000b6380 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <hal_spi_release+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030230 	.word	0x00030230

000b6390 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <HAL_USB_USART_Init+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	681b      	ldr	r3, [r3, #0]
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	0003024c 	.word	0x0003024c

000b63a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <HAL_USB_USART_Begin+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	685b      	ldr	r3, [r3, #4]
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	0003024c 	.word	0x0003024c

000b63b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <HAL_USB_USART_Available_Data+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	691b      	ldr	r3, [r3, #16]
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	0003024c 	.word	0x0003024c

000b63c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	695b      	ldr	r3, [r3, #20]
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	0003024c 	.word	0x0003024c

000b63d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <HAL_USB_USART_Receive_Data+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	699b      	ldr	r3, [r3, #24]
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	0003024c 	.word	0x0003024c

000b63e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <HAL_USB_USART_Send_Data+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	69db      	ldr	r3, [r3, #28]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	0003024c 	.word	0x0003024c

000b63f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <HAL_USB_USART_Flush_Data+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	6a1b      	ldr	r3, [r3, #32]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	0003024c 	.word	0x0003024c

000b6400 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <HAL_USB_USART_Is_Connected+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	0003024c 	.word	0x0003024c

000b6410 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <panic_+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030260 	.word	0x00030260

000b6420 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <log_message+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030260 	.word	0x00030260

000b6430 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <set_system_mode+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	685b      	ldr	r3, [r3, #4]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030220 	.word	0x00030220

000b6440 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <system_delay_ms+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	695b      	ldr	r3, [r3, #20]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030220 	.word	0x00030220

000b6450 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b03      	ldr	r3, [pc, #12]	; (b6460 <system_ctrl_set_app_request_handler+0x10>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b645a:	9301      	str	r3, [sp, #4]
   b645c:	bd08      	pop	{r3, pc}
   b645e:	0000      	.short	0x0000
   b6460:	00030220 	.word	0x00030220

000b6464 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b03      	ldr	r3, [pc, #12]	; (b6474 <system_ctrl_set_result+0x10>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b646e:	9301      	str	r3, [sp, #4]
   b6470:	bd08      	pop	{r3, pc}
   b6472:	0000      	.short	0x0000
   b6474:	00030220 	.word	0x00030220

000b6478 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <network_connect+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	685b      	ldr	r3, [r3, #4]
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030240 	.word	0x00030240

000b6488 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <network_connecting+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	689b      	ldr	r3, [r3, #8]
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	00030240 	.word	0x00030240

000b6498 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <network_disconnect+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	68db      	ldr	r3, [r3, #12]
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	00030240 	.word	0x00030240

000b64a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b02      	ldr	r3, [pc, #8]	; (b64b4 <network_ready+0xc>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	691b      	ldr	r3, [r3, #16]
   b64b0:	9301      	str	r3, [sp, #4]
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	00030240 	.word	0x00030240

000b64b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b64b8:	b508      	push	{r3, lr}
   b64ba:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <network_on+0xc>)
   b64bc:	681b      	ldr	r3, [r3, #0]
   b64be:	695b      	ldr	r3, [r3, #20]
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	bd08      	pop	{r3, pc}
   b64c4:	00030240 	.word	0x00030240

000b64c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b64c8:	b508      	push	{r3, lr}
   b64ca:	4b02      	ldr	r3, [pc, #8]	; (b64d4 <network_off+0xc>)
   b64cc:	681b      	ldr	r3, [r3, #0]
   b64ce:	699b      	ldr	r3, [r3, #24]
   b64d0:	9301      	str	r3, [sp, #4]
   b64d2:	bd08      	pop	{r3, pc}
   b64d4:	00030240 	.word	0x00030240

000b64d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b64d8:	b508      	push	{r3, lr}
   b64da:	4b02      	ldr	r3, [pc, #8]	; (b64e4 <network_listen+0xc>)
   b64dc:	681b      	ldr	r3, [r3, #0]
   b64de:	69db      	ldr	r3, [r3, #28]
   b64e0:	9301      	str	r3, [sp, #4]
   b64e2:	bd08      	pop	{r3, pc}
   b64e4:	00030240 	.word	0x00030240

000b64e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b64e8:	b508      	push	{r3, lr}
   b64ea:	4b02      	ldr	r3, [pc, #8]	; (b64f4 <network_listening+0xc>)
   b64ec:	681b      	ldr	r3, [r3, #0]
   b64ee:	6a1b      	ldr	r3, [r3, #32]
   b64f0:	9301      	str	r3, [sp, #4]
   b64f2:	bd08      	pop	{r3, pc}
   b64f4:	00030240 	.word	0x00030240

000b64f8 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <network_set_credentials+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	00030240 	.word	0x00030240

000b6508 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <network_set_listen_timeout+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	00030240 	.word	0x00030240

000b6518 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <network_get_listen_timeout+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	00030240 	.word	0x00030240

000b6528 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <network_is_on+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	00030240 	.word	0x00030240

000b6538 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <network_is_off+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	00030240 	.word	0x00030240

000b6548 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <spark_process+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	689b      	ldr	r3, [r3, #8]
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	00030244 	.word	0x00030244

000b6558 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <spark_set_random_seed_from_cloud_handler+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	00030244 	.word	0x00030244

000b6568 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <malloc+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	681b      	ldr	r3, [r3, #0]
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	0003021c 	.word	0x0003021c

000b6578 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <free+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	685b      	ldr	r3, [r3, #4]
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	0003021c 	.word	0x0003021c

000b6588 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <realloc+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	689b      	ldr	r3, [r3, #8]
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	0003021c 	.word	0x0003021c

000b6598 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <vsnprintf+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	0003021c 	.word	0x0003021c

000b65a8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <__errno+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	0003021c 	.word	0x0003021c

000b65b8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <__assert_func+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	0003021c 	.word	0x0003021c

000b65c8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <newlib_impure_ptr_callback+0xc>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	bd08      	pop	{r3, pc}
   b65d4:	0003021c 	.word	0x0003021c

000b65d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b65d8:	2200      	movs	r2, #0
   b65da:	6840      	ldr	r0, [r0, #4]
   b65dc:	4611      	mov	r1, r2
   b65de:	f7ff bf83 	b.w	b64e8 <network_listening>

000b65e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b65e2:	2200      	movs	r2, #0
   b65e4:	6840      	ldr	r0, [r0, #4]
   b65e6:	4611      	mov	r1, r2
   b65e8:	f7ff bf96 	b.w	b6518 <network_get_listen_timeout>

000b65ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b65ec:	6840      	ldr	r0, [r0, #4]
   b65ee:	2200      	movs	r2, #0
   b65f0:	f7ff bf8a 	b.w	b6508 <network_set_listen_timeout>

000b65f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b65f4:	6840      	ldr	r0, [r0, #4]
   b65f6:	2200      	movs	r2, #0
   b65f8:	f081 0101 	eor.w	r1, r1, #1
   b65fc:	f7ff bf6c 	b.w	b64d8 <network_listen>

000b6600 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6600:	2300      	movs	r3, #0
   b6602:	6840      	ldr	r0, [r0, #4]
   b6604:	461a      	mov	r2, r3
   b6606:	4619      	mov	r1, r3
   b6608:	f7ff bf5e 	b.w	b64c8 <network_off>

000b660c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b660c:	2300      	movs	r3, #0
   b660e:	6840      	ldr	r0, [r0, #4]
   b6610:	461a      	mov	r2, r3
   b6612:	4619      	mov	r1, r3
   b6614:	f7ff bf50 	b.w	b64b8 <network_on>

000b6618 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6618:	2200      	movs	r2, #0
   b661a:	6840      	ldr	r0, [r0, #4]
   b661c:	4611      	mov	r1, r2
   b661e:	f7ff bf43 	b.w	b64a8 <network_ready>

000b6622 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6622:	2200      	movs	r2, #0
   b6624:	6840      	ldr	r0, [r0, #4]
   b6626:	4611      	mov	r1, r2
   b6628:	f7ff bf2e 	b.w	b6488 <network_connecting>

000b662c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b662c:	6840      	ldr	r0, [r0, #4]
   b662e:	2200      	movs	r2, #0
   b6630:	2102      	movs	r1, #2
   b6632:	f7ff bf31 	b.w	b6498 <network_disconnect>

000b6636 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6636:	2300      	movs	r3, #0
   b6638:	6840      	ldr	r0, [r0, #4]
   b663a:	461a      	mov	r2, r3
   b663c:	f7ff bf1c 	b.w	b6478 <network_connect>

000b6640 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6640:	4b02      	ldr	r3, [pc, #8]	; (b664c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6642:	2203      	movs	r2, #3
   b6644:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6646:	4a02      	ldr	r2, [pc, #8]	; (b6650 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6648:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b664a:	4770      	bx	lr
   b664c:	2003e6c4 	.word	0x2003e6c4
   b6650:	000b91a4 	.word	0x000b91a4

000b6654 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6654:	2100      	movs	r1, #0
   b6656:	f7ff be93 	b.w	b6380 <hal_spi_release>

000b665a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b665a:	2100      	movs	r1, #0
   b665c:	f7ff be88 	b.w	b6370 <hal_spi_acquire>

000b6660 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6660:	b510      	push	{r4, lr}
   b6662:	4604      	mov	r4, r0
   b6664:	4608      	mov	r0, r1
{
    _spi = spi;
   b6666:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6668:	f7ff fe6a 	bl	b6340 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b666c:	2300      	movs	r3, #0
   b666e:	6063      	str	r3, [r4, #4]
}
   b6670:	4620      	mov	r0, r4
   b6672:	bd10      	pop	{r4, pc}

000b6674 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6674:	b513      	push	{r0, r1, r4, lr}
   b6676:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6678:	7800      	ldrb	r0, [r0, #0]
   b667a:	f7ff ffee 	bl	b665a <_ZN8SPIClass4lockEv.isra.0>
   b667e:	b958      	cbnz	r0, b6698 <_ZN8SPIClass5beginEv+0x24>
   b6680:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6682:	9001      	str	r0, [sp, #4]
   b6684:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6688:	f7ff fe32 	bl	b62f0 <hal_spi_begin>
        unlock();
   b668c:	9801      	ldr	r0, [sp, #4]
    }
}
   b668e:	b002      	add	sp, #8
   b6690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6694:	f7ff bfde 	b.w	b6654 <_ZN8SPIClass6unlockEv.isra.0>
   b6698:	b002      	add	sp, #8
   b669a:	bd10      	pop	{r4, pc}

000b669c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b669c:	b513      	push	{r0, r1, r4, lr}
   b669e:	4604      	mov	r4, r0
    if (!lock())
   b66a0:	7800      	ldrb	r0, [r0, #0]
{
   b66a2:	9101      	str	r1, [sp, #4]
    if (!lock())
   b66a4:	f7ff ffd9 	bl	b665a <_ZN8SPIClass4lockEv.isra.0>
   b66a8:	9901      	ldr	r1, [sp, #4]
   b66aa:	b948      	cbnz	r0, b66c0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b66ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b66ae:	9001      	str	r0, [sp, #4]
   b66b0:	f7ff fe26 	bl	b6300 <hal_spi_set_bit_order>
        unlock();
   b66b4:	9801      	ldr	r0, [sp, #4]
    }
}
   b66b6:	b002      	add	sp, #8
   b66b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b66bc:	f7ff bfca 	b.w	b6654 <_ZN8SPIClass6unlockEv.isra.0>
   b66c0:	b002      	add	sp, #8
   b66c2:	bd10      	pop	{r4, pc}

000b66c4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b66c4:	b513      	push	{r0, r1, r4, lr}
   b66c6:	4604      	mov	r4, r0
    if (!lock())
   b66c8:	7800      	ldrb	r0, [r0, #0]
{
   b66ca:	9101      	str	r1, [sp, #4]
    if (!lock())
   b66cc:	f7ff ffc5 	bl	b665a <_ZN8SPIClass4lockEv.isra.0>
   b66d0:	9901      	ldr	r1, [sp, #4]
   b66d2:	b948      	cbnz	r0, b66e8 <_ZN8SPIClass11setDataModeEh+0x24>
   b66d4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b66d6:	9001      	str	r0, [sp, #4]
   b66d8:	f7ff fe1a 	bl	b6310 <hal_spi_set_data_mode>
        unlock();
   b66dc:	9801      	ldr	r0, [sp, #4]
    }
}
   b66de:	b002      	add	sp, #8
   b66e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b66e4:	f7ff bfb6 	b.w	b6654 <_ZN8SPIClass6unlockEv.isra.0>
   b66e8:	b002      	add	sp, #8
   b66ea:	bd10      	pop	{r4, pc}

000b66ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b66ec:	0840      	lsrs	r0, r0, #1
{
   b66ee:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b66f0:	6018      	str	r0, [r3, #0]
   b66f2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b66f4:	6818      	ldr	r0, [r3, #0]
   b66f6:	4288      	cmp	r0, r1
   b66f8:	b2e5      	uxtb	r5, r4
   b66fa:	d906      	bls.n	b670a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b66fc:	3401      	adds	r4, #1
   b66fe:	2c08      	cmp	r4, #8
   b6700:	d002      	beq.n	b6708 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6702:	0840      	lsrs	r0, r0, #1
   b6704:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6706:	e7f5      	b.n	b66f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6708:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b670c:	5d5b      	ldrb	r3, [r3, r5]
   b670e:	7013      	strb	r3, [r2, #0]
}
   b6710:	bd30      	pop	{r4, r5, pc}
   b6712:	bf00      	nop
   b6714:	000b91d8 	.word	0x000b91d8

000b6718 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b671c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b671e:	2300      	movs	r3, #0
{
   b6720:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6722:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6724:	9302      	str	r3, [sp, #8]
{
   b6726:	460e      	mov	r6, r1
   b6728:	4617      	mov	r7, r2
    if (!lock())
   b672a:	f7ff ff96 	bl	b665a <_ZN8SPIClass4lockEv.isra.0>
   b672e:	4605      	mov	r5, r0
   b6730:	bb00      	cbnz	r0, b6774 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6732:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6736:	4601      	mov	r1, r0
   b6738:	2214      	movs	r2, #20
   b673a:	a803      	add	r0, sp, #12
   b673c:	f001 ff02 	bl	b8544 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6740:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6742:	462a      	mov	r2, r5
   b6744:	a903      	add	r1, sp, #12
   b6746:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6748:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b674c:	f7ff fe08 	bl	b6360 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6750:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6752:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6756:	ab02      	add	r3, sp, #8
   b6758:	f10d 0207 	add.w	r2, sp, #7
   b675c:	fb07 f106 	mul.w	r1, r7, r6
   b6760:	f7ff ffc4 	bl	b66ec <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6764:	7820      	ldrb	r0, [r4, #0]
   b6766:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b676a:	f7ff fdd9 	bl	b6320 <hal_spi_set_clock_divider>
        unlock();
   b676e:	7820      	ldrb	r0, [r4, #0]
   b6770:	f7ff ff70 	bl	b6654 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6774:	9802      	ldr	r0, [sp, #8]
   b6776:	b008      	add	sp, #32
   b6778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b677c <_ZN8SPIClass15setClockDividerEh>:
{
   b677c:	b538      	push	{r3, r4, r5, lr}
   b677e:	4604      	mov	r4, r0
    if (!lock())
   b6780:	7800      	ldrb	r0, [r0, #0]
{
   b6782:	460d      	mov	r5, r1
    if (!lock())
   b6784:	f7ff ff69 	bl	b665a <_ZN8SPIClass4lockEv.isra.0>
   b6788:	4603      	mov	r3, r0
   b678a:	b9d0      	cbnz	r0, b67c2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b678c:	6861      	ldr	r1, [r4, #4]
   b678e:	b199      	cbz	r1, b67b8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6790:	4a0c      	ldr	r2, [pc, #48]	; (b67c4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6792:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6796:	4285      	cmp	r5, r0
   b6798:	d002      	beq.n	b67a0 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b679a:	3301      	adds	r3, #1
   b679c:	2b08      	cmp	r3, #8
   b679e:	d1f8      	bne.n	b6792 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b67a0:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b67a2:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b67a4:	2201      	movs	r2, #1
   b67a6:	40d9      	lsrs	r1, r3
   b67a8:	4620      	mov	r0, r4
   b67aa:	f7ff ffb5 	bl	b6718 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b67ae:	7820      	ldrb	r0, [r4, #0]
}
   b67b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b67b4:	f7ff bf4e 	b.w	b6654 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b67b8:	7820      	ldrb	r0, [r4, #0]
   b67ba:	4629      	mov	r1, r5
   b67bc:	f7ff fdb0 	bl	b6320 <hal_spi_set_clock_divider>
   b67c0:	e7f5      	b.n	b67ae <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b67c2:	bd38      	pop	{r3, r4, r5, pc}
   b67c4:	000b91d8 	.word	0x000b91d8

000b67c8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b67c8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b67ca:	7800      	ldrb	r0, [r0, #0]
   b67cc:	f7ff fdb0 	bl	b6330 <hal_spi_transfer>
}
   b67d0:	b2c0      	uxtb	r0, r0
   b67d2:	bd08      	pop	{r3, pc}

000b67d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b67d4:	4b05      	ldr	r3, [pc, #20]	; (b67ec <_GLOBAL__sub_I_System+0x18>)
   b67d6:	2202      	movs	r2, #2
   b67d8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b67da:	4b05      	ldr	r3, [pc, #20]	; (b67f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b67dc:	4a05      	ldr	r2, [pc, #20]	; (b67f4 <_GLOBAL__sub_I_System+0x20>)
   b67de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b67e0:	2000      	movs	r0, #0
   b67e2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b67e6:	f7ff be23 	b.w	b6430 <set_system_mode>
   b67ea:	bf00      	nop
   b67ec:	2003e6d8 	.word	0x2003e6d8
   b67f0:	2003e6cc 	.word	0x2003e6cc
   b67f4:	ffff0000 	.word	0xffff0000

000b67f8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b67f8:	b510      	push	{r4, lr}
   b67fa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b67fc:	f001 feea 	bl	b85d4 <strlen>
   b6800:	3801      	subs	r0, #1
   b6802:	1823      	adds	r3, r4, r0
   b6804:	4620      	mov	r0, r4
	while(i<j){
   b6806:	4283      	cmp	r3, r0
   b6808:	d906      	bls.n	b6818 <_Z11str_reversePc+0x20>
		c = *i;
   b680a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b680c:	7819      	ldrb	r1, [r3, #0]
   b680e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6812:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6816:	e7f6      	b.n	b6806 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6818:	bd10      	pop	{r4, pc}

000b681a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b681a:	b570      	push	{r4, r5, r6, lr}
   b681c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b681e:	1e91      	subs	r1, r2, #2
   b6820:	2922      	cmp	r1, #34	; 0x22
   b6822:	d81d      	bhi.n	b6860 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6824:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6826:	b930      	cbnz	r0, b6836 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6828:	4423      	add	r3, r4
            *ptr++ = '0';
   b682a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b682c:	429d      	cmp	r5, r3
   b682e:	d210      	bcs.n	b6852 <ultoa+0x38>
            *ptr++ = '0';
   b6830:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6834:	e7fa      	b.n	b682c <ultoa+0x12>
            result.quot = a/radix;
   b6836:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b683a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b683e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6840:	2809      	cmp	r0, #9
                *ptr += '0';
   b6842:	bf94      	ite	ls
   b6844:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6846:	3157      	addhi	r1, #87	; 0x57
   b6848:	b2c9      	uxtb	r1, r1
   b684a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b684e:	4630      	mov	r0, r6
	while(a){
   b6850:	e7e9      	b.n	b6826 <ultoa+0xc>

	*ptr = '\0';
   b6852:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6854:	4620      	mov	r0, r4
	*ptr = '\0';
   b6856:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6858:	f7ff ffce 	bl	b67f8 <_Z11str_reversePc>
	return buffer;
   b685c:	4620      	mov	r0, r4
}
   b685e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6860:	2000      	movs	r0, #0
   b6862:	e7fc      	b.n	b685e <ultoa+0x44>

000b6864 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6864:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b6866:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6868:	460c      	mov	r4, r1
   b686a:	4615      	mov	r5, r2
	if(a<0){
   b686c:	da0e      	bge.n	b688c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b686e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6872:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6876:	bf14      	ite	ne
   b6878:	4258      	negne	r0, r3
   b687a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b687c:	2301      	movs	r3, #1
		*buffer = '-';
   b687e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6880:	462a      	mov	r2, r5
   b6882:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6884:	f7ff ffc9 	bl	b681a <ultoa>
	}
	return buffer;
}
   b6888:	4620      	mov	r0, r4
   b688a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b688c:	2301      	movs	r3, #1
   b688e:	e7f9      	b.n	b6884 <itoa+0x20>

000b6890 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6890:	b510      	push	{r4, lr}
   b6892:	4604      	mov	r4, r0
{
	free(buffer);
   b6894:	6800      	ldr	r0, [r0, #0]
   b6896:	f7ff fe6f 	bl	b6578 <free>
}
   b689a:	4620      	mov	r0, r4
   b689c:	bd10      	pop	{r4, pc}

000b689e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b689e:	b510      	push	{r4, lr}
   b68a0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b68a2:	6800      	ldr	r0, [r0, #0]
   b68a4:	b108      	cbz	r0, b68aa <_ZN6String10invalidateEv+0xc>
   b68a6:	f7ff fe67 	bl	b6578 <free>
	buffer = NULL;
   b68aa:	2300      	movs	r3, #0
	capacity = len = 0;
   b68ac:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b68b0:	6023      	str	r3, [r4, #0]
}
   b68b2:	bd10      	pop	{r4, pc}

000b68b4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b68b4:	b538      	push	{r3, r4, r5, lr}
   b68b6:	4604      	mov	r4, r0
   b68b8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b68ba:	6800      	ldr	r0, [r0, #0]
   b68bc:	3101      	adds	r1, #1
   b68be:	f7ff fe63 	bl	b6588 <realloc>
	if (newbuffer) {
   b68c2:	b110      	cbz	r0, b68ca <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b68c4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b68c8:	2001      	movs	r0, #1
	}
	return 0;
}
   b68ca:	bd38      	pop	{r3, r4, r5, pc}

000b68cc <_ZN6String7reserveEj>:
{
   b68cc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b68ce:	6803      	ldr	r3, [r0, #0]
{
   b68d0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b68d2:	b123      	cbz	r3, b68de <_ZN6String7reserveEj+0x12>
   b68d4:	6843      	ldr	r3, [r0, #4]
   b68d6:	428b      	cmp	r3, r1
   b68d8:	d301      	bcc.n	b68de <_ZN6String7reserveEj+0x12>
   b68da:	2001      	movs	r0, #1
}
   b68dc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b68de:	4620      	mov	r0, r4
   b68e0:	f7ff ffe8 	bl	b68b4 <_ZN6String12changeBufferEj>
   b68e4:	2800      	cmp	r0, #0
   b68e6:	d0f9      	beq.n	b68dc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b68e8:	68a3      	ldr	r3, [r4, #8]
   b68ea:	2b00      	cmp	r3, #0
   b68ec:	d1f5      	bne.n	b68da <_ZN6String7reserveEj+0xe>
   b68ee:	6822      	ldr	r2, [r4, #0]
   b68f0:	7013      	strb	r3, [r2, #0]
   b68f2:	e7f2      	b.n	b68da <_ZN6String7reserveEj+0xe>

000b68f4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b68f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68f6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b68f8:	4611      	mov	r1, r2
   b68fa:	9201      	str	r2, [sp, #4]
{
   b68fc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b68fe:	f7ff ffe5 	bl	b68cc <_ZN6String7reserveEj>
   b6902:	9a01      	ldr	r2, [sp, #4]
   b6904:	b928      	cbnz	r0, b6912 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6906:	4620      	mov	r0, r4
   b6908:	f7ff ffc9 	bl	b689e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b690c:	4620      	mov	r0, r4
   b690e:	b003      	add	sp, #12
   b6910:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6912:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6914:	4629      	mov	r1, r5
   b6916:	6820      	ldr	r0, [r4, #0]
   b6918:	f001 fe06 	bl	b8528 <memcpy>
	buffer[len] = 0;
   b691c:	6822      	ldr	r2, [r4, #0]
   b691e:	68a3      	ldr	r3, [r4, #8]
   b6920:	2100      	movs	r1, #0
   b6922:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6924:	e7f2      	b.n	b690c <_ZN6String4copyEPKcj+0x18>

000b6926 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6926:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6928:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b692a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b692e:	4604      	mov	r4, r0
	len = 0;
   b6930:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6932:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6934:	b141      	cbz	r1, b6948 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6936:	4608      	mov	r0, r1
   b6938:	9101      	str	r1, [sp, #4]
   b693a:	f001 fe4b 	bl	b85d4 <strlen>
   b693e:	9901      	ldr	r1, [sp, #4]
   b6940:	4602      	mov	r2, r0
   b6942:	4620      	mov	r0, r4
   b6944:	f7ff ffd6 	bl	b68f4 <_ZN6String4copyEPKcj>
}
   b6948:	4620      	mov	r0, r4
   b694a:	b002      	add	sp, #8
   b694c:	bd10      	pop	{r4, pc}

000b694e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b694e:	4288      	cmp	r0, r1
{
   b6950:	b510      	push	{r4, lr}
   b6952:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6954:	d005      	beq.n	b6962 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6956:	680b      	ldr	r3, [r1, #0]
   b6958:	b12b      	cbz	r3, b6966 <_ZN6StringaSERKS_+0x18>
   b695a:	688a      	ldr	r2, [r1, #8]
   b695c:	4619      	mov	r1, r3
   b695e:	f7ff ffc9 	bl	b68f4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6962:	4620      	mov	r0, r4
   b6964:	bd10      	pop	{r4, pc}
	else invalidate();
   b6966:	f7ff ff9a 	bl	b689e <_ZN6String10invalidateEv>
   b696a:	e7fa      	b.n	b6962 <_ZN6StringaSERKS_+0x14>

000b696c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b696c:	b510      	push	{r4, lr}
	buffer = NULL;
   b696e:	2300      	movs	r3, #0
String::String(const String &value)
   b6970:	4604      	mov	r4, r0
	capacity = 0;
   b6972:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6976:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6978:	7303      	strb	r3, [r0, #12]
	*this = value;
   b697a:	f7ff ffe8 	bl	b694e <_ZN6StringaSERKS_>
}
   b697e:	4620      	mov	r0, r4
   b6980:	bd10      	pop	{r4, pc}

000b6982 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6982:	b513      	push	{r0, r1, r4, lr}
   b6984:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6986:	b159      	cbz	r1, b69a0 <_ZN6StringaSEPKc+0x1e>
   b6988:	4608      	mov	r0, r1
   b698a:	9101      	str	r1, [sp, #4]
   b698c:	f001 fe22 	bl	b85d4 <strlen>
   b6990:	9901      	ldr	r1, [sp, #4]
   b6992:	4602      	mov	r2, r0
   b6994:	4620      	mov	r0, r4
   b6996:	f7ff ffad 	bl	b68f4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b699a:	4620      	mov	r0, r4
   b699c:	b002      	add	sp, #8
   b699e:	bd10      	pop	{r4, pc}
	else invalidate();
   b69a0:	f7ff ff7d 	bl	b689e <_ZN6String10invalidateEv>
   b69a4:	e7f9      	b.n	b699a <_ZN6StringaSEPKc+0x18>

000b69a6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b69a6:	b510      	push	{r4, lr}
   b69a8:	4604      	mov	r4, r0
   b69aa:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b69ac:	2300      	movs	r3, #0
	capacity = 0;
   b69ae:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b69b2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b69b4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b69b6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b69b8:	a901      	add	r1, sp, #4
   b69ba:	f7ff ff53 	bl	b6864 <itoa>
	*this = buf;
   b69be:	a901      	add	r1, sp, #4
   b69c0:	4620      	mov	r0, r4
   b69c2:	f7ff ffde 	bl	b6982 <_ZN6StringaSEPKc>
}
   b69c6:	4620      	mov	r0, r4
   b69c8:	b00a      	add	sp, #40	; 0x28
   b69ca:	bd10      	pop	{r4, pc}

000b69cc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b69cc:	b570      	push	{r4, r5, r6, lr}
   b69ce:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b69d0:	460e      	mov	r6, r1
   b69d2:	b909      	cbnz	r1, b69d8 <_ZN6String6concatEPKcj+0xc>
   b69d4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b69d6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b69d8:	b16a      	cbz	r2, b69f6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b69da:	6884      	ldr	r4, [r0, #8]
   b69dc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b69de:	4621      	mov	r1, r4
   b69e0:	f7ff ff74 	bl	b68cc <_ZN6String7reserveEj>
   b69e4:	2800      	cmp	r0, #0
   b69e6:	d0f5      	beq.n	b69d4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b69e8:	6828      	ldr	r0, [r5, #0]
   b69ea:	68ab      	ldr	r3, [r5, #8]
   b69ec:	4631      	mov	r1, r6
   b69ee:	4418      	add	r0, r3
   b69f0:	f001 fde8 	bl	b85c4 <strcpy>
	len = newlen;
   b69f4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b69f6:	2001      	movs	r0, #1
   b69f8:	e7ed      	b.n	b69d6 <_ZN6String6concatEPKcj+0xa>

000b69fa <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b69fa:	b513      	push	{r0, r1, r4, lr}
   b69fc:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b69fe:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6a00:	b151      	cbz	r1, b6a18 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6a02:	9101      	str	r1, [sp, #4]
   b6a04:	f001 fde6 	bl	b85d4 <strlen>
   b6a08:	9901      	ldr	r1, [sp, #4]
   b6a0a:	4602      	mov	r2, r0
   b6a0c:	4620      	mov	r0, r4
}
   b6a0e:	b002      	add	sp, #8
   b6a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6a14:	f7ff bfda 	b.w	b69cc <_ZN6String6concatEPKcj>
}
   b6a18:	b002      	add	sp, #8
   b6a1a:	bd10      	pop	{r4, pc}

000b6a1c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6a1c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6a1e:	2300      	movs	r3, #0
	buf[0] = c;
   b6a20:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6a24:	2201      	movs	r2, #1
   b6a26:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6a28:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6a2c:	f7ff ffce 	bl	b69cc <_ZN6String6concatEPKcj>
}
   b6a30:	b003      	add	sp, #12
   b6a32:	f85d fb04 	ldr.w	pc, [sp], #4

000b6a36 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6a36:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6a38:	688a      	ldr	r2, [r1, #8]
   b6a3a:	6809      	ldr	r1, [r1, #0]
{
   b6a3c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6a3e:	f7ff ffc5 	bl	b69cc <_ZN6String6concatEPKcj>
   b6a42:	b910      	cbnz	r0, b6a4a <_ZplRK15StringSumHelperRK6String+0x14>
   b6a44:	4620      	mov	r0, r4
   b6a46:	f7ff ff2a 	bl	b689e <_ZN6String10invalidateEv>
	return a;
}
   b6a4a:	4620      	mov	r0, r4
   b6a4c:	bd10      	pop	{r4, pc}

000b6a4e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b6a4e:	b513      	push	{r0, r1, r4, lr}
   b6a50:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6a52:	b929      	cbnz	r1, b6a60 <_ZplRK15StringSumHelperPKc+0x12>
   b6a54:	4620      	mov	r0, r4
   b6a56:	f7ff ff22 	bl	b689e <_ZN6String10invalidateEv>
	return a;
}
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	b002      	add	sp, #8
   b6a5e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b6a60:	4608      	mov	r0, r1
   b6a62:	9101      	str	r1, [sp, #4]
   b6a64:	f001 fdb6 	bl	b85d4 <strlen>
   b6a68:	9901      	ldr	r1, [sp, #4]
   b6a6a:	4602      	mov	r2, r0
   b6a6c:	4620      	mov	r0, r4
   b6a6e:	f7ff ffad 	bl	b69cc <_ZN6String6concatEPKcj>
   b6a72:	2800      	cmp	r0, #0
   b6a74:	d0ee      	beq.n	b6a54 <_ZplRK15StringSumHelperPKc+0x6>
   b6a76:	e7f0      	b.n	b6a5a <_ZplRK15StringSumHelperPKc+0xc>

000b6a78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6a78:	4802      	ldr	r0, [pc, #8]	; (b6a84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6a7a:	2300      	movs	r3, #0
   b6a7c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6a7e:	f7ff bb57 	b.w	b6130 <os_mutex_recursive_create>
   b6a82:	bf00      	nop
   b6a84:	2003e6dc 	.word	0x2003e6dc

000b6a88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a8a:	4606      	mov	r6, r0
   b6a8c:	460d      	mov	r5, r1
  size_t n = 0;
   b6a8e:	188f      	adds	r7, r1, r2
   b6a90:	2400      	movs	r4, #0
  while (size--) {
   b6a92:	42bd      	cmp	r5, r7
   b6a94:	d00c      	beq.n	b6ab0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6a96:	6833      	ldr	r3, [r6, #0]
   b6a98:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a9c:	689b      	ldr	r3, [r3, #8]
   b6a9e:	4630      	mov	r0, r6
   b6aa0:	4798      	blx	r3
     if (chunk>=0)
   b6aa2:	1e03      	subs	r3, r0, #0
   b6aa4:	db01      	blt.n	b6aaa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6aa6:	441c      	add	r4, r3
  while (size--) {
   b6aa8:	e7f3      	b.n	b6a92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6aaa:	2c00      	cmp	r4, #0
   b6aac:	bf08      	it	eq
   b6aae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ab4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6ab4:	b513      	push	{r0, r1, r4, lr}
   b6ab6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6ab8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6aba:	b159      	cbz	r1, b6ad4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6abc:	9101      	str	r1, [sp, #4]
   b6abe:	f001 fd89 	bl	b85d4 <strlen>
   b6ac2:	6823      	ldr	r3, [r4, #0]
   b6ac4:	9901      	ldr	r1, [sp, #4]
   b6ac6:	68db      	ldr	r3, [r3, #12]
   b6ac8:	4602      	mov	r2, r0
   b6aca:	4620      	mov	r0, r4
    }
   b6acc:	b002      	add	sp, #8
   b6ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6ad2:	4718      	bx	r3
    }
   b6ad4:	b002      	add	sp, #8
   b6ad6:	bd10      	pop	{r4, pc}

000b6ad8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6ad8:	b508      	push	{r3, lr}
  return write(str);
   b6ada:	f7ff ffeb 	bl	b6ab4 <_ZN5Print5writeEPKc>
}
   b6ade:	bd08      	pop	{r3, pc}

000b6ae0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6ae0:	6803      	ldr	r3, [r0, #0]
   b6ae2:	689b      	ldr	r3, [r3, #8]
   b6ae4:	4718      	bx	r3

000b6ae6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6ae6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ae8:	210d      	movs	r1, #13
{
   b6aea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6aec:	f7ff fff8 	bl	b6ae0 <_ZN5Print5printEc>
  n += print('\n');
   b6af0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6af2:	4604      	mov	r4, r0
  n += print('\n');
   b6af4:	4628      	mov	r0, r5
   b6af6:	f7ff fff3 	bl	b6ae0 <_ZN5Print5printEc>
  return n;
}
   b6afa:	4420      	add	r0, r4
   b6afc:	bd38      	pop	{r3, r4, r5, pc}

000b6afe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6afe:	b538      	push	{r3, r4, r5, lr}
   b6b00:	4605      	mov	r5, r0
  return write(str);
   b6b02:	f7ff ffd7 	bl	b6ab4 <_ZN5Print5writeEPKc>
   b6b06:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6b08:	4628      	mov	r0, r5
   b6b0a:	f7ff ffec 	bl	b6ae6 <_ZN5Print7printlnEv>
  return n;
}
   b6b0e:	4420      	add	r0, r4
   b6b10:	bd38      	pop	{r3, r4, r5, pc}

000b6b12 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6b12:	b530      	push	{r4, r5, lr}
   b6b14:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6b16:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6b18:	2a01      	cmp	r2, #1
  *str = '\0';
   b6b1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6b1e:	bf98      	it	ls
   b6b20:	220a      	movls	r2, #10
   b6b22:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6b24:	460d      	mov	r5, r1
   b6b26:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6b2a:	fb01 5312 	mls	r3, r1, r2, r5
   b6b2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b32:	2b09      	cmp	r3, #9
   b6b34:	bf94      	ite	ls
   b6b36:	3330      	addls	r3, #48	; 0x30
   b6b38:	3337      	addhi	r3, #55	; 0x37
   b6b3a:	b2db      	uxtb	r3, r3
  } while(n);
   b6b3c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b3e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6b42:	d9ef      	bls.n	b6b24 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6b44:	4621      	mov	r1, r4
   b6b46:	f7ff ffb5 	bl	b6ab4 <_ZN5Print5writeEPKc>
}
   b6b4a:	b00b      	add	sp, #44	; 0x2c
   b6b4c:	bd30      	pop	{r4, r5, pc}

000b6b4e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b52:	b086      	sub	sp, #24
   b6b54:	af00      	add	r7, sp, #0
   b6b56:	4605      	mov	r5, r0
   b6b58:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b5a:	1d38      	adds	r0, r7, #4
   b6b5c:	2114      	movs	r1, #20
{
   b6b5e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b60:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b62:	f7ff fd19 	bl	b6598 <vsnprintf>

    if (n<bufsize)
   b6b66:	2813      	cmp	r0, #19
   b6b68:	d80e      	bhi.n	b6b88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b6a:	1d39      	adds	r1, r7, #4
   b6b6c:	4628      	mov	r0, r5
   b6b6e:	f7ff ffa1 	bl	b6ab4 <_ZN5Print5writeEPKc>
   b6b72:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b74:	b11e      	cbz	r6, b6b7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b76:	4628      	mov	r0, r5
   b6b78:	f7ff ffb5 	bl	b6ae6 <_ZN5Print7printlnEv>
   b6b7c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b7e:	4620      	mov	r0, r4
   b6b80:	3718      	adds	r7, #24
   b6b82:	46bd      	mov	sp, r7
   b6b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b88:	f100 0308 	add.w	r3, r0, #8
   b6b8c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b90:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b92:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b96:	4622      	mov	r2, r4
   b6b98:	1c41      	adds	r1, r0, #1
   b6b9a:	683b      	ldr	r3, [r7, #0]
   b6b9c:	4668      	mov	r0, sp
   b6b9e:	f7ff fcfb 	bl	b6598 <vsnprintf>
  return write(str);
   b6ba2:	4669      	mov	r1, sp
   b6ba4:	4628      	mov	r0, r5
   b6ba6:	f7ff ff85 	bl	b6ab4 <_ZN5Print5writeEPKc>
   b6baa:	4604      	mov	r4, r0
   b6bac:	46c5      	mov	sp, r8
   b6bae:	e7e1      	b.n	b6b74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6bb0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6bb0:	b510      	push	{r4, lr}
   b6bb2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6bb4:	f7ff faac 	bl	b6110 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6bb8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6bba:	6823      	ldr	r3, [r4, #0]
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	695b      	ldr	r3, [r3, #20]
   b6bc0:	4798      	blx	r3
    if (c >= 0) return c;
   b6bc2:	2800      	cmp	r0, #0
   b6bc4:	da08      	bge.n	b6bd8 <_ZN6Stream9timedReadEv+0x28>
   b6bc6:	f7ff faa3 	bl	b6110 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6bca:	68e3      	ldr	r3, [r4, #12]
   b6bcc:	1ac0      	subs	r0, r0, r3
   b6bce:	68a3      	ldr	r3, [r4, #8]
   b6bd0:	4298      	cmp	r0, r3
   b6bd2:	d3f2      	bcc.n	b6bba <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6bd4:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6bd8:	bd10      	pop	{r4, pc}
	...

000b6bdc <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b6bdc:	b538      	push	{r3, r4, r5, lr}
   b6bde:	460d      	mov	r5, r1
  String ret;
   b6be0:	4907      	ldr	r1, [pc, #28]	; (b6c00 <_ZN6Stream10readStringEv+0x24>)
{
   b6be2:	4604      	mov	r4, r0
  String ret;
   b6be4:	f7ff fe9f 	bl	b6926 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6be8:	4628      	mov	r0, r5
   b6bea:	f7ff ffe1 	bl	b6bb0 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b6bee:	2800      	cmp	r0, #0
   b6bf0:	db04      	blt.n	b6bfc <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6bf2:	b2c1      	uxtb	r1, r0
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	f7ff ff11 	bl	b6a1c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6bfa:	e7f5      	b.n	b6be8 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b6bfc:	4620      	mov	r0, r4
   b6bfe:	bd38      	pop	{r3, r4, r5, pc}
   b6c00:	000b8990 	.word	0x000b8990

000b6c04 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6c04:	4b01      	ldr	r3, [pc, #4]	; (b6c0c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6c06:	4a02      	ldr	r2, [pc, #8]	; (b6c10 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6c08:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6c0a:	4770      	bx	lr
   b6c0c:	2003e6e0 	.word	0x2003e6e0
   b6c10:	000b91e8 	.word	0x000b91e8

000b6c14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6c14:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6c16:	681a      	ldr	r2, [r3, #0]
   b6c18:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6c1a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6c1c:	4770      	bx	lr
   b6c1e:	bf00      	nop
   b6c20:	2003e524 	.word	0x2003e524
   b6c24:	2003e6e4 	.word	0x2003e6e4

000b6c28 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6c28:	2100      	movs	r1, #0
   b6c2a:	f7ff bc09 	b.w	b6440 <system_delay_ms>
	...

000b6c30 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6c30:	4b01      	ldr	r3, [pc, #4]	; (b6c38 <_GLOBAL__sub_I_RGB+0x8>)
   b6c32:	2200      	movs	r2, #0
   b6c34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6c36:	4770      	bx	lr
   b6c38:	2003e6e8 	.word	0x2003e6e8

000b6c3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6c3c:	4b01      	ldr	r3, [pc, #4]	; (b6c44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6c3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6c40:	4770      	bx	lr
   b6c42:	bf00      	nop
   b6c44:	2003e528 	.word	0x2003e528

000b6c48 <serialEventRun>:
{
   b6c48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6c4a:	4b0b      	ldr	r3, [pc, #44]	; (b6c78 <serialEventRun+0x30>)
   b6c4c:	b143      	cbz	r3, b6c60 <serialEventRun+0x18>
   b6c4e:	f000 f981 	bl	b6f54 <_Z16_fetch_usbserialv>
   b6c52:	6803      	ldr	r3, [r0, #0]
   b6c54:	691b      	ldr	r3, [r3, #16]
   b6c56:	4798      	blx	r3
   b6c58:	2800      	cmp	r0, #0
   b6c5a:	dd01      	ble.n	b6c60 <serialEventRun+0x18>
        serialEvent();
   b6c5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6c60:	4b06      	ldr	r3, [pc, #24]	; (b6c7c <serialEventRun+0x34>)
   b6c62:	b143      	cbz	r3, b6c76 <serialEventRun+0x2e>
   b6c64:	f000 fec4 	bl	b79f0 <_Z22__fetch_global_Serial1v>
   b6c68:	6803      	ldr	r3, [r0, #0]
   b6c6a:	691b      	ldr	r3, [r3, #16]
   b6c6c:	4798      	blx	r3
   b6c6e:	2800      	cmp	r0, #0
   b6c70:	dd01      	ble.n	b6c76 <serialEventRun+0x2e>
        serialEvent1();
   b6c72:	f3af 8000 	nop.w
}
   b6c76:	bd08      	pop	{r3, pc}
	...

000b6c80 <_post_loop>:
{
   b6c80:	b508      	push	{r3, lr}
	serialEventRun();
   b6c82:	f7ff ffe1 	bl	b6c48 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6c86:	f7ff fa43 	bl	b6110 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6c8a:	4b01      	ldr	r3, [pc, #4]	; (b6c90 <_post_loop+0x10>)
   b6c8c:	6018      	str	r0, [r3, #0]
}
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	2003e740 	.word	0x2003e740

000b6c94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6c94:	4805      	ldr	r0, [pc, #20]	; (b6cac <_Z33system_initialize_user_backup_ramv+0x18>)
   b6c96:	4a06      	ldr	r2, [pc, #24]	; (b6cb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6c98:	4906      	ldr	r1, [pc, #24]	; (b6cb4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6c9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6c9c:	1a12      	subs	r2, r2, r0
   b6c9e:	f001 fc43 	bl	b8528 <memcpy>
    __backup_sram_signature = signature;
   b6ca2:	4b05      	ldr	r3, [pc, #20]	; (b6cb8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6ca4:	4a05      	ldr	r2, [pc, #20]	; (b6cbc <_Z33system_initialize_user_backup_ramv+0x28>)
   b6ca6:	601a      	str	r2, [r3, #0]
}
   b6ca8:	bd08      	pop	{r3, pc}
   b6caa:	bf00      	nop
   b6cac:	2003f400 	.word	0x2003f400
   b6cb0:	2003f404 	.word	0x2003f404
   b6cb4:	000b9574 	.word	0x000b9574
   b6cb8:	2003f400 	.word	0x2003f400
   b6cbc:	9a271c1e 	.word	0x9a271c1e

000b6cc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6cc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6cc2:	2300      	movs	r3, #0
   b6cc4:	9300      	str	r3, [sp, #0]
   b6cc6:	461a      	mov	r2, r3
   b6cc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6ccc:	f7ff fbca 	bl	b6464 <system_ctrl_set_result>
}
   b6cd0:	b003      	add	sp, #12
   b6cd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6cd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6cd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6cda:	8843      	ldrh	r3, [r0, #2]
   b6cdc:	2b0a      	cmp	r3, #10
   b6cde:	d008      	beq.n	b6cf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6ce0:	2b50      	cmp	r3, #80	; 0x50
   b6ce2:	d10b      	bne.n	b6cfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6ce4:	4b09      	ldr	r3, [pc, #36]	; (b6d0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6ce6:	681b      	ldr	r3, [r3, #0]
   b6ce8:	b14b      	cbz	r3, b6cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6cea:	b003      	add	sp, #12
   b6cec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6cf0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6cf2:	f7ff ffe5 	bl	b6cc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6cf6:	b003      	add	sp, #12
   b6cf8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6cfc:	2300      	movs	r3, #0
   b6cfe:	9300      	str	r3, [sp, #0]
   b6d00:	461a      	mov	r2, r3
   b6d02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6d06:	f7ff fbad 	bl	b6464 <system_ctrl_set_result>
}
   b6d0a:	e7f4      	b.n	b6cf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6d0c:	2003e6fc 	.word	0x2003e6fc

000b6d10 <module_user_init_hook>:
{
   b6d10:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6d12:	4812      	ldr	r0, [pc, #72]	; (b6d5c <module_user_init_hook+0x4c>)
   b6d14:	2100      	movs	r1, #0
   b6d16:	f7ff fc57 	bl	b65c8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6d1a:	4b11      	ldr	r3, [pc, #68]	; (b6d60 <module_user_init_hook+0x50>)
   b6d1c:	681a      	ldr	r2, [r3, #0]
   b6d1e:	4b11      	ldr	r3, [pc, #68]	; (b6d64 <module_user_init_hook+0x54>)
   b6d20:	429a      	cmp	r2, r3
   b6d22:	4b11      	ldr	r3, [pc, #68]	; (b6d68 <module_user_init_hook+0x58>)
   b6d24:	bf0c      	ite	eq
   b6d26:	2201      	moveq	r2, #1
   b6d28:	2200      	movne	r2, #0
   b6d2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6d2c:	d001      	beq.n	b6d32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6d2e:	f7ff ffb1 	bl	b6c94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6d32:	f7ff f9d5 	bl	b60e0 <HAL_RNG_GetRandomNumber>
   b6d36:	4604      	mov	r4, r0
    srand(seed);
   b6d38:	f001 fc0c 	bl	b8554 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6d3c:	4b0b      	ldr	r3, [pc, #44]	; (b6d6c <module_user_init_hook+0x5c>)
   b6d3e:	b113      	cbz	r3, b6d46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6d40:	4620      	mov	r0, r4
   b6d42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6d46:	2100      	movs	r1, #0
   b6d48:	4808      	ldr	r0, [pc, #32]	; (b6d6c <module_user_init_hook+0x5c>)
   b6d4a:	f7ff fc05 	bl	b6558 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6d52:	4807      	ldr	r0, [pc, #28]	; (b6d70 <module_user_init_hook+0x60>)
   b6d54:	2100      	movs	r1, #0
   b6d56:	f7ff bb7b 	b.w	b6450 <system_ctrl_set_app_request_handler>
   b6d5a:	bf00      	nop
   b6d5c:	000b6c3d 	.word	0x000b6c3d
   b6d60:	2003f400 	.word	0x2003f400
   b6d64:	9a271c1e 	.word	0x9a271c1e
   b6d68:	2003e6f8 	.word	0x2003e6f8
   b6d6c:	00000000 	.word	0x00000000
   b6d70:	000b6cd9 	.word	0x000b6cd9

000b6d74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d74:	4770      	bx	lr

000b6d76 <_ZN9IPAddressD0Ev>:
   b6d76:	b510      	push	{r4, lr}
   b6d78:	2118      	movs	r1, #24
   b6d7a:	4604      	mov	r4, r0
   b6d7c:	f7fd f98d 	bl	b409a <_ZdlPvj>
   b6d80:	4620      	mov	r0, r4
   b6d82:	bd10      	pop	{r4, pc}

000b6d84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d86:	7d03      	ldrb	r3, [r0, #20]
   b6d88:	2b06      	cmp	r3, #6
{
   b6d8a:	b08d      	sub	sp, #52	; 0x34
   b6d8c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d8e:	f100 0704 	add.w	r7, r0, #4
   b6d92:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d96:	d012      	beq.n	b6dbe <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d98:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6da0:	220a      	movs	r2, #10
   b6da2:	4630      	mov	r0, r6
   b6da4:	f7ff feb5 	bl	b6b12 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6da8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6daa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6dac:	d019      	beq.n	b6de2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6dae:	2c00      	cmp	r4, #0
   b6db0:	d0f4      	beq.n	b6d9c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6db2:	212e      	movs	r1, #46	; 0x2e
   b6db4:	4630      	mov	r0, r6
   b6db6:	f7ff fe93 	bl	b6ae0 <_ZN5Print5printEc>
   b6dba:	4404      	add	r4, r0
   b6dbc:	e7ee      	b.n	b6d9c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6dbe:	232f      	movs	r3, #47	; 0x2f
   b6dc0:	466a      	mov	r2, sp
   b6dc2:	4639      	mov	r1, r7
   b6dc4:	200a      	movs	r0, #10
		buf[0] = 0;
   b6dc6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6dca:	f7ff f9b9 	bl	b6140 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6dce:	4668      	mov	r0, sp
   b6dd0:	f001 fc00 	bl	b85d4 <strlen>
   b6dd4:	6833      	ldr	r3, [r6, #0]
   b6dd6:	4602      	mov	r2, r0
   b6dd8:	68db      	ldr	r3, [r3, #12]
   b6dda:	4669      	mov	r1, sp
   b6ddc:	4630      	mov	r0, r6
   b6dde:	4798      	blx	r3
   b6de0:	4604      	mov	r4, r0
    }
    return n;
}
   b6de2:	4620      	mov	r0, r4
   b6de4:	b00d      	add	sp, #52	; 0x34
   b6de6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6de8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6de8:	b510      	push	{r4, lr}
   b6dea:	4b05      	ldr	r3, [pc, #20]	; (b6e00 <_ZN9IPAddressC1Ev+0x18>)
   b6dec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6dee:	2211      	movs	r2, #17
   b6df0:	f840 3b04 	str.w	r3, [r0], #4
   b6df4:	2100      	movs	r1, #0
   b6df6:	f001 fba5 	bl	b8544 <memset>
}
   b6dfa:	4620      	mov	r0, r4
   b6dfc:	bd10      	pop	{r4, pc}
   b6dfe:	bf00      	nop
   b6e00:	000b9210 	.word	0x000b9210

000b6e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6e04:	4603      	mov	r3, r0
   b6e06:	4a07      	ldr	r2, [pc, #28]	; (b6e24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6e08:	b510      	push	{r4, lr}
   b6e0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6e0e:	f101 0210 	add.w	r2, r1, #16
   b6e12:	f851 4b04 	ldr.w	r4, [r1], #4
   b6e16:	f843 4b04 	str.w	r4, [r3], #4
   b6e1a:	4291      	cmp	r1, r2
   b6e1c:	d1f9      	bne.n	b6e12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6e1e:	780a      	ldrb	r2, [r1, #0]
   b6e20:	701a      	strb	r2, [r3, #0]
}
   b6e22:	bd10      	pop	{r4, pc}
   b6e24:	000b9210 	.word	0x000b9210

000b6e28 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6e28:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6e2a:	2b04      	cmp	r3, #4
   b6e2c:	d104      	bne.n	b6e38 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6e2e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6e30:	3800      	subs	r0, #0
   b6e32:	bf18      	it	ne
   b6e34:	2001      	movne	r0, #1
   b6e36:	4770      	bx	lr
    } else if (version() == 6) {
   b6e38:	2b06      	cmp	r3, #6
   b6e3a:	d107      	bne.n	b6e4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6e3c:	6843      	ldr	r3, [r0, #4]
   b6e3e:	b93b      	cbnz	r3, b6e50 <_ZNK9IPAddresscvbEv+0x28>
   b6e40:	6883      	ldr	r3, [r0, #8]
   b6e42:	b92b      	cbnz	r3, b6e50 <_ZNK9IPAddresscvbEv+0x28>
   b6e44:	68c3      	ldr	r3, [r0, #12]
   b6e46:	b91b      	cbnz	r3, b6e50 <_ZNK9IPAddresscvbEv+0x28>
   b6e48:	6900      	ldr	r0, [r0, #16]
   b6e4a:	e7f1      	b.n	b6e30 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6e4c:	2000      	movs	r0, #0
   b6e4e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6e50:	2001      	movs	r0, #1
}
   b6e52:	4770      	bx	lr

000b6e54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6e54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6e56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6e5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6e5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6e62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6e66:	2304      	movs	r3, #4
   b6e68:	6041      	str	r1, [r0, #4]
   b6e6a:	7503      	strb	r3, [r0, #20]
}
   b6e6c:	bd10      	pop	{r4, pc}
	...

000b6e70 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6e70:	b507      	push	{r0, r1, r2, lr}
   b6e72:	4b06      	ldr	r3, [pc, #24]	; (b6e8c <_ZN9IPAddressC1EPKh+0x1c>)
   b6e74:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6e76:	78cb      	ldrb	r3, [r1, #3]
   b6e78:	9300      	str	r3, [sp, #0]
   b6e7a:	788b      	ldrb	r3, [r1, #2]
   b6e7c:	784a      	ldrb	r2, [r1, #1]
   b6e7e:	7809      	ldrb	r1, [r1, #0]
   b6e80:	f7ff ffe8 	bl	b6e54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e84:	b003      	add	sp, #12
   b6e86:	f85d fb04 	ldr.w	pc, [sp], #4
   b6e8a:	bf00      	nop
   b6e8c:	000b9210 	.word	0x000b9210

000b6e90 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6e90:	7441      	strb	r1, [r0, #17]
}
   b6e92:	4770      	bx	lr

000b6e94 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6e94:	4770      	bx	lr

000b6e96 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6e96:	4770      	bx	lr

000b6e98 <_ZN9USBSerial4readEv>:
{
   b6e98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6e9a:	2100      	movs	r1, #0
   b6e9c:	7c00      	ldrb	r0, [r0, #16]
   b6e9e:	f7ff fa97 	bl	b63d0 <HAL_USB_USART_Receive_Data>
}
   b6ea2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ea6:	bd08      	pop	{r3, pc}

000b6ea8 <_ZN9USBSerial4peekEv>:
{
   b6ea8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6eaa:	2101      	movs	r1, #1
   b6eac:	7c00      	ldrb	r0, [r0, #16]
   b6eae:	f7ff fa8f 	bl	b63d0 <HAL_USB_USART_Receive_Data>
}
   b6eb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6eb6:	bd08      	pop	{r3, pc}

000b6eb8 <_ZN9USBSerial17availableForWriteEv>:
{
   b6eb8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6eba:	7c00      	ldrb	r0, [r0, #16]
   b6ebc:	f7ff fa80 	bl	b63c0 <HAL_USB_USART_Available_Data_For_Write>
}
   b6ec0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ec4:	bd08      	pop	{r3, pc}

000b6ec6 <_ZN9USBSerial9availableEv>:
{
   b6ec6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6ec8:	7c00      	ldrb	r0, [r0, #16]
   b6eca:	f7ff fa71 	bl	b63b0 <HAL_USB_USART_Available_Data>
}
   b6ece:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ed2:	bd08      	pop	{r3, pc}

000b6ed4 <_ZN9USBSerial5writeEh>:
{
   b6ed4:	b513      	push	{r0, r1, r4, lr}
   b6ed6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ed8:	7c00      	ldrb	r0, [r0, #16]
{
   b6eda:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6edc:	f7ff fa70 	bl	b63c0 <HAL_USB_USART_Available_Data_For_Write>
   b6ee0:	2800      	cmp	r0, #0
   b6ee2:	9901      	ldr	r1, [sp, #4]
   b6ee4:	dc01      	bgt.n	b6eea <_ZN9USBSerial5writeEh+0x16>
   b6ee6:	7c60      	ldrb	r0, [r4, #17]
   b6ee8:	b120      	cbz	r0, b6ef4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6eea:	7c20      	ldrb	r0, [r4, #16]
   b6eec:	f7ff fa78 	bl	b63e0 <HAL_USB_USART_Send_Data>
   b6ef0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6ef4:	b002      	add	sp, #8
   b6ef6:	bd10      	pop	{r4, pc}

000b6ef8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6ef8:	7c00      	ldrb	r0, [r0, #16]
   b6efa:	f7ff ba79 	b.w	b63f0 <HAL_USB_USART_Flush_Data>

000b6efe <_ZN9USBSerialD0Ev>:
   b6efe:	b510      	push	{r4, lr}
   b6f00:	2114      	movs	r1, #20
   b6f02:	4604      	mov	r4, r0
   b6f04:	f7fd f8c9 	bl	b409a <_ZdlPvj>
   b6f08:	4620      	mov	r0, r4
   b6f0a:	bd10      	pop	{r4, pc}

000b6f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6f0c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f12:	4604      	mov	r4, r0
   b6f14:	4608      	mov	r0, r1
   b6f16:	2100      	movs	r1, #0
   b6f18:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6f1c:	4b04      	ldr	r3, [pc, #16]	; (b6f30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6f1e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6f20:	2301      	movs	r3, #1
  _serial = serial;
   b6f22:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6f24:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6f26:	4611      	mov	r1, r2
   b6f28:	f7ff fa32 	bl	b6390 <HAL_USB_USART_Init>
}
   b6f2c:	4620      	mov	r0, r4
   b6f2e:	bd10      	pop	{r4, pc}
   b6f30:	000b9224 	.word	0x000b9224

000b6f34 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6f34:	7c00      	ldrb	r0, [r0, #16]
   b6f36:	2200      	movs	r2, #0
   b6f38:	f7ff ba32 	b.w	b63a0 <HAL_USB_USART_Begin>

000b6f3c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6f3c:	7c00      	ldrb	r0, [r0, #16]
   b6f3e:	f7ff ba5f 	b.w	b6400 <HAL_USB_USART_Is_Connected>

000b6f42 <_Z19acquireSerialBufferv>:
{
   b6f42:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6f44:	2214      	movs	r2, #20
{
   b6f46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6f48:	2100      	movs	r1, #0
   b6f4a:	f001 fafb 	bl	b8544 <memset>
}
   b6f4e:	4620      	mov	r0, r4
   b6f50:	bd10      	pop	{r4, pc}
	...

000b6f54 <_Z16_fetch_usbserialv>:
{
   b6f54:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6f56:	4c0f      	ldr	r4, [pc, #60]	; (b6f94 <_Z16_fetch_usbserialv+0x40>)
{
   b6f58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6f5a:	a803      	add	r0, sp, #12
   b6f5c:	f7ff fff1 	bl	b6f42 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6f60:	7821      	ldrb	r1, [r4, #0]
   b6f62:	f3bf 8f5b 	dmb	ish
   b6f66:	f011 0101 	ands.w	r1, r1, #1
   b6f6a:	d10f      	bne.n	b6f8c <_Z16_fetch_usbserialv+0x38>
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	9101      	str	r1, [sp, #4]
   b6f70:	f7fd f8a2 	bl	b40b8 <__cxa_guard_acquire>
   b6f74:	9901      	ldr	r1, [sp, #4]
   b6f76:	b148      	cbz	r0, b6f8c <_Z16_fetch_usbserialv+0x38>
   b6f78:	aa03      	add	r2, sp, #12
   b6f7a:	4807      	ldr	r0, [pc, #28]	; (b6f98 <_Z16_fetch_usbserialv+0x44>)
   b6f7c:	f7ff ffc6 	bl	b6f0c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6f80:	4620      	mov	r0, r4
   b6f82:	f7fd f89e 	bl	b40c2 <__cxa_guard_release>
   b6f86:	4805      	ldr	r0, [pc, #20]	; (b6f9c <_Z16_fetch_usbserialv+0x48>)
   b6f88:	f001 fac8 	bl	b851c <atexit>
	return _usbserial;
}
   b6f8c:	4802      	ldr	r0, [pc, #8]	; (b6f98 <_Z16_fetch_usbserialv+0x44>)
   b6f8e:	b008      	add	sp, #32
   b6f90:	bd10      	pop	{r4, pc}
   b6f92:	bf00      	nop
   b6f94:	2003e700 	.word	0x2003e700
   b6f98:	2003e704 	.word	0x2003e704
   b6f9c:	000b6e95 	.word	0x000b6e95

000b6fa0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6fa0:	4770      	bx	lr

000b6fa2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fa2:	7441      	strb	r1, [r0, #17]
}
   b6fa4:	4770      	bx	lr

000b6fa6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6fa6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6fa8:	7c00      	ldrb	r0, [r0, #16]
   b6faa:	f7ff f911 	bl	b61d0 <hal_usart_available_data_for_write>
}
   b6fae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fb2:	bd08      	pop	{r3, pc}

000b6fb4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6fb4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6fb6:	7c00      	ldrb	r0, [r0, #16]
   b6fb8:	f7ff f8e2 	bl	b6180 <hal_usart_available>
}
   b6fbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fc0:	bd08      	pop	{r3, pc}

000b6fc2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6fc2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6fc4:	7c00      	ldrb	r0, [r0, #16]
   b6fc6:	f7ff f8eb 	bl	b61a0 <hal_usart_peek>
}
   b6fca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fce:	bd08      	pop	{r3, pc}

000b6fd0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6fd0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6fd2:	7c00      	ldrb	r0, [r0, #16]
   b6fd4:	f7ff f8dc 	bl	b6190 <hal_usart_read>
}
   b6fd8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fdc:	bd08      	pop	{r3, pc}

000b6fde <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6fde:	7c00      	ldrb	r0, [r0, #16]
   b6fe0:	f7ff b8e6 	b.w	b61b0 <hal_usart_flush>

000b6fe4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fe6:	7c45      	ldrb	r5, [r0, #17]
{
   b6fe8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6fea:	b12d      	cbz	r5, b6ff8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6fec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6fee:	b003      	add	sp, #12
   b6ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6ff4:	f7ff b8bc 	b.w	b6170 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6ff8:	7c00      	ldrb	r0, [r0, #16]
   b6ffa:	9101      	str	r1, [sp, #4]
   b6ffc:	f7ff f8e8 	bl	b61d0 <hal_usart_available_data_for_write>
   b7000:	2800      	cmp	r0, #0
   b7002:	9901      	ldr	r1, [sp, #4]
   b7004:	dcf2      	bgt.n	b6fec <_ZN11USARTSerial5writeEh+0x8>
}
   b7006:	4628      	mov	r0, r5
   b7008:	b003      	add	sp, #12
   b700a:	bd30      	pop	{r4, r5, pc}

000b700c <_ZN11USARTSerialD0Ev>:
   b700c:	b510      	push	{r4, lr}
   b700e:	2114      	movs	r1, #20
   b7010:	4604      	mov	r4, r0
   b7012:	f7fd f842 	bl	b409a <_ZdlPvj>
   b7016:	4620      	mov	r0, r4
   b7018:	bd10      	pop	{r4, pc}
	...

000b701c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b701c:	b510      	push	{r4, lr}
   b701e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7022:	4604      	mov	r4, r0
   b7024:	4608      	mov	r0, r1
   b7026:	4611      	mov	r1, r2
   b7028:	2200      	movs	r2, #0
   b702a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b702e:	4b04      	ldr	r3, [pc, #16]	; (b7040 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7030:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7032:	2301      	movs	r3, #1
  _serial = serial;
   b7034:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7036:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7038:	f7ff f8d2 	bl	b61e0 <hal_usart_init_ex>
}
   b703c:	4620      	mov	r0, r4
   b703e:	bd10      	pop	{r4, pc}
   b7040:	000b9254 	.word	0x000b9254

000b7044 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7044:	4770      	bx	lr

000b7046 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7048:	4606      	mov	r6, r0
   b704a:	4615      	mov	r5, r2
   b704c:	460c      	mov	r4, r1
   b704e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7050:	42bc      	cmp	r4, r7
   b7052:	d006      	beq.n	b7062 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7054:	6833      	ldr	r3, [r6, #0]
   b7056:	f814 1b01 	ldrb.w	r1, [r4], #1
   b705a:	689b      	ldr	r3, [r3, #8]
   b705c:	4630      	mov	r0, r6
   b705e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7060:	e7f6      	b.n	b7050 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7062:	4628      	mov	r0, r5
   b7064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7066 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7066:	7c00      	ldrb	r0, [r0, #16]
   b7068:	2200      	movs	r2, #0
   b706a:	f7ff b8d9 	b.w	b6220 <hal_i2c_write>

000b706e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b706e:	7c00      	ldrb	r0, [r0, #16]
   b7070:	2100      	movs	r1, #0
   b7072:	f7ff b8dd 	b.w	b6230 <hal_i2c_available>

000b7076 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7076:	7c00      	ldrb	r0, [r0, #16]
   b7078:	2100      	movs	r1, #0
   b707a:	f7ff b8e1 	b.w	b6240 <hal_i2c_read>

000b707e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b707e:	7c00      	ldrb	r0, [r0, #16]
   b7080:	2100      	movs	r1, #0
   b7082:	f7ff b8e5 	b.w	b6250 <hal_i2c_peek>

000b7086 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7086:	7c00      	ldrb	r0, [r0, #16]
   b7088:	2100      	movs	r1, #0
   b708a:	f7ff b8e9 	b.w	b6260 <hal_i2c_flush>

000b708e <_ZN7TwoWireD0Ev>:
   b708e:	b510      	push	{r4, lr}
   b7090:	2114      	movs	r1, #20
   b7092:	4604      	mov	r4, r0
   b7094:	f7fd f801 	bl	b409a <_ZdlPvj>
   b7098:	4620      	mov	r0, r4
   b709a:	bd10      	pop	{r4, pc}

000b709c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b709c:	b538      	push	{r3, r4, r5, lr}
   b709e:	4604      	mov	r4, r0
   b70a0:	4615      	mov	r5, r2
   b70a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70a6:	2200      	movs	r2, #0
   b70a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70ac:	4b09      	ldr	r3, [pc, #36]	; (b70d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b70ae:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70b0:	4608      	mov	r0, r1
   b70b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b70b4:	4629      	mov	r1, r5
   b70b6:	f7ff f8e3 	bl	b6280 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70ba:	30bf      	adds	r0, #191	; 0xbf
   b70bc:	d108      	bne.n	b70d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b70be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70c0:	07db      	lsls	r3, r3, #31
   b70c2:	d505      	bpl.n	b70d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b70c4:	6868      	ldr	r0, [r5, #4]
   b70c6:	f7ff fa57 	bl	b6578 <free>
    free(conf.tx_buffer);
   b70ca:	68e8      	ldr	r0, [r5, #12]
   b70cc:	f7ff fa54 	bl	b6578 <free>
}
   b70d0:	4620      	mov	r0, r4
   b70d2:	bd38      	pop	{r3, r4, r5, pc}
   b70d4:	000b9284 	.word	0x000b9284

000b70d8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b70d8:	2300      	movs	r3, #0
   b70da:	7c00      	ldrb	r0, [r0, #16]
   b70dc:	461a      	mov	r2, r3
   b70de:	4619      	mov	r1, r3
   b70e0:	f7ff b886 	b.w	b61f0 <hal_i2c_begin>

000b70e4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b70e4:	7c00      	ldrb	r0, [r0, #16]
   b70e6:	2200      	movs	r2, #0
   b70e8:	f7ff b88a 	b.w	b6200 <hal_i2c_begin_transmission>

000b70ec <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b70ec:	b2c9      	uxtb	r1, r1
   b70ee:	f7ff bff9 	b.w	b70e4 <_ZN7TwoWire17beginTransmissionEh>

000b70f2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b70f2:	7c00      	ldrb	r0, [r0, #16]
   b70f4:	2200      	movs	r2, #0
   b70f6:	f7ff b88b 	b.w	b6210 <hal_i2c_end_transmission>

000b70fa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b70fa:	2101      	movs	r1, #1
   b70fc:	f7ff bff9 	b.w	b70f2 <_ZN7TwoWire15endTransmissionEh>

000b7100 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7100:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7102:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7104:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7108:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b710a:	2201      	movs	r2, #1
   b710c:	f04f 33ff 	mov.w	r3, #4294967295
   b7110:	f10d 0107 	add.w	r1, sp, #7
   b7114:	47a0      	blx	r4
}
   b7116:	b002      	add	sp, #8
   b7118:	bd10      	pop	{r4, pc}

000b711a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b711a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b711c:	6803      	ldr	r3, [r0, #0]
   b711e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7120:	f04f 33ff 	mov.w	r3, #4294967295
   b7124:	46a4      	mov	ip, r4
}
   b7126:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b712a:	4760      	bx	ip

000b712c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b712c:	b513      	push	{r0, r1, r4, lr}
   b712e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7130:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7132:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7136:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7138:	f10d 0107 	add.w	r1, sp, #7
   b713c:	2201      	movs	r2, #1
   b713e:	47a0      	blx	r4
}
   b7140:	b002      	add	sp, #8
   b7142:	bd10      	pop	{r4, pc}

000b7144 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7144:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7146:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7148:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b714c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7150:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7152:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7154:	d008      	beq.n	b7168 <_ZN9TCPClient4readEv+0x24>
   b7156:	6963      	ldr	r3, [r4, #20]
   b7158:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b715c:	1c51      	adds	r1, r2, #1
   b715e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7162:	4413      	add	r3, r2
   b7164:	7918      	ldrb	r0, [r3, #4]
}
   b7166:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7168:	6803      	ldr	r3, [r0, #0]
   b716a:	691b      	ldr	r3, [r3, #16]
   b716c:	4798      	blx	r3
   b716e:	2800      	cmp	r0, #0
   b7170:	d1f1      	bne.n	b7156 <_ZN9TCPClient4readEv+0x12>
   b7172:	f04f 30ff 	mov.w	r0, #4294967295
   b7176:	e7f6      	b.n	b7166 <_ZN9TCPClient4readEv+0x22>

000b7178 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7178:	4770      	bx	lr

000b717a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b717a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b717c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b717e:	43c0      	mvns	r0, r0
   b7180:	0fc0      	lsrs	r0, r0, #31
   b7182:	4770      	bx	lr

000b7184 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7184:	4770      	bx	lr
	...

000b7188 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7188:	4b06      	ldr	r3, [pc, #24]	; (b71a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b718a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b718c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b718e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7192:	d005      	beq.n	b71a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7194:	4608      	mov	r0, r1
   b7196:	f000 fc91 	bl	b7abc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b719a:	2800      	cmp	r0, #0
   b719c:	bf08      	it	eq
   b719e:	2400      	moveq	r4, #0
      }
   b71a0:	4620      	mov	r0, r4
   b71a2:	bd10      	pop	{r4, pc}
   b71a4:	000b91e0 	.word	0x000b91e0

000b71a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b71a8:	b510      	push	{r4, lr}
   b71aa:	21ac      	movs	r1, #172	; 0xac
   b71ac:	4604      	mov	r4, r0
   b71ae:	f7fc ff74 	bl	b409a <_ZdlPvj>
   b71b2:	4620      	mov	r0, r4
   b71b4:	bd10      	pop	{r4, pc}

000b71b6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b71b6:	21ac      	movs	r1, #172	; 0xac
   b71b8:	f7fc bf6f 	b.w	b409a <_ZdlPvj>

000b71bc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b71bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b71c0:	f04f 0800 	mov.w	r8, #0
   b71c4:	b086      	sub	sp, #24
   b71c6:	461c      	mov	r4, r3
   b71c8:	f8c0 8004 	str.w	r8, [r0, #4]
   b71cc:	4605      	mov	r5, r0
   b71ce:	460e      	mov	r6, r1
   b71d0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b71d2:	4641      	mov	r1, r8
   b71d4:	2210      	movs	r2, #16
   b71d6:	a802      	add	r0, sp, #8
   b71d8:	f001 f9b4 	bl	b8544 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b71dc:	1c63      	adds	r3, r4, #1
   b71de:	d009      	beq.n	b71f4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b71e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b71e4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b71e8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b71ec:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b71f0:	435c      	muls	r4, r3
   b71f2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b71f4:	6968      	ldr	r0, [r5, #20]
   b71f6:	2310      	movs	r3, #16
   b71f8:	9300      	str	r3, [sp, #0]
   b71fa:	6800      	ldr	r0, [r0, #0]
   b71fc:	ab02      	add	r3, sp, #8
   b71fe:	f241 0205 	movw	r2, #4101	; 0x1005
   b7202:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7206:	f7ff f843 	bl	b6290 <sock_setsockopt>
    if (ret < 0) {
   b720a:	2800      	cmp	r0, #0
   b720c:	da07      	bge.n	b721e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b720e:	f7ff f9cb 	bl	b65a8 <__errno>
   b7212:	6803      	ldr	r3, [r0, #0]
   b7214:	606b      	str	r3, [r5, #4]
        return 0;
   b7216:	2000      	movs	r0, #0
}
   b7218:	b006      	add	sp, #24
   b721a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b721e:	6968      	ldr	r0, [r5, #20]
   b7220:	2300      	movs	r3, #0
   b7222:	6800      	ldr	r0, [r0, #0]
   b7224:	463a      	mov	r2, r7
   b7226:	4631      	mov	r1, r6
   b7228:	f7ff f852 	bl	b62d0 <sock_send>
    if (ret < 0) {
   b722c:	1e03      	subs	r3, r0, #0
   b722e:	dbee      	blt.n	b720e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7230:	4618      	mov	r0, r3
   b7232:	e7f1      	b.n	b7218 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7234 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7234:	b530      	push	{r4, r5, lr}
   b7236:	b087      	sub	sp, #28
   b7238:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b723a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b723c:	4668      	mov	r0, sp
   b723e:	f7ff fe17 	bl	b6e70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7244:	3404      	adds	r4, #4
   b7246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7248:	682b      	ldr	r3, [r5, #0]
   b724a:	7023      	strb	r3, [r4, #0]
    }
   b724c:	b007      	add	sp, #28
   b724e:	bd30      	pop	{r4, r5, pc}

000b7250 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7250:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7252:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7254:	4b05      	ldr	r3, [pc, #20]	; (b726c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7256:	4604      	mov	r4, r0
   b7258:	358c      	adds	r5, #140	; 0x8c
   b725a:	f844 3b04 	str.w	r3, [r4], #4
   b725e:	4606      	mov	r6, r0
   b7260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7264:	682b      	ldr	r3, [r5, #0]
   b7266:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7268:	4630      	mov	r0, r6
   b726a:	bd70      	pop	{r4, r5, r6, pc}
   b726c:	000b9210 	.word	0x000b9210

000b7270 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7274:	4698      	mov	r8, r3
    stop();
   b7276:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7278:	b093      	sub	sp, #76	; 0x4c
   b727a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b727c:	2400      	movs	r4, #0
    stop();
   b727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7280:	4606      	mov	r6, r0
   b7282:	4617      	mov	r7, r2
    stop();
   b7284:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7286:	4628      	mov	r0, r5
   b7288:	466b      	mov	r3, sp
   b728a:	4622      	mov	r2, r4
   b728c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b728e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7290:	f7fe fee6 	bl	b6060 <netdb_getaddrinfo>
   b7294:	4605      	mov	r5, r0
   b7296:	2800      	cmp	r0, #0
   b7298:	d163      	bne.n	b7362 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b729a:	9b00      	ldr	r3, [sp, #0]
   b729c:	2b00      	cmp	r3, #0
   b729e:	d04b      	beq.n	b7338 <_ZN9TCPClient7connectEPKctm+0xc8>
   b72a0:	695b      	ldr	r3, [r3, #20]
   b72a2:	2b00      	cmp	r3, #0
   b72a4:	d048      	beq.n	b7338 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b72a6:	a806      	add	r0, sp, #24
   b72a8:	f7ff fd9e 	bl	b6de8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b72ac:	9b00      	ldr	r3, [sp, #0]
   b72ae:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b72b0:	7863      	ldrb	r3, [r4, #1]
   b72b2:	2b02      	cmp	r3, #2
   b72b4:	d104      	bne.n	b72c0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b72b6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b72b8:	a806      	add	r0, sp, #24
   b72ba:	f7ff ffbb 	bl	b7234 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b72be:	e026      	b.n	b730e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b72c0:	2b0a      	cmp	r3, #10
   b72c2:	d124      	bne.n	b730e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b72c4:	2211      	movs	r2, #17
   b72c6:	4629      	mov	r1, r5
   b72c8:	a801      	add	r0, sp, #4
   b72ca:	f001 f93b 	bl	b8544 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b72ce:	68a3      	ldr	r3, [r4, #8]
   b72d0:	2b00      	cmp	r3, #0
   b72d2:	d038      	beq.n	b7346 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b72d4:	f104 0308 	add.w	r3, r4, #8
   b72d8:	f10d 0c04 	add.w	ip, sp, #4
   b72dc:	3418      	adds	r4, #24
   b72de:	6818      	ldr	r0, [r3, #0]
   b72e0:	6859      	ldr	r1, [r3, #4]
   b72e2:	4662      	mov	r2, ip
   b72e4:	c203      	stmia	r2!, {r0, r1}
   b72e6:	3308      	adds	r3, #8
   b72e8:	42a3      	cmp	r3, r4
   b72ea:	4694      	mov	ip, r2
   b72ec:	d1f7      	bne.n	b72de <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b72ee:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b72f0:	a901      	add	r1, sp, #4
   b72f2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b72f4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b72f8:	f7ff fd84 	bl	b6e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b72fc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7300:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7304:	ac07      	add	r4, sp, #28
   b7306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7308:	f8dc 3000 	ldr.w	r3, [ip]
   b730c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b730e:	a806      	add	r0, sp, #24
   b7310:	f7ff fd8a 	bl	b6e28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7314:	b180      	cbz	r0, b7338 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7316:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7318:	ad07      	add	r5, sp, #28
   b731a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b731e:	4b12      	ldr	r3, [pc, #72]	; (b7368 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7320:	930c      	str	r3, [sp, #48]	; 0x30
   b7322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7324:	ac0d      	add	r4, sp, #52	; 0x34
   b7326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7328:	682b      	ldr	r3, [r5, #0]
   b732a:	7023      	strb	r3, [r4, #0]
   b732c:	463a      	mov	r2, r7
   b732e:	4643      	mov	r3, r8
   b7330:	a90c      	add	r1, sp, #48	; 0x30
   b7332:	4630      	mov	r0, r6
   b7334:	47c8      	blx	r9
   b7336:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7338:	9800      	ldr	r0, [sp, #0]
   b733a:	f7fe fe89 	bl	b6050 <netdb_freeaddrinfo>
}
   b733e:	4628      	mov	r0, r5
   b7340:	b013      	add	sp, #76	; 0x4c
   b7342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7346:	68e3      	ldr	r3, [r4, #12]
   b7348:	2b00      	cmp	r3, #0
   b734a:	d1c3      	bne.n	b72d4 <_ZN9TCPClient7connectEPKctm+0x64>
   b734c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7350:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7354:	f7fe fefc 	bl	b6150 <inet_htonl>
   b7358:	4581      	cmp	r9, r0
   b735a:	d1bb      	bne.n	b72d4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b735c:	f104 0114 	add.w	r1, r4, #20
   b7360:	e7aa      	b.n	b72b8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7362:	4625      	mov	r5, r4
   b7364:	e7e8      	b.n	b7338 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7366:	bf00      	nop
   b7368:	000b9210 	.word	0x000b9210

000b736c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b736c:	b538      	push	{r3, r4, r5, lr}
   b736e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7370:	681a      	ldr	r2, [r3, #0]
   b7372:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7374:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7376:	da10      	bge.n	b739a <_ZN9TCPClient9connectedEv+0x2e>
   b7378:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b737c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7380:	429a      	cmp	r2, r3
   b7382:	d10a      	bne.n	b739a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7384:	6803      	ldr	r3, [r0, #0]
   b7386:	691b      	ldr	r3, [r3, #16]
   b7388:	4798      	blx	r3
        if (!rv) {
   b738a:	4604      	mov	r4, r0
   b738c:	b928      	cbnz	r0, b739a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b738e:	682b      	ldr	r3, [r5, #0]
   b7390:	4628      	mov	r0, r5
   b7392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7394:	4798      	blx	r3
        rv = available();
   b7396:	4620      	mov	r0, r4
}
   b7398:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b739a:	2001      	movs	r0, #1
   b739c:	e7fc      	b.n	b7398 <_ZN9TCPClient9connectedEv+0x2c>

000b739e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b739e:	b510      	push	{r4, lr}
   b73a0:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b73a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b73aa:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b73ac:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b73ae:	d005      	beq.n	b73bc <_ZN9TCPClient4peekEv+0x1e>
   b73b0:	6963      	ldr	r3, [r4, #20]
   b73b2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b73b6:	4413      	add	r3, r2
   b73b8:	7918      	ldrb	r0, [r3, #4]
}
   b73ba:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b73bc:	6803      	ldr	r3, [r0, #0]
   b73be:	691b      	ldr	r3, [r3, #16]
   b73c0:	4798      	blx	r3
   b73c2:	2800      	cmp	r0, #0
   b73c4:	d1f4      	bne.n	b73b0 <_ZN9TCPClient4peekEv+0x12>
   b73c6:	f04f 30ff 	mov.w	r0, #4294967295
   b73ca:	e7f6      	b.n	b73ba <_ZN9TCPClient4peekEv+0x1c>

000b73cc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b73cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73ce:	6943      	ldr	r3, [r0, #20]
   b73d0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b73d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73d6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b73da:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b73dc:	4605      	mov	r5, r0
   b73de:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b73e0:	d016      	beq.n	b7410 <_ZN9TCPClient4readEPhj+0x44>
   b73e2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b73e4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b73e8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b73ec:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b73ee:	42bc      	cmp	r4, r7
   b73f0:	bf28      	it	cs
   b73f2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b73f4:	3304      	adds	r3, #4
   b73f6:	4622      	mov	r2, r4
   b73f8:	4419      	add	r1, r3
   b73fa:	4630      	mov	r0, r6
   b73fc:	f001 f894 	bl	b8528 <memcpy>
   b7400:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7402:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7406:	4423      	add	r3, r4
   b7408:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b740c:	4620      	mov	r0, r4
   b740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7410:	6803      	ldr	r3, [r0, #0]
   b7412:	691b      	ldr	r3, [r3, #16]
   b7414:	4798      	blx	r3
   b7416:	2800      	cmp	r0, #0
   b7418:	d1e3      	bne.n	b73e2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b741a:	f04f 34ff 	mov.w	r4, #4294967295
   b741e:	e7f5      	b.n	b740c <_ZN9TCPClient4readEPhj+0x40>

000b7420 <_ZN9TCPClient12flush_bufferEv>:
   b7420:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7422:	2300      	movs	r3, #0
   b7424:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7428:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b742a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b742e:	4770      	bx	lr

000b7430 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7434:	461f      	mov	r7, r3
    stop();
   b7436:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7438:	460c      	mov	r4, r1
    stop();
   b743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b743c:	b08a      	sub	sp, #40	; 0x28
   b743e:	4605      	mov	r5, r0
   b7440:	4616      	mov	r6, r2
    stop();
   b7442:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7444:	7d23      	ldrb	r3, [r4, #20]
   b7446:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b744a:	2b04      	cmp	r3, #4
   b744c:	bf0c      	ite	eq
   b744e:	2002      	moveq	r0, #2
   b7450:	200a      	movne	r0, #10
   b7452:	2206      	movs	r2, #6
   b7454:	2101      	movs	r1, #1
   b7456:	f7fe ff43 	bl	b62e0 <sock_socket>
   b745a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b745e:	696b      	ldr	r3, [r5, #20]
   b7460:	681b      	ldr	r3, [r3, #0]
   b7462:	2b00      	cmp	r3, #0
   b7464:	da08      	bge.n	b7478 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7466:	682b      	ldr	r3, [r5, #0]
   b7468:	4628      	mov	r0, r5
   b746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b746c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b746e:	4798      	blx	r3
}
   b7470:	4620      	mov	r0, r4
   b7472:	b00a      	add	sp, #40	; 0x28
   b7474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7478:	4628      	mov	r0, r5
   b747a:	f7ff ffd1 	bl	b7420 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b747e:	b1b7      	cbz	r7, b74ae <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7480:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7482:	a903      	add	r1, sp, #12
   b7484:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7486:	9303      	str	r3, [sp, #12]
   b7488:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b748c:	f7fe fe20 	bl	b60d0 <if_index_to_name>
   b7490:	2800      	cmp	r0, #0
   b7492:	d1e8      	bne.n	b7466 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7494:	6968      	ldr	r0, [r5, #20]
   b7496:	2306      	movs	r3, #6
   b7498:	9300      	str	r3, [sp, #0]
   b749a:	6800      	ldr	r0, [r0, #0]
   b749c:	ab03      	add	r3, sp, #12
   b749e:	f241 020b 	movw	r2, #4107	; 0x100b
   b74a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b74a6:	f7fe fef3 	bl	b6290 <sock_setsockopt>
   b74aa:	2800      	cmp	r0, #0
   b74ac:	d1db      	bne.n	b7466 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b74ae:	221c      	movs	r2, #28
   b74b0:	2100      	movs	r1, #0
   b74b2:	a803      	add	r0, sp, #12
   b74b4:	f001 f846 	bl	b8544 <memset>
    if (ip.version() == 4) {
   b74b8:	7d23      	ldrb	r3, [r4, #20]
   b74ba:	2b04      	cmp	r3, #4
   b74bc:	d11d      	bne.n	b74fa <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b74be:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b74c2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b74c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b74c8:	f7fe fe4a 	bl	b6160 <inet_htons>
   b74cc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b74d0:	6860      	ldr	r0, [r4, #4]
   b74d2:	f7fe fe3d 	bl	b6150 <inet_htonl>
   b74d6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b74d8:	696b      	ldr	r3, [r5, #20]
   b74da:	221c      	movs	r2, #28
   b74dc:	6818      	ldr	r0, [r3, #0]
   b74de:	a903      	add	r1, sp, #12
   b74e0:	f7fe fee6 	bl	b62b0 <sock_connect>
   b74e4:	2800      	cmp	r0, #0
   b74e6:	d1be      	bne.n	b7466 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b74e8:	3404      	adds	r4, #4
   b74ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b74ec:	696d      	ldr	r5, [r5, #20]
   b74ee:	358c      	adds	r5, #140	; 0x8c
   b74f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b74f2:	6823      	ldr	r3, [r4, #0]
   b74f4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b74f6:	2401      	movs	r4, #1
   b74f8:	e7ba      	b.n	b7470 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b74fa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b74fe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7500:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7504:	f7fe fe2c 	bl	b6160 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7508:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b750a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b750e:	1d23      	adds	r3, r4, #4
   b7510:	f104 0714 	add.w	r7, r4, #20
   b7514:	6818      	ldr	r0, [r3, #0]
   b7516:	6859      	ldr	r1, [r3, #4]
   b7518:	4632      	mov	r2, r6
   b751a:	c203      	stmia	r2!, {r0, r1}
   b751c:	3308      	adds	r3, #8
   b751e:	42bb      	cmp	r3, r7
   b7520:	4616      	mov	r6, r2
   b7522:	d1f7      	bne.n	b7514 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7524:	e7d8      	b.n	b74d8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7528 <_ZN9TCPClient9availableEv>:
{
   b7528:	b530      	push	{r4, r5, lr}
   b752a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b752c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7530:	b08b      	sub	sp, #44	; 0x2c
   b7532:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7534:	b12b      	cbz	r3, b7542 <_ZN9TCPClient9availableEv+0x1a>
   b7536:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b753a:	429a      	cmp	r2, r3
   b753c:	d101      	bne.n	b7542 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b753e:	f7ff ff6f 	bl	b7420 <_ZN9TCPClient12flush_bufferEv>
   b7542:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7544:	6808      	ldr	r0, [r1, #0]
   b7546:	2800      	cmp	r0, #0
   b7548:	db18      	blt.n	b757c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b754a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b754e:	2d7f      	cmp	r5, #127	; 0x7f
   b7550:	d814      	bhi.n	b757c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7552:	3104      	adds	r1, #4
   b7554:	2308      	movs	r3, #8
   b7556:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b755a:	4429      	add	r1, r5
   b755c:	f7fe feb0 	bl	b62c0 <sock_recv>
            if (ret > 0) {
   b7560:	2800      	cmp	r0, #0
   b7562:	dd13      	ble.n	b758c <_ZN9TCPClient9availableEv+0x64>
   b7564:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7566:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b756a:	b90a      	cbnz	r2, b7570 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b756c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7570:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7572:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7576:	4410      	add	r0, r2
   b7578:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b757c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b757e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7582:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7586:	1ac0      	subs	r0, r0, r3
   b7588:	b00b      	add	sp, #44	; 0x2c
   b758a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b758c:	f7ff f80c 	bl	b65a8 <__errno>
   b7590:	6803      	ldr	r3, [r0, #0]
   b7592:	2b0b      	cmp	r3, #11
   b7594:	d0f2      	beq.n	b757c <_ZN9TCPClient9availableEv+0x54>
   b7596:	f7ff f807 	bl	b65a8 <__errno>
   b759a:	6803      	ldr	r3, [r0, #0]
   b759c:	2b0b      	cmp	r3, #11
   b759e:	d0ed      	beq.n	b757c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b75a0:	2320      	movs	r3, #32
   b75a2:	2500      	movs	r5, #0
   b75a4:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b75a8:	f7fe fffe 	bl	b65a8 <__errno>
   b75ac:	6803      	ldr	r3, [r0, #0]
   b75ae:	9301      	str	r3, [sp, #4]
   b75b0:	4b08      	ldr	r3, [pc, #32]	; (b75d4 <_ZN9TCPClient9availableEv+0xac>)
   b75b2:	4909      	ldr	r1, [pc, #36]	; (b75d8 <_ZN9TCPClient9availableEv+0xb0>)
   b75b4:	9300      	str	r3, [sp, #0]
   b75b6:	aa02      	add	r2, sp, #8
   b75b8:	462b      	mov	r3, r5
   b75ba:	2032      	movs	r0, #50	; 0x32
   b75bc:	f7fe ff30 	bl	b6420 <log_message>
                    sock_close(d_->sock);
   b75c0:	6963      	ldr	r3, [r4, #20]
   b75c2:	6818      	ldr	r0, [r3, #0]
   b75c4:	f7fe fe6c 	bl	b62a0 <sock_close>
   b75c8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b75ca:	f04f 32ff 	mov.w	r2, #4294967295
   b75ce:	601a      	str	r2, [r3, #0]
   b75d0:	e7d4      	b.n	b757c <_ZN9TCPClient9availableEv+0x54>
   b75d2:	bf00      	nop
   b75d4:	000b92ab 	.word	0x000b92ab
   b75d8:	000b92a4 	.word	0x000b92a4

000b75dc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b75dc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b75de:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b75e0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b75e2:	6818      	ldr	r0, [r3, #0]
   b75e4:	2800      	cmp	r0, #0
   b75e6:	db01      	blt.n	b75ec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b75e8:	f7fe fe5a 	bl	b62a0 <sock_close>
   b75ec:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b75ee:	f04f 32ff 	mov.w	r2, #4294967295
   b75f2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b75f4:	6960      	ldr	r0, [r4, #20]
   b75f6:	2211      	movs	r2, #17
   b75f8:	2100      	movs	r1, #0
   b75fa:	308c      	adds	r0, #140	; 0x8c
   b75fc:	f000 ffa2 	bl	b8544 <memset>
    flush_buffer();
   b7600:	4620      	mov	r0, r4
}
   b7602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7606:	f7ff bf0b 	b.w	b7420 <_ZN9TCPClient12flush_bufferEv>

000b760a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b760a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b760c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b760e:	4604      	mov	r4, r0
          total(0) {
   b7610:	6001      	str	r1, [r0, #0]
   b7612:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7616:	3088      	adds	r0, #136	; 0x88
   b7618:	f7ff fbe6 	bl	b6de8 <_ZN9IPAddressC1Ev>
}
   b761c:	4620      	mov	r0, r4
   b761e:	bd10      	pop	{r4, pc}

000b7620 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7622:	2300      	movs	r3, #0
   b7624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7628:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b762c:	4a0e      	ldr	r2, [pc, #56]	; (b7668 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b762e:	6103      	str	r3, [r0, #16]
   b7630:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7632:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7634:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7636:	20ac      	movs	r0, #172	; 0xac
   b7638:	9101      	str	r1, [sp, #4]
   b763a:	f7fc fd2a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b763e:	1e05      	subs	r5, r0, #0
   b7640:	f105 060c 	add.w	r6, r5, #12
   b7644:	d008      	beq.n	b7658 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7646:	2301      	movs	r3, #1
   b7648:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b764c:	4b07      	ldr	r3, [pc, #28]	; (b766c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b764e:	9901      	ldr	r1, [sp, #4]
   b7650:	602b      	str	r3, [r5, #0]
   b7652:	4630      	mov	r0, r6
   b7654:	f7ff ffd9 	bl	b760a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7658:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b765a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b765e:	f7ff fedf 	bl	b7420 <_ZN9TCPClient12flush_bufferEv>
}
   b7662:	b002      	add	sp, #8
   b7664:	bd70      	pop	{r4, r5, r6, pc}
   b7666:	bf00      	nop
   b7668:	000b92e0 	.word	0x000b92e0
   b766c:	000b92c4 	.word	0x000b92c4

000b7670 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7670:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7672:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7676:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7678:	f7ff ffd2 	bl	b7620 <_ZN9TCPClientC1Ei>
}
   b767c:	4620      	mov	r0, r4
   b767e:	bd10      	pop	{r4, pc}

000b7680 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7680:	b510      	push	{r4, lr}
   b7682:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7684:	6800      	ldr	r0, [r0, #0]
   b7686:	2800      	cmp	r0, #0
   b7688:	db01      	blt.n	b768e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b768a:	f7fe fe09 	bl	b62a0 <sock_close>
    }
}
   b768e:	4620      	mov	r0, r4
   b7690:	bd10      	pop	{r4, pc}

000b7692 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7692:	300c      	adds	r0, #12
   b7694:	f7ff bff4 	b.w	b7680 <_ZN9TCPClient4DataD1Ev>

000b7698 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7698:	2200      	movs	r2, #0
   b769a:	6840      	ldr	r0, [r0, #4]
   b769c:	4611      	mov	r1, r2
   b769e:	f7fe bf03 	b.w	b64a8 <network_ready>

000b76a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b76a2:	2200      	movs	r2, #0
   b76a4:	6840      	ldr	r0, [r0, #4]
   b76a6:	4611      	mov	r1, r2
   b76a8:	f7fe bf1e 	b.w	b64e8 <network_listening>

000b76ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b76ac:	2200      	movs	r2, #0
   b76ae:	6840      	ldr	r0, [r0, #4]
   b76b0:	4611      	mov	r1, r2
   b76b2:	f7fe bf31 	b.w	b6518 <network_get_listen_timeout>

000b76b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b76b6:	6840      	ldr	r0, [r0, #4]
   b76b8:	2200      	movs	r2, #0
   b76ba:	f7fe bf25 	b.w	b6508 <network_set_listen_timeout>

000b76be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b76be:	6840      	ldr	r0, [r0, #4]
   b76c0:	2200      	movs	r2, #0
   b76c2:	f081 0101 	eor.w	r1, r1, #1
   b76c6:	f7fe bf07 	b.w	b64d8 <network_listen>

000b76ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b76ca:	2300      	movs	r3, #0
   b76cc:	6840      	ldr	r0, [r0, #4]
   b76ce:	461a      	mov	r2, r3
   b76d0:	4619      	mov	r1, r3
   b76d2:	f7fe bef9 	b.w	b64c8 <network_off>

000b76d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b76d6:	2300      	movs	r3, #0
   b76d8:	6840      	ldr	r0, [r0, #4]
   b76da:	461a      	mov	r2, r3
   b76dc:	4619      	mov	r1, r3
   b76de:	f7fe beeb 	b.w	b64b8 <network_on>

000b76e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b76e2:	2200      	movs	r2, #0
   b76e4:	6840      	ldr	r0, [r0, #4]
   b76e6:	4611      	mov	r1, r2
   b76e8:	f7fe bece 	b.w	b6488 <network_connecting>

000b76ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b76ec:	6840      	ldr	r0, [r0, #4]
   b76ee:	2200      	movs	r2, #0
   b76f0:	2102      	movs	r1, #2
   b76f2:	f7fe bed1 	b.w	b6498 <network_disconnect>

000b76f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b76f6:	2300      	movs	r3, #0
   b76f8:	6840      	ldr	r0, [r0, #4]
   b76fa:	461a      	mov	r2, r3
   b76fc:	f7fe bebc 	b.w	b6478 <network_connect>

000b7700 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7700:	4b02      	ldr	r3, [pc, #8]	; (b770c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7702:	2204      	movs	r2, #4
   b7704:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7706:	4a02      	ldr	r2, [pc, #8]	; (b7710 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7708:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b770a:	4770      	bx	lr
   b770c:	2003e718 	.word	0x2003e718
   b7710:	000b932c 	.word	0x000b932c

000b7714 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7714:	2300      	movs	r3, #0
   b7716:	6840      	ldr	r0, [r0, #4]
   b7718:	461a      	mov	r2, r3
   b771a:	f7fe bead 	b.w	b6478 <network_connect>

000b771e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b771e:	6840      	ldr	r0, [r0, #4]
   b7720:	2200      	movs	r2, #0
   b7722:	2102      	movs	r1, #2
   b7724:	f7fe beb8 	b.w	b6498 <network_disconnect>

000b7728 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7728:	2200      	movs	r2, #0
   b772a:	6840      	ldr	r0, [r0, #4]
   b772c:	4611      	mov	r1, r2
   b772e:	f7fe beab 	b.w	b6488 <network_connecting>

000b7732 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7732:	2200      	movs	r2, #0
   b7734:	6840      	ldr	r0, [r0, #4]
   b7736:	4611      	mov	r1, r2
   b7738:	f7fe beb6 	b.w	b64a8 <network_ready>

000b773c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b773c:	2300      	movs	r3, #0
   b773e:	6840      	ldr	r0, [r0, #4]
   b7740:	461a      	mov	r2, r3
   b7742:	4619      	mov	r1, r3
   b7744:	f7fe beb8 	b.w	b64b8 <network_on>

000b7748 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7748:	2300      	movs	r3, #0
   b774a:	6840      	ldr	r0, [r0, #4]
   b774c:	461a      	mov	r2, r3
   b774e:	4619      	mov	r1, r3
   b7750:	f7fe beba 	b.w	b64c8 <network_off>

000b7754 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7754:	6840      	ldr	r0, [r0, #4]
   b7756:	2100      	movs	r1, #0
   b7758:	f7fe bee6 	b.w	b6528 <network_is_on>

000b775c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b775c:	6840      	ldr	r0, [r0, #4]
   b775e:	2100      	movs	r1, #0
   b7760:	f7fe beea 	b.w	b6538 <network_is_off>

000b7764 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7764:	6840      	ldr	r0, [r0, #4]
   b7766:	2200      	movs	r2, #0
   b7768:	f081 0101 	eor.w	r1, r1, #1
   b776c:	f7fe beb4 	b.w	b64d8 <network_listen>

000b7770 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7770:	6840      	ldr	r0, [r0, #4]
   b7772:	2200      	movs	r2, #0
   b7774:	f7fe bec8 	b.w	b6508 <network_set_listen_timeout>

000b7778 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7778:	2200      	movs	r2, #0
   b777a:	6840      	ldr	r0, [r0, #4]
   b777c:	4611      	mov	r1, r2
   b777e:	f7fe becb 	b.w	b6518 <network_get_listen_timeout>

000b7782 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7782:	2200      	movs	r2, #0
   b7784:	6840      	ldr	r0, [r0, #4]
   b7786:	4611      	mov	r1, r2
   b7788:	f7fe beae 	b.w	b64e8 <network_listening>

000b778c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b778c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7790:	b095      	sub	sp, #84	; 0x54
   b7792:	4614      	mov	r4, r2
   b7794:	460d      	mov	r5, r1
   b7796:	4607      	mov	r7, r0
    IPAddress addr;
   b7798:	f7ff fb26 	bl	b6de8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b779c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b779e:	221c      	movs	r2, #28
   b77a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b77a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b77a4:	f000 fece 	bl	b8544 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b77a8:	2340      	movs	r3, #64	; 0x40
   b77aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b77ac:	4620      	mov	r0, r4
   b77ae:	466b      	mov	r3, sp
   b77b0:	aa0c      	add	r2, sp, #48	; 0x30
   b77b2:	2100      	movs	r1, #0
   b77b4:	f7fe fc54 	bl	b6060 <netdb_getaddrinfo>
    if (!r) {
   b77b8:	4604      	mov	r4, r0
   b77ba:	2800      	cmp	r0, #0
   b77bc:	d14b      	bne.n	b7856 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b77be:	4602      	mov	r2, r0
   b77c0:	2101      	movs	r1, #1
   b77c2:	6868      	ldr	r0, [r5, #4]
   b77c4:	f7fe fe70 	bl	b64a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b77ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77cc:	4622      	mov	r2, r4
   b77ce:	6868      	ldr	r0, [r5, #4]
   b77d0:	f7fe fe6a 	bl	b64a8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b77d6:	4681      	mov	r9, r0
        bool ok = false;
   b77d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77da:	2e00      	cmp	r6, #0
   b77dc:	d03b      	beq.n	b7856 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b77de:	2900      	cmp	r1, #0
   b77e0:	d139      	bne.n	b7856 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b77e2:	6873      	ldr	r3, [r6, #4]
   b77e4:	2b02      	cmp	r3, #2
   b77e6:	d003      	beq.n	b77f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b77e8:	2b0a      	cmp	r3, #10
   b77ea:	d011      	beq.n	b7810 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b77ec:	69f6      	ldr	r6, [r6, #28]
   b77ee:	e7f4      	b.n	b77da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b77f0:	f1b8 0f00 	cmp.w	r8, #0
   b77f4:	d0fa      	beq.n	b77ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b77f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b77f8:	a806      	add	r0, sp, #24
   b77fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b77fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b77fe:	f7ff fb37 	bl	b6e70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7804:	1d3c      	adds	r4, r7, #4
   b7806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7808:	682b      	ldr	r3, [r5, #0]
   b780a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b780c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b780e:	e7ed      	b.n	b77ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7810:	f1b9 0f00 	cmp.w	r9, #0
   b7814:	d0ea      	beq.n	b77ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7816:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7818:	2210      	movs	r2, #16
   b781a:	a801      	add	r0, sp, #4
   b781c:	f000 fe92 	bl	b8544 <memset>
                    a.v = 6;
   b7820:	2306      	movs	r3, #6
   b7822:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7826:	ad01      	add	r5, sp, #4
   b7828:	f104 0308 	add.w	r3, r4, #8
   b782c:	3418      	adds	r4, #24
   b782e:	6818      	ldr	r0, [r3, #0]
   b7830:	6859      	ldr	r1, [r3, #4]
   b7832:	462a      	mov	r2, r5
   b7834:	c203      	stmia	r2!, {r0, r1}
   b7836:	3308      	adds	r3, #8
   b7838:	42a3      	cmp	r3, r4
   b783a:	4615      	mov	r5, r2
   b783c:	d1f7      	bne.n	b782e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b783e:	a901      	add	r1, sp, #4
   b7840:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7842:	ad07      	add	r5, sp, #28
   b7844:	f7ff fade 	bl	b6e04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b784a:	1d3c      	adds	r4, r7, #4
   b784c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b784e:	682b      	ldr	r3, [r5, #0]
   b7850:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7852:	4649      	mov	r1, r9
   b7854:	e7ca      	b.n	b77ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7856:	9800      	ldr	r0, [sp, #0]
   b7858:	f7fe fbfa 	bl	b6050 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b785c:	4638      	mov	r0, r7
   b785e:	b015      	add	sp, #84	; 0x54
   b7860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7864 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7864:	4b02      	ldr	r3, [pc, #8]	; (b7870 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7866:	4a03      	ldr	r2, [pc, #12]	; (b7874 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7868:	601a      	str	r2, [r3, #0]
   b786a:	2200      	movs	r2, #0
   b786c:	605a      	str	r2, [r3, #4]

} // spark
   b786e:	4770      	bx	lr
   b7870:	2003e720 	.word	0x2003e720
   b7874:	000b9368 	.word	0x000b9368

000b7878 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7878:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b787a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b787c:	d902      	bls.n	b7884 <pinAvailable+0xc>
    return false;
   b787e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7880:	b002      	add	sp, #8
   b7882:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7884:	f1a0 030b 	sub.w	r3, r0, #11
   b7888:	2b02      	cmp	r3, #2
   b788a:	d81a      	bhi.n	b78c2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b788c:	4c17      	ldr	r4, [pc, #92]	; (b78ec <pinAvailable+0x74>)
   b788e:	7821      	ldrb	r1, [r4, #0]
   b7890:	f3bf 8f5b 	dmb	ish
   b7894:	f011 0101 	ands.w	r1, r1, #1
   b7898:	d10b      	bne.n	b78b2 <pinAvailable+0x3a>
   b789a:	4620      	mov	r0, r4
   b789c:	9101      	str	r1, [sp, #4]
   b789e:	f7fc fc0b 	bl	b40b8 <__cxa_guard_acquire>
   b78a2:	9901      	ldr	r1, [sp, #4]
   b78a4:	b128      	cbz	r0, b78b2 <pinAvailable+0x3a>
   b78a6:	4812      	ldr	r0, [pc, #72]	; (b78f0 <pinAvailable+0x78>)
   b78a8:	f7fe feda 	bl	b6660 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b78ac:	4620      	mov	r0, r4
   b78ae:	f7fc fc08 	bl	b40c2 <__cxa_guard_release>
   b78b2:	4b0f      	ldr	r3, [pc, #60]	; (b78f0 <pinAvailable+0x78>)
   b78b4:	7818      	ldrb	r0, [r3, #0]
   b78b6:	f7fe fd4b 	bl	b6350 <hal_spi_is_enabled>
   b78ba:	2800      	cmp	r0, #0
   b78bc:	d1df      	bne.n	b787e <pinAvailable+0x6>
  return true; // 'pin' is available
   b78be:	2001      	movs	r0, #1
   b78c0:	e7de      	b.n	b7880 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b78c2:	2801      	cmp	r0, #1
   b78c4:	d809      	bhi.n	b78da <pinAvailable+0x62>
   b78c6:	f000 f8d3 	bl	b7a70 <_Z19__fetch_global_Wirev>
   b78ca:	2100      	movs	r1, #0
   b78cc:	7c00      	ldrb	r0, [r0, #16]
   b78ce:	f7fe fccf 	bl	b6270 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b78d2:	f080 0001 	eor.w	r0, r0, #1
   b78d6:	b2c0      	uxtb	r0, r0
   b78d8:	e7d2      	b.n	b7880 <pinAvailable+0x8>
   b78da:	3809      	subs	r0, #9
   b78dc:	2801      	cmp	r0, #1
   b78de:	d8ee      	bhi.n	b78be <pinAvailable+0x46>
   b78e0:	f000 f886 	bl	b79f0 <_Z22__fetch_global_Serial1v>
   b78e4:	7c00      	ldrb	r0, [r0, #16]
   b78e6:	f7fe fc6b 	bl	b61c0 <hal_usart_is_enabled>
   b78ea:	e7f2      	b.n	b78d2 <pinAvailable+0x5a>
   b78ec:	2003e6b4 	.word	0x2003e6b4
   b78f0:	2003e6b8 	.word	0x2003e6b8

000b78f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78f4:	2823      	cmp	r0, #35	; 0x23
{
   b78f6:	b538      	push	{r3, r4, r5, lr}
   b78f8:	4604      	mov	r4, r0
   b78fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b78fc:	d80a      	bhi.n	b7914 <pinMode+0x20>
   b78fe:	29ff      	cmp	r1, #255	; 0xff
   b7900:	d008      	beq.n	b7914 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7902:	f7ff ffb9 	bl	b7878 <pinAvailable>
   b7906:	b128      	cbz	r0, b7914 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7908:	4629      	mov	r1, r5
   b790a:	4620      	mov	r0, r4
}
   b790c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7910:	f7fe bbbe 	b.w	b6090 <HAL_Pin_Mode>
}
   b7914:	bd38      	pop	{r3, r4, r5, pc}

000b7916 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7916:	b538      	push	{r3, r4, r5, lr}
   b7918:	4604      	mov	r4, r0
   b791a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b791c:	f7fe fbc0 	bl	b60a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7920:	28ff      	cmp	r0, #255	; 0xff
   b7922:	d010      	beq.n	b7946 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7924:	2806      	cmp	r0, #6
   b7926:	d804      	bhi.n	b7932 <digitalWrite+0x1c>
   b7928:	234d      	movs	r3, #77	; 0x4d
   b792a:	fa23 f000 	lsr.w	r0, r3, r0
   b792e:	07c3      	lsls	r3, r0, #31
   b7930:	d409      	bmi.n	b7946 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7932:	4620      	mov	r0, r4
   b7934:	f7ff ffa0 	bl	b7878 <pinAvailable>
   b7938:	b128      	cbz	r0, b7946 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b793a:	4629      	mov	r1, r5
   b793c:	4620      	mov	r0, r4
}
   b793e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7942:	f7fe bbb5 	b.w	b60b0 <HAL_GPIO_Write>
}
   b7946:	bd38      	pop	{r3, r4, r5, pc}

000b7948 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7948:	280d      	cmp	r0, #13
{
   b794a:	b510      	push	{r4, lr}
   b794c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b794e:	bf9c      	itt	ls
   b7950:	340e      	addls	r4, #14
   b7952:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7954:	4620      	mov	r0, r4
   b7956:	f7ff ff8f 	bl	b7878 <pinAvailable>
   b795a:	b150      	cbz	r0, b7972 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b795c:	2103      	movs	r1, #3
   b795e:	4620      	mov	r0, r4
   b7960:	f7fe fb8e 	bl	b6080 <HAL_Validate_Pin_Function>
   b7964:	2803      	cmp	r0, #3
   b7966:	d104      	bne.n	b7972 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7968:	4620      	mov	r0, r4
}
   b796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b796e:	f7fe bba7 	b.w	b60c0 <hal_adc_read>
}
   b7972:	2000      	movs	r0, #0
   b7974:	bd10      	pop	{r4, pc}

000b7976 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b7976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b797a:	4690      	mov	r8, r2
   b797c:	461f      	mov	r7, r3
   b797e:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7980:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7982:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7984:	f1c4 0107 	rsb	r1, r4, #7
   b7988:	f1b8 0f00 	cmp.w	r8, #0
   b798c:	d112      	bne.n	b79b4 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b798e:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7992:	f001 0101 	and.w	r1, r1, #1
   b7996:	4630      	mov	r0, r6
   b7998:	f7ff ffbd 	bl	b7916 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b799c:	2101      	movs	r1, #1
   b799e:	4628      	mov	r0, r5
   b79a0:	f7ff ffb9 	bl	b7916 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b79a4:	2100      	movs	r1, #0
   b79a6:	4628      	mov	r0, r5
   b79a8:	f7ff ffb5 	bl	b7916 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b79ac:	3c01      	subs	r4, #1
   b79ae:	d2e9      	bcs.n	b7984 <shiftOut+0xe>
  }
}
   b79b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b79b4:	fa47 f104 	asr.w	r1, r7, r4
   b79b8:	e7eb      	b.n	b7992 <shiftOut+0x1c>

000b79ba <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79ba:	4770      	bx	lr

000b79bc <_Z20acquireSerial1Bufferv>:
{
   b79bc:	b538      	push	{r3, r4, r5, lr}
   b79be:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b79c0:	2514      	movs	r5, #20
   b79c2:	462a      	mov	r2, r5
   b79c4:	2100      	movs	r1, #0
   b79c6:	f000 fdbd 	bl	b8544 <memset>
   b79ca:	8025      	strh	r5, [r4, #0]
   b79cc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79ce:	4907      	ldr	r1, [pc, #28]	; (b79ec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b79d0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79d2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b79d4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79d6:	f000 f86f 	bl	b7ab8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79da:	4904      	ldr	r1, [pc, #16]	; (b79ec <_Z20acquireSerial1Bufferv+0x30>)
    };
   b79dc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b79de:	4628      	mov	r0, r5
   b79e0:	f000 f86a 	bl	b7ab8 <_ZnajRKSt9nothrow_t>
    };
   b79e4:	60e0      	str	r0, [r4, #12]
}
   b79e6:	4620      	mov	r0, r4
   b79e8:	bd38      	pop	{r3, r4, r5, pc}
   b79ea:	bf00      	nop
   b79ec:	000b939c 	.word	0x000b939c

000b79f0 <_Z22__fetch_global_Serial1v>:
{
   b79f0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b79f2:	4d0e      	ldr	r5, [pc, #56]	; (b7a2c <_Z22__fetch_global_Serial1v+0x3c>)
   b79f4:	7829      	ldrb	r1, [r5, #0]
   b79f6:	f3bf 8f5b 	dmb	ish
   b79fa:	f011 0401 	ands.w	r4, r1, #1
{
   b79fe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a00:	d111      	bne.n	b7a26 <_Z22__fetch_global_Serial1v+0x36>
   b7a02:	4628      	mov	r0, r5
   b7a04:	f7fc fb58 	bl	b40b8 <__cxa_guard_acquire>
   b7a08:	b168      	cbz	r0, b7a26 <_Z22__fetch_global_Serial1v+0x36>
   b7a0a:	a801      	add	r0, sp, #4
   b7a0c:	f7ff ffd6 	bl	b79bc <_Z20acquireSerial1Bufferv>
   b7a10:	aa01      	add	r2, sp, #4
   b7a12:	4621      	mov	r1, r4
   b7a14:	4806      	ldr	r0, [pc, #24]	; (b7a30 <_Z22__fetch_global_Serial1v+0x40>)
   b7a16:	f7ff fb01 	bl	b701c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7a1a:	4628      	mov	r0, r5
   b7a1c:	f7fc fb51 	bl	b40c2 <__cxa_guard_release>
   b7a20:	4804      	ldr	r0, [pc, #16]	; (b7a34 <_Z22__fetch_global_Serial1v+0x44>)
   b7a22:	f000 fd7b 	bl	b851c <atexit>
    return serial1;
}
   b7a26:	4802      	ldr	r0, [pc, #8]	; (b7a30 <_Z22__fetch_global_Serial1v+0x40>)
   b7a28:	b007      	add	sp, #28
   b7a2a:	bd30      	pop	{r4, r5, pc}
   b7a2c:	2003e728 	.word	0x2003e728
   b7a30:	2003e72c 	.word	0x2003e72c
   b7a34:	000b79bb 	.word	0x000b79bb

000b7a38 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7a38:	4770      	bx	lr
	...

000b7a3c <_Z17acquireWireBufferv>:
{
   b7a3c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7a3e:	4b0a      	ldr	r3, [pc, #40]	; (b7a68 <_Z17acquireWireBufferv+0x2c>)
   b7a40:	6003      	str	r3, [r0, #0]
   b7a42:	2301      	movs	r3, #1
{
   b7a44:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7a46:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7a48:	4908      	ldr	r1, [pc, #32]	; (b7a6c <_Z17acquireWireBufferv+0x30>)
   b7a4a:	2020      	movs	r0, #32
   b7a4c:	f000 f834 	bl	b7ab8 <_ZnajRKSt9nothrow_t>
	};
   b7a50:	2520      	movs	r5, #32
   b7a52:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7a54:	4905      	ldr	r1, [pc, #20]	; (b7a6c <_Z17acquireWireBufferv+0x30>)
	};
   b7a56:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7a58:	4628      	mov	r0, r5
   b7a5a:	f000 f82d 	bl	b7ab8 <_ZnajRKSt9nothrow_t>
	};
   b7a5e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7a62:	4620      	mov	r0, r4
   b7a64:	bd38      	pop	{r3, r4, r5, pc}
   b7a66:	bf00      	nop
   b7a68:	00010018 	.word	0x00010018
   b7a6c:	000b939c 	.word	0x000b939c

000b7a70 <_Z19__fetch_global_Wirev>:
{
   b7a70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7a72:	4d0e      	ldr	r5, [pc, #56]	; (b7aac <_Z19__fetch_global_Wirev+0x3c>)
   b7a74:	7829      	ldrb	r1, [r5, #0]
   b7a76:	f3bf 8f5b 	dmb	ish
   b7a7a:	f011 0401 	ands.w	r4, r1, #1
{
   b7a7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7a80:	d111      	bne.n	b7aa6 <_Z19__fetch_global_Wirev+0x36>
   b7a82:	4628      	mov	r0, r5
   b7a84:	f7fc fb18 	bl	b40b8 <__cxa_guard_acquire>
   b7a88:	b168      	cbz	r0, b7aa6 <_Z19__fetch_global_Wirev+0x36>
   b7a8a:	4668      	mov	r0, sp
   b7a8c:	f7ff ffd6 	bl	b7a3c <_Z17acquireWireBufferv>
   b7a90:	466a      	mov	r2, sp
   b7a92:	4621      	mov	r1, r4
   b7a94:	4806      	ldr	r0, [pc, #24]	; (b7ab0 <_Z19__fetch_global_Wirev+0x40>)
   b7a96:	f7ff fb01 	bl	b709c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7a9a:	4628      	mov	r0, r5
   b7a9c:	f7fc fb11 	bl	b40c2 <__cxa_guard_release>
   b7aa0:	4804      	ldr	r0, [pc, #16]	; (b7ab4 <_Z19__fetch_global_Wirev+0x44>)
   b7aa2:	f000 fd3b 	bl	b851c <atexit>
	return wire;
}
   b7aa6:	4802      	ldr	r0, [pc, #8]	; (b7ab0 <_Z19__fetch_global_Wirev+0x40>)
   b7aa8:	b007      	add	sp, #28
   b7aaa:	bd30      	pop	{r4, r5, pc}
   b7aac:	2003e744 	.word	0x2003e744
   b7ab0:	2003e748 	.word	0x2003e748
   b7ab4:	000b7a39 	.word	0x000b7a39

000b7ab8 <_ZnajRKSt9nothrow_t>:
   b7ab8:	f7fc baed 	b.w	b4096 <_Znaj>

000b7abc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7abc:	4901      	ldr	r1, [pc, #4]	; (b7ac4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7abe:	f000 b8f9 	b.w	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7ac2:	bf00      	nop
   b7ac4:	000b93b8 	.word	0x000b93b8

000b7ac8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7aca:	2400      	movs	r4, #0
   b7acc:	2310      	movs	r3, #16
   b7ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7ad2:	6803      	ldr	r3, [r0, #0]
   b7ad4:	4615      	mov	r5, r2
   b7ad6:	699e      	ldr	r6, [r3, #24]
   b7ad8:	6812      	ldr	r2, [r2, #0]
   b7ada:	466b      	mov	r3, sp
   b7adc:	e9cd 4400 	strd	r4, r4, [sp]
   b7ae0:	47b0      	blx	r6
   b7ae2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7ae6:	f003 0306 	and.w	r3, r3, #6
   b7aea:	2b06      	cmp	r3, #6
   b7aec:	bf03      	ittte	eq
   b7aee:	9b00      	ldreq	r3, [sp, #0]
   b7af0:	602b      	streq	r3, [r5, #0]
   b7af2:	2001      	moveq	r0, #1
   b7af4:	4620      	movne	r0, r4
   b7af6:	b004      	add	sp, #16
   b7af8:	bd70      	pop	{r4, r5, r6, pc}

000b7afa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7afa:	9800      	ldr	r0, [sp, #0]
   b7afc:	4290      	cmp	r0, r2
   b7afe:	bf14      	ite	ne
   b7b00:	2001      	movne	r0, #1
   b7b02:	2006      	moveq	r0, #6
   b7b04:	4770      	bx	lr
	...

000b7b08 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7b08:	b510      	push	{r4, lr}
   b7b0a:	4b03      	ldr	r3, [pc, #12]	; (b7b18 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7b0c:	6003      	str	r3, [r0, #0]
   b7b0e:	4604      	mov	r4, r0
   b7b10:	f000 f8cd 	bl	b7cae <_ZNSt9type_infoD1Ev>
   b7b14:	4620      	mov	r0, r4
   b7b16:	bd10      	pop	{r4, pc}
   b7b18:	000b93f8 	.word	0x000b93f8

000b7b1c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7b1c:	b510      	push	{r4, lr}
   b7b1e:	4604      	mov	r4, r0
   b7b20:	f7ff fff2 	bl	b7b08 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7b24:	4620      	mov	r0, r4
   b7b26:	2108      	movs	r1, #8
   b7b28:	f7fc fab7 	bl	b409a <_ZdlPvj>
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	bd10      	pop	{r4, pc}

000b7b30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b34:	461f      	mov	r7, r3
   b7b36:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7b3a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7b3e:	4598      	cmp	r8, r3
   b7b40:	4606      	mov	r6, r0
   b7b42:	4615      	mov	r5, r2
   b7b44:	d107      	bne.n	b7b56 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7b46:	9907      	ldr	r1, [sp, #28]
   b7b48:	f000 f8b4 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7b4c:	b118      	cbz	r0, b7b56 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7b4e:	7165      	strb	r5, [r4, #5]
   b7b50:	2000      	movs	r0, #0
   b7b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7b56:	4639      	mov	r1, r7
   b7b58:	4630      	mov	r0, r6
   b7b5a:	f000 f8ab 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7b5e:	2800      	cmp	r0, #0
   b7b60:	d0f6      	beq.n	b7b50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7b62:	2301      	movs	r3, #1
   b7b64:	f8c4 8000 	str.w	r8, [r4]
   b7b68:	7125      	strb	r5, [r4, #4]
   b7b6a:	71a3      	strb	r3, [r4, #6]
   b7b6c:	e7f0      	b.n	b7b50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7b6e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7b6e:	b538      	push	{r3, r4, r5, lr}
   b7b70:	4615      	mov	r5, r2
   b7b72:	461c      	mov	r4, r3
   b7b74:	f000 f89e 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7b78:	b120      	cbz	r0, b7b84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7b7a:	2308      	movs	r3, #8
   b7b7c:	60e3      	str	r3, [r4, #12]
   b7b7e:	2306      	movs	r3, #6
   b7b80:	6025      	str	r5, [r4, #0]
   b7b82:	7123      	strb	r3, [r4, #4]
   b7b84:	bd38      	pop	{r3, r4, r5, pc}

000b7b86 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b88:	4605      	mov	r5, r0
   b7b8a:	460c      	mov	r4, r1
   b7b8c:	9201      	str	r2, [sp, #4]
   b7b8e:	461e      	mov	r6, r3
   b7b90:	f000 f890 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7b94:	b950      	cbnz	r0, b7bac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7b96:	2e03      	cmp	r6, #3
   b7b98:	d808      	bhi.n	b7bac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7b9a:	6823      	ldr	r3, [r4, #0]
   b7b9c:	9a01      	ldr	r2, [sp, #4]
   b7b9e:	695b      	ldr	r3, [r3, #20]
   b7ba0:	4629      	mov	r1, r5
   b7ba2:	4620      	mov	r0, r4
   b7ba4:	b002      	add	sp, #8
   b7ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7baa:	4718      	bx	r3
   b7bac:	b002      	add	sp, #8
   b7bae:	bd70      	pop	{r4, r5, r6, pc}

000b7bb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7bb0:	b510      	push	{r4, lr}
   b7bb2:	4b03      	ldr	r3, [pc, #12]	; (b7bc0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7bb4:	6003      	str	r3, [r0, #0]
   b7bb6:	4604      	mov	r4, r0
   b7bb8:	f7ff ffa6 	bl	b7b08 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7bbc:	4620      	mov	r0, r4
   b7bbe:	bd10      	pop	{r4, pc}
   b7bc0:	000b9458 	.word	0x000b9458

000b7bc4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7bc4:	b510      	push	{r4, lr}
   b7bc6:	4604      	mov	r4, r0
   b7bc8:	f7ff fff2 	bl	b7bb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7bcc:	4620      	mov	r0, r4
   b7bce:	210c      	movs	r1, #12
   b7bd0:	f7fc fa63 	bl	b409a <_ZdlPvj>
   b7bd4:	4620      	mov	r0, r4
   b7bd6:	bd10      	pop	{r4, pc}

000b7bd8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7bda:	9f08      	ldr	r7, [sp, #32]
   b7bdc:	4297      	cmp	r7, r2
   b7bde:	4605      	mov	r5, r0
   b7be0:	460e      	mov	r6, r1
   b7be2:	4614      	mov	r4, r2
   b7be4:	d00a      	beq.n	b7bfc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7be6:	68a8      	ldr	r0, [r5, #8]
   b7be8:	6802      	ldr	r2, [r0, #0]
   b7bea:	9708      	str	r7, [sp, #32]
   b7bec:	6a15      	ldr	r5, [r2, #32]
   b7bee:	4631      	mov	r1, r6
   b7bf0:	4622      	mov	r2, r4
   b7bf2:	46ac      	mov	ip, r5
   b7bf4:	b003      	add	sp, #12
   b7bf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7bfa:	4760      	bx	ip
   b7bfc:	4619      	mov	r1, r3
   b7bfe:	9301      	str	r3, [sp, #4]
   b7c00:	f000 f858 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7c04:	9b01      	ldr	r3, [sp, #4]
   b7c06:	2800      	cmp	r0, #0
   b7c08:	d0ed      	beq.n	b7be6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7c0a:	2006      	movs	r0, #6
   b7c0c:	b003      	add	sp, #12
   b7c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7c10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7c10:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c14:	460d      	mov	r5, r1
   b7c16:	4619      	mov	r1, r3
   b7c18:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7c1c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7c20:	4681      	mov	r9, r0
   b7c22:	4617      	mov	r7, r2
   b7c24:	4698      	mov	r8, r3
   b7c26:	f000 f845 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7c2a:	b190      	cbz	r0, b7c52 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7c2c:	2d00      	cmp	r5, #0
   b7c2e:	6034      	str	r4, [r6, #0]
   b7c30:	7137      	strb	r7, [r6, #4]
   b7c32:	db09      	blt.n	b7c48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7c34:	1961      	adds	r1, r4, r5
   b7c36:	458a      	cmp	sl, r1
   b7c38:	bf0c      	ite	eq
   b7c3a:	2106      	moveq	r1, #6
   b7c3c:	2101      	movne	r1, #1
   b7c3e:	71b1      	strb	r1, [r6, #6]
   b7c40:	2000      	movs	r0, #0
   b7c42:	b001      	add	sp, #4
   b7c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c48:	3502      	adds	r5, #2
   b7c4a:	d1f9      	bne.n	b7c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c4c:	2301      	movs	r3, #1
   b7c4e:	71b3      	strb	r3, [r6, #6]
   b7c50:	e7f6      	b.n	b7c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c52:	4554      	cmp	r4, sl
   b7c54:	d106      	bne.n	b7c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7c56:	4659      	mov	r1, fp
   b7c58:	4648      	mov	r0, r9
   b7c5a:	f000 f82b 	bl	b7cb4 <_ZNKSt9type_infoeqERKS_>
   b7c5e:	b108      	cbz	r0, b7c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7c60:	7177      	strb	r7, [r6, #5]
   b7c62:	e7ed      	b.n	b7c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c64:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7c68:	6803      	ldr	r3, [r0, #0]
   b7c6a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7c6e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7c72:	69dc      	ldr	r4, [r3, #28]
   b7c74:	463a      	mov	r2, r7
   b7c76:	4643      	mov	r3, r8
   b7c78:	4629      	mov	r1, r5
   b7c7a:	46a4      	mov	ip, r4
   b7c7c:	b001      	add	sp, #4
   b7c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c82:	4760      	bx	ip

000b7c84 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c88:	4607      	mov	r7, r0
   b7c8a:	460c      	mov	r4, r1
   b7c8c:	4615      	mov	r5, r2
   b7c8e:	461e      	mov	r6, r3
   b7c90:	f7ff ff6d 	bl	b7b6e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7c94:	b948      	cbnz	r0, b7caa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7c96:	68b8      	ldr	r0, [r7, #8]
   b7c98:	6803      	ldr	r3, [r0, #0]
   b7c9a:	699f      	ldr	r7, [r3, #24]
   b7c9c:	462a      	mov	r2, r5
   b7c9e:	4633      	mov	r3, r6
   b7ca0:	4621      	mov	r1, r4
   b7ca2:	46bc      	mov	ip, r7
   b7ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7ca8:	4760      	bx	ip
   b7caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7cae <_ZNSt9type_infoD1Ev>:
   b7cae:	4770      	bx	lr

000b7cb0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7cb0:	2000      	movs	r0, #0
   b7cb2:	4770      	bx	lr

000b7cb4 <_ZNKSt9type_infoeqERKS_>:
   b7cb4:	4281      	cmp	r1, r0
   b7cb6:	b508      	push	{r3, lr}
   b7cb8:	d00e      	beq.n	b7cd8 <_ZNKSt9type_infoeqERKS_+0x24>
   b7cba:	6840      	ldr	r0, [r0, #4]
   b7cbc:	7803      	ldrb	r3, [r0, #0]
   b7cbe:	2b2a      	cmp	r3, #42	; 0x2a
   b7cc0:	d00c      	beq.n	b7cdc <_ZNKSt9type_infoeqERKS_+0x28>
   b7cc2:	6849      	ldr	r1, [r1, #4]
   b7cc4:	780b      	ldrb	r3, [r1, #0]
   b7cc6:	2b2a      	cmp	r3, #42	; 0x2a
   b7cc8:	bf08      	it	eq
   b7cca:	3101      	addeq	r1, #1
   b7ccc:	f000 fc70 	bl	b85b0 <strcmp>
   b7cd0:	fab0 f080 	clz	r0, r0
   b7cd4:	0940      	lsrs	r0, r0, #5
   b7cd6:	bd08      	pop	{r3, pc}
   b7cd8:	2001      	movs	r0, #1
   b7cda:	e7fc      	b.n	b7cd6 <_ZNKSt9type_infoeqERKS_+0x22>
   b7cdc:	2000      	movs	r0, #0
   b7cde:	e7fa      	b.n	b7cd6 <_ZNKSt9type_infoeqERKS_+0x22>

000b7ce0 <__aeabi_drsub>:
   b7ce0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7ce4:	e002      	b.n	b7cec <__adddf3>
   b7ce6:	bf00      	nop

000b7ce8 <__aeabi_dsub>:
   b7ce8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7cec <__adddf3>:
   b7cec:	b530      	push	{r4, r5, lr}
   b7cee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7cf2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7cf6:	ea94 0f05 	teq	r4, r5
   b7cfa:	bf08      	it	eq
   b7cfc:	ea90 0f02 	teqeq	r0, r2
   b7d00:	bf1f      	itttt	ne
   b7d02:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7d06:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7d0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7d0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7d12:	f000 80e2 	beq.w	b7eda <__adddf3+0x1ee>
   b7d16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7d1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7d1e:	bfb8      	it	lt
   b7d20:	426d      	neglt	r5, r5
   b7d22:	dd0c      	ble.n	b7d3e <__adddf3+0x52>
   b7d24:	442c      	add	r4, r5
   b7d26:	ea80 0202 	eor.w	r2, r0, r2
   b7d2a:	ea81 0303 	eor.w	r3, r1, r3
   b7d2e:	ea82 0000 	eor.w	r0, r2, r0
   b7d32:	ea83 0101 	eor.w	r1, r3, r1
   b7d36:	ea80 0202 	eor.w	r2, r0, r2
   b7d3a:	ea81 0303 	eor.w	r3, r1, r3
   b7d3e:	2d36      	cmp	r5, #54	; 0x36
   b7d40:	bf88      	it	hi
   b7d42:	bd30      	pophi	{r4, r5, pc}
   b7d44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7d48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7d4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7d50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7d54:	d002      	beq.n	b7d5c <__adddf3+0x70>
   b7d56:	4240      	negs	r0, r0
   b7d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7d5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7d60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7d64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7d68:	d002      	beq.n	b7d70 <__adddf3+0x84>
   b7d6a:	4252      	negs	r2, r2
   b7d6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7d70:	ea94 0f05 	teq	r4, r5
   b7d74:	f000 80a7 	beq.w	b7ec6 <__adddf3+0x1da>
   b7d78:	f1a4 0401 	sub.w	r4, r4, #1
   b7d7c:	f1d5 0e20 	rsbs	lr, r5, #32
   b7d80:	db0d      	blt.n	b7d9e <__adddf3+0xb2>
   b7d82:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7d86:	fa22 f205 	lsr.w	r2, r2, r5
   b7d8a:	1880      	adds	r0, r0, r2
   b7d8c:	f141 0100 	adc.w	r1, r1, #0
   b7d90:	fa03 f20e 	lsl.w	r2, r3, lr
   b7d94:	1880      	adds	r0, r0, r2
   b7d96:	fa43 f305 	asr.w	r3, r3, r5
   b7d9a:	4159      	adcs	r1, r3
   b7d9c:	e00e      	b.n	b7dbc <__adddf3+0xd0>
   b7d9e:	f1a5 0520 	sub.w	r5, r5, #32
   b7da2:	f10e 0e20 	add.w	lr, lr, #32
   b7da6:	2a01      	cmp	r2, #1
   b7da8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7dac:	bf28      	it	cs
   b7dae:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7db2:	fa43 f305 	asr.w	r3, r3, r5
   b7db6:	18c0      	adds	r0, r0, r3
   b7db8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7dc0:	d507      	bpl.n	b7dd2 <__adddf3+0xe6>
   b7dc2:	f04f 0e00 	mov.w	lr, #0
   b7dc6:	f1dc 0c00 	rsbs	ip, ip, #0
   b7dca:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7dce:	eb6e 0101 	sbc.w	r1, lr, r1
   b7dd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7dd6:	d31b      	bcc.n	b7e10 <__adddf3+0x124>
   b7dd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7ddc:	d30c      	bcc.n	b7df8 <__adddf3+0x10c>
   b7dde:	0849      	lsrs	r1, r1, #1
   b7de0:	ea5f 0030 	movs.w	r0, r0, rrx
   b7de4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7de8:	f104 0401 	add.w	r4, r4, #1
   b7dec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7df0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7df4:	f080 809a 	bcs.w	b7f2c <__adddf3+0x240>
   b7df8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7dfc:	bf08      	it	eq
   b7dfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7e02:	f150 0000 	adcs.w	r0, r0, #0
   b7e06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7e0a:	ea41 0105 	orr.w	r1, r1, r5
   b7e0e:	bd30      	pop	{r4, r5, pc}
   b7e10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7e14:	4140      	adcs	r0, r0
   b7e16:	eb41 0101 	adc.w	r1, r1, r1
   b7e1a:	3c01      	subs	r4, #1
   b7e1c:	bf28      	it	cs
   b7e1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7e22:	d2e9      	bcs.n	b7df8 <__adddf3+0x10c>
   b7e24:	f091 0f00 	teq	r1, #0
   b7e28:	bf04      	itt	eq
   b7e2a:	4601      	moveq	r1, r0
   b7e2c:	2000      	moveq	r0, #0
   b7e2e:	fab1 f381 	clz	r3, r1
   b7e32:	bf08      	it	eq
   b7e34:	3320      	addeq	r3, #32
   b7e36:	f1a3 030b 	sub.w	r3, r3, #11
   b7e3a:	f1b3 0220 	subs.w	r2, r3, #32
   b7e3e:	da0c      	bge.n	b7e5a <__adddf3+0x16e>
   b7e40:	320c      	adds	r2, #12
   b7e42:	dd08      	ble.n	b7e56 <__adddf3+0x16a>
   b7e44:	f102 0c14 	add.w	ip, r2, #20
   b7e48:	f1c2 020c 	rsb	r2, r2, #12
   b7e4c:	fa01 f00c 	lsl.w	r0, r1, ip
   b7e50:	fa21 f102 	lsr.w	r1, r1, r2
   b7e54:	e00c      	b.n	b7e70 <__adddf3+0x184>
   b7e56:	f102 0214 	add.w	r2, r2, #20
   b7e5a:	bfd8      	it	le
   b7e5c:	f1c2 0c20 	rsble	ip, r2, #32
   b7e60:	fa01 f102 	lsl.w	r1, r1, r2
   b7e64:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7e68:	bfdc      	itt	le
   b7e6a:	ea41 010c 	orrle.w	r1, r1, ip
   b7e6e:	4090      	lslle	r0, r2
   b7e70:	1ae4      	subs	r4, r4, r3
   b7e72:	bfa2      	ittt	ge
   b7e74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7e78:	4329      	orrge	r1, r5
   b7e7a:	bd30      	popge	{r4, r5, pc}
   b7e7c:	ea6f 0404 	mvn.w	r4, r4
   b7e80:	3c1f      	subs	r4, #31
   b7e82:	da1c      	bge.n	b7ebe <__adddf3+0x1d2>
   b7e84:	340c      	adds	r4, #12
   b7e86:	dc0e      	bgt.n	b7ea6 <__adddf3+0x1ba>
   b7e88:	f104 0414 	add.w	r4, r4, #20
   b7e8c:	f1c4 0220 	rsb	r2, r4, #32
   b7e90:	fa20 f004 	lsr.w	r0, r0, r4
   b7e94:	fa01 f302 	lsl.w	r3, r1, r2
   b7e98:	ea40 0003 	orr.w	r0, r0, r3
   b7e9c:	fa21 f304 	lsr.w	r3, r1, r4
   b7ea0:	ea45 0103 	orr.w	r1, r5, r3
   b7ea4:	bd30      	pop	{r4, r5, pc}
   b7ea6:	f1c4 040c 	rsb	r4, r4, #12
   b7eaa:	f1c4 0220 	rsb	r2, r4, #32
   b7eae:	fa20 f002 	lsr.w	r0, r0, r2
   b7eb2:	fa01 f304 	lsl.w	r3, r1, r4
   b7eb6:	ea40 0003 	orr.w	r0, r0, r3
   b7eba:	4629      	mov	r1, r5
   b7ebc:	bd30      	pop	{r4, r5, pc}
   b7ebe:	fa21 f004 	lsr.w	r0, r1, r4
   b7ec2:	4629      	mov	r1, r5
   b7ec4:	bd30      	pop	{r4, r5, pc}
   b7ec6:	f094 0f00 	teq	r4, #0
   b7eca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7ece:	bf06      	itte	eq
   b7ed0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7ed4:	3401      	addeq	r4, #1
   b7ed6:	3d01      	subne	r5, #1
   b7ed8:	e74e      	b.n	b7d78 <__adddf3+0x8c>
   b7eda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7ede:	bf18      	it	ne
   b7ee0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7ee4:	d029      	beq.n	b7f3a <__adddf3+0x24e>
   b7ee6:	ea94 0f05 	teq	r4, r5
   b7eea:	bf08      	it	eq
   b7eec:	ea90 0f02 	teqeq	r0, r2
   b7ef0:	d005      	beq.n	b7efe <__adddf3+0x212>
   b7ef2:	ea54 0c00 	orrs.w	ip, r4, r0
   b7ef6:	bf04      	itt	eq
   b7ef8:	4619      	moveq	r1, r3
   b7efa:	4610      	moveq	r0, r2
   b7efc:	bd30      	pop	{r4, r5, pc}
   b7efe:	ea91 0f03 	teq	r1, r3
   b7f02:	bf1e      	ittt	ne
   b7f04:	2100      	movne	r1, #0
   b7f06:	2000      	movne	r0, #0
   b7f08:	bd30      	popne	{r4, r5, pc}
   b7f0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7f0e:	d105      	bne.n	b7f1c <__adddf3+0x230>
   b7f10:	0040      	lsls	r0, r0, #1
   b7f12:	4149      	adcs	r1, r1
   b7f14:	bf28      	it	cs
   b7f16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7f1a:	bd30      	pop	{r4, r5, pc}
   b7f1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7f20:	bf3c      	itt	cc
   b7f22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7f26:	bd30      	popcc	{r4, r5, pc}
   b7f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7f2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7f30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7f34:	f04f 0000 	mov.w	r0, #0
   b7f38:	bd30      	pop	{r4, r5, pc}
   b7f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7f3e:	bf1a      	itte	ne
   b7f40:	4619      	movne	r1, r3
   b7f42:	4610      	movne	r0, r2
   b7f44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7f48:	bf1c      	itt	ne
   b7f4a:	460b      	movne	r3, r1
   b7f4c:	4602      	movne	r2, r0
   b7f4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7f52:	bf06      	itte	eq
   b7f54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7f58:	ea91 0f03 	teqeq	r1, r3
   b7f5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7f60:	bd30      	pop	{r4, r5, pc}
   b7f62:	bf00      	nop

000b7f64 <__aeabi_ui2d>:
   b7f64:	f090 0f00 	teq	r0, #0
   b7f68:	bf04      	itt	eq
   b7f6a:	2100      	moveq	r1, #0
   b7f6c:	4770      	bxeq	lr
   b7f6e:	b530      	push	{r4, r5, lr}
   b7f70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7f74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7f78:	f04f 0500 	mov.w	r5, #0
   b7f7c:	f04f 0100 	mov.w	r1, #0
   b7f80:	e750      	b.n	b7e24 <__adddf3+0x138>
   b7f82:	bf00      	nop

000b7f84 <__aeabi_i2d>:
   b7f84:	f090 0f00 	teq	r0, #0
   b7f88:	bf04      	itt	eq
   b7f8a:	2100      	moveq	r1, #0
   b7f8c:	4770      	bxeq	lr
   b7f8e:	b530      	push	{r4, r5, lr}
   b7f90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7f94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7f98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7f9c:	bf48      	it	mi
   b7f9e:	4240      	negmi	r0, r0
   b7fa0:	f04f 0100 	mov.w	r1, #0
   b7fa4:	e73e      	b.n	b7e24 <__adddf3+0x138>
   b7fa6:	bf00      	nop

000b7fa8 <__aeabi_f2d>:
   b7fa8:	0042      	lsls	r2, r0, #1
   b7faa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7fae:	ea4f 0131 	mov.w	r1, r1, rrx
   b7fb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7fb6:	bf1f      	itttt	ne
   b7fb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7fbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7fc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7fc4:	4770      	bxne	lr
   b7fc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7fca:	bf08      	it	eq
   b7fcc:	4770      	bxeq	lr
   b7fce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7fd2:	bf04      	itt	eq
   b7fd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7fd8:	4770      	bxeq	lr
   b7fda:	b530      	push	{r4, r5, lr}
   b7fdc:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7fe0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7fe4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7fe8:	e71c      	b.n	b7e24 <__adddf3+0x138>
   b7fea:	bf00      	nop

000b7fec <__aeabi_ul2d>:
   b7fec:	ea50 0201 	orrs.w	r2, r0, r1
   b7ff0:	bf08      	it	eq
   b7ff2:	4770      	bxeq	lr
   b7ff4:	b530      	push	{r4, r5, lr}
   b7ff6:	f04f 0500 	mov.w	r5, #0
   b7ffa:	e00a      	b.n	b8012 <__aeabi_l2d+0x16>

000b7ffc <__aeabi_l2d>:
   b7ffc:	ea50 0201 	orrs.w	r2, r0, r1
   b8000:	bf08      	it	eq
   b8002:	4770      	bxeq	lr
   b8004:	b530      	push	{r4, r5, lr}
   b8006:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b800a:	d502      	bpl.n	b8012 <__aeabi_l2d+0x16>
   b800c:	4240      	negs	r0, r0
   b800e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8012:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8016:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b801a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b801e:	f43f aed8 	beq.w	b7dd2 <__adddf3+0xe6>
   b8022:	f04f 0203 	mov.w	r2, #3
   b8026:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b802a:	bf18      	it	ne
   b802c:	3203      	addne	r2, #3
   b802e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8032:	bf18      	it	ne
   b8034:	3203      	addne	r2, #3
   b8036:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b803a:	f1c2 0320 	rsb	r3, r2, #32
   b803e:	fa00 fc03 	lsl.w	ip, r0, r3
   b8042:	fa20 f002 	lsr.w	r0, r0, r2
   b8046:	fa01 fe03 	lsl.w	lr, r1, r3
   b804a:	ea40 000e 	orr.w	r0, r0, lr
   b804e:	fa21 f102 	lsr.w	r1, r1, r2
   b8052:	4414      	add	r4, r2
   b8054:	e6bd      	b.n	b7dd2 <__adddf3+0xe6>
   b8056:	bf00      	nop

000b8058 <__aeabi_dmul>:
   b8058:	b570      	push	{r4, r5, r6, lr}
   b805a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b805e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8062:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8066:	bf1d      	ittte	ne
   b8068:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b806c:	ea94 0f0c 	teqne	r4, ip
   b8070:	ea95 0f0c 	teqne	r5, ip
   b8074:	f000 f8de 	bleq	b8234 <__aeabi_dmul+0x1dc>
   b8078:	442c      	add	r4, r5
   b807a:	ea81 0603 	eor.w	r6, r1, r3
   b807e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8082:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8086:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b808a:	bf18      	it	ne
   b808c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8090:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8098:	d038      	beq.n	b810c <__aeabi_dmul+0xb4>
   b809a:	fba0 ce02 	umull	ip, lr, r0, r2
   b809e:	f04f 0500 	mov.w	r5, #0
   b80a2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b80a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b80aa:	fbe0 e503 	umlal	lr, r5, r0, r3
   b80ae:	f04f 0600 	mov.w	r6, #0
   b80b2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b80b6:	f09c 0f00 	teq	ip, #0
   b80ba:	bf18      	it	ne
   b80bc:	f04e 0e01 	orrne.w	lr, lr, #1
   b80c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b80c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b80c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b80cc:	d204      	bcs.n	b80d8 <__aeabi_dmul+0x80>
   b80ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b80d2:	416d      	adcs	r5, r5
   b80d4:	eb46 0606 	adc.w	r6, r6, r6
   b80d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b80dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b80e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b80e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b80e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b80ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b80f0:	bf88      	it	hi
   b80f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b80f6:	d81e      	bhi.n	b8136 <__aeabi_dmul+0xde>
   b80f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b80fc:	bf08      	it	eq
   b80fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8102:	f150 0000 	adcs.w	r0, r0, #0
   b8106:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b810a:	bd70      	pop	{r4, r5, r6, pc}
   b810c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8110:	ea46 0101 	orr.w	r1, r6, r1
   b8114:	ea40 0002 	orr.w	r0, r0, r2
   b8118:	ea81 0103 	eor.w	r1, r1, r3
   b811c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8120:	bfc2      	ittt	gt
   b8122:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8126:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b812a:	bd70      	popgt	{r4, r5, r6, pc}
   b812c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8130:	f04f 0e00 	mov.w	lr, #0
   b8134:	3c01      	subs	r4, #1
   b8136:	f300 80ab 	bgt.w	b8290 <__aeabi_dmul+0x238>
   b813a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b813e:	bfde      	ittt	le
   b8140:	2000      	movle	r0, #0
   b8142:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8146:	bd70      	pople	{r4, r5, r6, pc}
   b8148:	f1c4 0400 	rsb	r4, r4, #0
   b814c:	3c20      	subs	r4, #32
   b814e:	da35      	bge.n	b81bc <__aeabi_dmul+0x164>
   b8150:	340c      	adds	r4, #12
   b8152:	dc1b      	bgt.n	b818c <__aeabi_dmul+0x134>
   b8154:	f104 0414 	add.w	r4, r4, #20
   b8158:	f1c4 0520 	rsb	r5, r4, #32
   b815c:	fa00 f305 	lsl.w	r3, r0, r5
   b8160:	fa20 f004 	lsr.w	r0, r0, r4
   b8164:	fa01 f205 	lsl.w	r2, r1, r5
   b8168:	ea40 0002 	orr.w	r0, r0, r2
   b816c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8170:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8174:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8178:	fa21 f604 	lsr.w	r6, r1, r4
   b817c:	eb42 0106 	adc.w	r1, r2, r6
   b8180:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8184:	bf08      	it	eq
   b8186:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b818a:	bd70      	pop	{r4, r5, r6, pc}
   b818c:	f1c4 040c 	rsb	r4, r4, #12
   b8190:	f1c4 0520 	rsb	r5, r4, #32
   b8194:	fa00 f304 	lsl.w	r3, r0, r4
   b8198:	fa20 f005 	lsr.w	r0, r0, r5
   b819c:	fa01 f204 	lsl.w	r2, r1, r4
   b81a0:	ea40 0002 	orr.w	r0, r0, r2
   b81a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b81a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b81ac:	f141 0100 	adc.w	r1, r1, #0
   b81b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b81b4:	bf08      	it	eq
   b81b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b81ba:	bd70      	pop	{r4, r5, r6, pc}
   b81bc:	f1c4 0520 	rsb	r5, r4, #32
   b81c0:	fa00 f205 	lsl.w	r2, r0, r5
   b81c4:	ea4e 0e02 	orr.w	lr, lr, r2
   b81c8:	fa20 f304 	lsr.w	r3, r0, r4
   b81cc:	fa01 f205 	lsl.w	r2, r1, r5
   b81d0:	ea43 0302 	orr.w	r3, r3, r2
   b81d4:	fa21 f004 	lsr.w	r0, r1, r4
   b81d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b81dc:	fa21 f204 	lsr.w	r2, r1, r4
   b81e0:	ea20 0002 	bic.w	r0, r0, r2
   b81e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b81e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b81ec:	bf08      	it	eq
   b81ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b81f2:	bd70      	pop	{r4, r5, r6, pc}
   b81f4:	f094 0f00 	teq	r4, #0
   b81f8:	d10f      	bne.n	b821a <__aeabi_dmul+0x1c2>
   b81fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b81fe:	0040      	lsls	r0, r0, #1
   b8200:	eb41 0101 	adc.w	r1, r1, r1
   b8204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8208:	bf08      	it	eq
   b820a:	3c01      	subeq	r4, #1
   b820c:	d0f7      	beq.n	b81fe <__aeabi_dmul+0x1a6>
   b820e:	ea41 0106 	orr.w	r1, r1, r6
   b8212:	f095 0f00 	teq	r5, #0
   b8216:	bf18      	it	ne
   b8218:	4770      	bxne	lr
   b821a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b821e:	0052      	lsls	r2, r2, #1
   b8220:	eb43 0303 	adc.w	r3, r3, r3
   b8224:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8228:	bf08      	it	eq
   b822a:	3d01      	subeq	r5, #1
   b822c:	d0f7      	beq.n	b821e <__aeabi_dmul+0x1c6>
   b822e:	ea43 0306 	orr.w	r3, r3, r6
   b8232:	4770      	bx	lr
   b8234:	ea94 0f0c 	teq	r4, ip
   b8238:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b823c:	bf18      	it	ne
   b823e:	ea95 0f0c 	teqne	r5, ip
   b8242:	d00c      	beq.n	b825e <__aeabi_dmul+0x206>
   b8244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8248:	bf18      	it	ne
   b824a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b824e:	d1d1      	bne.n	b81f4 <__aeabi_dmul+0x19c>
   b8250:	ea81 0103 	eor.w	r1, r1, r3
   b8254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8258:	f04f 0000 	mov.w	r0, #0
   b825c:	bd70      	pop	{r4, r5, r6, pc}
   b825e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8262:	bf06      	itte	eq
   b8264:	4610      	moveq	r0, r2
   b8266:	4619      	moveq	r1, r3
   b8268:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b826c:	d019      	beq.n	b82a2 <__aeabi_dmul+0x24a>
   b826e:	ea94 0f0c 	teq	r4, ip
   b8272:	d102      	bne.n	b827a <__aeabi_dmul+0x222>
   b8274:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8278:	d113      	bne.n	b82a2 <__aeabi_dmul+0x24a>
   b827a:	ea95 0f0c 	teq	r5, ip
   b827e:	d105      	bne.n	b828c <__aeabi_dmul+0x234>
   b8280:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8284:	bf1c      	itt	ne
   b8286:	4610      	movne	r0, r2
   b8288:	4619      	movne	r1, r3
   b828a:	d10a      	bne.n	b82a2 <__aeabi_dmul+0x24a>
   b828c:	ea81 0103 	eor.w	r1, r1, r3
   b8290:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8294:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8298:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b829c:	f04f 0000 	mov.w	r0, #0
   b82a0:	bd70      	pop	{r4, r5, r6, pc}
   b82a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b82a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b82aa:	bd70      	pop	{r4, r5, r6, pc}

000b82ac <__aeabi_ddiv>:
   b82ac:	b570      	push	{r4, r5, r6, lr}
   b82ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b82b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b82b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b82ba:	bf1d      	ittte	ne
   b82bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b82c0:	ea94 0f0c 	teqne	r4, ip
   b82c4:	ea95 0f0c 	teqne	r5, ip
   b82c8:	f000 f8a7 	bleq	b841a <__aeabi_ddiv+0x16e>
   b82cc:	eba4 0405 	sub.w	r4, r4, r5
   b82d0:	ea81 0e03 	eor.w	lr, r1, r3
   b82d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b82d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b82dc:	f000 8088 	beq.w	b83f0 <__aeabi_ddiv+0x144>
   b82e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b82e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b82e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b82ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b82f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b82f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b82f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b82fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8300:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8304:	429d      	cmp	r5, r3
   b8306:	bf08      	it	eq
   b8308:	4296      	cmpeq	r6, r2
   b830a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b830e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8312:	d202      	bcs.n	b831a <__aeabi_ddiv+0x6e>
   b8314:	085b      	lsrs	r3, r3, #1
   b8316:	ea4f 0232 	mov.w	r2, r2, rrx
   b831a:	1ab6      	subs	r6, r6, r2
   b831c:	eb65 0503 	sbc.w	r5, r5, r3
   b8320:	085b      	lsrs	r3, r3, #1
   b8322:	ea4f 0232 	mov.w	r2, r2, rrx
   b8326:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b832a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b832e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8332:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8336:	bf22      	ittt	cs
   b8338:	1ab6      	subcs	r6, r6, r2
   b833a:	4675      	movcs	r5, lr
   b833c:	ea40 000c 	orrcs.w	r0, r0, ip
   b8340:	085b      	lsrs	r3, r3, #1
   b8342:	ea4f 0232 	mov.w	r2, r2, rrx
   b8346:	ebb6 0e02 	subs.w	lr, r6, r2
   b834a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b834e:	bf22      	ittt	cs
   b8350:	1ab6      	subcs	r6, r6, r2
   b8352:	4675      	movcs	r5, lr
   b8354:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8358:	085b      	lsrs	r3, r3, #1
   b835a:	ea4f 0232 	mov.w	r2, r2, rrx
   b835e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8362:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8366:	bf22      	ittt	cs
   b8368:	1ab6      	subcs	r6, r6, r2
   b836a:	4675      	movcs	r5, lr
   b836c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8370:	085b      	lsrs	r3, r3, #1
   b8372:	ea4f 0232 	mov.w	r2, r2, rrx
   b8376:	ebb6 0e02 	subs.w	lr, r6, r2
   b837a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b837e:	bf22      	ittt	cs
   b8380:	1ab6      	subcs	r6, r6, r2
   b8382:	4675      	movcs	r5, lr
   b8384:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8388:	ea55 0e06 	orrs.w	lr, r5, r6
   b838c:	d018      	beq.n	b83c0 <__aeabi_ddiv+0x114>
   b838e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8392:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8396:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b839a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b839e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b83a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b83a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b83aa:	d1c0      	bne.n	b832e <__aeabi_ddiv+0x82>
   b83ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b83b0:	d10b      	bne.n	b83ca <__aeabi_ddiv+0x11e>
   b83b2:	ea41 0100 	orr.w	r1, r1, r0
   b83b6:	f04f 0000 	mov.w	r0, #0
   b83ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b83be:	e7b6      	b.n	b832e <__aeabi_ddiv+0x82>
   b83c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b83c4:	bf04      	itt	eq
   b83c6:	4301      	orreq	r1, r0
   b83c8:	2000      	moveq	r0, #0
   b83ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b83ce:	bf88      	it	hi
   b83d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b83d4:	f63f aeaf 	bhi.w	b8136 <__aeabi_dmul+0xde>
   b83d8:	ebb5 0c03 	subs.w	ip, r5, r3
   b83dc:	bf04      	itt	eq
   b83de:	ebb6 0c02 	subseq.w	ip, r6, r2
   b83e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b83e6:	f150 0000 	adcs.w	r0, r0, #0
   b83ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b83ee:	bd70      	pop	{r4, r5, r6, pc}
   b83f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b83f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b83f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b83fc:	bfc2      	ittt	gt
   b83fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8406:	bd70      	popgt	{r4, r5, r6, pc}
   b8408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b840c:	f04f 0e00 	mov.w	lr, #0
   b8410:	3c01      	subs	r4, #1
   b8412:	e690      	b.n	b8136 <__aeabi_dmul+0xde>
   b8414:	ea45 0e06 	orr.w	lr, r5, r6
   b8418:	e68d      	b.n	b8136 <__aeabi_dmul+0xde>
   b841a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b841e:	ea94 0f0c 	teq	r4, ip
   b8422:	bf08      	it	eq
   b8424:	ea95 0f0c 	teqeq	r5, ip
   b8428:	f43f af3b 	beq.w	b82a2 <__aeabi_dmul+0x24a>
   b842c:	ea94 0f0c 	teq	r4, ip
   b8430:	d10a      	bne.n	b8448 <__aeabi_ddiv+0x19c>
   b8432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8436:	f47f af34 	bne.w	b82a2 <__aeabi_dmul+0x24a>
   b843a:	ea95 0f0c 	teq	r5, ip
   b843e:	f47f af25 	bne.w	b828c <__aeabi_dmul+0x234>
   b8442:	4610      	mov	r0, r2
   b8444:	4619      	mov	r1, r3
   b8446:	e72c      	b.n	b82a2 <__aeabi_dmul+0x24a>
   b8448:	ea95 0f0c 	teq	r5, ip
   b844c:	d106      	bne.n	b845c <__aeabi_ddiv+0x1b0>
   b844e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8452:	f43f aefd 	beq.w	b8250 <__aeabi_dmul+0x1f8>
   b8456:	4610      	mov	r0, r2
   b8458:	4619      	mov	r1, r3
   b845a:	e722      	b.n	b82a2 <__aeabi_dmul+0x24a>
   b845c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8460:	bf18      	it	ne
   b8462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8466:	f47f aec5 	bne.w	b81f4 <__aeabi_dmul+0x19c>
   b846a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b846e:	f47f af0d 	bne.w	b828c <__aeabi_dmul+0x234>
   b8472:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8476:	f47f aeeb 	bne.w	b8250 <__aeabi_dmul+0x1f8>
   b847a:	e712      	b.n	b82a2 <__aeabi_dmul+0x24a>

000b847c <__aeabi_d2f>:
   b847c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8480:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8484:	bf24      	itt	cs
   b8486:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b848a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b848e:	d90d      	bls.n	b84ac <__aeabi_d2f+0x30>
   b8490:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8494:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8498:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b849c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b84a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b84a4:	bf08      	it	eq
   b84a6:	f020 0001 	biceq.w	r0, r0, #1
   b84aa:	4770      	bx	lr
   b84ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b84b0:	d121      	bne.n	b84f6 <__aeabi_d2f+0x7a>
   b84b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b84b6:	bfbc      	itt	lt
   b84b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b84bc:	4770      	bxlt	lr
   b84be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b84c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b84c6:	f1c2 0218 	rsb	r2, r2, #24
   b84ca:	f1c2 0c20 	rsb	ip, r2, #32
   b84ce:	fa10 f30c 	lsls.w	r3, r0, ip
   b84d2:	fa20 f002 	lsr.w	r0, r0, r2
   b84d6:	bf18      	it	ne
   b84d8:	f040 0001 	orrne.w	r0, r0, #1
   b84dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b84e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b84e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   b84e8:	ea40 000c 	orr.w	r0, r0, ip
   b84ec:	fa23 f302 	lsr.w	r3, r3, r2
   b84f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b84f4:	e7cc      	b.n	b8490 <__aeabi_d2f+0x14>
   b84f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b84fa:	d107      	bne.n	b850c <__aeabi_d2f+0x90>
   b84fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8500:	bf1e      	ittt	ne
   b8502:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8506:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b850a:	4770      	bxne	lr
   b850c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8510:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8518:	4770      	bx	lr
   b851a:	bf00      	nop

000b851c <atexit>:
   b851c:	2300      	movs	r3, #0
   b851e:	4601      	mov	r1, r0
   b8520:	461a      	mov	r2, r3
   b8522:	4618      	mov	r0, r3
   b8524:	f000 b85e 	b.w	b85e4 <__register_exitproc>

000b8528 <memcpy>:
   b8528:	440a      	add	r2, r1
   b852a:	4291      	cmp	r1, r2
   b852c:	f100 33ff 	add.w	r3, r0, #4294967295
   b8530:	d100      	bne.n	b8534 <memcpy+0xc>
   b8532:	4770      	bx	lr
   b8534:	b510      	push	{r4, lr}
   b8536:	f811 4b01 	ldrb.w	r4, [r1], #1
   b853a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b853e:	4291      	cmp	r1, r2
   b8540:	d1f9      	bne.n	b8536 <memcpy+0xe>
   b8542:	bd10      	pop	{r4, pc}

000b8544 <memset>:
   b8544:	4402      	add	r2, r0
   b8546:	4603      	mov	r3, r0
   b8548:	4293      	cmp	r3, r2
   b854a:	d100      	bne.n	b854e <memset+0xa>
   b854c:	4770      	bx	lr
   b854e:	f803 1b01 	strb.w	r1, [r3], #1
   b8552:	e7f9      	b.n	b8548 <memset+0x4>

000b8554 <srand>:
   b8554:	b538      	push	{r3, r4, r5, lr}
   b8556:	4b10      	ldr	r3, [pc, #64]	; (b8598 <srand+0x44>)
   b8558:	681d      	ldr	r5, [r3, #0]
   b855a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b855c:	4604      	mov	r4, r0
   b855e:	b9b3      	cbnz	r3, b858e <srand+0x3a>
   b8560:	2018      	movs	r0, #24
   b8562:	f7fe f801 	bl	b6568 <malloc>
   b8566:	4602      	mov	r2, r0
   b8568:	63a8      	str	r0, [r5, #56]	; 0x38
   b856a:	b920      	cbnz	r0, b8576 <srand+0x22>
   b856c:	4b0b      	ldr	r3, [pc, #44]	; (b859c <srand+0x48>)
   b856e:	480c      	ldr	r0, [pc, #48]	; (b85a0 <srand+0x4c>)
   b8570:	2142      	movs	r1, #66	; 0x42
   b8572:	f7fe f821 	bl	b65b8 <__assert_func>
   b8576:	490b      	ldr	r1, [pc, #44]	; (b85a4 <srand+0x50>)
   b8578:	4b0b      	ldr	r3, [pc, #44]	; (b85a8 <srand+0x54>)
   b857a:	e9c0 1300 	strd	r1, r3, [r0]
   b857e:	4b0b      	ldr	r3, [pc, #44]	; (b85ac <srand+0x58>)
   b8580:	6083      	str	r3, [r0, #8]
   b8582:	230b      	movs	r3, #11
   b8584:	8183      	strh	r3, [r0, #12]
   b8586:	2100      	movs	r1, #0
   b8588:	2001      	movs	r0, #1
   b858a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b858e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8590:	2200      	movs	r2, #0
   b8592:	611c      	str	r4, [r3, #16]
   b8594:	615a      	str	r2, [r3, #20]
   b8596:	bd38      	pop	{r3, r4, r5, pc}
   b8598:	2003e528 	.word	0x2003e528
   b859c:	000b9491 	.word	0x000b9491
   b85a0:	000b94a8 	.word	0x000b94a8
   b85a4:	abcd330e 	.word	0xabcd330e
   b85a8:	e66d1234 	.word	0xe66d1234
   b85ac:	0005deec 	.word	0x0005deec

000b85b0 <strcmp>:
   b85b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b85b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b85b8:	2a01      	cmp	r2, #1
   b85ba:	bf28      	it	cs
   b85bc:	429a      	cmpcs	r2, r3
   b85be:	d0f7      	beq.n	b85b0 <strcmp>
   b85c0:	1ad0      	subs	r0, r2, r3
   b85c2:	4770      	bx	lr

000b85c4 <strcpy>:
   b85c4:	4603      	mov	r3, r0
   b85c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b85ca:	f803 2b01 	strb.w	r2, [r3], #1
   b85ce:	2a00      	cmp	r2, #0
   b85d0:	d1f9      	bne.n	b85c6 <strcpy+0x2>
   b85d2:	4770      	bx	lr

000b85d4 <strlen>:
   b85d4:	4603      	mov	r3, r0
   b85d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b85da:	2a00      	cmp	r2, #0
   b85dc:	d1fb      	bne.n	b85d6 <strlen+0x2>
   b85de:	1a18      	subs	r0, r3, r0
   b85e0:	3801      	subs	r0, #1
   b85e2:	4770      	bx	lr

000b85e4 <__register_exitproc>:
   b85e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b85e8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b86a4 <__register_exitproc+0xc0>
   b85ec:	4606      	mov	r6, r0
   b85ee:	f8d8 0000 	ldr.w	r0, [r8]
   b85f2:	461f      	mov	r7, r3
   b85f4:	460d      	mov	r5, r1
   b85f6:	4691      	mov	r9, r2
   b85f8:	f000 f856 	bl	b86a8 <__retarget_lock_acquire_recursive>
   b85fc:	4b25      	ldr	r3, [pc, #148]	; (b8694 <__register_exitproc+0xb0>)
   b85fe:	681c      	ldr	r4, [r3, #0]
   b8600:	b934      	cbnz	r4, b8610 <__register_exitproc+0x2c>
   b8602:	4c25      	ldr	r4, [pc, #148]	; (b8698 <__register_exitproc+0xb4>)
   b8604:	601c      	str	r4, [r3, #0]
   b8606:	4b25      	ldr	r3, [pc, #148]	; (b869c <__register_exitproc+0xb8>)
   b8608:	b113      	cbz	r3, b8610 <__register_exitproc+0x2c>
   b860a:	681b      	ldr	r3, [r3, #0]
   b860c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8610:	6863      	ldr	r3, [r4, #4]
   b8612:	2b1f      	cmp	r3, #31
   b8614:	dd07      	ble.n	b8626 <__register_exitproc+0x42>
   b8616:	f8d8 0000 	ldr.w	r0, [r8]
   b861a:	f000 f847 	bl	b86ac <__retarget_lock_release_recursive>
   b861e:	f04f 30ff 	mov.w	r0, #4294967295
   b8622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8626:	b34e      	cbz	r6, b867c <__register_exitproc+0x98>
   b8628:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b862c:	b988      	cbnz	r0, b8652 <__register_exitproc+0x6e>
   b862e:	4b1c      	ldr	r3, [pc, #112]	; (b86a0 <__register_exitproc+0xbc>)
   b8630:	b923      	cbnz	r3, b863c <__register_exitproc+0x58>
   b8632:	f8d8 0000 	ldr.w	r0, [r8]
   b8636:	f000 f838 	bl	b86aa <__retarget_lock_release>
   b863a:	e7f0      	b.n	b861e <__register_exitproc+0x3a>
   b863c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8640:	f7fd ff92 	bl	b6568 <malloc>
   b8644:	2800      	cmp	r0, #0
   b8646:	d0f4      	beq.n	b8632 <__register_exitproc+0x4e>
   b8648:	2300      	movs	r3, #0
   b864a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b864e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8652:	6863      	ldr	r3, [r4, #4]
   b8654:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8658:	2201      	movs	r2, #1
   b865a:	409a      	lsls	r2, r3
   b865c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8660:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8664:	4313      	orrs	r3, r2
   b8666:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b866a:	2e02      	cmp	r6, #2
   b866c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8670:	bf02      	ittt	eq
   b8672:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8676:	4313      	orreq	r3, r2
   b8678:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b867c:	6863      	ldr	r3, [r4, #4]
   b867e:	f8d8 0000 	ldr.w	r0, [r8]
   b8682:	1c5a      	adds	r2, r3, #1
   b8684:	3302      	adds	r3, #2
   b8686:	6062      	str	r2, [r4, #4]
   b8688:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b868c:	f000 f80e 	bl	b86ac <__retarget_lock_release_recursive>
   b8690:	2000      	movs	r0, #0
   b8692:	e7c6      	b.n	b8622 <__register_exitproc+0x3e>
   b8694:	2003e7e8 	.word	0x2003e7e8
   b8698:	2003e75c 	.word	0x2003e75c
   b869c:	00000000 	.word	0x00000000
   b86a0:	000b6569 	.word	0x000b6569
   b86a4:	2003e58c 	.word	0x2003e58c

000b86a8 <__retarget_lock_acquire_recursive>:
   b86a8:	4770      	bx	lr

000b86aa <__retarget_lock_release>:
   b86aa:	4770      	bx	lr

000b86ac <__retarget_lock_release_recursive>:
   b86ac:	4770      	bx	lr

000b86ae <link_code_end>:
	...

000b86b0 <dynalib_user>:
   b86b0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b86c0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b86d0:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b86e0:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b86f0:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b8700:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b8710:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b8720:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b8730:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b8740:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b8750:	6174 6574 4820 5454 2f50 2e31 0031 6f48     tate HTTP/1.1.Ho
   b8760:	7473 203a 4300 6e6f 6574 746e 4c2d 6e65     st: .Content-Len
   b8770:	7467 3a68 0020 6f43 746e 6e65 2d74 7954     gth: .Content-Ty
   b8780:	6570 203a 6574 7478 702f 616c 6e69 633b     pe: text/plain;c
   b8790:	6168 7372 7465 553d 4654 382d 4600 6f72     harset=UTF-8.Fro
   b87a0:	206d 7548 0065 7753 7469 6863 4e4f 2520     m Hue.SwitchON %
   b87b0:	2069 000a 3f3c 6d78 206c 6576 7372 6f69     i ..<?xml versio
   b87c0:	3d6e 3122 302e 2022 6e65 6f63 6964 676e     n="1.0" encoding
   b87d0:	223d 7475 2d66 2238 3e3f 733c 453a 766e     ="utf-8"?><s:Env
   b87e0:	6c65 706f 2065 6d78 6e6c 3a73 3d73 6822     elope xmlns:s="h
   b87f0:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b8800:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b8810:	766e 6c65 706f 2f65 2022 3a73 6e65 6f63     nvelope/" s:enco
   b8820:	6964 676e 7453 6c79 3d65 6822 7474 3a70     dingStyle="http:
   b8830:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
   b8840:	2e70 726f 2f67 6f73 7061 652f 636e 646f     p.org/soap/encod
   b8850:	6e69 2f67 3e22 733c 423a 646f 3e79 753c     ing/"><s:Body><u
   b8860:	533a 7465 6942 616e 7972 7453 7461 2065     :SetBinaryState 
   b8870:	6d78 6e6c 3a73 3d75 7522 6e72 423a 6c65     xmlns:u="urn:Bel
   b8880:	696b 3a6e 6573 7672 6369 3a65 6162 6973     kin:service:basi
   b8890:	6563 6576 746e 313a 3e22 423c 6e69 7261     cevent:1"><Binar
   b88a0:	5379 6174 6574 313e 2f3c 6942 616e 7972     yState>1</Binary
   b88b0:	7453 7461 3e65 2f3c 3a75 6553 4274 6e69     State></u:SetBin
   b88c0:	7261 5379 6174 6574 3c3e 732f 423a 646f     aryState></s:Bod
   b88d0:	3e79 2f3c 3a73 6e45 6576 6f6c 6570 003e     y></s:Envelope>.
   b88e0:	4f50 5453 2f20 7075 706e 632f 6e6f 7274     POST /upnp/contr
   b88f0:	6c6f 622f 7361 6369 7665 6e65 3174 4820     ol/basicevent1 H
   b8900:	5454 2f50 2e31 0031 6f43 746e 6e65 2d74     TTP/1.1.Content-
   b8910:	7954 6570 203a 6574 7478 782f 6c6d 203b     Type: text/xml; 
   b8920:	6863 7261 6573 3d74 7475 2d66 0038 4f53     charset=utf-8.SO
   b8930:	5041 4341 4954 4e4f 203a 7522 6e72 423a     APACTION: "urn:B
   b8940:	6c65 696b 3a6e 6573 7672 6369 3a65 6162     elkin:service:ba
   b8950:	6973 6563 6576 746e 313a 5323 7465 6942     sicevent:1#SetBi
   b8960:	616e 7972 7453 7461 2265 4300 6e6f 656e     naryState".Conne
   b8970:	7463 6f69 3a6e 6b20 6565 2d70 6c61 7669     ction: keep-aliv
   b8980:	0065 7773 7469 6863 464f 2046 6925 0a20     e.switchOFF %i .
   b8990:	3c00 783f 6c6d 7620 7265 6973 6e6f 223d     .<?xml version="
   b89a0:	2e31 2230 6520 636e 646f 6e69 3d67 7522     1.0" encoding="u
   b89b0:	6674 382d 3f22 3c3e 3a73 6e45 6576 6f6c     tf-8"?><s:Envelo
   b89c0:	6570 7820 6c6d 736e 733a 223d 7468 7074     pe xmlns:s="http
   b89d0:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b89e0:	7061 6f2e 6772 732f 616f 2f70 6e65 6576     ap.org/soap/enve
   b89f0:	6f6c 6570 222f 7320 653a 636e 646f 6e69     lope/" s:encodin
   b8a00:	5367 7974 656c 223d 7468 7074 2f3a 732f     gStyle="http://s
   b8a10:	6863 6d65 7361 782e 6c6d 6f73 7061 6f2e     chemas.xmlsoap.o
   b8a20:	6772 732f 616f 2f70 6e65 6f63 6964 676e     rg/soap/encoding
   b8a30:	222f 3c3e 3a73 6f42 7964 3c3e 3a75 6553     /"><s:Body><u:Se
   b8a40:	4274 6e69 7261 5379 6174 6574 7820 6c6d     tBinaryState xml
   b8a50:	736e 753a 223d 7275 3a6e 6542 6b6c 6e69     ns:u="urn:Belkin
   b8a60:	733a 7265 6976 6563 623a 7361 6369 7665     :service:basicev
   b8a70:	6e65 3a74 2231 3c3e 6942 616e 7972 7453     ent:1"><BinarySt
   b8a80:	7461 3e65 3c30 422f 6e69 7261 5379 6174     ate>0</BinarySta
   b8a90:	6574 3c3e 752f 533a 7465 6942 616e 7972     te></u:SetBinary
   b8aa0:	7453 7461 3e65 2f3c 3a73 6f42 7964 3c3e     State></s:Body><
   b8ab0:	732f 453a 766e 6c65 706f 3e65 4900 546f     /s:Envelope>.IoT
   b8ac0:	654e 7774 726f 006b 4e0a 6d75 6552 2064     Network..NumRed 
   b8ad0:	203d 6925 4e20 6d75 6c42 6575 3d20 2520     = %i NumBlue = %
   b8ae0:	0069 630a 6c6f 2031 203d 2e25 6632 6320     i..col1 = %.2f c
   b8af0:	6c6f 2032 203d 2e25 6632 6320 6c6f 2033     ol2 = %.2f col3 
   b8b00:	203d 2e25 6632 0a00 6950 6365 5365 6469     = %.2f..PieceSid
   b8b10:	2065 203d 2e25 6632 5020 6569 6563 6953     e = %.2f PieceSi
   b8b20:	6564 3d20 2520 322e 2066 6950 6365 5365     de = %.2f PieceS
   b8b30:	6469 2065 203d 2e25 6632 7200 6465 2020     ide = %.2f.red  
   b8b40:	203d 6200 756c 2065 203d 2000 6970 6365     = .blue = . piec
   b8b50:	2065 6f66 6e75 0064 6b0a 3d20 2520 2069     e found..k = %i 
   b8b60:	2069 203d 6925 6a20 3d20 2520 0069 3931     i = %i j = %i.19
   b8b70:	2e32 3631 2e38 2e31 3033 3100 3239 312e     2.168.1.30.192.1
   b8b80:	3836 312e 332e 0031 3931 2e32 3631 2e38     68.1.31.192.168.
   b8b90:	2e31 3233 3100 3239 312e 3836 312e 332e     1.32.192.168.1.3
   b8ba0:	0033 3931 2e32 3631 2e38 2e31 3433           3.192.168.1.34.

000b8baf <_ZL11hueUsername>:
   b8baf:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b8bbf:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b8bcf:	7438 334d 4637 5433                          8tM37F3T.

000b8bd8 <_ZL6COLORS>:
   b8bd8:	0000 0000 f365 0000 e6ce 0000 d1d2 0000     ....e...........
   b8be8:	bcd7 0000 b040 0000 a7db 0000               ....@.......

000b8bf4 <_ZL8hueHubIP>:
   b8bf4:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b8c00 <_ZL9NEOCOLORS>:
   b8c00:	0000 00ff 002b 00d5 0055 00aa 0080 0080     ....+...U.......
   b8c10:	00aa 0055 00d5 002b 00ff 0000               ..U...+.....

000b8c1c <_ZTV16Adafruit_SSD1306>:
	...
   b8c24:	5091 000b 5121 000b 5af9 000b 6a89 000b     .P..!Q...Z...j..
   b8c34:	5095 000b 54dd 000b 4f1d 000b 4dad 000b     .P...T...O...M..
   b8c44:	559b 000b 5639 000b 566f 000b 568b 000b     .U..9V..oV...V..

000b8c54 <_ZL4font>:
   b8c54:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8c64:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8c74:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8c84:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8c94:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8ca4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8cb4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8cc4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8cd4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8ce4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8cf4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8d04:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8d14:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8d24:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8d34:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8d44:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8d54:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8d64:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8d74:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8d84:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8d94:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8da4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8db4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8dc4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8dd4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8de4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8df4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8e04:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8e14:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8e24:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8e34:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8e44:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8e54:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8e64:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8e74:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8e84:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8e94:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8ea4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8eb4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8ec4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8ed4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8ee4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8ef4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8f04:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8f14:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8f24:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8f34:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8f44:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8f54:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8f64:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8f74:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8f84:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8f94:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8fa4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8fb4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8fc4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8fd4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8fe4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8ff4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b9004:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b9014:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b9024:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b9034:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b9044:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b9054:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b9064:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b9074:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b9084:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b9094:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b90a4:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b90b4:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b90c4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b90d4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b90e4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b90f4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b9104:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b9114:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b9124:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b9134:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b9144:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b9150 <_ZTV12Adafruit_GFX>:
	...
   b9160:	5af9 000b 6a89 000b 40a1 000b 54dd 000b     .Z...j...@...T..
   b9170:	5603 000b 561f 000b 559b 000b 5639 000b     .V...V...U..9V..
   b9180:	566f 000b 568b 000b                         oV...V..

000b9188 <CSWTCH.88>:
   b9188:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b9198:	0050 0000                                   P...

000b919c <_ZTVN5spark13EthernetClassE>:
	...
   b91a4:	6637 000b 662d 000b 6623 000b 6619 000b     7f..-f..#f...f..
   b91b4:	660d 000b 6601 000b 7755 000b 775d 000b     .f...f..Uw..]w..
   b91c4:	65f5 000b 65ed 000b 65e3 000b 65d9 000b     .e...e...e...e..
   b91d4:	778d 000b                                   .w..

000b91d8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b91d8:	0800 1810 2820 3830                         .... (08

000b91e0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b91e8:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b91f8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9208 <_ZTV9IPAddress>:
	...
   b9210:	6d85 000b 6d75 000b 6d77 000b               .m..um..wm..

000b921c <_ZTV9USBSerial>:
	...
   b9224:	6e97 000b 6eff 000b 6ed5 000b 6a89 000b     .n...n...n...j..
   b9234:	6ec7 000b 6e99 000b 6ea9 000b 6ef9 000b     .n...n...n...n..
   b9244:	6eb9 000b 6e91 000b                         .n...n..

000b924c <_ZTV11USARTSerial>:
	...
   b9254:	6fa1 000b 700d 000b 6fe5 000b 6a89 000b     .o...p...o...j..
   b9264:	6fb5 000b 6fd1 000b 6fc3 000b 6fdf 000b     .o...o...o...o..
   b9274:	6fa3 000b 6fa7 000b                         .o...o..

000b927c <_ZTV7TwoWire>:
	...
   b9284:	7045 000b 708f 000b 7067 000b 7047 000b     Ep...p..gp..Gp..
   b9294:	706f 000b 7077 000b 707f 000b 7087 000b     op..wp...p...p..
   b92a4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b92b4:	2072 203d 6425 0000                         r = %d..

000b92bc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b92c4:	7185 000b 71a9 000b 7693 000b 71b7 000b     .q...q...v...q..
   b92d4:	7189 000b                                   .q..

000b92d8 <_ZTV9TCPClient>:
	...
   b92e0:	410d 000b 4141 000b 7101 000b 711b 000b     .A..AA...q...q..
   b92f0:	7529 000b 7145 000b 739f 000b 7179 000b     )u..Eq...s..yq..
   b9300:	7431 000b 7271 000b 73cd 000b 75dd 000b     1t..qr...s...u..
   b9310:	736d 000b 717b 000b 712d 000b 71bd 000b     ms..{q..-q...q..
   b9320:	7251 000b                                   Qr..

000b9324 <_ZTVN5spark9WiFiClassE>:
	...
   b932c:	76f7 000b 76ed 000b 76e3 000b 7699 000b     .v...v...v...v..
   b933c:	76d7 000b 76cb 000b 7755 000b 775d 000b     .v...v..Uw..]w..
   b934c:	76bf 000b 76b7 000b 76ad 000b 76a3 000b     .v...v...v...v..
   b935c:	778d 000b                                   .w..

000b9360 <_ZTVN5spark12NetworkClassE>:
	...
   b9368:	7715 000b 771f 000b 7729 000b 7733 000b     .w...w..)w..3w..
   b9378:	773d 000b 7749 000b 7755 000b 775d 000b     =w..Iw..Uw..]w..
   b9388:	7765 000b 7771 000b 7779 000b 7783 000b     ew..qw..yw...w..
   b9398:	778d 000b                                   .w..

000b939c <_ZSt7nothrow>:
	...

000b939d <_ZTSSt19_Sp_make_shared_tag>:
   b939d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b93ad:	6572 5f64 6174 0067 0000                     red_tag....

000b93b8 <_ZTISt19_Sp_make_shared_tag>:
   b93b8:	93f8 000b 939d 000b                         ........

000b93c0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b93c0:	9458 000b 93cc 000b 947c 000b               X.......|...

000b93cc <_ZTSN10__cxxabiv117__class_type_infoE>:
   b93cc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b93dc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b93ec:	0045 0000                                   E...

000b93f0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b93f0:	0000 0000 93c0 000b 7b09 000b 7b1d 000b     .........{...{..
   b9400:	7cb1 000b 7cb1 000b 7b87 000b 7ac9 000b     .|...|...{...z..
   b9410:	7b6f 000b 7b31 000b 7afb 000b               o{..1{...z..

000b941c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b941c:	9458 000b 9428 000b 93c0 000b               X...(.......

000b9428 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9428:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9438:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9448:	666e 456f 0000 0000                         nfoE....

000b9450 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9450:	0000 0000 941c 000b 7bb1 000b 7bc5 000b     .........{...{..
   b9460:	7cb1 000b 7cb1 000b 7b87 000b 7ac9 000b     .|...|...{...z..
   b9470:	7c85 000b 7c11 000b 7bd9 000b               .|...|...{..

000b947c <_ZTISt9type_info>:
   b947c:	93f8 000b 9484 000b                         ........

000b9484 <_ZTSSt9type_info>:
   b9484:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9494:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b94a4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b94b4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b94c4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b94d4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b94e4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b94f4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b9504:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b9514:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b9525 <link_const_variable_data_end>:
   b9525:	00          	.byte	0x00
	...

000b9528 <link_constructors_location>:
   b9528:	000b4d01 	.word	0x000b4d01
   b952c:	000b6041 	.word	0x000b6041
   b9530:	000b6641 	.word	0x000b6641
   b9534:	000b67d5 	.word	0x000b67d5
   b9538:	000b6a79 	.word	0x000b6a79
   b953c:	000b6c05 	.word	0x000b6c05
   b9540:	000b6c15 	.word	0x000b6c15
   b9544:	000b6c31 	.word	0x000b6c31
   b9548:	000b7701 	.word	0x000b7701
   b954c:	000b7865 	.word	0x000b7865
