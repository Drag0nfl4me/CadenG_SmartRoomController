
c:/Users/cgame/Documents/IoT/CadenG_SmartRoomController/3PawnGame_RoomController/target/4.0.2/argon/3PawnGame_RoomController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000046e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8700  000b8700  00008700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8724  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000494  2003e104  000b8728  0001e104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000258  2003e598  2003e598  0002e598  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8bbc  000b8bbc  00028bbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8be4  000b8be4  00028be4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00122194  00000000  00000000  00028be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001463c  00000000  00000000  0014ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003c15c  00000000  00000000  0015f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030b0  00000000  00000000  0019b514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a6e8  00000000  00000000  0019e5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bdb1  00000000  00000000  001a8cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00044dfa  00000000  00000000  001e4a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134367  00000000  00000000  00229857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008a30  00000000  00000000  0035dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 fd15 	bl	b7a60 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 fd1d 	bl	b7a7c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e104 	.word	0x2003e104
   b404c:	000b8728 	.word	0x000b8728
   b4050:	2003e598 	.word	0x2003e598
   b4054:	2003e598 	.word	0x2003e598
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 f8f1 	bl	b6248 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b86d4 	.word	0x000b86d4
   b4080:	000b86f8 	.word	0x000b86f8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b98e 	b.w	b43a4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fbe3 	bl	b4854 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 b891 	b.w	b61b8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bc8d 	b.w	b59b4 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bc8b 	b.w	b59b4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bc91 	b.w	b59c4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 fbde 	bl	b586c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b552d 	.word	0x000b552d
   b40b8:	000b7bfc 	.word	0x000b7bfc

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f001 ff90 	bl	b6000 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f001 bfa2 	b.w	b6032 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40f2 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f2:	b40e      	push	{r1, r2, r3}
   b40f4:	b503      	push	{r0, r1, lr}
   b40f6:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fe:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4100:	f001 ffb5 	bl	b606e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4104:	b002      	add	sp, #8
   b4106:	f85d eb04 	ldr.w	lr, [sp], #4
   b410a:	b003      	add	sp, #12
   b410c:	4770      	bx	lr
	...

000b4110 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4110:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4112:	6984      	ldr	r4, [r0, #24]
   b4114:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_ZN9TCPClientD1Ev+0x30>)
   b4116:	6003      	str	r3, [r0, #0]
   b4118:	4605      	mov	r5, r0
   b411a:	b17c      	cbz	r4, b413c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b411c:	6863      	ldr	r3, [r4, #4]
   b411e:	3b01      	subs	r3, #1
   b4120:	6063      	str	r3, [r4, #4]
   b4122:	b95b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4124:	6823      	ldr	r3, [r4, #0]
   b4126:	4620      	mov	r0, r4
   b4128:	689b      	ldr	r3, [r3, #8]
   b412a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b412c:	68a3      	ldr	r3, [r4, #8]
   b412e:	3b01      	subs	r3, #1
   b4130:	60a3      	str	r3, [r4, #8]
   b4132:	b91b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4134:	6823      	ldr	r3, [r4, #0]
   b4136:	4620      	mov	r0, r4
   b4138:	68db      	ldr	r3, [r3, #12]
   b413a:	4798      	blx	r3
   b413c:	4628      	mov	r0, r5
   b413e:	bd38      	pop	{r3, r4, r5, pc}
   b4140:	000b848c 	.word	0x000b848c

000b4144 <_ZN9TCPClientD0Ev>:
   b4144:	b510      	push	{r4, lr}
   b4146:	4604      	mov	r4, r0
   b4148:	f7ff ffe2 	bl	b4110 <_ZN9TCPClientD1Ev>
   b414c:	4620      	mov	r0, r4
   b414e:	211c      	movs	r1, #28
   b4150:	f7ff ffa5 	bl	b409e <_ZdlPvj>
   b4154:	4620      	mov	r0, r4
   b4156:	bd10      	pop	{r4, pc}

000b4158 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b415c:	b08c      	sub	sp, #48	; 0x30
   b415e:	4605      	mov	r5, r0
   b4160:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4162:	4668      	mov	r0, sp
   b4164:	4977      	ldr	r1, [pc, #476]	; (b4344 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4166:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b416a:	4614      	mov	r4, r2
   b416c:	461e      	mov	r6, r3
  String command = "";  
   b416e:	f001 fe7a 	bl	b5e66 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4172:	f8df e228 	ldr.w	lr, [pc, #552]	; b439c <_Z6setHueibiii+0x244>
   b4176:	4974      	ldr	r1, [pc, #464]	; (b4348 <_Z6setHueibiii+0x1f0>)
   b4178:	f8de 3000 	ldr.w	r3, [lr]
   b417c:	4873      	ldr	r0, [pc, #460]	; (b434c <_Z6setHueibiii+0x1f4>)
   b417e:	4a74      	ldr	r2, [pc, #464]	; (b4350 <_Z6setHueibiii+0x1f8>)
   b4180:	f8df c21c 	ldr.w	ip, [pc, #540]	; b43a0 <_Z6setHueibiii+0x248>
   b4184:	42ab      	cmp	r3, r5
   b4186:	d119      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4188:	680b      	ldr	r3, [r1, #0]
   b418a:	42bb      	cmp	r3, r7
   b418c:	d116      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b418e:	6803      	ldr	r3, [r0, #0]
   b4190:	42a3      	cmp	r3, r4
   b4192:	d113      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4194:	6813      	ldr	r3, [r2, #0]
   b4196:	42b3      	cmp	r3, r6
   b4198:	d110      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b419a:	f8dc 3000 	ldr.w	r3, [ip]
   b419e:	4543      	cmp	r3, r8
   b41a0:	d10c      	bne.n	b41bc <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b41a2:	f002 f973 	bl	b648c <_Z16_fetch_usbserialv>
   b41a6:	496b      	ldr	r1, [pc, #428]	; (b4354 <_Z6setHueibiii+0x1fc>)
   b41a8:	f7ff ffa3 	bl	b40f2 <_ZN5Print6printfEPKcz>
    return false;
   b41ac:	2400      	movs	r4, #0
  String command = "";  
   b41ae:	4668      	mov	r0, sp
   b41b0:	f001 fe0e 	bl	b5dd0 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b4:	4620      	mov	r0, r4
   b41b6:	b00c      	add	sp, #48	; 0x30
   b41b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41bc:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41c0:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41c2:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c4:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c6:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41ca:	2f00      	cmp	r7, #0
   b41cc:	f000 80b5 	beq.w	b433a <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41d0:	4961      	ldr	r1, [pc, #388]	; (b4358 <_Z6setHueibiii+0x200>)
   b41d2:	4668      	mov	r0, sp
   b41d4:	f001 fe75 	bl	b5ec2 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d8:	4669      	mov	r1, sp
   b41da:	a808      	add	r0, sp, #32
   b41dc:	f001 fe66 	bl	b5eac <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41e0:	220a      	movs	r2, #10
   b41e2:	4641      	mov	r1, r8
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f001 fe7e 	bl	b5ee6 <_ZN6StringC1Eih>
   b41ea:	a904      	add	r1, sp, #16
   b41ec:	a808      	add	r0, sp, #32
   b41ee:	f001 feb1 	bl	b5f54 <_ZplRK15StringSumHelperRK6String>
   b41f2:	495a      	ldr	r1, [pc, #360]	; (b435c <_Z6setHueibiii+0x204>)
   b41f4:	f001 feba 	bl	b5f6c <_ZplRK15StringSumHelperPKc>
   b41f8:	4601      	mov	r1, r0
   b41fa:	4668      	mov	r0, sp
   b41fc:	f001 fe47 	bl	b5e8e <_ZN6StringaSERKS_>
   b4200:	a804      	add	r0, sp, #16
   b4202:	f001 fde5 	bl	b5dd0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4206:	a808      	add	r0, sp, #32
   b4208:	f001 fde2 	bl	b5dd0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b420c:	4669      	mov	r1, sp
   b420e:	a808      	add	r0, sp, #32
   b4210:	f001 fe4c 	bl	b5eac <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4214:	220a      	movs	r2, #10
   b4216:	4631      	mov	r1, r6
   b4218:	a804      	add	r0, sp, #16
   b421a:	f001 fe64 	bl	b5ee6 <_ZN6StringC1Eih>
   b421e:	a904      	add	r1, sp, #16
   b4220:	a808      	add	r0, sp, #32
   b4222:	f001 fe97 	bl	b5f54 <_ZplRK15StringSumHelperRK6String>
   b4226:	494e      	ldr	r1, [pc, #312]	; (b4360 <_Z6setHueibiii+0x208>)
   b4228:	f001 fea0 	bl	b5f6c <_ZplRK15StringSumHelperPKc>
   b422c:	4601      	mov	r1, r0
   b422e:	4668      	mov	r0, sp
   b4230:	f001 fe2d 	bl	b5e8e <_ZN6StringaSERKS_>
   b4234:	a804      	add	r0, sp, #16
   b4236:	f001 fdcb 	bl	b5dd0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b423a:	a808      	add	r0, sp, #32
   b423c:	f001 fdc8 	bl	b5dd0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4240:	4669      	mov	r1, sp
   b4242:	a808      	add	r0, sp, #32
   b4244:	f001 fe32 	bl	b5eac <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4248:	220a      	movs	r2, #10
   b424a:	4621      	mov	r1, r4
   b424c:	a804      	add	r0, sp, #16
   b424e:	f001 fe4a 	bl	b5ee6 <_ZN6StringC1Eih>
   b4252:	a904      	add	r1, sp, #16
   b4254:	a808      	add	r0, sp, #32
   b4256:	f001 fe7d 	bl	b5f54 <_ZplRK15StringSumHelperRK6String>
   b425a:	4942      	ldr	r1, [pc, #264]	; (b4364 <_Z6setHueibiii+0x20c>)
   b425c:	f001 fe86 	bl	b5f6c <_ZplRK15StringSumHelperPKc>
   b4260:	4601      	mov	r1, r0
   b4262:	4668      	mov	r0, sp
   b4264:	f001 fe13 	bl	b5e8e <_ZN6StringaSERKS_>
   b4268:	a804      	add	r0, sp, #16
   b426a:	f001 fdb1 	bl	b5dd0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426e:	a808      	add	r0, sp, #32
   b4270:	f001 fdae 	bl	b5dd0 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4274:	493c      	ldr	r1, [pc, #240]	; (b4368 <_Z6setHueibiii+0x210>)
   b4276:	483d      	ldr	r0, [pc, #244]	; (b436c <_Z6setHueibiii+0x214>)
   b4278:	2300      	movs	r3, #0
   b427a:	2250      	movs	r2, #80	; 0x50
   b427c:	f002 fa94 	bl	b67a8 <_ZN9TCPClient7connectEPKctm>
   b4280:	4604      	mov	r4, r0
   b4282:	2800      	cmp	r0, #0
   b4284:	d093      	beq.n	b41ae <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4286:	f002 f901 	bl	b648c <_Z16_fetch_usbserialv>
   b428a:	4939      	ldr	r1, [pc, #228]	; (b4370 <_Z6setHueibiii+0x218>)
   b428c:	f001 fec7 	bl	b601e <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4290:	f002 f8fc 	bl	b648c <_Z16_fetch_usbserialv>
   b4294:	9900      	ldr	r1, [sp, #0]
   b4296:	f001 fec2 	bl	b601e <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b429a:	4936      	ldr	r1, [pc, #216]	; (b4374 <_Z6setHueibiii+0x21c>)
   b429c:	4833      	ldr	r0, [pc, #204]	; (b436c <_Z6setHueibiii+0x214>)
   b429e:	f001 feab 	bl	b5ff8 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b42a2:	4935      	ldr	r1, [pc, #212]	; (b4378 <_Z6setHueibiii+0x220>)
   b42a4:	4831      	ldr	r0, [pc, #196]	; (b436c <_Z6setHueibiii+0x214>)
   b42a6:	f001 fea7 	bl	b5ff8 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42aa:	4934      	ldr	r1, [pc, #208]	; (b437c <_Z6setHueibiii+0x224>)
   b42ac:	482f      	ldr	r0, [pc, #188]	; (b436c <_Z6setHueibiii+0x214>)
   b42ae:	f001 fea3 	bl	b5ff8 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42b2:	220a      	movs	r2, #10
   b42b4:	482d      	ldr	r0, [pc, #180]	; (b436c <_Z6setHueibiii+0x214>)
   b42b6:	4629      	mov	r1, r5
   b42b8:	f7ff ff08 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42bc:	4930      	ldr	r1, [pc, #192]	; (b4380 <_Z6setHueibiii+0x228>)
   b42be:	482b      	ldr	r0, [pc, #172]	; (b436c <_Z6setHueibiii+0x214>)
   b42c0:	f001 fead 	bl	b601e <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c4:	492f      	ldr	r1, [pc, #188]	; (b4384 <_Z6setHueibiii+0x22c>)
   b42c6:	4829      	ldr	r0, [pc, #164]	; (b436c <_Z6setHueibiii+0x214>)
   b42c8:	f001 fea9 	bl	b601e <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42cc:	492e      	ldr	r1, [pc, #184]	; (b4388 <_Z6setHueibiii+0x230>)
   b42ce:	4827      	ldr	r0, [pc, #156]	; (b436c <_Z6setHueibiii+0x214>)
   b42d0:	f001 fe92 	bl	b5ff8 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d4:	4924      	ldr	r1, [pc, #144]	; (b4368 <_Z6setHueibiii+0x210>)
   b42d6:	4825      	ldr	r0, [pc, #148]	; (b436c <_Z6setHueibiii+0x214>)
   b42d8:	f001 fea1 	bl	b601e <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42dc:	492b      	ldr	r1, [pc, #172]	; (b438c <_Z6setHueibiii+0x234>)
   b42de:	4823      	ldr	r0, [pc, #140]	; (b436c <_Z6setHueibiii+0x214>)
   b42e0:	f001 fe8a 	bl	b5ff8 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e4:	220a      	movs	r2, #10
   b42e6:	9902      	ldr	r1, [sp, #8]
   b42e8:	4820      	ldr	r0, [pc, #128]	; (b436c <_Z6setHueibiii+0x214>)
   b42ea:	f001 fea2 	bl	b6032 <_ZN5Print11printNumberEmh>
        n += println();
   b42ee:	481f      	ldr	r0, [pc, #124]	; (b436c <_Z6setHueibiii+0x214>)
   b42f0:	f001 fe89 	bl	b6006 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f4:	4926      	ldr	r1, [pc, #152]	; (b4390 <_Z6setHueibiii+0x238>)
   b42f6:	481d      	ldr	r0, [pc, #116]	; (b436c <_Z6setHueibiii+0x214>)
   b42f8:	f001 fe91 	bl	b601e <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42fc:	481b      	ldr	r0, [pc, #108]	; (b436c <_Z6setHueibiii+0x214>)
   b42fe:	f001 fe82 	bl	b6006 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b4302:	9900      	ldr	r1, [sp, #0]
   b4304:	4819      	ldr	r0, [pc, #100]	; (b436c <_Z6setHueibiii+0x214>)
   b4306:	f001 fe8a 	bl	b601e <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b430a:	f002 f8bf 	bl	b648c <_Z16_fetch_usbserialv>
   b430e:	4921      	ldr	r1, [pc, #132]	; (b4394 <_Z6setHueibiii+0x23c>)
   b4310:	f001 fe85 	bl	b601e <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4314:	f002 f8ba 	bl	b648c <_Z16_fetch_usbserialv>
   b4318:	4914      	ldr	r1, [pc, #80]	; (b436c <_Z6setHueibiii+0x214>)
   b431a:	4604      	mov	r4, r0
   b431c:	a808      	add	r0, sp, #32
   b431e:	f001 feed 	bl	b60fc <_ZN6Stream10readStringEv>
   b4322:	9908      	ldr	r1, [sp, #32]
   b4324:	4620      	mov	r0, r4
   b4326:	f001 fe7a 	bl	b601e <_ZN5Print7printlnEPKc>
   b432a:	a808      	add	r0, sp, #32
   b432c:	f001 fd50 	bl	b5dd0 <_ZN6StringD1Ev>
    HueClient.stop();
   b4330:	480e      	ldr	r0, [pc, #56]	; (b436c <_Z6setHueibiii+0x214>)
   b4332:	f002 fbef 	bl	b6b14 <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4336:	2401      	movs	r4, #1
   b4338:	e739      	b.n	b41ae <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b433a:	4917      	ldr	r1, [pc, #92]	; (b4398 <_Z6setHueibiii+0x240>)
   b433c:	4668      	mov	r0, sp
   b433e:	f001 fdc0 	bl	b5ec2 <_ZN6StringaSEPKc>
   b4342:	e797      	b.n	b4274 <_Z6setHueibiii+0x11c>
   b4344:	000b7c2c 	.word	0x000b7c2c
   b4348:	2003e604 	.word	0x2003e604
   b434c:	2003e60c 	.word	0x2003e60c
   b4350:	2003e5fc 	.word	0x2003e5fc
   b4354:	000b7c11 	.word	0x000b7c11
   b4358:	000b7c2d 	.word	0x000b7c2d
   b435c:	000b7c3f 	.word	0x000b7c3f
   b4360:	000b7c47 	.word	0x000b7c47
   b4364:	000b7c5a 	.word	0x000b7c5a
   b4368:	000b7dd0 	.word	0x000b7dd0
   b436c:	2003e598 	.word	0x2003e598
   b4370:	000b7c5c 	.word	0x000b7c5c
   b4374:	000b7c73 	.word	0x000b7c73
   b4378:	000b7d88 	.word	0x000b7d88
   b437c:	000b7c7d 	.word	0x000b7c7d
   b4380:	000b7c86 	.word	0x000b7c86
   b4384:	000b7c96 	.word	0x000b7c96
   b4388:	000b7ca1 	.word	0x000b7ca1
   b438c:	000b7ca8 	.word	0x000b7ca8
   b4390:	000b7cb9 	.word	0x000b7cb9
   b4394:	000b7ce0 	.word	0x000b7ce0
   b4398:	000b7c4f 	.word	0x000b7c4f
   b439c:	2003e600 	.word	0x2003e600
   b43a0:	2003e608 	.word	0x2003e608

000b43a4 <setup>:
void determineAdvantage ();

Servo servo1;
Adafruit_SSD1306 display(D2);

void setup() {
   b43a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // WiFi.connect();
  // while(WiFi.connecting()) {
  // delay(1);
  // }

  servo1.attach(A3);
   b43a6:	23b4      	movs	r3, #180	; 0xb4
   b43a8:	2600      	movs	r6, #0
   b43aa:	e9cd 6300 	strd	r6, r3, [sp]
   b43ae:	f44f 7208 	mov.w	r2, #544	; 0x220
   b43b2:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b43b6:	2110      	movs	r1, #16
   b43b8:	4855      	ldr	r0, [pc, #340]	; (b4510 <setup+0x16c>)
   b43ba:	f001 fc7f 	bl	b5cbc <_ZN5Servo6attachEtttss>

  display.begin(SSD1306_SWITCHCAPVCC,0x3C);
   b43be:	223c      	movs	r2, #60	; 0x3c
   b43c0:	2102      	movs	r1, #2
   b43c2:	4854      	ldr	r0, [pc, #336]	; (b4514 <setup+0x170>)
   b43c4:	f000 fdd8 	bl	b4f78 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b43c8:	4852      	ldr	r0, [pc, #328]	; (b4514 <setup+0x170>)
   b43ca:	f000 fced 	bl	b4da8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b43ce:	4851      	ldr	r0, [pc, #324]	; (b4514 <setup+0x170>)
  display.drawLine(6,6,6,57,WHITE);
   b43d0:	2401      	movs	r4, #1
   b43d2:	2539      	movs	r5, #57	; 0x39
  display.display();
   b43d4:	f000 fd60 	bl	b4e98 <_ZN16Adafruit_SSD13067displayEv>
  display.drawLine(6,6,6,57,WHITE);
   b43d8:	2306      	movs	r3, #6
   b43da:	e9cd 5400 	strd	r5, r4, [sp]
   b43de:	461a      	mov	r2, r3
   b43e0:	4619      	mov	r1, r3
   b43e2:	484c      	ldr	r0, [pc, #304]	; (b4514 <setup+0x170>)
   b43e4:	f000 fea0 	bl	b5128 <_ZN12Adafruit_GFX8drawLineEsssst>
  display.drawLine(57,6,57,57,WHITE);
   b43e8:	e9cd 5400 	strd	r5, r4, [sp]
   b43ec:	462b      	mov	r3, r5
   b43ee:	4629      	mov	r1, r5
   b43f0:	4848      	ldr	r0, [pc, #288]	; (b4514 <setup+0x170>)
   b43f2:	2206      	movs	r2, #6
   b43f4:	f000 fe98 	bl	b5128 <_ZN12Adafruit_GFX8drawLineEsssst>
  display.drawLine(6,6,57,6,WHITE);
   b43f8:	2106      	movs	r1, #6
   b43fa:	462b      	mov	r3, r5
   b43fc:	460a      	mov	r2, r1
   b43fe:	4845      	ldr	r0, [pc, #276]	; (b4514 <setup+0x170>)
   b4400:	9401      	str	r4, [sp, #4]
   b4402:	9100      	str	r1, [sp, #0]
   b4404:	f000 fe90 	bl	b5128 <_ZN12Adafruit_GFX8drawLineEsssst>
  display.drawLine(6,57,57,57,WHITE);
   b4408:	e9cd 5400 	strd	r5, r4, [sp]
   b440c:	462b      	mov	r3, r5
   b440e:	462a      	mov	r2, r5
   b4410:	4840      	ldr	r0, [pc, #256]	; (b4514 <setup+0x170>)
  display.fillRect(24,7,16,16,WHITE);
   b4412:	2510      	movs	r5, #16
  display.drawLine(6,57,57,57,WHITE);
   b4414:	2106      	movs	r1, #6
   b4416:	f000 fe87 	bl	b5128 <_ZN12Adafruit_GFX8drawLineEsssst>
  display.fillRect(24,7,16,16,WHITE);
   b441a:	462b      	mov	r3, r5
   b441c:	483d      	ldr	r0, [pc, #244]	; (b4514 <setup+0x170>)
   b441e:	9401      	str	r4, [sp, #4]
   b4420:	9500      	str	r5, [sp, #0]
   b4422:	2207      	movs	r2, #7
   b4424:	2118      	movs	r1, #24
   b4426:	f000 ff2d 	bl	b5284 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(7,24,16,16,WHITE);
   b442a:	e9cd 5400 	strd	r5, r4, [sp]
   b442e:	462b      	mov	r3, r5
   b4430:	4838      	ldr	r0, [pc, #224]	; (b4514 <setup+0x170>)
   b4432:	2218      	movs	r2, #24
   b4434:	2107      	movs	r1, #7
   b4436:	f000 ff25 	bl	b5284 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(41,24,16,16,WHITE);
   b443a:	e9cd 5400 	strd	r5, r4, [sp]
   b443e:	462b      	mov	r3, r5
   b4440:	4834      	ldr	r0, [pc, #208]	; (b4514 <setup+0x170>)
   b4442:	2218      	movs	r2, #24
   b4444:	2129      	movs	r1, #41	; 0x29
   b4446:	f000 ff1d 	bl	b5284 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.fillRect(24,41,16,16,WHITE);
   b444a:	462b      	mov	r3, r5
   b444c:	2229      	movs	r2, #41	; 0x29
   b444e:	e9cd 5400 	strd	r5, r4, [sp]
   b4452:	4830      	ldr	r0, [pc, #192]	; (b4514 <setup+0x170>)
   b4454:	2118      	movs	r1, #24
   b4456:	f000 ff15 	bl	b5284 <_ZN12Adafruit_GFX8fillRectEsssst>
  display.setTextColor(WHITE);
   b445a:	4621      	mov	r1, r4
   b445c:	482d      	ldr	r0, [pc, #180]	; (b4514 <setup+0x170>)
   b445e:	f001 f811 	bl	b5484 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setTextSize(1);
   b4462:	4621      	mov	r1, r4
   b4464:	482b      	ldr	r0, [pc, #172]	; (b4514 <setup+0x170>)
   b4466:	f001 f808 	bl	b547a <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(68,16);
   b446a:	462a      	mov	r2, r5
   b446c:	4829      	ldr	r0, [pc, #164]	; (b4514 <setup+0x170>)
   b446e:	2144      	movs	r1, #68	; 0x44
   b4470:	f001 f800 	bl	b5474 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("red  = ");
   b4474:	4928      	ldr	r1, [pc, #160]	; (b4518 <setup+0x174>)
   b4476:	4827      	ldr	r0, [pc, #156]	; (b4514 <setup+0x170>)
   b4478:	f7ff fe3b 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.setCursor(68,43);
   b447c:	222b      	movs	r2, #43	; 0x2b
   b447e:	4825      	ldr	r0, [pc, #148]	; (b4514 <setup+0x170>)
   b4480:	2144      	movs	r1, #68	; 0x44
   b4482:	f000 fff7 	bl	b5474 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("blue = ");
   b4486:	4925      	ldr	r1, [pc, #148]	; (b451c <setup+0x178>)
   b4488:	4822      	ldr	r0, [pc, #136]	; (b4514 <setup+0x170>)
   b448a:	f7ff fe32 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.display();
   b448e:	4821      	ldr	r0, [pc, #132]	; (b4514 <setup+0x170>)
   b4490:	f000 fd02 	bl	b4e98 <_ZN16Adafruit_SSD13067displayEv>

  Serial.begin(9600);
   b4494:	f001 fffa 	bl	b648c <_Z16_fetch_usbserialv>
   b4498:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b449c:	f001 ffe6 	bl	b646c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b44a0:	4630      	mov	r0, r6
   b44a2:	f001 f853 	bl	b554c <hal_timer_millis>
        while (_while() && !_condition()) {
   b44a6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b44aa:	4604      	mov	r4, r0
   b44ac:	2000      	movs	r0, #0
   b44ae:	f001 f84d 	bl	b554c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b44b2:	1b00      	subs	r0, r0, r4
   b44b4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b44b8:	42a8      	cmp	r0, r5
   b44ba:	f171 0300 	sbcs.w	r3, r1, #0
   b44be:	d207      	bcs.n	b44d0 <setup+0x12c>
  waitFor(Serial.isConnected,10000);
   b44c0:	f001 ffe4 	bl	b648c <_Z16_fetch_usbserialv>
   b44c4:	f001 ffd6 	bl	b6474 <_ZN9USBSerial11isConnectedEv>
   b44c8:	b910      	cbnz	r0, b44d0 <setup+0x12c>
            spark_process();
   b44ca:	f001 fa63 	bl	b5994 <spark_process>
        while (_while() && !_condition()) {
   b44ce:	e7ed      	b.n	b44ac <setup+0x108>
   b44d0:	f001 ffdc 	bl	b648c <_Z16_fetch_usbserialv>
   b44d4:	f001 ffce 	bl	b6474 <_ZN9USBSerial11isConnectedEv>

  pinMode(A0,INPUT);
   b44d8:	2100      	movs	r1, #0
   b44da:	2013      	movs	r0, #19
   b44dc:	f002 fca6 	bl	b6e2c <pinMode>
  pinMode(A1,INPUT);
   b44e0:	2100      	movs	r1, #0
   b44e2:	2012      	movs	r0, #18
   b44e4:	f002 fca2 	bl	b6e2c <pinMode>
  pinMode(A2,INPUT);
   b44e8:	2100      	movs	r1, #0
   b44ea:	2011      	movs	r0, #17
   b44ec:	f002 fc9e 	bl	b6e2c <pinMode>
  pinMode(D8,OUTPUT);
   b44f0:	2101      	movs	r1, #1
   b44f2:	2008      	movs	r0, #8
   b44f4:	f002 fc9a 	bl	b6e2c <pinMode>
  pinMode(D7,OUTPUT);
   b44f8:	2101      	movs	r1, #1
   b44fa:	2007      	movs	r0, #7
   b44fc:	f002 fc96 	bl	b6e2c <pinMode>
  pinMode(D6,OUTPUT);
   b4500:	2101      	movs	r1, #1
   b4502:	2006      	movs	r0, #6
}
   b4504:	b002      	add	sp, #8
   b4506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pinMode(D6,OUTPUT);
   b450a:	f002 bc8f 	b.w	b6e2c <pinMode>
   b450e:	bf00      	nop
   b4510:	2003e6a8 	.word	0x2003e6a8
   b4514:	2003e644 	.word	0x2003e644
   b4518:	000b7ce9 	.word	0x000b7ce9
   b451c:	000b7cf1 	.word	0x000b7cf1

000b4520 <_Z18determineAdvantagev>:
    setHue(3,true,COLORS[currentColor],100,255);
    servo1.write(SERVOANGLES[currentAngle]);
  }
}

void determineAdvantage () {
   b4520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4524:	f8df 80d0 	ldr.w	r8, [pc, #208]	; b45f8 <_Z18determineAdvantagev+0xd8>
  //reset values
  redPiece = 0;
   b4528:	4c2d      	ldr	r4, [pc, #180]	; (b45e0 <_Z18determineAdvantagev+0xc0>)
  bluePiece = 0;
   b452a:	4d2e      	ldr	r5, [pc, #184]	; (b45e4 <_Z18determineAdvantagev+0xc4>)
  //read number of red and blue pieces
  for (j=0;j<3;j++) {
   b452c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b45fc <_Z18determineAdvantagev+0xdc>
   b4530:	f8d8 9000 	ldr.w	r9, [r8]
   b4534:	4e2c      	ldr	r6, [pc, #176]	; (b45e8 <_Z18determineAdvantagev+0xc8>)
  redPiece = 0;
   b4536:	2300      	movs	r3, #0
   b4538:	6023      	str	r3, [r4, #0]
  bluePiece = 0;
   b453a:	602b      	str	r3, [r5, #0]
  for (j=0;j<3;j++) {
   b453c:	f8cc 3000 	str.w	r3, [ip]
   b4540:	2704      	movs	r7, #4
   b4542:	4619      	mov	r1, r3
   b4544:	469e      	mov	lr, r3
   b4546:	4618      	mov	r0, r3
   b4548:	461a      	mov	r2, r3
    for (i=0;i<3;i++) {
      if (nominalRead[j][i] == 1) {redPiece ++;}
   b454a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      if (nominalRead[j][i] == 2) {bluePiece ++;}
   b454e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  for (j=0;j<3;j++) {
   b4552:	3f01      	subs	r7, #1
   b4554:	d01b      	beq.n	b458e <_Z18determineAdvantagev+0x6e>
   b4556:	46b1      	mov	r9, r6
   b4558:	2204      	movs	r2, #4
    for (i=0;i<3;i++) {
   b455a:	3a01      	subs	r2, #1
   b455c:	d012      	beq.n	b4584 <_Z18determineAdvantagev+0x64>
      if (nominalRead[j][i] == 1) {redPiece ++;}
   b455e:	ecf9 7a01 	vldmia	r9!, {s15}
   b4562:	eef4 7a47 	vcmp.f32	s15, s14
   b4566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b456a:	d103      	bne.n	b4574 <_Z18determineAdvantagev+0x54>
   b456c:	3001      	adds	r0, #1
   b456e:	f04f 0e01 	mov.w	lr, #1
   b4572:	e7f2      	b.n	b455a <_Z18determineAdvantagev+0x3a>
      if (nominalRead[j][i] == 2) {bluePiece ++;}
   b4574:	eef4 7a66 	vcmp.f32	s15, s13
   b4578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b457c:	d1ed      	bne.n	b455a <_Z18determineAdvantagev+0x3a>
   b457e:	3101      	adds	r1, #1
   b4580:	2301      	movs	r3, #1
    for (i=0;i<3;i++) {
   b4582:	e7ea      	b.n	b455a <_Z18determineAdvantagev+0x3a>
  for (j=0;j<3;j++) {
   b4584:	360c      	adds	r6, #12
   b4586:	2201      	movs	r2, #1
   b4588:	f04f 0903 	mov.w	r9, #3
   b458c:	e7e1      	b.n	b4552 <_Z18determineAdvantagev+0x32>
   b458e:	b10a      	cbz	r2, b4594 <_Z18determineAdvantagev+0x74>
   b4590:	f8c8 9000 	str.w	r9, [r8]
   b4594:	f1be 0f00 	cmp.w	lr, #0
   b4598:	d000      	beq.n	b459c <_Z18determineAdvantagev+0x7c>
   b459a:	6020      	str	r0, [r4, #0]
   b459c:	b103      	cbz	r3, b45a0 <_Z18determineAdvantagev+0x80>
   b459e:	6029      	str	r1, [r5, #0]
   b45a0:	b112      	cbz	r2, b45a8 <_Z18determineAdvantagev+0x88>
   b45a2:	2303      	movs	r3, #3
   b45a4:	f8cc 3000 	str.w	r3, [ip]
    }
  }
  //adjust colors and servo angle
  if (redPiece > bluePiece) {
   b45a8:	6822      	ldr	r2, [r4, #0]
   b45aa:	682b      	ldr	r3, [r5, #0]
   b45ac:	429a      	cmp	r2, r3
   b45ae:	dd07      	ble.n	b45c0 <_Z18determineAdvantagev+0xa0>
    currentColor = 3 - (redPiece - bluePiece); 
   b45b0:	1ad3      	subs	r3, r2, r3
   b45b2:	f1c3 0303 	rsb	r3, r3, #3
  if (redPiece < bluePiece) {
    currentColor = 3 + (bluePiece - redPiece);
    currentAngle = 3 + (bluePiece - redPiece);
  }
  if (redPiece == bluePiece) {
    currentColor = 3;
   b45b6:	4a0d      	ldr	r2, [pc, #52]	; (b45ec <_Z18determineAdvantagev+0xcc>)
   b45b8:	6013      	str	r3, [r2, #0]
    currentAngle = 3;
   b45ba:	4a0d      	ldr	r2, [pc, #52]	; (b45f0 <_Z18determineAdvantagev+0xd0>)
   b45bc:	6013      	str	r3, [r2, #0]
   b45be:	e001      	b.n	b45c4 <_Z18determineAdvantagev+0xa4>
  if (redPiece < bluePiece) {
   b45c0:	db09      	blt.n	b45d6 <_Z18determineAdvantagev+0xb6>
  if (redPiece == bluePiece) {
   b45c2:	d00b      	beq.n	b45dc <_Z18determineAdvantagev+0xbc>
  }
  Serial.printf("\nNumRed = %i NumBlue = %i",redPiece,bluePiece);
   b45c4:	f001 ff62 	bl	b648c <_Z16_fetch_usbserialv>
   b45c8:	682b      	ldr	r3, [r5, #0]
   b45ca:	6822      	ldr	r2, [r4, #0]
   b45cc:	4909      	ldr	r1, [pc, #36]	; (b45f4 <_Z18determineAdvantagev+0xd4>)
   b45ce:	f7ff fd90 	bl	b40f2 <_ZN5Print6printfEPKcz>
}
   b45d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    currentColor = 3 + (bluePiece - redPiece);
   b45d6:	1a9b      	subs	r3, r3, r2
   b45d8:	3303      	adds	r3, #3
   b45da:	e7ec      	b.n	b45b6 <_Z18determineAdvantagev+0x96>
    currentColor = 3;
   b45dc:	2303      	movs	r3, #3
   b45de:	e7ea      	b.n	b45b6 <_Z18determineAdvantagev+0x96>
   b45e0:	2003e6a4 	.word	0x2003e6a4
   b45e4:	2003e634 	.word	0x2003e634
   b45e8:	2003e680 	.word	0x2003e680
   b45ec:	2003e63c 	.word	0x2003e63c
   b45f0:	2003e638 	.word	0x2003e638
   b45f4:	000b7cf9 	.word	0x000b7cf9
   b45f8:	2003e678 	.word	0x2003e678
   b45fc:	2003e67c 	.word	0x2003e67c

000b4600 <_Z8rowSetupv>:
  for (i=2;i>=0;i--) {
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
  }
}

void rowSetup () { 
   b4600:	b538      	push	{r3, r4, r5, lr}
  if (currentRow == 0) {
   b4602:	4d2a      	ldr	r5, [pc, #168]	; (b46ac <_Z8rowSetupv+0xac>)
   b4604:	682c      	ldr	r4, [r5, #0]
   b4606:	b9bc      	cbnz	r4, b4638 <_Z8rowSetupv+0x38>
    pinMode(D8,OUTPUT);
   b4608:	2101      	movs	r1, #1
   b460a:	2008      	movs	r0, #8
   b460c:	f002 fc0e 	bl	b6e2c <pinMode>
    pinMode(D7,INPUT);
   b4610:	4621      	mov	r1, r4
   b4612:	2007      	movs	r0, #7
   b4614:	f002 fc0a 	bl	b6e2c <pinMode>
    pinMode(D6,INPUT);
   b4618:	4621      	mov	r1, r4
   b461a:	2006      	movs	r0, #6
   b461c:	f002 fc06 	bl	b6e2c <pinMode>
    digitalWrite(D8,HIGH);
   b4620:	2101      	movs	r1, #1
   b4622:	2008      	movs	r0, #8
   b4624:	f002 fc13 	bl	b6e4e <digitalWrite>
    digitalWrite(D7,LOW);
   b4628:	4621      	mov	r1, r4
   b462a:	2007      	movs	r0, #7
   b462c:	f002 fc0f 	bl	b6e4e <digitalWrite>
    digitalWrite(D6,LOW);
   b4630:	4621      	mov	r1, r4
   b4632:	2006      	movs	r0, #6
   b4634:	f002 fc0b 	bl	b6e4e <digitalWrite>
  }
  if (currentRow == 1) { 
   b4638:	682c      	ldr	r4, [r5, #0]
   b463a:	2c01      	cmp	r4, #1
   b463c:	d117      	bne.n	b466e <_Z8rowSetupv+0x6e>
    pinMode(D8,INPUT);
   b463e:	2100      	movs	r1, #0
   b4640:	2008      	movs	r0, #8
   b4642:	f002 fbf3 	bl	b6e2c <pinMode>
    pinMode(D7,OUTPUT);
   b4646:	4621      	mov	r1, r4
   b4648:	2007      	movs	r0, #7
   b464a:	f002 fbef 	bl	b6e2c <pinMode>
    pinMode(D6,INPUT);
   b464e:	2100      	movs	r1, #0
   b4650:	2006      	movs	r0, #6
   b4652:	f002 fbeb 	bl	b6e2c <pinMode>
    digitalWrite(D8,LOW);
   b4656:	2100      	movs	r1, #0
   b4658:	2008      	movs	r0, #8
   b465a:	f002 fbf8 	bl	b6e4e <digitalWrite>
    digitalWrite(D7,HIGH);
   b465e:	4621      	mov	r1, r4
   b4660:	2007      	movs	r0, #7
   b4662:	f002 fbf4 	bl	b6e4e <digitalWrite>
    digitalWrite(D6,LOW); 
   b4666:	2100      	movs	r1, #0
   b4668:	2006      	movs	r0, #6
   b466a:	f002 fbf0 	bl	b6e4e <digitalWrite>
  }
  if (currentRow == 2) {
   b466e:	682b      	ldr	r3, [r5, #0]
   b4670:	2b02      	cmp	r3, #2
   b4672:	d119      	bne.n	b46a8 <_Z8rowSetupv+0xa8>
    pinMode(D8,INPUT);
   b4674:	2100      	movs	r1, #0
   b4676:	2008      	movs	r0, #8
   b4678:	f002 fbd8 	bl	b6e2c <pinMode>
    pinMode(D7,INPUT);
   b467c:	2100      	movs	r1, #0
   b467e:	2007      	movs	r0, #7
   b4680:	f002 fbd4 	bl	b6e2c <pinMode>
    pinMode(D6,OUTPUT);
   b4684:	2101      	movs	r1, #1
   b4686:	2006      	movs	r0, #6
   b4688:	f002 fbd0 	bl	b6e2c <pinMode>
    digitalWrite(D8,LOW);
   b468c:	2100      	movs	r1, #0
   b468e:	2008      	movs	r0, #8
   b4690:	f002 fbdd 	bl	b6e4e <digitalWrite>
    digitalWrite(D7,LOW);
   b4694:	2100      	movs	r1, #0
   b4696:	2007      	movs	r0, #7
   b4698:	f002 fbd9 	bl	b6e4e <digitalWrite>
    digitalWrite(D6,HIGH);
  }
   b469c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(D6,HIGH);
   b46a0:	2101      	movs	r1, #1
   b46a2:	2006      	movs	r0, #6
   b46a4:	f002 bbd3 	b.w	b6e4e <digitalWrite>
   b46a8:	bd38      	pop	{r3, r4, r5, pc}
   b46aa:	bf00      	nop
   b46ac:	2003e640 	.word	0x2003e640

000b46b0 <_Z13checkPiecePosv>:
void checkPiecePos () {
   b46b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (j=0;j<3;j++) {
   b46b4:	f8df 8198 	ldr.w	r8, [pc, #408]	; b4850 <_Z13checkPiecePosv+0x1a0>
      nominalRead [i][j] = analogRead(i+17)/903.0;
   b46b8:	f8df 9184 	ldr.w	r9, [pc, #388]	; b4840 <_Z13checkPiecePosv+0x190>
   b46bc:	a762      	add	r7, pc, #392	; (adr r7, b4848 <_Z13checkPiecePosv+0x198>)
   b46be:	e9d7 6700 	ldrd	r6, r7, [r7]
  for (j=0;j<3;j++) {
   b46c2:	2300      	movs	r3, #0
void checkPiecePos () {
   b46c4:	b086      	sub	sp, #24
  for (j=0;j<3;j++) {
   b46c6:	f8c8 3000 	str.w	r3, [r8]
   b46ca:	f8d8 3000 	ldr.w	r3, [r8]
   b46ce:	4c58      	ldr	r4, [pc, #352]	; (b4830 <_Z13checkPiecePosv+0x180>)
   b46d0:	2b02      	cmp	r3, #2
   b46d2:	dc5a      	bgt.n	b478a <_Z13checkPiecePosv+0xda>
    currentRow = j;
   b46d4:	4a57      	ldr	r2, [pc, #348]	; (b4834 <_Z13checkPiecePosv+0x184>)
   b46d6:	6013      	str	r3, [r2, #0]
    rowSetup ();
   b46d8:	f7ff ff92 	bl	b4600 <_Z8rowSetupv>
    delay(1000);
   b46dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b46e0:	f001 fd3e 	bl	b6160 <delay>
    for (i=0;i<3;i++) {
   b46e4:	2300      	movs	r3, #0
   b46e6:	6023      	str	r3, [r4, #0]
   b46e8:	6820      	ldr	r0, [r4, #0]
   b46ea:	2802      	cmp	r0, #2
   b46ec:	dc47      	bgt.n	b477e <_Z13checkPiecePosv+0xce>
      nominalRead [i][j] = analogRead(i+17)/903.0;
   b46ee:	3011      	adds	r0, #17
   b46f0:	b280      	uxth	r0, r0
   b46f2:	f002 fbc5 	bl	b6e80 <analogRead>
   b46f6:	f002 fee1 	bl	b74bc <__aeabi_i2d>
   b46fa:	4632      	mov	r2, r6
   b46fc:	463b      	mov	r3, r7
   b46fe:	f003 f871 	bl	b77e4 <__aeabi_ddiv>
   b4702:	f003 f957 	bl	b79b4 <__aeabi_d2f>
   b4706:	6825      	ldr	r5, [r4, #0]
   b4708:	f8d8 a000 	ldr.w	sl, [r8]
      actualRead [i][j] = nominalRead [i][j];
   b470c:	494a      	ldr	r1, [pc, #296]	; (b4838 <_Z13checkPiecePosv+0x188>)
      nominalRead [i][j] = analogRead(i+17)/903.0;
   b470e:	ee07 0a90 	vmov	s15, r0
   b4712:	eb05 0245 	add.w	r2, r5, r5, lsl #1
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      nominalRead [i][j] = analogRead(i+17)/903.0;
   b471a:	4452      	add	r2, sl
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b471c:	eef4 7ac7 	vcmpe.f32	s15, s14
      nominalRead [i][j] = analogRead(i+17)/903.0;
   b4720:	eb09 0082 	add.w	r0, r9, r2, lsl #2
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      actualRead [i][j] = nominalRead [i][j];
   b4728:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      nominalRead [i][j] = analogRead(i+17)/903.0;
   b472c:	ea4f 0345 	mov.w	r3, r5, lsl #1
   b4730:	edc0 7a00 	vstr	s15, [r0]
      actualRead [i][j] = nominalRead [i][j];
   b4734:	edc2 7a00 	vstr	s15, [r2]
      if (nominalRead [i][j] > 1 && nominalRead [i][j] < 2) {nominalRead [i][j] = 1;}
   b4738:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   b473c:	dd09      	ble.n	b4752 <_Z13checkPiecePosv+0xa2>
   b473e:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4746:	d504      	bpl.n	b4752 <_Z13checkPiecePosv+0xa2>
   b4748:	ed80 7a00 	vstr	s14, [r0]
    for (i=0;i<3;i++) {
   b474c:	3501      	adds	r5, #1
   b474e:	6025      	str	r5, [r4, #0]
   b4750:	e7ca      	b.n	b46e8 <_Z13checkPiecePosv+0x38>
      if (nominalRead [i][j] > 2) {nominalRead [i][j] = 2;}
   b4752:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4756:	442b      	add	r3, r5
   b4758:	4453      	add	r3, sl
   b475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b475e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   b4762:	dd02      	ble.n	b476a <_Z13checkPiecePosv+0xba>
   b4764:	edc3 6a00 	vstr	s13, [r3]
      if (nominalRead [i][j] < 1) {nominalRead [i][j] = 0;}
   b4768:	e7f0      	b.n	b474c <_Z13checkPiecePosv+0x9c>
   b476a:	edd3 7a00 	vldr	s15, [r3]
   b476e:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4776:	bf44      	itt	mi
   b4778:	2200      	movmi	r2, #0
   b477a:	601a      	strmi	r2, [r3, #0]
   b477c:	e7e6      	b.n	b474c <_Z13checkPiecePosv+0x9c>
  for (j=0;j<3;j++) {
   b477e:	f8d8 3000 	ldr.w	r3, [r8]
   b4782:	3301      	adds	r3, #1
   b4784:	f8c8 3000 	str.w	r3, [r8]
   b4788:	e79f      	b.n	b46ca <_Z13checkPiecePosv+0x1a>
  for (i=2;i>=0;i--) {
   b478a:	2302      	movs	r3, #2
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",actualRead[i][0],actualRead[i][1],actualRead[i][2]);
   b478c:	4f2a      	ldr	r7, [pc, #168]	; (b4838 <_Z13checkPiecePosv+0x188>)
   b478e:	4e2b      	ldr	r6, [pc, #172]	; (b483c <_Z13checkPiecePosv+0x18c>)
  for (i=2;i>=0;i--) {
   b4790:	6023      	str	r3, [r4, #0]
    Serial.printf("\ncol1 = %.2f col2 = %.2f col3 = %.2f",actualRead[i][0],actualRead[i][1],actualRead[i][2]);
   b4792:	f04f 080c 	mov.w	r8, #12
   b4796:	f001 fe79 	bl	b648c <_Z16_fetch_usbserialv>
   b479a:	6825      	ldr	r5, [r4, #0]
   b479c:	fb08 7505 	mla	r5, r8, r5, r7
   b47a0:	4681      	mov	r9, r0
   b47a2:	6828      	ldr	r0, [r5, #0]
   b47a4:	f002 fe9c 	bl	b74e0 <__aeabi_f2d>
   b47a8:	4602      	mov	r2, r0
   b47aa:	460b      	mov	r3, r1
   b47ac:	68a8      	ldr	r0, [r5, #8]
   b47ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b47b2:	f002 fe95 	bl	b74e0 <__aeabi_f2d>
   b47b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b47ba:	6868      	ldr	r0, [r5, #4]
   b47bc:	f002 fe90 	bl	b74e0 <__aeabi_f2d>
   b47c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b47c4:	e9cd 0100 	strd	r0, r1, [sp]
   b47c8:	4631      	mov	r1, r6
   b47ca:	4648      	mov	r0, r9
   b47cc:	f7ff fc91 	bl	b40f2 <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b47d0:	6823      	ldr	r3, [r4, #0]
   b47d2:	3b01      	subs	r3, #1
   b47d4:	2b00      	cmp	r3, #0
   b47d6:	6023      	str	r3, [r4, #0]
   b47d8:	dadd      	bge.n	b4796 <_Z13checkPiecePosv+0xe6>
  for (i=2;i>=0;i--) {
   b47da:	2302      	movs	r3, #2
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
   b47dc:	4f18      	ldr	r7, [pc, #96]	; (b4840 <_Z13checkPiecePosv+0x190>)
   b47de:	4e19      	ldr	r6, [pc, #100]	; (b4844 <_Z13checkPiecePosv+0x194>)
  for (i=2;i>=0;i--) {
   b47e0:	6023      	str	r3, [r4, #0]
    Serial.printf("\nPieceSide = %.2f PieceSide = %.2f PieceSide = %.2f",nominalRead[i][0],nominalRead[i][1],nominalRead[i][2]);
   b47e2:	f04f 080c 	mov.w	r8, #12
   b47e6:	f001 fe51 	bl	b648c <_Z16_fetch_usbserialv>
   b47ea:	6825      	ldr	r5, [r4, #0]
   b47ec:	fb08 7505 	mla	r5, r8, r5, r7
   b47f0:	4681      	mov	r9, r0
   b47f2:	6828      	ldr	r0, [r5, #0]
   b47f4:	f002 fe74 	bl	b74e0 <__aeabi_f2d>
   b47f8:	4602      	mov	r2, r0
   b47fa:	460b      	mov	r3, r1
   b47fc:	68a8      	ldr	r0, [r5, #8]
   b47fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b4802:	f002 fe6d 	bl	b74e0 <__aeabi_f2d>
   b4806:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b480a:	6868      	ldr	r0, [r5, #4]
   b480c:	f002 fe68 	bl	b74e0 <__aeabi_f2d>
   b4810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4814:	e9cd 0100 	strd	r0, r1, [sp]
   b4818:	4631      	mov	r1, r6
   b481a:	4648      	mov	r0, r9
   b481c:	f7ff fc69 	bl	b40f2 <_ZN5Print6printfEPKcz>
  for (i=2;i>=0;i--) {
   b4820:	6823      	ldr	r3, [r4, #0]
   b4822:	3b01      	subs	r3, #1
   b4824:	2b00      	cmp	r3, #0
   b4826:	6023      	str	r3, [r4, #0]
   b4828:	dadd      	bge.n	b47e6 <_Z13checkPiecePosv+0x136>
}
   b482a:	b006      	add	sp, #24
   b482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4830:	2003e678 	.word	0x2003e678
   b4834:	2003e640 	.word	0x2003e640
   b4838:	2003e610 	.word	0x2003e610
   b483c:	000b7d13 	.word	0x000b7d13
   b4840:	2003e680 	.word	0x2003e680
   b4844:	000b7d38 	.word	0x000b7d38
   b4848:	00000000 	.word	0x00000000
   b484c:	408c3800 	.word	0x408c3800
   b4850:	2003e67c 	.word	0x2003e67c

000b4854 <loop>:
void loop() {
   b4854:	b513      	push	{r0, r1, r4, lr}
  if (nominalRead[0][0] == 2 || nominalRead[0][1] == 2 || nominalRead[0][2] == 2) {
   b4856:	4c39      	ldr	r4, [pc, #228]	; (b493c <loop+0xe8>)
  checkPiecePos();
   b4858:	f7ff ff2a 	bl	b46b0 <_Z13checkPiecePosv>
  determineAdvantage();
   b485c:	f7ff fe60 	bl	b4520 <_Z18determineAdvantagev>
  if (nominalRead[0][0] == 2 || nominalRead[0][1] == 2 || nominalRead[0][2] == 2) {
   b4860:	ed94 7a00 	vldr	s14, [r4]
   b4864:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   b4868:	eeb4 7a67 	vcmp.f32	s14, s15
   b486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4870:	d00d      	beq.n	b488e <loop+0x3a>
   b4872:	ed94 7a01 	vldr	s14, [r4, #4]
   b4876:	eeb4 7a67 	vcmp.f32	s14, s15
   b487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b487e:	d006      	beq.n	b488e <loop+0x3a>
   b4880:	ed94 7a02 	vldr	s14, [r4, #8]
   b4884:	eeb4 7a67 	vcmp.f32	s14, s15
   b4888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b488c:	d113      	bne.n	b48b6 <loop+0x62>
    setHue(3,false,COLORS[currentColor],100,255);
   b488e:	4b2c      	ldr	r3, [pc, #176]	; (b4940 <loop+0xec>)
   b4890:	4a2c      	ldr	r2, [pc, #176]	; (b4944 <loop+0xf0>)
   b4892:	6819      	ldr	r1, [r3, #0]
   b4894:	23ff      	movs	r3, #255	; 0xff
   b4896:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b489a:	9300      	str	r3, [sp, #0]
   b489c:	2100      	movs	r1, #0
   b489e:	2364      	movs	r3, #100	; 0x64
   b48a0:	2003      	movs	r0, #3
   b48a2:	f7ff fc59 	bl	b4158 <_Z6setHueibiii>
    servo1.write(0);
   b48a6:	4828      	ldr	r0, [pc, #160]	; (b4948 <loop+0xf4>)
   b48a8:	2100      	movs	r1, #0
   b48aa:	f001 f9ca 	bl	b5c42 <_ZN5Servo5writeEi>
    delay(5000);
   b48ae:	f241 3088 	movw	r0, #5000	; 0x1388
   b48b2:	f001 fc55 	bl	b6160 <delay>
  if (nominalRead[2][0] == 1 || nominalRead[2][1] == 1 || nominalRead[2][2] == 1) {
   b48b6:	ed94 7a06 	vldr	s14, [r4, #24]
   b48ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b48be:	eeb4 7a67 	vcmp.f32	s14, s15
   b48c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b48c6:	d00d      	beq.n	b48e4 <loop+0x90>
   b48c8:	ed94 7a07 	vldr	s14, [r4, #28]
   b48cc:	eeb4 7a67 	vcmp.f32	s14, s15
   b48d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b48d4:	d006      	beq.n	b48e4 <loop+0x90>
   b48d6:	ed94 7a08 	vldr	s14, [r4, #32]
   b48da:	eeb4 7a67 	vcmp.f32	s14, s15
   b48de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b48e2:	d113      	bne.n	b490c <loop+0xb8>
    setHue(3,true,21485,100,255);
   b48e4:	23ff      	movs	r3, #255	; 0xff
   b48e6:	9300      	str	r3, [sp, #0]
   b48e8:	f245 32ed 	movw	r2, #21485	; 0x53ed
   b48ec:	2364      	movs	r3, #100	; 0x64
   b48ee:	2101      	movs	r1, #1
   b48f0:	2003      	movs	r0, #3
   b48f2:	f7ff fc31 	bl	b4158 <_Z6setHueibiii>
    servo1.write(180);
   b48f6:	4814      	ldr	r0, [pc, #80]	; (b4948 <loop+0xf4>)
   b48f8:	21b4      	movs	r1, #180	; 0xb4
   b48fa:	f001 f9a2 	bl	b5c42 <_ZN5Servo5writeEi>
    delay(5000);
   b48fe:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b4902:	b002      	add	sp, #8
   b4904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5000);
   b4908:	f001 bc2a 	b.w	b6160 <delay>
    setHue(3,true,COLORS[currentColor],100,255);
   b490c:	4b0c      	ldr	r3, [pc, #48]	; (b4940 <loop+0xec>)
   b490e:	4a0d      	ldr	r2, [pc, #52]	; (b4944 <loop+0xf0>)
   b4910:	6819      	ldr	r1, [r3, #0]
   b4912:	23ff      	movs	r3, #255	; 0xff
   b4914:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   b4918:	9300      	str	r3, [sp, #0]
   b491a:	2101      	movs	r1, #1
   b491c:	2364      	movs	r3, #100	; 0x64
   b491e:	2003      	movs	r0, #3
   b4920:	f7ff fc1a 	bl	b4158 <_Z6setHueibiii>
    servo1.write(SERVOANGLES[currentAngle]);
   b4924:	4b09      	ldr	r3, [pc, #36]	; (b494c <loop+0xf8>)
   b4926:	4808      	ldr	r0, [pc, #32]	; (b4948 <loop+0xf4>)
   b4928:	681a      	ldr	r2, [r3, #0]
   b492a:	4b09      	ldr	r3, [pc, #36]	; (b4950 <loop+0xfc>)
   b492c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
}
   b4930:	b002      	add	sp, #8
   b4932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    servo1.write(SERVOANGLES[currentAngle]);
   b4936:	f001 b984 	b.w	b5c42 <_ZN5Servo5writeEi>
   b493a:	bf00      	nop
   b493c:	2003e680 	.word	0x2003e680
   b4940:	2003e63c 	.word	0x2003e63c
   b4944:	000b7db4 	.word	0x000b7db4
   b4948:	2003e6a8 	.word	0x2003e6a8
   b494c:	2003e638 	.word	0x2003e638
   b4950:	000b7d6c 	.word	0x000b7d6c

000b4954 <_GLOBAL__sub_I_SystemMode>:
   b4954:	b508      	push	{r3, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4956:	4b19      	ldr	r3, [pc, #100]	; (b49bc <_GLOBAL__sub_I_SystemMode+0x68>)
   b4958:	2200      	movs	r2, #0
   b495a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b495e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4962:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4964:	2002      	movs	r0, #2
   b4966:	f000 ff91 	bl	b588c <set_system_mode>
String hueCmd;  // Hue command
   b496a:	4915      	ldr	r1, [pc, #84]	; (b49c0 <_GLOBAL__sub_I_SystemMode+0x6c>)
   b496c:	4815      	ldr	r0, [pc, #84]	; (b49c4 <_GLOBAL__sub_I_SystemMode+0x70>)
   b496e:	f001 fa7a 	bl	b5e66 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b4972:	4a15      	ldr	r2, [pc, #84]	; (b49c8 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4974:	4b15      	ldr	r3, [pc, #84]	; (b49cc <_GLOBAL__sub_I_SystemMode+0x78>)
   b4976:	6812      	ldr	r2, [r2, #0]
   b4978:	601a      	str	r2, [r3, #0]
   b497a:	4a15      	ldr	r2, [pc, #84]	; (b49d0 <_GLOBAL__sub_I_SystemMode+0x7c>)
TCPClient HueClient;
   b497c:	4815      	ldr	r0, [pc, #84]	; (b49d4 <_GLOBAL__sub_I_SystemMode+0x80>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b497e:	6812      	ldr	r2, [r2, #0]
   b4980:	605a      	str	r2, [r3, #4]
   b4982:	4a15      	ldr	r2, [pc, #84]	; (b49d8 <_GLOBAL__sub_I_SystemMode+0x84>)
   b4984:	6812      	ldr	r2, [r2, #0]
   b4986:	609a      	str	r2, [r3, #8]
   b4988:	4a14      	ldr	r2, [pc, #80]	; (b49dc <_GLOBAL__sub_I_SystemMode+0x88>)
   b498a:	6812      	ldr	r2, [r2, #0]
   b498c:	60da      	str	r2, [r3, #12]
   b498e:	4a14      	ldr	r2, [pc, #80]	; (b49e0 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4990:	6812      	ldr	r2, [r2, #0]
   b4992:	611a      	str	r2, [r3, #16]
   b4994:	4a13      	ldr	r2, [pc, #76]	; (b49e4 <_GLOBAL__sub_I_SystemMode+0x90>)
   b4996:	6812      	ldr	r2, [r2, #0]
   b4998:	615a      	str	r2, [r3, #20]
   b499a:	4a13      	ldr	r2, [pc, #76]	; (b49e8 <_GLOBAL__sub_I_SystemMode+0x94>)
   b499c:	6812      	ldr	r2, [r2, #0]
   b499e:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b49a0:	f002 f902 	bl	b6ba8 <_ZN9TCPClientC1Ev>
 *  Date:     06-FEB-2022
 */

#include "application.h"

TCPClient WemoClient;
   b49a4:	4811      	ldr	r0, [pc, #68]	; (b49ec <_GLOBAL__sub_I_SystemMode+0x98>)
   b49a6:	f002 f8ff 	bl	b6ba8 <_ZN9TCPClientC1Ev>
Servo servo1;
   b49aa:	4811      	ldr	r0, [pc, #68]	; (b49f0 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b49ac:	f001 f972 	bl	b5c94 <_ZN5ServoC1Ev>
   b49b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Adafruit_SSD1306 display(D2);
   b49b4:	480f      	ldr	r0, [pc, #60]	; (b49f4 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b49b6:	2102      	movs	r1, #2
   b49b8:	f000 b9e0 	b.w	b4d7c <_ZN16Adafruit_SSD1306C1Ea>
   b49bc:	2003e5d4 	.word	0x2003e5d4
   b49c0:	000b7c2c 	.word	0x000b7c2c
   b49c4:	2003e668 	.word	0x2003e668
   b49c8:	2003e5d0 	.word	0x2003e5d0
   b49cc:	2003e5b4 	.word	0x2003e5b4
   b49d0:	2003e110 	.word	0x2003e110
   b49d4:	2003e598 	.word	0x2003e598
   b49d8:	2003e118 	.word	0x2003e118
   b49dc:	2003e108 	.word	0x2003e108
   b49e0:	2003e104 	.word	0x2003e104
   b49e4:	2003e10c 	.word	0x2003e10c
   b49e8:	2003e114 	.word	0x2003e114
   b49ec:	2003e5e0 	.word	0x2003e5e0
   b49f0:	2003e6a8 	.word	0x2003e6a8
   b49f4:	2003e644 	.word	0x2003e644

000b49f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b49f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b49fa:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b49fc:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4a00:	2d02      	cmp	r5, #2
   b4a02:	d069      	beq.n	b4ad8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4a04:	2d03      	cmp	r5, #3
   b4a06:	f000 8099 	beq.w	b4b3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4a0a:	2d01      	cmp	r5, #1
   b4a0c:	d16c      	bne.n	b4ae8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4a0e:	8905      	ldrh	r5, [r0, #8]
   b4a10:	43d2      	mvns	r2, r2
   b4a12:	442a      	add	r2, r5
   b4a14:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4a16:	2a00      	cmp	r2, #0
   b4a18:	db5d      	blt.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4a1a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4a1e:	4295      	cmp	r5, r2
   b4a20:	dd59      	ble.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4a22:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4a24:	bfbe      	ittt	lt
   b4a26:	185b      	addlt	r3, r3, r1
   b4a28:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4a2a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4a2c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4a30:	18cd      	adds	r5, r1, r3
   b4a32:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4a34:	bfc4      	itt	gt
   b4a36:	1a43      	subgt	r3, r0, r1
   b4a38:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4a3a:	2b00      	cmp	r3, #0
   b4a3c:	dd4b      	ble.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4a3e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4a42:	f8df c120 	ldr.w	ip, [pc, #288]	; b4b64 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4a46:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4a4a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4a4e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4a50:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4a54:	d01a      	beq.n	b4a8c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4a56:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4a5a:	4e40      	ldr	r6, [pc, #256]	; (b4b5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4a5c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4a5e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4a60:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4a62:	bf3f      	itttt	cc
   b4a64:	eba5 0e03 	subcc.w	lr, r5, r3
   b4a68:	26ff      	movcc	r6, #255	; 0xff
   b4a6a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4a6e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4a70:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4a74:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4a76:	bf0c      	ite	eq
   b4a78:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4a7a:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4a7c:	42ab      	cmp	r3, r5
   b4a7e:	f80c 6002 	strb.w	r6, [ip, r2]
   b4a82:	d328      	bcc.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4a84:	3908      	subs	r1, #8
   b4a86:	440b      	add	r3, r1
   b4a88:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4a8a:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4a8c:	2b07      	cmp	r3, #7
   b4a8e:	d919      	bls.n	b4ac4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4a90:	2c01      	cmp	r4, #1
   b4a92:	f04f 35ff 	mov.w	r5, #4294967295
   b4a96:	bf18      	it	ne
   b4a98:	2500      	movne	r5, #0
   b4a9a:	b2ed      	uxtb	r5, r5
   b4a9c:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4aa0:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4aa2:	3a08      	subs	r2, #8
   b4aa4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4aa6:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4aa8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4aac:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4ab0:	d8f7      	bhi.n	b4aa2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4ab2:	f1a3 0208 	sub.w	r2, r3, #8
   b4ab6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4aba:	3201      	adds	r2, #1
   b4abc:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4ac0:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4ac4:	b13b      	cbz	r3, b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4ac6:	4a26      	ldr	r2, [pc, #152]	; (b4b60 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4ac8:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4aca:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4acc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4ace:	bf0c      	ite	eq
   b4ad0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4ad2:	4393      	bicne	r3, r2
   b4ad4:	7003      	strb	r3, [r0, #0]
}
   b4ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4ad8:	8945      	ldrh	r5, [r0, #10]
   b4ada:	43d2      	mvns	r2, r2
   b4adc:	442a      	add	r2, r5
      x -= (w-1);
   b4ade:	18cd      	adds	r5, r1, r3
   b4ae0:	8901      	ldrh	r1, [r0, #8]
   b4ae2:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4ae4:	b212      	sxth	r2, r2
      x -= (w-1);
   b4ae6:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4ae8:	2a00      	cmp	r2, #0
   b4aea:	dbf4      	blt.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4aec:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4af0:	4295      	cmp	r5, r2
   b4af2:	ddf0      	ble.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4af4:	2900      	cmp	r1, #0
    w += x;
   b4af6:	bfbe      	ittt	lt
   b4af8:	185b      	addlt	r3, r3, r1
   b4afa:	b21b      	sxthlt	r3, r3
    x = 0;
   b4afc:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4afe:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4b02:	18ce      	adds	r6, r1, r3
   b4b04:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4b06:	bfc4      	itt	gt
   b4b08:	1a6b      	subgt	r3, r5, r1
   b4b0a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4b0c:	2b00      	cmp	r3, #0
   b4b0e:	dde2      	ble.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4b10:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4b12:	2580      	movs	r5, #128	; 0x80
   b4b14:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4b18:	4812      	ldr	r0, [pc, #72]	; (b4b64 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4b1a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4b1c:	f002 0007 	and.w	r0, r2, #7
   b4b20:	2201      	movs	r2, #1
   b4b22:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4b24:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4b26:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4b28:	440b      	add	r3, r1
   b4b2a:	d10c      	bne.n	b4b46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4b2c:	428b      	cmp	r3, r1
   b4b2e:	d0d2      	beq.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4b30:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4b34:	4310      	orrs	r0, r2
   b4b36:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4b3a:	e7f7      	b.n	b4b2c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4b3c:	18cd      	adds	r5, r1, r3
   b4b3e:	8941      	ldrh	r1, [r0, #10]
   b4b40:	1b49      	subs	r1, r1, r5
   b4b42:	b209      	sxth	r1, r1
      break;
   b4b44:	e767      	b.n	b4a16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4b46:	43d2      	mvns	r2, r2
   b4b48:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4b4a:	428b      	cmp	r3, r1
   b4b4c:	d0c3      	beq.n	b4ad6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4b4e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4b52:	4010      	ands	r0, r2
   b4b54:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4b58:	e7f7      	b.n	b4b4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4b5a:	bf00      	nop
   b4b5c:	2003e124 	.word	0x2003e124
   b4b60:	2003e11c 	.word	0x2003e11c
   b4b64:	2003e12c 	.word	0x2003e12c

000b4b68 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4b6a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4b6c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4b70:	2d02      	cmp	r5, #2
   b4b72:	d034      	beq.n	b4bde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4b74:	2d03      	cmp	r5, #3
   b4b76:	f000 809b 	beq.w	b4cb0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4b7a:	2d01      	cmp	r5, #1
   b4b7c:	d137      	bne.n	b4bee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4b7e:	18d5      	adds	r5, r2, r3
   b4b80:	8902      	ldrh	r2, [r0, #8]
   b4b82:	1b52      	subs	r2, r2, r5
   b4b84:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4b86:	2900      	cmp	r1, #0
   b4b88:	f2c0 8091 	blt.w	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4b8c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4b90:	428d      	cmp	r5, r1
   b4b92:	f340 808c 	ble.w	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4b96:	2a00      	cmp	r2, #0
    w += x;
   b4b98:	bfbe      	ittt	lt
   b4b9a:	189b      	addlt	r3, r3, r2
   b4b9c:	b21b      	sxthlt	r3, r3
    x = 0;
   b4b9e:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4ba0:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4ba4:	18d6      	adds	r6, r2, r3
   b4ba6:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4ba8:	bfc4      	itt	gt
   b4baa:	1aab      	subgt	r3, r5, r2
   b4bac:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4bae:	2b00      	cmp	r3, #0
   b4bb0:	dd7d      	ble.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4bb2:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4bb4:	2580      	movs	r5, #128	; 0x80
   b4bb6:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4bba:	4845      	ldr	r0, [pc, #276]	; (b4cd0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4bbc:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4bbe:	f001 0007 	and.w	r0, r1, #7
   b4bc2:	2101      	movs	r1, #1
   b4bc4:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4bc6:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4bc8:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4bca:	4413      	add	r3, r2
   b4bcc:	d175      	bne.n	b4cba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4bce:	429a      	cmp	r2, r3
   b4bd0:	d06d      	beq.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4bd2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4bd6:	4308      	orrs	r0, r1
   b4bd8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4bdc:	e7f7      	b.n	b4bce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4bde:	8905      	ldrh	r5, [r0, #8]
   b4be0:	43c9      	mvns	r1, r1
   b4be2:	4429      	add	r1, r5
      y -= (h-1);
   b4be4:	18d5      	adds	r5, r2, r3
   b4be6:	8942      	ldrh	r2, [r0, #10]
   b4be8:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4bea:	b209      	sxth	r1, r1
      y -= (h-1);
   b4bec:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4bee:	2900      	cmp	r1, #0
   b4bf0:	db5d      	blt.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4bf2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4bf6:	428d      	cmp	r5, r1
   b4bf8:	dd59      	ble.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4bfa:	2a00      	cmp	r2, #0
    __h += __y;
   b4bfc:	bfbe      	ittt	lt
   b4bfe:	189b      	addlt	r3, r3, r2
   b4c00:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4c02:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4c04:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4c08:	18d5      	adds	r5, r2, r3
   b4c0a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4c0c:	bfc4      	itt	gt
   b4c0e:	1a83      	subgt	r3, r0, r2
   b4c10:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4c12:	2b00      	cmp	r3, #0
   b4c14:	dd4b      	ble.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4c16:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4c1a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4cd0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4c1e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4c22:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4c26:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4c28:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4c2c:	d01a      	beq.n	b4c64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4c2e:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4c32:	4e28      	ldr	r6, [pc, #160]	; (b4cd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4c34:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4c36:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4c38:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4c3a:	bf3f      	itttt	cc
   b4c3c:	eba5 0e03 	subcc.w	lr, r5, r3
   b4c40:	26ff      	movcc	r6, #255	; 0xff
   b4c42:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4c46:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4c48:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4c4c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c4e:	bf0c      	ite	eq
   b4c50:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4c52:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4c54:	42ab      	cmp	r3, r5
   b4c56:	f80c 6001 	strb.w	r6, [ip, r1]
   b4c5a:	d328      	bcc.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4c5c:	3a08      	subs	r2, #8
   b4c5e:	4413      	add	r3, r2
   b4c60:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4c62:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4c64:	2b07      	cmp	r3, #7
   b4c66:	d919      	bls.n	b4c9c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4c68:	2c01      	cmp	r4, #1
   b4c6a:	f04f 35ff 	mov.w	r5, #4294967295
   b4c6e:	bf18      	it	ne
   b4c70:	2500      	movne	r5, #0
   b4c72:	b2ed      	uxtb	r5, r5
   b4c74:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4c78:	461a      	mov	r2, r3
      h -= 8;
   b4c7a:	3a08      	subs	r2, #8
   b4c7c:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4c7e:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4c80:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4c84:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4c88:	d8f7      	bhi.n	b4c7a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4c8a:	f1a3 0208 	sub.w	r2, r3, #8
   b4c8e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4c92:	3201      	adds	r2, #1
   b4c94:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4c98:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4c9c:	b13b      	cbz	r3, b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4c9e:	4a0e      	ldr	r2, [pc, #56]	; (b4cd8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4ca0:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4ca2:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4ca4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4ca6:	bf0c      	ite	eq
   b4ca8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4caa:	4393      	bicne	r3, r2
   b4cac:	7003      	strb	r3, [r0, #0]
}
   b4cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4cb0:	8945      	ldrh	r5, [r0, #10]
   b4cb2:	43c9      	mvns	r1, r1
   b4cb4:	4429      	add	r1, r5
   b4cb6:	b209      	sxth	r1, r1
      break;
   b4cb8:	e765      	b.n	b4b86 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4cba:	43c9      	mvns	r1, r1
   b4cbc:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4cbe:	429a      	cmp	r2, r3
   b4cc0:	d0f5      	beq.n	b4cae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4cc2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4cc6:	4008      	ands	r0, r1
   b4cc8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4ccc:	e7f7      	b.n	b4cbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4cce:	bf00      	nop
   b4cd0:	2003e12c 	.word	0x2003e12c
   b4cd4:	2003e124 	.word	0x2003e124
   b4cd8:	2003e11c 	.word	0x2003e11c

000b4cdc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4cdc:	4770      	bx	lr
	...

000b4ce0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4ce2:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4ce4:	4606      	mov	r6, r0
   b4ce6:	4614      	mov	r4, r2
   b4ce8:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4cea:	db2d      	blt.n	b4d48 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4cec:	f000 fbcf 	bl	b548e <_ZN12Adafruit_GFX5widthEv>
   b4cf0:	42a8      	cmp	r0, r5
   b4cf2:	dd29      	ble.n	b4d48 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4cf4:	2c00      	cmp	r4, #0
   b4cf6:	db27      	blt.n	b4d48 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4cf8:	4630      	mov	r0, r6
   b4cfa:	f000 fbcb 	bl	b5494 <_ZN12Adafruit_GFX6heightEv>
   b4cfe:	42a0      	cmp	r0, r4
   b4d00:	dd22      	ble.n	b4d48 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4d02:	4630      	mov	r0, r6
   b4d04:	f000 fbc1 	bl	b548a <_ZN12Adafruit_GFX11getRotationEv>
   b4d08:	2802      	cmp	r0, #2
   b4d0a:	d01e      	beq.n	b4d4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4d0c:	2803      	cmp	r0, #3
   b4d0e:	d025      	beq.n	b4d5c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4d10:	2801      	cmp	r0, #1
   b4d12:	d104      	bne.n	b4d1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4d14:	8933      	ldrh	r3, [r6, #8]
   b4d16:	43e2      	mvns	r2, r4
   b4d18:	441a      	add	r2, r3
    break;
   b4d1a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4d1c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4d1e:	2c00      	cmp	r4, #0
   b4d20:	4622      	mov	r2, r4
   b4d22:	bfb8      	it	lt
   b4d24:	1de2      	addlt	r2, r4, #7
   b4d26:	10d2      	asrs	r2, r2, #3
   b4d28:	2180      	movs	r1, #128	; 0x80
   b4d2a:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4d2e:	490e      	ldr	r1, [pc, #56]	; (b4d68 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4d30:	2201      	movs	r2, #1
   b4d32:	f004 0407 	and.w	r4, r4, #7
   b4d36:	574b      	ldrsb	r3, [r1, r5]
   b4d38:	fa02 f404 	lsl.w	r4, r2, r4
   b4d3c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4d3e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4d40:	bf0c      	ite	eq
   b4d42:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4d44:	43a3      	bicne	r3, r4
   b4d46:	554b      	strb	r3, [r1, r5]
}
   b4d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4d4a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4d4c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4d4e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4d50:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4d52:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4d54:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4d56:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4d58:	b224      	sxth	r4, r4
    break;
   b4d5a:	e7e0      	b.n	b4d1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4d5c:	8973      	ldrh	r3, [r6, #10]
   b4d5e:	3b01      	subs	r3, #1
   b4d60:	1b5b      	subs	r3, r3, r5
    break;
   b4d62:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4d64:	b21c      	sxth	r4, r3
    break;
   b4d66:	e7da      	b.n	b4d1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4d68:	2003e12c 	.word	0x2003e12c

000b4d6c <_ZN16Adafruit_SSD1306D0Ev>:
   b4d6c:	b510      	push	{r4, lr}
   b4d6e:	2124      	movs	r1, #36	; 0x24
   b4d70:	4604      	mov	r4, r0
   b4d72:	f7ff f994 	bl	b409e <_ZdlPvj>
   b4d76:	4620      	mov	r0, r4
   b4d78:	bd10      	pop	{r4, pc}
	...

000b4d7c <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4d7c:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4d7e:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4d80:	4604      	mov	r4, r0
   b4d82:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4d84:	2180      	movs	r1, #128	; 0x80
   b4d86:	f000 faa7 	bl	b52d8 <_ZN12Adafruit_GFXC1Ess>
   b4d8a:	4b06      	ldr	r3, [pc, #24]	; (b4da4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4d8c:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4d8e:	23ff      	movs	r3, #255	; 0xff
   b4d90:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4d94:	7763      	strb	r3, [r4, #29]
   b4d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4d9a:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4d9c:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4da0:	4620      	mov	r0, r4
   b4da2:	bd38      	pop	{r3, r4, r5, pc}
   b4da4:	000b7de4 	.word	0x000b7de4

000b4da8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4da8:	4802      	ldr	r0, [pc, #8]	; (b4db4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4dae:	2100      	movs	r1, #0
   b4db0:	f002 be64 	b.w	b7a7c <memset>
   b4db4:	2003e12c 	.word	0x2003e12c

000b4db8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4db8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4dba:	4c0b      	ldr	r4, [pc, #44]	; (b4de8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4dbc:	7821      	ldrb	r1, [r4, #0]
   b4dbe:	f3bf 8f5b 	dmb	ish
   b4dc2:	f011 0101 	ands.w	r1, r1, #1
   b4dc6:	d10b      	bne.n	b4de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4dc8:	4620      	mov	r0, r4
   b4dca:	9101      	str	r1, [sp, #4]
   b4dcc:	f7ff f976 	bl	b40bc <__cxa_guard_acquire>
   b4dd0:	9901      	ldr	r1, [sp, #4]
   b4dd2:	b128      	cbz	r0, b4de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4dd4:	4805      	ldr	r0, [pc, #20]	; (b4dec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4dd6:	f000 fe69 	bl	b5aac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4dda:	4620      	mov	r0, r4
   b4ddc:	f7ff f973 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b4de0:	4802      	ldr	r0, [pc, #8]	; (b4dec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4de2:	b002      	add	sp, #8
   b4de4:	bd10      	pop	{r4, pc}
   b4de6:	bf00      	nop
   b4de8:	2003e6b8 	.word	0x2003e6b8
   b4dec:	2003e6bc 	.word	0x2003e6bc

000b4df0 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4df0:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4df2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4df6:	b143      	cbz	r3, b4e0a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4df8:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4dfa:	f7ff ffdd 	bl	b4db8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4dfe:	9901      	ldr	r1, [sp, #4]
}
   b4e00:	b003      	add	sp, #12
   b4e02:	f85d eb04 	ldr.w	lr, [sp], #4
   b4e06:	f000 bf05 	b.w	b5c14 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4e0a:	460b      	mov	r3, r1
   b4e0c:	7f81      	ldrb	r1, [r0, #30]
   b4e0e:	7f40      	ldrb	r0, [r0, #29]
   b4e10:	2201      	movs	r2, #1
}
   b4e12:	b003      	add	sp, #12
   b4e14:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4e18:	f002 b849 	b.w	b6eae <shiftOut>

000b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4e1c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4e1e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4e22:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4e24:	4604      	mov	r4, r0
   b4e26:	460d      	mov	r5, r1
  if (sid != -1)
   b4e28:	d01d      	beq.n	b4e66 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4e2a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4e2e:	2101      	movs	r1, #1
   b4e30:	b280      	uxth	r0, r0
   b4e32:	f002 f80c 	bl	b6e4e <digitalWrite>
    digitalWrite(dc, LOW);
   b4e36:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4e3a:	2100      	movs	r1, #0
   b4e3c:	b280      	uxth	r0, r0
   b4e3e:	f002 f806 	bl	b6e4e <digitalWrite>
    digitalWrite(cs, LOW);
   b4e42:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4e46:	2100      	movs	r1, #0
   b4e48:	b280      	uxth	r0, r0
   b4e4a:	f002 f800 	bl	b6e4e <digitalWrite>
    fastSPIwrite(c);
   b4e4e:	4629      	mov	r1, r5
   b4e50:	4620      	mov	r0, r4
   b4e52:	f7ff ffcd 	bl	b4df0 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4e56:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4e5a:	2101      	movs	r1, #1
}
   b4e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4e60:	b280      	uxth	r0, r0
   b4e62:	f001 bff4 	b.w	b6e4e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4e66:	f002 f89f 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b4e6a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4e6e:	f001 fbd9 	bl	b6624 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4e72:	f002 f899 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b4e76:	6803      	ldr	r3, [r0, #0]
   b4e78:	2100      	movs	r1, #0
   b4e7a:	689b      	ldr	r3, [r3, #8]
   b4e7c:	4798      	blx	r3
    Wire.write(c);
   b4e7e:	f002 f893 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b4e82:	6803      	ldr	r3, [r0, #0]
   b4e84:	4629      	mov	r1, r5
   b4e86:	689b      	ldr	r3, [r3, #8]
   b4e88:	4798      	blx	r3
    Wire.endTransmission();
   b4e8a:	f002 f88d 	bl	b6fa8 <_Z19__fetch_global_Wirev>
}
   b4e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4e92:	f001 bbce 	b.w	b6632 <_ZN7TwoWire15endTransmissionEv>
	...

000b4e98 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4e9a:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b4e9c:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b4e9e:	f7ff ffbd 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b4ea2:	2100      	movs	r1, #0
   b4ea4:	4620      	mov	r0, r4
   b4ea6:	f7ff ffb9 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b4eaa:	217f      	movs	r1, #127	; 0x7f
   b4eac:	4620      	mov	r0, r4
   b4eae:	f7ff ffb5 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b4eb2:	2122      	movs	r1, #34	; 0x22
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	f7ff ffb1 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b4eba:	2100      	movs	r1, #0
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	f7ff ffad 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b4ec2:	2107      	movs	r1, #7
   b4ec4:	4620      	mov	r0, r4
   b4ec6:	f7ff ffa9 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b4eca:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b4ece:	4f29      	ldr	r7, [pc, #164]	; (b4f74 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b4ed0:	3301      	adds	r3, #1
   b4ed2:	d02a      	beq.n	b4f2a <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b4ed4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4ed8:	2101      	movs	r1, #1
   b4eda:	b280      	uxth	r0, r0
   b4edc:	f001 ffb7 	bl	b6e4e <digitalWrite>
    digitalWrite(dc, HIGH);
   b4ee0:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4ee4:	2101      	movs	r1, #1
   b4ee6:	b280      	uxth	r0, r0
   b4ee8:	f001 ffb1 	bl	b6e4e <digitalWrite>
    digitalWrite(cs, LOW);
   b4eec:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4ef0:	2100      	movs	r1, #0
   b4ef2:	b280      	uxth	r0, r0
   b4ef4:	f001 ffab 	bl	b6e4e <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4ef8:	2001      	movs	r0, #1
   b4efa:	f000 fb17 	bl	b552c <HAL_Delay_Microseconds>
   b4efe:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4f02:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b4f04:	f817 1b01 	ldrb.w	r1, [r7], #1
   b4f08:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4f0a:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b4f0c:	f7ff ff70 	bl	b4df0 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4f10:	2d00      	cmp	r5, #0
   b4f12:	d1f6      	bne.n	b4f02 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b4f14:	2001      	movs	r0, #1
   b4f16:	f000 fb09 	bl	b552c <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b4f1a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4f1e:	2101      	movs	r1, #1
}
   b4f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b4f24:	b280      	uxth	r0, r0
   b4f26:	f001 bf92 	b.w	b6e4e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4f2a:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b4f2c:	f002 f83c 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b4f30:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4f34:	f001 fb76 	bl	b6624 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b4f38:	f002 f836 	bl	b6fa8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4f3c:	6803      	ldr	r3, [r0, #0]
   b4f3e:	2140      	movs	r1, #64	; 0x40
   b4f40:	689b      	ldr	r3, [r3, #8]
   b4f42:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b4f44:	f105 0610 	add.w	r6, r5, #16
   b4f48:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b4f4a:	f002 f82d 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b4f4e:	6803      	ldr	r3, [r0, #0]
   b4f50:	5d79      	ldrb	r1, [r7, r5]
   b4f52:	689b      	ldr	r3, [r3, #8]
   b4f54:	4798      	blx	r3
		i++;
   b4f56:	1c6b      	adds	r3, r5, #1
   b4f58:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b4f5a:	42ae      	cmp	r6, r5
   b4f5c:	d1f5      	bne.n	b4f4a <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b4f5e:	f002 f823 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b4f62:	f001 fb66 	bl	b6632 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b4f66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4f6a:	d100      	bne.n	b4f6e <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b4f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4f6e:	4635      	mov	r5, r6
   b4f70:	e7dc      	b.n	b4f2c <_ZN16Adafruit_SSD13067displayEv+0x94>
   b4f72:	bf00      	nop
   b4f74:	2003e12c 	.word	0x2003e12c

000b4f78 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4f78:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b4f7a:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b4f7e:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b4f80:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b4f82:	4604      	mov	r4, r0
   b4f84:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b4f86:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b4f88:	f000 80c9 	beq.w	b511e <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b4f8c:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b4f90:	2101      	movs	r1, #1
   b4f92:	b280      	uxth	r0, r0
   b4f94:	f001 ff4a 	bl	b6e2c <pinMode>
    pinMode(cs, OUTPUT);
   b4f98:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4f9c:	2101      	movs	r1, #1
   b4f9e:	b280      	uxth	r0, r0
   b4fa0:	f001 ff44 	bl	b6e2c <pinMode>
    if (!hwSPI){
   b4fa4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b4fa8:	2b00      	cmp	r3, #0
   b4faa:	f000 80a6 	beq.w	b50fa <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b4fae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4fb2:	2101      	movs	r1, #1
   b4fb4:	b280      	uxth	r0, r0
   b4fb6:	f001 ff4a 	bl	b6e4e <digitalWrite>
        instance().setBitOrder(order);
   b4fba:	f7ff fefd 	bl	b4db8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fbe:	2101      	movs	r1, #1
   b4fc0:	f000 fd92 	bl	b5ae8 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b4fc4:	f7ff fef8 	bl	b4db8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fc8:	2110      	movs	r1, #16
   b4fca:	f000 fdfd 	bl	b5bc8 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b4fce:	f7ff fef3 	bl	b4db8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	f000 fd9c 	bl	b5b10 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b4fd8:	f7ff feee 	bl	b4db8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4fdc:	f000 fd70 	bl	b5ac0 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b4fe0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4fe4:	2101      	movs	r1, #1
   b4fe6:	b280      	uxth	r0, r0
   b4fe8:	f001 ff20 	bl	b6e2c <pinMode>
  digitalWrite(rst, HIGH);
   b4fec:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b4ff0:	2101      	movs	r1, #1
   b4ff2:	b280      	uxth	r0, r0
   b4ff4:	f001 ff2b 	bl	b6e4e <digitalWrite>
  delay(1);
   b4ff8:	2001      	movs	r0, #1
   b4ffa:	f001 f8b1 	bl	b6160 <delay>
  digitalWrite(rst, LOW);
   b4ffe:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5002:	2100      	movs	r1, #0
   b5004:	b280      	uxth	r0, r0
   b5006:	f001 ff22 	bl	b6e4e <digitalWrite>
  delay(10);
   b500a:	200a      	movs	r0, #10
   b500c:	f001 f8a8 	bl	b6160 <delay>
  digitalWrite(rst, HIGH);
   b5010:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5014:	2101      	movs	r1, #1
   b5016:	b280      	uxth	r0, r0
   b5018:	f001 ff19 	bl	b6e4e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b501c:	4620      	mov	r0, r4
   b501e:	21ae      	movs	r1, #174	; 0xae
   b5020:	f7ff fefc 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5024:	4620      	mov	r0, r4
   b5026:	21d5      	movs	r1, #213	; 0xd5
   b5028:	f7ff fef8 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b502c:	4620      	mov	r0, r4
   b502e:	2180      	movs	r1, #128	; 0x80
   b5030:	f7ff fef4 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5034:	4620      	mov	r0, r4
   b5036:	21a8      	movs	r1, #168	; 0xa8
   b5038:	f7ff fef0 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b503c:	4620      	mov	r0, r4
   b503e:	213f      	movs	r1, #63	; 0x3f
   b5040:	f7ff feec 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5044:	4620      	mov	r0, r4
   b5046:	21d3      	movs	r1, #211	; 0xd3
   b5048:	f7ff fee8 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b504c:	4620      	mov	r0, r4
   b504e:	2100      	movs	r1, #0
   b5050:	f7ff fee4 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5054:	4620      	mov	r0, r4
   b5056:	2140      	movs	r1, #64	; 0x40
   b5058:	f7ff fee0 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b505c:	218d      	movs	r1, #141	; 0x8d
   b505e:	4620      	mov	r0, r4
   b5060:	f7ff fedc 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5064:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5066:	bf0c      	ite	eq
   b5068:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b506a:	2114      	movne	r1, #20
   b506c:	4620      	mov	r0, r4
   b506e:	f7ff fed5 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5072:	4620      	mov	r0, r4
   b5074:	2120      	movs	r1, #32
   b5076:	f7ff fed1 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b507a:	4620      	mov	r0, r4
   b507c:	2100      	movs	r1, #0
   b507e:	f7ff fecd 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5082:	4620      	mov	r0, r4
   b5084:	21a1      	movs	r1, #161	; 0xa1
   b5086:	f7ff fec9 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b508a:	4620      	mov	r0, r4
   b508c:	21c8      	movs	r1, #200	; 0xc8
   b508e:	f7ff fec5 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5092:	4620      	mov	r0, r4
   b5094:	21da      	movs	r1, #218	; 0xda
   b5096:	f7ff fec1 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b509a:	4620      	mov	r0, r4
   b509c:	2112      	movs	r1, #18
   b509e:	f7ff febd 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b50a2:	2181      	movs	r1, #129	; 0x81
   b50a4:	4620      	mov	r0, r4
   b50a6:	f7ff feb9 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b50aa:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b50ac:	bf0c      	ite	eq
   b50ae:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b50b0:	21cf      	movne	r1, #207	; 0xcf
   b50b2:	4620      	mov	r0, r4
   b50b4:	f7ff feb2 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b50b8:	21d9      	movs	r1, #217	; 0xd9
   b50ba:	4620      	mov	r0, r4
   b50bc:	f7ff feae 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b50c0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b50c2:	bf0c      	ite	eq
   b50c4:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b50c6:	21f1      	movne	r1, #241	; 0xf1
   b50c8:	4620      	mov	r0, r4
   b50ca:	f7ff fea7 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b50ce:	4620      	mov	r0, r4
   b50d0:	21db      	movs	r1, #219	; 0xdb
   b50d2:	f7ff fea3 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b50d6:	4620      	mov	r0, r4
   b50d8:	2140      	movs	r1, #64	; 0x40
   b50da:	f7ff fe9f 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b50de:	4620      	mov	r0, r4
   b50e0:	21a4      	movs	r1, #164	; 0xa4
   b50e2:	f7ff fe9b 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b50e6:	4620      	mov	r0, r4
   b50e8:	21a6      	movs	r1, #166	; 0xa6
   b50ea:	f7ff fe97 	bl	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b50ee:	4620      	mov	r0, r4
   b50f0:	21af      	movs	r1, #175	; 0xaf
}
   b50f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b50f6:	f7ff be91 	b.w	b4e1c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b50fa:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b50fe:	2101      	movs	r1, #1
   b5100:	b280      	uxth	r0, r0
   b5102:	f001 fe93 	bl	b6e2c <pinMode>
    	pinMode(sclk, OUTPUT);
   b5106:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b510a:	2101      	movs	r1, #1
   b510c:	b280      	uxth	r0, r0
   b510e:	f001 fe8d 	bl	b6e2c <pinMode>
    if (hwSPI){
   b5112:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5116:	2b00      	cmp	r3, #0
   b5118:	f43f af62 	beq.w	b4fe0 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b511c:	e747      	b.n	b4fae <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b511e:	f001 ff43 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b5122:	f001 fa75 	bl	b6610 <_ZN7TwoWire5beginEv>
   b5126:	e75b      	b.n	b4fe0 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5128 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b512c:	b085      	sub	sp, #20
   b512e:	461f      	mov	r7, r3
   b5130:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5134:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5138:	eba8 0902 	sub.w	r9, r8, r2
   b513c:	eba7 0a01 	sub.w	sl, r7, r1
   b5140:	f1b9 0f00 	cmp.w	r9, #0
   b5144:	bfb8      	it	lt
   b5146:	f1c9 0900 	rsblt	r9, r9, #0
   b514a:	f1ba 0f00 	cmp.w	sl, #0
   b514e:	bfb8      	it	lt
   b5150:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b5154:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b5156:	4683      	mov	fp, r0
   b5158:	460c      	mov	r4, r1
   b515a:	4615      	mov	r5, r2
  if (steep) {
   b515c:	dd04      	ble.n	b5168 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b515e:	463a      	mov	r2, r7
    swap(x0, y0);
   b5160:	462c      	mov	r4, r5
    swap(x1, y1);
   b5162:	4647      	mov	r7, r8
    swap(x0, y0);
   b5164:	460d      	mov	r5, r1
    swap(x1, y1);
   b5166:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5168:	42bc      	cmp	r4, r7
   b516a:	dd05      	ble.n	b5178 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b516c:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b516e:	4645      	mov	r5, r8
   b5170:	4690      	mov	r8, r2
  if (x0 > x1) {
   b5172:	4622      	mov	r2, r4
   b5174:	463c      	mov	r4, r7
   b5176:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5178:	1b3e      	subs	r6, r7, r4
   b517a:	b2b2      	uxth	r2, r6
   b517c:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b517e:	eba8 0205 	sub.w	r2, r8, r5
   b5182:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5186:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b518a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b518e:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b5192:	4545      	cmp	r5, r8
   b5194:	bfb4      	ite	lt
   b5196:	2201      	movlt	r2, #1
   b5198:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b519c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b519e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b51a0:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b51a2:	42bc      	cmp	r4, r7
   b51a4:	dc1c      	bgt.n	b51e0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b51a6:	f8db 2000 	ldr.w	r2, [fp]
   b51aa:	9303      	str	r3, [sp, #12]
    if (steep) {
   b51ac:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b51ae:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b51b2:	bfc7      	ittee	gt
   b51b4:	4629      	movgt	r1, r5
   b51b6:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b51b8:	462a      	movle	r2, r5
   b51ba:	4621      	movle	r1, r4
   b51bc:	4658      	mov	r0, fp
   b51be:	47c0      	blx	r8
    }
    err -= dy;
   b51c0:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b51c2:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b51c4:	1ab6      	subs	r6, r6, r2
   b51c6:	b2b1      	uxth	r1, r6
   b51c8:	b236      	sxth	r6, r6
    if (err < 0) {
   b51ca:	2e00      	cmp	r6, #0
   b51cc:	da05      	bge.n	b51da <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b51ce:	9a02      	ldr	r2, [sp, #8]
   b51d0:	4415      	add	r5, r2
      err += dx;
   b51d2:	9a00      	ldr	r2, [sp, #0]
   b51d4:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b51d6:	b22d      	sxth	r5, r5
      err += dx;
   b51d8:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b51da:	3401      	adds	r4, #1
   b51dc:	b224      	sxth	r4, r4
   b51de:	e7e0      	b.n	b51a2 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b51e0:	b005      	add	sp, #20
   b51e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b51e6 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b51e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b51ea:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b51ee:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b51f0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b51f4:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b51f8:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b51fa:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b51fc:	4616      	mov	r6, r2
   b51fe:	468a      	mov	sl, r1
   b5200:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5202:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5204:	6823      	ldr	r3, [r4, #0]
   b5206:	f8cd 8000 	str.w	r8, [sp]
   b520a:	f109 32ff 	add.w	r2, r9, #4294967295
   b520e:	4432      	add	r2, r6
   b5210:	69df      	ldr	r7, [r3, #28]
   b5212:	4651      	mov	r1, sl
   b5214:	462b      	mov	r3, r5
   b5216:	4620      	mov	r0, r4
   b5218:	b212      	sxth	r2, r2
   b521a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b521c:	6823      	ldr	r3, [r4, #0]
   b521e:	f8cd 8000 	str.w	r8, [sp]
   b5222:	699f      	ldr	r7, [r3, #24]
   b5224:	4632      	mov	r2, r6
   b5226:	464b      	mov	r3, r9
   b5228:	4651      	mov	r1, sl
   b522a:	4620      	mov	r0, r4
   b522c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b522e:	1e6b      	subs	r3, r5, #1
   b5230:	eb03 010a 	add.w	r1, r3, sl
   b5234:	6823      	ldr	r3, [r4, #0]
   b5236:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b523a:	699d      	ldr	r5, [r3, #24]
   b523c:	4632      	mov	r2, r6
   b523e:	464b      	mov	r3, r9
   b5240:	b209      	sxth	r1, r1
   b5242:	4620      	mov	r0, r4
   b5244:	46ac      	mov	ip, r5
}
   b5246:	b002      	add	sp, #8
   b5248:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b524c:	4760      	bx	ip

000b524e <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b524e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5250:	3b01      	subs	r3, #1
   b5252:	4413      	add	r3, r2
   b5254:	6804      	ldr	r4, [r0, #0]
   b5256:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b525a:	9501      	str	r5, [sp, #4]
   b525c:	b21b      	sxth	r3, r3
   b525e:	9300      	str	r3, [sp, #0]
   b5260:	6964      	ldr	r4, [r4, #20]
   b5262:	460b      	mov	r3, r1
   b5264:	47a0      	blx	r4
}
   b5266:	b003      	add	sp, #12
   b5268:	bd30      	pop	{r4, r5, pc}

000b526a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b526a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b526c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5270:	6804      	ldr	r4, [r0, #0]
   b5272:	e9cd 2500 	strd	r2, r5, [sp]
   b5276:	3b01      	subs	r3, #1
   b5278:	440b      	add	r3, r1
   b527a:	6964      	ldr	r4, [r4, #20]
   b527c:	b21b      	sxth	r3, r3
   b527e:	47a0      	blx	r4
}
   b5280:	b003      	add	sp, #12
   b5282:	bd30      	pop	{r4, r5, pc}

000b5284 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b5284:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5288:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b528c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5290:	4605      	mov	r5, r0
   b5292:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5294:	460c      	mov	r4, r1
   b5296:	18ce      	adds	r6, r1, r3
   b5298:	42b4      	cmp	r4, r6
   b529a:	da0b      	bge.n	b52b4 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b529c:	682b      	ldr	r3, [r5, #0]
   b529e:	f8cd 8000 	str.w	r8, [sp]
   b52a2:	699f      	ldr	r7, [r3, #24]
   b52a4:	4621      	mov	r1, r4
   b52a6:	464b      	mov	r3, r9
   b52a8:	4652      	mov	r2, sl
   b52aa:	4628      	mov	r0, r5
   b52ac:	3401      	adds	r4, #1
   b52ae:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b52b0:	b224      	sxth	r4, r4
   b52b2:	e7f1      	b.n	b5298 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b52b4:	b002      	add	sp, #8
   b52b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b52ba <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b52ba:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b52bc:	6802      	ldr	r2, [r0, #0]
   b52be:	9101      	str	r1, [sp, #4]
   b52c0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b52c4:	9100      	str	r1, [sp, #0]
   b52c6:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b52c8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b52cc:	2200      	movs	r2, #0
   b52ce:	4611      	mov	r1, r2
   b52d0:	47a0      	blx	r4
}
   b52d2:	b002      	add	sp, #8
   b52d4:	bd10      	pop	{r4, pc}

000b52d6 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b52d6:	4770      	bx	lr

000b52d8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b52d8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b52da:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b52dc:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b52de:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b52e2:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b52e4:	4d05      	ldr	r5, [pc, #20]	; (b52fc <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b52e6:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b52e8:	2201      	movs	r2, #1
   b52ea:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b52ec:	6005      	str	r5, [r0, #0]
   b52ee:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b52f0:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b52f2:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b52f4:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b52f6:	7682      	strb	r2, [r0, #26]
}
   b52f8:	bd30      	pop	{r4, r5, pc}
   b52fa:	bf00      	nop
   b52fc:	000b8318 	.word	0x000b8318

000b5300 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5304:	ed2d 8b02 	vpush	{d8}
   b5308:	b08d      	sub	sp, #52	; 0x34
   b530a:	4607      	mov	r7, r0
   b530c:	9104      	str	r1, [sp, #16]
   b530e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5312:	9105      	str	r1, [sp, #20]
   b5314:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5318:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b531a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b531e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5320:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5324:	4281      	cmp	r1, r0
   b5326:	dd52      	ble.n	b53ce <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5328:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b532c:	4291      	cmp	r1, r2
   b532e:	dd4e      	ble.n	b53ce <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5330:	2106      	movs	r1, #6
   b5332:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b5336:	2c00      	cmp	r4, #0
   b5338:	dd49      	ble.n	b53ce <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b533a:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b533e:	2c00      	cmp	r4, #0
   b5340:	dd45      	ble.n	b53ce <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5342:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5346:	930b      	str	r3, [sp, #44]	; 0x2c
   b5348:	b293      	uxth	r3, r2
   b534a:	9307      	str	r3, [sp, #28]
   b534c:	3308      	adds	r3, #8
   b534e:	b29b      	uxth	r3, r3
   b5350:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b5352:	2400      	movs	r4, #0
   b5354:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b5356:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b5358:	bf1c      	itt	ne
   b535a:	4b2c      	ldrne	r3, [pc, #176]	; (b540c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b535c:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b535e:	9e07      	ldr	r6, [sp, #28]
   b5360:	bf16      	itet	ne
   b5362:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5364:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5366:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5368:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b536a:	9a04      	ldr	r2, [sp, #16]
   b536c:	b2ab      	uxth	r3, r5
   b536e:	930a      	str	r3, [sp, #40]	; 0x28
   b5370:	fb04 f305 	mul.w	r3, r4, r5
   b5374:	fa13 f382 	uxtah	r3, r3, r2
   b5378:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b537a:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b537e:	ee08 3a10 	vmov	s16, r3
   b5382:	46b0      	mov	r8, r6
   b5384:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5388:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b538c:	9b03      	ldr	r3, [sp, #12]
   b538e:	07db      	lsls	r3, r3, #31
   b5390:	d52f      	bpl.n	b53f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5392:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5394:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5396:	d11f      	bne.n	b53d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5398:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b539c:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b539e:	b232      	sxth	r2, r6
   b53a0:	4651      	mov	r1, sl
   b53a2:	4638      	mov	r0, r7
   b53a4:	47d8      	blx	fp
      line >>= 1;
   b53a6:	9b03      	ldr	r3, [sp, #12]
   b53a8:	085b      	lsrs	r3, r3, #1
   b53aa:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b53ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b53ae:	3601      	adds	r6, #1
   b53b0:	4498      	add	r8, r3
   b53b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b53b4:	b2b6      	uxth	r6, r6
   b53b6:	42b3      	cmp	r3, r6
   b53b8:	fa1f f888 	uxth.w	r8, r8
   b53bc:	d1e6      	bne.n	b538c <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b53be:	9b08      	ldr	r3, [sp, #32]
   b53c0:	3b01      	subs	r3, #1
   b53c2:	3401      	adds	r4, #1
   b53c4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b53c8:	b264      	sxtb	r4, r4
   b53ca:	9308      	str	r3, [sp, #32]
   b53cc:	d1c3      	bne.n	b5356 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b53ce:	b00d      	add	sp, #52	; 0x34
   b53d0:	ecbd 8b02 	vpop	{d8}
   b53d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b53d8:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b53da:	e9cd 9200 	strd	r9, r2, [sp]
   b53de:	ee18 1a10 	vmov	r1, s16
   b53e2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b53e6:	fa0f f288 	sxth.w	r2, r8
   b53ea:	464b      	mov	r3, r9
   b53ec:	4638      	mov	r0, r7
   b53ee:	47d8      	blx	fp
   b53f0:	e7d9      	b.n	b53a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b53f2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b53f6:	4293      	cmp	r3, r2
   b53f8:	d0d5      	beq.n	b53a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b53fa:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b53fc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b53fe:	d103      	bne.n	b5408 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5400:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5404:	9b06      	ldr	r3, [sp, #24]
   b5406:	e7ca      	b.n	b539e <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5408:	9a06      	ldr	r2, [sp, #24]
   b540a:	e7e6      	b.n	b53da <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b540c:	000b7e14 	.word	0x000b7e14

000b5410 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5410:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5412:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5414:	b085      	sub	sp, #20
   b5416:	4604      	mov	r4, r0
  if (c == '\n') {
   b5418:	d107      	bne.n	b542a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b541a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b541c:	8a63      	ldrh	r3, [r4, #18]
   b541e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5422:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5424:	2300      	movs	r3, #0
   b5426:	8223      	strh	r3, [r4, #16]
   b5428:	e021      	b.n	b546e <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b542a:	290d      	cmp	r1, #13
   b542c:	d01f      	beq.n	b546e <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b542e:	7e03      	ldrb	r3, [r0, #24]
   b5430:	9302      	str	r3, [sp, #8]
   b5432:	8ac3      	ldrh	r3, [r0, #22]
   b5434:	9301      	str	r3, [sp, #4]
   b5436:	8a83      	ldrh	r3, [r0, #20]
   b5438:	9300      	str	r3, [sp, #0]
   b543a:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b543e:	460b      	mov	r3, r1
   b5440:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5444:	f7ff ff5c 	bl	b5300 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5448:	7e20      	ldrb	r0, [r4, #24]
   b544a:	8a23      	ldrh	r3, [r4, #16]
   b544c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5450:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b5454:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b5456:	b21b      	sxth	r3, r3
   b5458:	4602      	mov	r2, r0
   b545a:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b545c:	b139      	cbz	r1, b546e <_ZN12Adafruit_GFX5writeEh+0x5e>
   b545e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b5462:	f06f 0505 	mvn.w	r5, #5
   b5466:	fb05 1100 	mla	r1, r5, r0, r1
   b546a:	428b      	cmp	r3, r1
   b546c:	dcd6      	bgt.n	b541c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b546e:	2001      	movs	r0, #1
   b5470:	b005      	add	sp, #20
   b5472:	bd30      	pop	{r4, r5, pc}

000b5474 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5474:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5476:	8242      	strh	r2, [r0, #18]
}
   b5478:	4770      	bx	lr

000b547a <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b547a:	2901      	cmp	r1, #1
   b547c:	bf38      	it	cc
   b547e:	2101      	movcc	r1, #1
   b5480:	7601      	strb	r1, [r0, #24]
}
   b5482:	4770      	bx	lr

000b5484 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5484:	82c1      	strh	r1, [r0, #22]
   b5486:	8281      	strh	r1, [r0, #20]
}
   b5488:	4770      	bx	lr

000b548a <_ZN12Adafruit_GFX11getRotationEv>:
}
   b548a:	7e40      	ldrb	r0, [r0, #25]
   b548c:	4770      	bx	lr

000b548e <_ZN12Adafruit_GFX5widthEv>:
}
   b548e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5492:	4770      	bx	lr

000b5494 <_ZN12Adafruit_GFX6heightEv>:
}
   b5494:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5498:	4770      	bx	lr
	...

000b549c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b549c:	b508      	push	{r3, lr}
   b549e:	4b02      	ldr	r3, [pc, #8]	; (b54a8 <netdb_freeaddrinfo+0xc>)
   b54a0:	681b      	ldr	r3, [r3, #0]
   b54a2:	689b      	ldr	r3, [r3, #8]
   b54a4:	9301      	str	r3, [sp, #4]
   b54a6:	bd08      	pop	{r3, pc}
   b54a8:	00030268 	.word	0x00030268

000b54ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b54ac:	b508      	push	{r3, lr}
   b54ae:	4b02      	ldr	r3, [pc, #8]	; (b54b8 <netdb_getaddrinfo+0xc>)
   b54b0:	681b      	ldr	r3, [r3, #0]
   b54b2:	68db      	ldr	r3, [r3, #12]
   b54b4:	9301      	str	r3, [sp, #4]
   b54b6:	bd08      	pop	{r3, pc}
   b54b8:	00030268 	.word	0x00030268

000b54bc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b54bc:	b508      	push	{r3, lr}
   b54be:	4b02      	ldr	r3, [pc, #8]	; (b54c8 <HAL_Validate_Pin_Function+0xc>)
   b54c0:	681b      	ldr	r3, [r3, #0]
   b54c2:	685b      	ldr	r3, [r3, #4]
   b54c4:	9301      	str	r3, [sp, #4]
   b54c6:	bd08      	pop	{r3, pc}
   b54c8:	0003022c 	.word	0x0003022c

000b54cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b54cc:	b508      	push	{r3, lr}
   b54ce:	4b02      	ldr	r3, [pc, #8]	; (b54d8 <HAL_Pin_Mode+0xc>)
   b54d0:	681b      	ldr	r3, [r3, #0]
   b54d2:	689b      	ldr	r3, [r3, #8]
   b54d4:	9301      	str	r3, [sp, #4]
   b54d6:	bd08      	pop	{r3, pc}
   b54d8:	0003022c 	.word	0x0003022c

000b54dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b54dc:	b508      	push	{r3, lr}
   b54de:	4b02      	ldr	r3, [pc, #8]	; (b54e8 <HAL_Get_Pin_Mode+0xc>)
   b54e0:	681b      	ldr	r3, [r3, #0]
   b54e2:	68db      	ldr	r3, [r3, #12]
   b54e4:	9301      	str	r3, [sp, #4]
   b54e6:	bd08      	pop	{r3, pc}
   b54e8:	0003022c 	.word	0x0003022c

000b54ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b54ec:	b508      	push	{r3, lr}
   b54ee:	4b02      	ldr	r3, [pc, #8]	; (b54f8 <HAL_GPIO_Write+0xc>)
   b54f0:	681b      	ldr	r3, [r3, #0]
   b54f2:	691b      	ldr	r3, [r3, #16]
   b54f4:	9301      	str	r3, [sp, #4]
   b54f6:	bd08      	pop	{r3, pc}
   b54f8:	0003022c 	.word	0x0003022c

000b54fc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b54fc:	b508      	push	{r3, lr}
   b54fe:	4b02      	ldr	r3, [pc, #8]	; (b5508 <hal_adc_read+0xc>)
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5504:	9301      	str	r3, [sp, #4]
   b5506:	bd08      	pop	{r3, pc}
   b5508:	0003022c 	.word	0x0003022c

000b550c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b550c:	b508      	push	{r3, lr}
   b550e:	4b02      	ldr	r3, [pc, #8]	; (b5518 <if_index_to_name+0xc>)
   b5510:	681b      	ldr	r3, [r3, #0]
   b5512:	695b      	ldr	r3, [r3, #20]
   b5514:	9301      	str	r3, [sp, #4]
   b5516:	bd08      	pop	{r3, pc}
   b5518:	0003026c 	.word	0x0003026c

000b551c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b551c:	b508      	push	{r3, lr}
   b551e:	4b02      	ldr	r3, [pc, #8]	; (b5528 <HAL_RNG_GetRandomNumber+0xc>)
   b5520:	681b      	ldr	r3, [r3, #0]
   b5522:	685b      	ldr	r3, [r3, #4]
   b5524:	9301      	str	r3, [sp, #4]
   b5526:	bd08      	pop	{r3, pc}
   b5528:	00030218 	.word	0x00030218

000b552c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b552c:	b508      	push	{r3, lr}
   b552e:	4b02      	ldr	r3, [pc, #8]	; (b5538 <HAL_Delay_Microseconds+0xc>)
   b5530:	681b      	ldr	r3, [r3, #0]
   b5532:	68db      	ldr	r3, [r3, #12]
   b5534:	9301      	str	r3, [sp, #4]
   b5536:	bd08      	pop	{r3, pc}
   b5538:	00030218 	.word	0x00030218

000b553c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b553c:	b508      	push	{r3, lr}
   b553e:	4b02      	ldr	r3, [pc, #8]	; (b5548 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5540:	681b      	ldr	r3, [r3, #0]
   b5542:	695b      	ldr	r3, [r3, #20]
   b5544:	9301      	str	r3, [sp, #4]
   b5546:	bd08      	pop	{r3, pc}
   b5548:	00030218 	.word	0x00030218

000b554c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b554c:	b508      	push	{r3, lr}
   b554e:	4b02      	ldr	r3, [pc, #8]	; (b5558 <hal_timer_millis+0xc>)
   b5550:	681b      	ldr	r3, [r3, #0]
   b5552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5554:	9301      	str	r3, [sp, #4]
   b5556:	bd08      	pop	{r3, pc}
   b5558:	00030218 	.word	0x00030218

000b555c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b555c:	b508      	push	{r3, lr}
   b555e:	4b02      	ldr	r3, [pc, #8]	; (b5568 <os_mutex_recursive_create+0xc>)
   b5560:	681b      	ldr	r3, [r3, #0]
   b5562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5564:	9301      	str	r3, [sp, #4]
   b5566:	bd08      	pop	{r3, pc}
   b5568:	00030248 	.word	0x00030248

000b556c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b556c:	b508      	push	{r3, lr}
   b556e:	4b02      	ldr	r3, [pc, #8]	; (b5578 <inet_inet_ntop+0xc>)
   b5570:	681b      	ldr	r3, [r3, #0]
   b5572:	695b      	ldr	r3, [r3, #20]
   b5574:	9301      	str	r3, [sp, #4]
   b5576:	bd08      	pop	{r3, pc}
   b5578:	00030264 	.word	0x00030264

000b557c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b557c:	b508      	push	{r3, lr}
   b557e:	4b02      	ldr	r3, [pc, #8]	; (b5588 <inet_htonl+0xc>)
   b5580:	681b      	ldr	r3, [r3, #0]
   b5582:	6a1b      	ldr	r3, [r3, #32]
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	bd08      	pop	{r3, pc}
   b5588:	00030264 	.word	0x00030264

000b558c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b558c:	b508      	push	{r3, lr}
   b558e:	4b02      	ldr	r3, [pc, #8]	; (b5598 <inet_htons+0xc>)
   b5590:	681b      	ldr	r3, [r3, #0]
   b5592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5594:	9301      	str	r3, [sp, #4]
   b5596:	bd08      	pop	{r3, pc}
   b5598:	00030264 	.word	0x00030264

000b559c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b02      	ldr	r3, [pc, #8]	; (b55a8 <hal_usart_write+0xc>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	68db      	ldr	r3, [r3, #12]
   b55a4:	9301      	str	r3, [sp, #4]
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	0003023c 	.word	0x0003023c

000b55ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b55ac:	b508      	push	{r3, lr}
   b55ae:	4b02      	ldr	r3, [pc, #8]	; (b55b8 <hal_usart_available+0xc>)
   b55b0:	681b      	ldr	r3, [r3, #0]
   b55b2:	691b      	ldr	r3, [r3, #16]
   b55b4:	9301      	str	r3, [sp, #4]
   b55b6:	bd08      	pop	{r3, pc}
   b55b8:	0003023c 	.word	0x0003023c

000b55bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <hal_usart_read+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	695b      	ldr	r3, [r3, #20]
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	0003023c 	.word	0x0003023c

000b55cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <hal_usart_peek+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	699b      	ldr	r3, [r3, #24]
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	0003023c 	.word	0x0003023c

000b55dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <hal_usart_flush+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	69db      	ldr	r3, [r3, #28]
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	0003023c 	.word	0x0003023c

000b55ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <hal_usart_is_enabled+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	6a1b      	ldr	r3, [r3, #32]
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	0003023c 	.word	0x0003023c

000b55fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <hal_usart_available_data_for_write+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	0003023c 	.word	0x0003023c

000b560c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <hal_usart_init_ex+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	0003023c 	.word	0x0003023c

000b561c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <hal_i2c_begin+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	68db      	ldr	r3, [r3, #12]
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	00030228 	.word	0x00030228

000b562c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b562c:	b508      	push	{r3, lr}
   b562e:	4b02      	ldr	r3, [pc, #8]	; (b5638 <hal_i2c_begin_transmission+0xc>)
   b5630:	681b      	ldr	r3, [r3, #0]
   b5632:	699b      	ldr	r3, [r3, #24]
   b5634:	9301      	str	r3, [sp, #4]
   b5636:	bd08      	pop	{r3, pc}
   b5638:	00030228 	.word	0x00030228

000b563c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <hal_i2c_end_transmission+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	69db      	ldr	r3, [r3, #28]
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	00030228 	.word	0x00030228

000b564c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <hal_i2c_write+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	6a1b      	ldr	r3, [r3, #32]
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	00030228 	.word	0x00030228

000b565c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <hal_i2c_available+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030228 	.word	0x00030228

000b566c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <hal_i2c_read+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030228 	.word	0x00030228

000b567c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <hal_i2c_peek+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	00030228 	.word	0x00030228

000b568c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <hal_i2c_flush+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	00030228 	.word	0x00030228

000b569c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <hal_i2c_is_enabled+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	00030228 	.word	0x00030228

000b56ac <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <hal_i2c_init+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	00030228 	.word	0x00030228

000b56bc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <sock_setsockopt+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	699b      	ldr	r3, [r3, #24]
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	00030238 	.word	0x00030238

000b56cc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <sock_close+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	69db      	ldr	r3, [r3, #28]
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	00030238 	.word	0x00030238

000b56dc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <sock_connect+0xc>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	6a1b      	ldr	r3, [r3, #32]
   b56e4:	9301      	str	r3, [sp, #4]
   b56e6:	bd08      	pop	{r3, pc}
   b56e8:	00030238 	.word	0x00030238

000b56ec <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b56ec:	b508      	push	{r3, lr}
   b56ee:	4b02      	ldr	r3, [pc, #8]	; (b56f8 <sock_recv+0xc>)
   b56f0:	681b      	ldr	r3, [r3, #0]
   b56f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56f4:	9301      	str	r3, [sp, #4]
   b56f6:	bd08      	pop	{r3, pc}
   b56f8:	00030238 	.word	0x00030238

000b56fc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b56fc:	b508      	push	{r3, lr}
   b56fe:	4b02      	ldr	r3, [pc, #8]	; (b5708 <sock_send+0xc>)
   b5700:	681b      	ldr	r3, [r3, #0]
   b5702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	bd08      	pop	{r3, pc}
   b5708:	00030238 	.word	0x00030238

000b570c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b570c:	b508      	push	{r3, lr}
   b570e:	4b02      	ldr	r3, [pc, #8]	; (b5718 <sock_socket+0xc>)
   b5710:	681b      	ldr	r3, [r3, #0]
   b5712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5714:	9301      	str	r3, [sp, #4]
   b5716:	bd08      	pop	{r3, pc}
   b5718:	00030238 	.word	0x00030238

000b571c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b571c:	b508      	push	{r3, lr}
   b571e:	4b02      	ldr	r3, [pc, #8]	; (b5728 <hal_spi_begin+0xc>)
   b5720:	681b      	ldr	r3, [r3, #0]
   b5722:	681b      	ldr	r3, [r3, #0]
   b5724:	9301      	str	r3, [sp, #4]
   b5726:	bd08      	pop	{r3, pc}
   b5728:	00030230 	.word	0x00030230

000b572c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b572c:	b508      	push	{r3, lr}
   b572e:	4b02      	ldr	r3, [pc, #8]	; (b5738 <hal_spi_set_bit_order+0xc>)
   b5730:	681b      	ldr	r3, [r3, #0]
   b5732:	689b      	ldr	r3, [r3, #8]
   b5734:	9301      	str	r3, [sp, #4]
   b5736:	bd08      	pop	{r3, pc}
   b5738:	00030230 	.word	0x00030230

000b573c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b573c:	b508      	push	{r3, lr}
   b573e:	4b02      	ldr	r3, [pc, #8]	; (b5748 <hal_spi_set_data_mode+0xc>)
   b5740:	681b      	ldr	r3, [r3, #0]
   b5742:	68db      	ldr	r3, [r3, #12]
   b5744:	9301      	str	r3, [sp, #4]
   b5746:	bd08      	pop	{r3, pc}
   b5748:	00030230 	.word	0x00030230

000b574c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b574c:	b508      	push	{r3, lr}
   b574e:	4b02      	ldr	r3, [pc, #8]	; (b5758 <hal_spi_set_clock_divider+0xc>)
   b5750:	681b      	ldr	r3, [r3, #0]
   b5752:	691b      	ldr	r3, [r3, #16]
   b5754:	9301      	str	r3, [sp, #4]
   b5756:	bd08      	pop	{r3, pc}
   b5758:	00030230 	.word	0x00030230

000b575c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b575c:	b508      	push	{r3, lr}
   b575e:	4b02      	ldr	r3, [pc, #8]	; (b5768 <hal_spi_transfer+0xc>)
   b5760:	681b      	ldr	r3, [r3, #0]
   b5762:	695b      	ldr	r3, [r3, #20]
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	bd08      	pop	{r3, pc}
   b5768:	00030230 	.word	0x00030230

000b576c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b576c:	b508      	push	{r3, lr}
   b576e:	4b02      	ldr	r3, [pc, #8]	; (b5778 <hal_spi_init+0xc>)
   b5770:	681b      	ldr	r3, [r3, #0]
   b5772:	69db      	ldr	r3, [r3, #28]
   b5774:	9301      	str	r3, [sp, #4]
   b5776:	bd08      	pop	{r3, pc}
   b5778:	00030230 	.word	0x00030230

000b577c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b577c:	b508      	push	{r3, lr}
   b577e:	4b02      	ldr	r3, [pc, #8]	; (b5788 <hal_spi_is_enabled+0xc>)
   b5780:	681b      	ldr	r3, [r3, #0]
   b5782:	6a1b      	ldr	r3, [r3, #32]
   b5784:	9301      	str	r3, [sp, #4]
   b5786:	bd08      	pop	{r3, pc}
   b5788:	00030230 	.word	0x00030230

000b578c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b578c:	b508      	push	{r3, lr}
   b578e:	4b02      	ldr	r3, [pc, #8]	; (b5798 <hal_spi_info+0xc>)
   b5790:	681b      	ldr	r3, [r3, #0]
   b5792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5794:	9301      	str	r3, [sp, #4]
   b5796:	bd08      	pop	{r3, pc}
   b5798:	00030230 	.word	0x00030230

000b579c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b579c:	b508      	push	{r3, lr}
   b579e:	4b02      	ldr	r3, [pc, #8]	; (b57a8 <hal_spi_acquire+0xc>)
   b57a0:	681b      	ldr	r3, [r3, #0]
   b57a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57a4:	9301      	str	r3, [sp, #4]
   b57a6:	bd08      	pop	{r3, pc}
   b57a8:	00030230 	.word	0x00030230

000b57ac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b57ac:	b508      	push	{r3, lr}
   b57ae:	4b02      	ldr	r3, [pc, #8]	; (b57b8 <hal_spi_release+0xc>)
   b57b0:	681b      	ldr	r3, [r3, #0]
   b57b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b57b4:	9301      	str	r3, [sp, #4]
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	00030230 	.word	0x00030230

000b57bc <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b57bc:	b508      	push	{r3, lr}
   b57be:	4b02      	ldr	r3, [pc, #8]	; (b57c8 <HAL_Servo_Attach+0xc>)
   b57c0:	681b      	ldr	r3, [r3, #0]
   b57c2:	691b      	ldr	r3, [r3, #16]
   b57c4:	9301      	str	r3, [sp, #4]
   b57c6:	bd08      	pop	{r3, pc}
   b57c8:	00030224 	.word	0x00030224

000b57cc <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b57cc:	b508      	push	{r3, lr}
   b57ce:	4b02      	ldr	r3, [pc, #8]	; (b57d8 <HAL_Servo_Detach+0xc>)
   b57d0:	681b      	ldr	r3, [r3, #0]
   b57d2:	695b      	ldr	r3, [r3, #20]
   b57d4:	9301      	str	r3, [sp, #4]
   b57d6:	bd08      	pop	{r3, pc}
   b57d8:	00030224 	.word	0x00030224

000b57dc <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b57dc:	b508      	push	{r3, lr}
   b57de:	4b02      	ldr	r3, [pc, #8]	; (b57e8 <HAL_Servo_Write_Pulse_Width+0xc>)
   b57e0:	681b      	ldr	r3, [r3, #0]
   b57e2:	699b      	ldr	r3, [r3, #24]
   b57e4:	9301      	str	r3, [sp, #4]
   b57e6:	bd08      	pop	{r3, pc}
   b57e8:	00030224 	.word	0x00030224

000b57ec <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b57ec:	b508      	push	{r3, lr}
   b57ee:	4b02      	ldr	r3, [pc, #8]	; (b57f8 <HAL_USB_USART_Init+0xc>)
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	681b      	ldr	r3, [r3, #0]
   b57f4:	9301      	str	r3, [sp, #4]
   b57f6:	bd08      	pop	{r3, pc}
   b57f8:	0003024c 	.word	0x0003024c

000b57fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b57fc:	b508      	push	{r3, lr}
   b57fe:	4b02      	ldr	r3, [pc, #8]	; (b5808 <HAL_USB_USART_Begin+0xc>)
   b5800:	681b      	ldr	r3, [r3, #0]
   b5802:	685b      	ldr	r3, [r3, #4]
   b5804:	9301      	str	r3, [sp, #4]
   b5806:	bd08      	pop	{r3, pc}
   b5808:	0003024c 	.word	0x0003024c

000b580c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b580c:	b508      	push	{r3, lr}
   b580e:	4b02      	ldr	r3, [pc, #8]	; (b5818 <HAL_USB_USART_Available_Data+0xc>)
   b5810:	681b      	ldr	r3, [r3, #0]
   b5812:	691b      	ldr	r3, [r3, #16]
   b5814:	9301      	str	r3, [sp, #4]
   b5816:	bd08      	pop	{r3, pc}
   b5818:	0003024c 	.word	0x0003024c

000b581c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b581c:	b508      	push	{r3, lr}
   b581e:	4b02      	ldr	r3, [pc, #8]	; (b5828 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5820:	681b      	ldr	r3, [r3, #0]
   b5822:	695b      	ldr	r3, [r3, #20]
   b5824:	9301      	str	r3, [sp, #4]
   b5826:	bd08      	pop	{r3, pc}
   b5828:	0003024c 	.word	0x0003024c

000b582c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b582c:	b508      	push	{r3, lr}
   b582e:	4b02      	ldr	r3, [pc, #8]	; (b5838 <HAL_USB_USART_Receive_Data+0xc>)
   b5830:	681b      	ldr	r3, [r3, #0]
   b5832:	699b      	ldr	r3, [r3, #24]
   b5834:	9301      	str	r3, [sp, #4]
   b5836:	bd08      	pop	{r3, pc}
   b5838:	0003024c 	.word	0x0003024c

000b583c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b02      	ldr	r3, [pc, #8]	; (b5848 <HAL_USB_USART_Send_Data+0xc>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	69db      	ldr	r3, [r3, #28]
   b5844:	9301      	str	r3, [sp, #4]
   b5846:	bd08      	pop	{r3, pc}
   b5848:	0003024c 	.word	0x0003024c

000b584c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b02      	ldr	r3, [pc, #8]	; (b5858 <HAL_USB_USART_Flush_Data+0xc>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	6a1b      	ldr	r3, [r3, #32]
   b5854:	9301      	str	r3, [sp, #4]
   b5856:	bd08      	pop	{r3, pc}
   b5858:	0003024c 	.word	0x0003024c

000b585c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b585c:	b508      	push	{r3, lr}
   b585e:	4b02      	ldr	r3, [pc, #8]	; (b5868 <HAL_USB_USART_Is_Connected+0xc>)
   b5860:	681b      	ldr	r3, [r3, #0]
   b5862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5864:	9301      	str	r3, [sp, #4]
   b5866:	bd08      	pop	{r3, pc}
   b5868:	0003024c 	.word	0x0003024c

000b586c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <panic_+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	00030260 	.word	0x00030260

000b587c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <log_message+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	00030260 	.word	0x00030260

000b588c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <set_system_mode+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	685b      	ldr	r3, [r3, #4]
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	00030220 	.word	0x00030220

000b589c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <system_delay_ms+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	695b      	ldr	r3, [r3, #20]
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	00030220 	.word	0x00030220

000b58ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b03      	ldr	r3, [pc, #12]	; (b58bc <system_ctrl_set_app_request_handler+0x10>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b58b6:	9301      	str	r3, [sp, #4]
   b58b8:	bd08      	pop	{r3, pc}
   b58ba:	0000      	.short	0x0000
   b58bc:	00030220 	.word	0x00030220

000b58c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b58c0:	b508      	push	{r3, lr}
   b58c2:	4b03      	ldr	r3, [pc, #12]	; (b58d0 <system_ctrl_set_result+0x10>)
   b58c4:	681b      	ldr	r3, [r3, #0]
   b58c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b58ca:	9301      	str	r3, [sp, #4]
   b58cc:	bd08      	pop	{r3, pc}
   b58ce:	0000      	.short	0x0000
   b58d0:	00030220 	.word	0x00030220

000b58d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b58d4:	b508      	push	{r3, lr}
   b58d6:	4b02      	ldr	r3, [pc, #8]	; (b58e0 <network_connect+0xc>)
   b58d8:	681b      	ldr	r3, [r3, #0]
   b58da:	685b      	ldr	r3, [r3, #4]
   b58dc:	9301      	str	r3, [sp, #4]
   b58de:	bd08      	pop	{r3, pc}
   b58e0:	00030240 	.word	0x00030240

000b58e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b58e4:	b508      	push	{r3, lr}
   b58e6:	4b02      	ldr	r3, [pc, #8]	; (b58f0 <network_connecting+0xc>)
   b58e8:	681b      	ldr	r3, [r3, #0]
   b58ea:	689b      	ldr	r3, [r3, #8]
   b58ec:	9301      	str	r3, [sp, #4]
   b58ee:	bd08      	pop	{r3, pc}
   b58f0:	00030240 	.word	0x00030240

000b58f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b58f4:	b508      	push	{r3, lr}
   b58f6:	4b02      	ldr	r3, [pc, #8]	; (b5900 <network_disconnect+0xc>)
   b58f8:	681b      	ldr	r3, [r3, #0]
   b58fa:	68db      	ldr	r3, [r3, #12]
   b58fc:	9301      	str	r3, [sp, #4]
   b58fe:	bd08      	pop	{r3, pc}
   b5900:	00030240 	.word	0x00030240

000b5904 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5904:	b508      	push	{r3, lr}
   b5906:	4b02      	ldr	r3, [pc, #8]	; (b5910 <network_ready+0xc>)
   b5908:	681b      	ldr	r3, [r3, #0]
   b590a:	691b      	ldr	r3, [r3, #16]
   b590c:	9301      	str	r3, [sp, #4]
   b590e:	bd08      	pop	{r3, pc}
   b5910:	00030240 	.word	0x00030240

000b5914 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5914:	b508      	push	{r3, lr}
   b5916:	4b02      	ldr	r3, [pc, #8]	; (b5920 <network_on+0xc>)
   b5918:	681b      	ldr	r3, [r3, #0]
   b591a:	695b      	ldr	r3, [r3, #20]
   b591c:	9301      	str	r3, [sp, #4]
   b591e:	bd08      	pop	{r3, pc}
   b5920:	00030240 	.word	0x00030240

000b5924 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5924:	b508      	push	{r3, lr}
   b5926:	4b02      	ldr	r3, [pc, #8]	; (b5930 <network_off+0xc>)
   b5928:	681b      	ldr	r3, [r3, #0]
   b592a:	699b      	ldr	r3, [r3, #24]
   b592c:	9301      	str	r3, [sp, #4]
   b592e:	bd08      	pop	{r3, pc}
   b5930:	00030240 	.word	0x00030240

000b5934 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5934:	b508      	push	{r3, lr}
   b5936:	4b02      	ldr	r3, [pc, #8]	; (b5940 <network_listen+0xc>)
   b5938:	681b      	ldr	r3, [r3, #0]
   b593a:	69db      	ldr	r3, [r3, #28]
   b593c:	9301      	str	r3, [sp, #4]
   b593e:	bd08      	pop	{r3, pc}
   b5940:	00030240 	.word	0x00030240

000b5944 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5944:	b508      	push	{r3, lr}
   b5946:	4b02      	ldr	r3, [pc, #8]	; (b5950 <network_listening+0xc>)
   b5948:	681b      	ldr	r3, [r3, #0]
   b594a:	6a1b      	ldr	r3, [r3, #32]
   b594c:	9301      	str	r3, [sp, #4]
   b594e:	bd08      	pop	{r3, pc}
   b5950:	00030240 	.word	0x00030240

000b5954 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5954:	b508      	push	{r3, lr}
   b5956:	4b02      	ldr	r3, [pc, #8]	; (b5960 <network_set_listen_timeout+0xc>)
   b5958:	681b      	ldr	r3, [r3, #0]
   b595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b595c:	9301      	str	r3, [sp, #4]
   b595e:	bd08      	pop	{r3, pc}
   b5960:	00030240 	.word	0x00030240

000b5964 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5964:	b508      	push	{r3, lr}
   b5966:	4b02      	ldr	r3, [pc, #8]	; (b5970 <network_get_listen_timeout+0xc>)
   b5968:	681b      	ldr	r3, [r3, #0]
   b596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b596c:	9301      	str	r3, [sp, #4]
   b596e:	bd08      	pop	{r3, pc}
   b5970:	00030240 	.word	0x00030240

000b5974 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5974:	b508      	push	{r3, lr}
   b5976:	4b02      	ldr	r3, [pc, #8]	; (b5980 <network_is_on+0xc>)
   b5978:	681b      	ldr	r3, [r3, #0]
   b597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b597c:	9301      	str	r3, [sp, #4]
   b597e:	bd08      	pop	{r3, pc}
   b5980:	00030240 	.word	0x00030240

000b5984 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5984:	b508      	push	{r3, lr}
   b5986:	4b02      	ldr	r3, [pc, #8]	; (b5990 <network_is_off+0xc>)
   b5988:	681b      	ldr	r3, [r3, #0]
   b598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b598c:	9301      	str	r3, [sp, #4]
   b598e:	bd08      	pop	{r3, pc}
   b5990:	00030240 	.word	0x00030240

000b5994 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5994:	b508      	push	{r3, lr}
   b5996:	4b02      	ldr	r3, [pc, #8]	; (b59a0 <spark_process+0xc>)
   b5998:	681b      	ldr	r3, [r3, #0]
   b599a:	689b      	ldr	r3, [r3, #8]
   b599c:	9301      	str	r3, [sp, #4]
   b599e:	bd08      	pop	{r3, pc}
   b59a0:	00030244 	.word	0x00030244

000b59a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b59a4:	b508      	push	{r3, lr}
   b59a6:	4b02      	ldr	r3, [pc, #8]	; (b59b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b59a8:	681b      	ldr	r3, [r3, #0]
   b59aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b59ac:	9301      	str	r3, [sp, #4]
   b59ae:	bd08      	pop	{r3, pc}
   b59b0:	00030244 	.word	0x00030244

000b59b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b59b4:	b508      	push	{r3, lr}
   b59b6:	4b02      	ldr	r3, [pc, #8]	; (b59c0 <malloc+0xc>)
   b59b8:	681b      	ldr	r3, [r3, #0]
   b59ba:	681b      	ldr	r3, [r3, #0]
   b59bc:	9301      	str	r3, [sp, #4]
   b59be:	bd08      	pop	{r3, pc}
   b59c0:	0003021c 	.word	0x0003021c

000b59c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b59c4:	b508      	push	{r3, lr}
   b59c6:	4b02      	ldr	r3, [pc, #8]	; (b59d0 <free+0xc>)
   b59c8:	681b      	ldr	r3, [r3, #0]
   b59ca:	685b      	ldr	r3, [r3, #4]
   b59cc:	9301      	str	r3, [sp, #4]
   b59ce:	bd08      	pop	{r3, pc}
   b59d0:	0003021c 	.word	0x0003021c

000b59d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b59d4:	b508      	push	{r3, lr}
   b59d6:	4b02      	ldr	r3, [pc, #8]	; (b59e0 <realloc+0xc>)
   b59d8:	681b      	ldr	r3, [r3, #0]
   b59da:	689b      	ldr	r3, [r3, #8]
   b59dc:	9301      	str	r3, [sp, #4]
   b59de:	bd08      	pop	{r3, pc}
   b59e0:	0003021c 	.word	0x0003021c

000b59e4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b59e4:	b508      	push	{r3, lr}
   b59e6:	4b02      	ldr	r3, [pc, #8]	; (b59f0 <vsnprintf+0xc>)
   b59e8:	681b      	ldr	r3, [r3, #0]
   b59ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b59ec:	9301      	str	r3, [sp, #4]
   b59ee:	bd08      	pop	{r3, pc}
   b59f0:	0003021c 	.word	0x0003021c

000b59f4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b59f4:	b508      	push	{r3, lr}
   b59f6:	4b02      	ldr	r3, [pc, #8]	; (b5a00 <__errno+0xc>)
   b59f8:	681b      	ldr	r3, [r3, #0]
   b59fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b59fc:	9301      	str	r3, [sp, #4]
   b59fe:	bd08      	pop	{r3, pc}
   b5a00:	0003021c 	.word	0x0003021c

000b5a04 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5a04:	b508      	push	{r3, lr}
   b5a06:	4b02      	ldr	r3, [pc, #8]	; (b5a10 <__assert_func+0xc>)
   b5a08:	681b      	ldr	r3, [r3, #0]
   b5a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a0c:	9301      	str	r3, [sp, #4]
   b5a0e:	bd08      	pop	{r3, pc}
   b5a10:	0003021c 	.word	0x0003021c

000b5a14 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5a14:	b508      	push	{r3, lr}
   b5a16:	4b02      	ldr	r3, [pc, #8]	; (b5a20 <newlib_impure_ptr_callback+0xc>)
   b5a18:	681b      	ldr	r3, [r3, #0]
   b5a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a1c:	9301      	str	r3, [sp, #4]
   b5a1e:	bd08      	pop	{r3, pc}
   b5a20:	0003021c 	.word	0x0003021c

000b5a24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5a24:	2200      	movs	r2, #0
   b5a26:	6840      	ldr	r0, [r0, #4]
   b5a28:	4611      	mov	r1, r2
   b5a2a:	f7ff bf8b 	b.w	b5944 <network_listening>

000b5a2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a2e:	2200      	movs	r2, #0
   b5a30:	6840      	ldr	r0, [r0, #4]
   b5a32:	4611      	mov	r1, r2
   b5a34:	f7ff bf96 	b.w	b5964 <network_get_listen_timeout>

000b5a38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a38:	6840      	ldr	r0, [r0, #4]
   b5a3a:	2200      	movs	r2, #0
   b5a3c:	f7ff bf8a 	b.w	b5954 <network_set_listen_timeout>

000b5a40 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a40:	6840      	ldr	r0, [r0, #4]
   b5a42:	2200      	movs	r2, #0
   b5a44:	f081 0101 	eor.w	r1, r1, #1
   b5a48:	f7ff bf74 	b.w	b5934 <network_listen>

000b5a4c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5a4c:	2300      	movs	r3, #0
   b5a4e:	6840      	ldr	r0, [r0, #4]
   b5a50:	461a      	mov	r2, r3
   b5a52:	4619      	mov	r1, r3
   b5a54:	f7ff bf66 	b.w	b5924 <network_off>

000b5a58 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5a58:	2300      	movs	r3, #0
   b5a5a:	6840      	ldr	r0, [r0, #4]
   b5a5c:	461a      	mov	r2, r3
   b5a5e:	4619      	mov	r1, r3
   b5a60:	f7ff bf58 	b.w	b5914 <network_on>

000b5a64 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5a64:	2200      	movs	r2, #0
   b5a66:	6840      	ldr	r0, [r0, #4]
   b5a68:	4611      	mov	r1, r2
   b5a6a:	f7ff bf4b 	b.w	b5904 <network_ready>

000b5a6e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5a6e:	2200      	movs	r2, #0
   b5a70:	6840      	ldr	r0, [r0, #4]
   b5a72:	4611      	mov	r1, r2
   b5a74:	f7ff bf36 	b.w	b58e4 <network_connecting>

000b5a78 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a78:	6840      	ldr	r0, [r0, #4]
   b5a7a:	2200      	movs	r2, #0
   b5a7c:	2102      	movs	r1, #2
   b5a7e:	f7ff bf39 	b.w	b58f4 <network_disconnect>

000b5a82 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a82:	2300      	movs	r3, #0
   b5a84:	6840      	ldr	r0, [r0, #4]
   b5a86:	461a      	mov	r2, r3
   b5a88:	f7ff bf24 	b.w	b58d4 <network_connect>

000b5a8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a8c:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5a8e:	2203      	movs	r2, #3
   b5a90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5a92:	4a02      	ldr	r2, [pc, #8]	; (b5a9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5a94:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5a96:	4770      	bx	lr
   b5a98:	2003e6c4 	.word	0x2003e6c4
   b5a9c:	000b8350 	.word	0x000b8350

000b5aa0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5aa0:	2100      	movs	r1, #0
   b5aa2:	f7ff be83 	b.w	b57ac <hal_spi_release>

000b5aa6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5aa6:	2100      	movs	r1, #0
   b5aa8:	f7ff be78 	b.w	b579c <hal_spi_acquire>

000b5aac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5aac:	b510      	push	{r4, lr}
   b5aae:	4604      	mov	r4, r0
   b5ab0:	4608      	mov	r0, r1
{
    _spi = spi;
   b5ab2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5ab4:	f7ff fe5a 	bl	b576c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5ab8:	2300      	movs	r3, #0
   b5aba:	6063      	str	r3, [r4, #4]
}
   b5abc:	4620      	mov	r0, r4
   b5abe:	bd10      	pop	{r4, pc}

000b5ac0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5ac0:	b513      	push	{r0, r1, r4, lr}
   b5ac2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5ac4:	7800      	ldrb	r0, [r0, #0]
   b5ac6:	f7ff ffee 	bl	b5aa6 <_ZN8SPIClass4lockEv.isra.0>
   b5aca:	b958      	cbnz	r0, b5ae4 <_ZN8SPIClass5beginEv+0x24>
   b5acc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5ace:	9001      	str	r0, [sp, #4]
   b5ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5ad4:	f7ff fe22 	bl	b571c <hal_spi_begin>
        unlock();
   b5ad8:	9801      	ldr	r0, [sp, #4]
    }
}
   b5ada:	b002      	add	sp, #8
   b5adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5ae0:	f7ff bfde 	b.w	b5aa0 <_ZN8SPIClass6unlockEv.isra.0>
   b5ae4:	b002      	add	sp, #8
   b5ae6:	bd10      	pop	{r4, pc}

000b5ae8 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b5ae8:	b513      	push	{r0, r1, r4, lr}
   b5aea:	4604      	mov	r4, r0
    if (!lock())
   b5aec:	7800      	ldrb	r0, [r0, #0]
{
   b5aee:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5af0:	f7ff ffd9 	bl	b5aa6 <_ZN8SPIClass4lockEv.isra.0>
   b5af4:	9901      	ldr	r1, [sp, #4]
   b5af6:	b948      	cbnz	r0, b5b0c <_ZN8SPIClass11setBitOrderEh+0x24>
   b5af8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5afa:	9001      	str	r0, [sp, #4]
   b5afc:	f7ff fe16 	bl	b572c <hal_spi_set_bit_order>
        unlock();
   b5b00:	9801      	ldr	r0, [sp, #4]
    }
}
   b5b02:	b002      	add	sp, #8
   b5b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5b08:	f7ff bfca 	b.w	b5aa0 <_ZN8SPIClass6unlockEv.isra.0>
   b5b0c:	b002      	add	sp, #8
   b5b0e:	bd10      	pop	{r4, pc}

000b5b10 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5b10:	b513      	push	{r0, r1, r4, lr}
   b5b12:	4604      	mov	r4, r0
    if (!lock())
   b5b14:	7800      	ldrb	r0, [r0, #0]
{
   b5b16:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5b18:	f7ff ffc5 	bl	b5aa6 <_ZN8SPIClass4lockEv.isra.0>
   b5b1c:	9901      	ldr	r1, [sp, #4]
   b5b1e:	b948      	cbnz	r0, b5b34 <_ZN8SPIClass11setDataModeEh+0x24>
   b5b20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5b22:	9001      	str	r0, [sp, #4]
   b5b24:	f7ff fe0a 	bl	b573c <hal_spi_set_data_mode>
        unlock();
   b5b28:	9801      	ldr	r0, [sp, #4]
    }
}
   b5b2a:	b002      	add	sp, #8
   b5b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5b30:	f7ff bfb6 	b.w	b5aa0 <_ZN8SPIClass6unlockEv.isra.0>
   b5b34:	b002      	add	sp, #8
   b5b36:	bd10      	pop	{r4, pc}

000b5b38 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5b38:	0840      	lsrs	r0, r0, #1
{
   b5b3a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5b3c:	6018      	str	r0, [r3, #0]
   b5b3e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5b40:	6818      	ldr	r0, [r3, #0]
   b5b42:	4288      	cmp	r0, r1
   b5b44:	b2e5      	uxtb	r5, r4
   b5b46:	d906      	bls.n	b5b56 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5b48:	3401      	adds	r4, #1
   b5b4a:	2c08      	cmp	r4, #8
   b5b4c:	d002      	beq.n	b5b54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5b4e:	0840      	lsrs	r0, r0, #1
   b5b50:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5b52:	e7f5      	b.n	b5b40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5b54:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5b56:	4b02      	ldr	r3, [pc, #8]	; (b5b60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5b58:	5d5b      	ldrb	r3, [r3, r5]
   b5b5a:	7013      	strb	r3, [r2, #0]
}
   b5b5c:	bd30      	pop	{r4, r5, pc}
   b5b5e:	bf00      	nop
   b5b60:	000b8384 	.word	0x000b8384

000b5b64 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b68:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5b6a:	2300      	movs	r3, #0
{
   b5b6c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5b6e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5b70:	9302      	str	r3, [sp, #8]
{
   b5b72:	460e      	mov	r6, r1
   b5b74:	4617      	mov	r7, r2
    if (!lock())
   b5b76:	f7ff ff96 	bl	b5aa6 <_ZN8SPIClass4lockEv.isra.0>
   b5b7a:	4605      	mov	r5, r0
   b5b7c:	bb00      	cbnz	r0, b5bc0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5b7e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5b82:	4601      	mov	r1, r0
   b5b84:	2214      	movs	r2, #20
   b5b86:	a803      	add	r0, sp, #12
   b5b88:	f001 ff78 	bl	b7a7c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5b8c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5b8e:	462a      	mov	r2, r5
   b5b90:	a903      	add	r1, sp, #12
   b5b92:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5b94:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5b98:	f7ff fdf8 	bl	b578c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5b9c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5b9e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5ba2:	ab02      	add	r3, sp, #8
   b5ba4:	f10d 0207 	add.w	r2, sp, #7
   b5ba8:	fb07 f106 	mul.w	r1, r7, r6
   b5bac:	f7ff ffc4 	bl	b5b38 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5bb0:	7820      	ldrb	r0, [r4, #0]
   b5bb2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5bb6:	f7ff fdc9 	bl	b574c <hal_spi_set_clock_divider>
        unlock();
   b5bba:	7820      	ldrb	r0, [r4, #0]
   b5bbc:	f7ff ff70 	bl	b5aa0 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5bc0:	9802      	ldr	r0, [sp, #8]
   b5bc2:	b008      	add	sp, #32
   b5bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5bc8 <_ZN8SPIClass15setClockDividerEh>:
{
   b5bc8:	b538      	push	{r3, r4, r5, lr}
   b5bca:	4604      	mov	r4, r0
    if (!lock())
   b5bcc:	7800      	ldrb	r0, [r0, #0]
{
   b5bce:	460d      	mov	r5, r1
    if (!lock())
   b5bd0:	f7ff ff69 	bl	b5aa6 <_ZN8SPIClass4lockEv.isra.0>
   b5bd4:	4603      	mov	r3, r0
   b5bd6:	b9d0      	cbnz	r0, b5c0e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5bd8:	6861      	ldr	r1, [r4, #4]
   b5bda:	b199      	cbz	r1, b5c04 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5bdc:	4a0c      	ldr	r2, [pc, #48]	; (b5c10 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5bde:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5be2:	4285      	cmp	r5, r0
   b5be4:	d002      	beq.n	b5bec <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5be6:	3301      	adds	r3, #1
   b5be8:	2b08      	cmp	r3, #8
   b5bea:	d1f8      	bne.n	b5bde <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5bec:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5bee:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5bf0:	2201      	movs	r2, #1
   b5bf2:	40d9      	lsrs	r1, r3
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	f7ff ffb5 	bl	b5b64 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5bfa:	7820      	ldrb	r0, [r4, #0]
}
   b5bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5c00:	f7ff bf4e 	b.w	b5aa0 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5c04:	7820      	ldrb	r0, [r4, #0]
   b5c06:	4629      	mov	r1, r5
   b5c08:	f7ff fda0 	bl	b574c <hal_spi_set_clock_divider>
   b5c0c:	e7f5      	b.n	b5bfa <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5c0e:	bd38      	pop	{r3, r4, r5, pc}
   b5c10:	000b8384 	.word	0x000b8384

000b5c14 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5c14:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5c16:	7800      	ldrb	r0, [r0, #0]
   b5c18:	f7ff fda0 	bl	b575c <hal_spi_transfer>
}
   b5c1c:	b2c0      	uxtb	r0, r0
   b5c1e:	bd08      	pop	{r3, pc}

000b5c20 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b5c20:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b5c24:	1c53      	adds	r3, r2, #1
   b5c26:	d00b      	beq.n	b5c40 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b5c28:	8843      	ldrh	r3, [r0, #2]
   b5c2a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b5c2c:	428b      	cmp	r3, r1
   b5c2e:	d803      	bhi.n	b5c38 <_ZN5Servo17writeMicrosecondsEt+0x18>
   b5c30:	4288      	cmp	r0, r1
   b5c32:	4603      	mov	r3, r0
   b5c34:	bf28      	it	cs
   b5c36:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b5c38:	4619      	mov	r1, r3
   b5c3a:	b290      	uxth	r0, r2
   b5c3c:	f7ff bdce 	b.w	b57dc <HAL_Servo_Write_Pulse_Width>
}
   b5c40:	4770      	bx	lr

000b5c42 <_ZN5Servo5writeEi>:
{
   b5c42:	b513      	push	{r0, r1, r4, lr}
   b5c44:	4604      	mov	r4, r0
   b5c46:	4608      	mov	r0, r1
   b5c48:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b5c4c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b5c50:	4288      	cmp	r0, r1
   b5c52:	db10      	blt.n	b5c76 <_ZN5Servo5writeEi+0x34>
   b5c54:	4290      	cmp	r0, r2
   b5c56:	bfa8      	it	ge
   b5c58:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b5c5a:	88a3      	ldrh	r3, [r4, #4]
   b5c5c:	9300      	str	r3, [sp, #0]
   b5c5e:	8863      	ldrh	r3, [r4, #2]
   b5c60:	f000 fa72 	bl	b6148 <_Z3mapiiiii>
   b5c64:	68e1      	ldr	r1, [r4, #12]
   b5c66:	4401      	add	r1, r0
   b5c68:	b289      	uxth	r1, r1
   b5c6a:	4620      	mov	r0, r4
}
   b5c6c:	b002      	add	sp, #8
   b5c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b5c72:	f7ff bfd5 	b.w	b5c20 <_ZN5Servo17writeMicrosecondsEt>
   b5c76:	4608      	mov	r0, r1
   b5c78:	e7ef      	b.n	b5c5a <_ZN5Servo5writeEi+0x18>
	...

000b5c7c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b5c7c:	4a04      	ldr	r2, [pc, #16]	; (b5c90 <_ZN5Servo11resetFieldsEv+0x14>)
   b5c7e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b5c82:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b5c86:	23b4      	movs	r3, #180	; 0xb4
   b5c88:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b5c8a:	2300      	movs	r3, #0
   b5c8c:	60c3      	str	r3, [r0, #12]
}
   b5c8e:	4770      	bx	lr
   b5c90:	0220ffff 	.word	0x0220ffff

000b5c94 <_ZN5ServoC1Ev>:
Servo::Servo()
   b5c94:	b508      	push	{r3, lr}
  this->resetFields();
   b5c96:	f7ff fff1 	bl	b5c7c <_ZN5Servo11resetFieldsEv>
}
   b5c9a:	bd08      	pop	{r3, pc}

000b5c9c <_ZN5Servo6detachEv>:
{
   b5c9c:	b510      	push	{r4, lr}
   b5c9e:	4604      	mov	r4, r0
   b5ca0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b5ca4:	1c43      	adds	r3, r0, #1
   b5ca6:	d007      	beq.n	b5cb8 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b5ca8:	b280      	uxth	r0, r0
   b5caa:	f7ff fd8f 	bl	b57cc <HAL_Servo_Detach>
  this->resetFields();
   b5cae:	4620      	mov	r0, r4
   b5cb0:	f7ff ffe4 	bl	b5c7c <_ZN5Servo11resetFieldsEv>
  return true;
   b5cb4:	2001      	movs	r0, #1
}
   b5cb6:	bd10      	pop	{r4, pc}
    return false;
   b5cb8:	2000      	movs	r0, #0
   b5cba:	e7fc      	b.n	b5cb6 <_ZN5Servo6detachEv+0x1a>

000b5cbc <_ZN5Servo6attachEtttss>:
{
   b5cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5cc0:	460d      	mov	r5, r1
   b5cc2:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b5cc4:	2102      	movs	r1, #2
   b5cc6:	4628      	mov	r0, r5
{
   b5cc8:	4690      	mov	r8, r2
   b5cca:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b5ccc:	f7ff fbf6 	bl	b54bc <HAL_Validate_Pin_Function>
   b5cd0:	2802      	cmp	r0, #2
   b5cd2:	d003      	beq.n	b5cdc <_ZN5Servo6attachEtttss+0x20>
    return false;
   b5cd4:	2600      	movs	r6, #0
}
   b5cd6:	4630      	mov	r0, r6
   b5cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b5cdc:	4628      	mov	r0, r5
   b5cde:	f001 f867 	bl	b6db0 <pinAvailable>
   b5ce2:	4606      	mov	r6, r0
   b5ce4:	2800      	cmp	r0, #0
   b5ce6:	d0f5      	beq.n	b5cd4 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b5ce8:	f9b4 3000 	ldrsh.w	r3, [r4]
   b5cec:	3301      	adds	r3, #1
   b5cee:	d002      	beq.n	b5cf6 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	f7ff ffd3 	bl	b5c9c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b5cf6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b5cfa:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b5cfc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b5d00:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b5d02:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b5d06:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b5d08:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b5d0a:	4628      	mov	r0, r5
   b5d0c:	f7ff fd56 	bl	b57bc <HAL_Servo_Attach>
  return true;
   b5d10:	e7e1      	b.n	b5cd6 <_ZN5Servo6attachEtttss+0x1a>
	...

000b5d14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5d14:	4b05      	ldr	r3, [pc, #20]	; (b5d2c <_GLOBAL__sub_I_System+0x18>)
   b5d16:	2202      	movs	r2, #2
   b5d18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5d1a:	4b05      	ldr	r3, [pc, #20]	; (b5d30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5d1c:	4a05      	ldr	r2, [pc, #20]	; (b5d34 <_GLOBAL__sub_I_System+0x20>)
   b5d1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5d20:	2000      	movs	r0, #0
   b5d22:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5d26:	f7ff bdb1 	b.w	b588c <set_system_mode>
   b5d2a:	bf00      	nop
   b5d2c:	2003e6d8 	.word	0x2003e6d8
   b5d30:	2003e6cc 	.word	0x2003e6cc
   b5d34:	ffff0000 	.word	0xffff0000

000b5d38 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5d38:	b510      	push	{r4, lr}
   b5d3a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5d3c:	f001 fee6 	bl	b7b0c <strlen>
   b5d40:	3801      	subs	r0, #1
   b5d42:	1823      	adds	r3, r4, r0
   b5d44:	4620      	mov	r0, r4
	while(i<j){
   b5d46:	4283      	cmp	r3, r0
   b5d48:	d906      	bls.n	b5d58 <_Z11str_reversePc+0x20>
		c = *i;
   b5d4a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5d4c:	7819      	ldrb	r1, [r3, #0]
   b5d4e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5d52:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5d56:	e7f6      	b.n	b5d46 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5d58:	bd10      	pop	{r4, pc}

000b5d5a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5d5a:	b570      	push	{r4, r5, r6, lr}
   b5d5c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5d5e:	1e91      	subs	r1, r2, #2
   b5d60:	2922      	cmp	r1, #34	; 0x22
   b5d62:	d81d      	bhi.n	b5da0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5d64:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5d66:	b930      	cbnz	r0, b5d76 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5d68:	4423      	add	r3, r4
            *ptr++ = '0';
   b5d6a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5d6c:	429d      	cmp	r5, r3
   b5d6e:	d210      	bcs.n	b5d92 <ultoa+0x38>
            *ptr++ = '0';
   b5d70:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5d74:	e7fa      	b.n	b5d6c <ultoa+0x12>
            result.quot = a/radix;
   b5d76:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5d7a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5d7e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5d80:	2809      	cmp	r0, #9
                *ptr += '0';
   b5d82:	bf94      	ite	ls
   b5d84:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5d86:	3157      	addhi	r1, #87	; 0x57
   b5d88:	b2c9      	uxtb	r1, r1
   b5d8a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5d8e:	4630      	mov	r0, r6
	while(a){
   b5d90:	e7e9      	b.n	b5d66 <ultoa+0xc>

	*ptr = '\0';
   b5d92:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5d94:	4620      	mov	r0, r4
	*ptr = '\0';
   b5d96:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5d98:	f7ff ffce 	bl	b5d38 <_Z11str_reversePc>
	return buffer;
   b5d9c:	4620      	mov	r0, r4
}
   b5d9e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5da0:	2000      	movs	r0, #0
   b5da2:	e7fc      	b.n	b5d9e <ultoa+0x44>

000b5da4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5da4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5da6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5da8:	460c      	mov	r4, r1
   b5daa:	4615      	mov	r5, r2
	if(a<0){
   b5dac:	da0e      	bge.n	b5dcc <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5db2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5db6:	bf14      	ite	ne
   b5db8:	4258      	negne	r0, r3
   b5dba:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5dbc:	2301      	movs	r3, #1
		*buffer = '-';
   b5dbe:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5dc0:	462a      	mov	r2, r5
   b5dc2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5dc4:	f7ff ffc9 	bl	b5d5a <ultoa>
	}
	return buffer;
}
   b5dc8:	4620      	mov	r0, r4
   b5dca:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5dcc:	2301      	movs	r3, #1
   b5dce:	e7f9      	b.n	b5dc4 <itoa+0x20>

000b5dd0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5dd0:	b510      	push	{r4, lr}
   b5dd2:	4604      	mov	r4, r0
{
	free(buffer);
   b5dd4:	6800      	ldr	r0, [r0, #0]
   b5dd6:	f7ff fdf5 	bl	b59c4 <free>
}
   b5dda:	4620      	mov	r0, r4
   b5ddc:	bd10      	pop	{r4, pc}

000b5dde <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5dde:	b510      	push	{r4, lr}
   b5de0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5de2:	6800      	ldr	r0, [r0, #0]
   b5de4:	b108      	cbz	r0, b5dea <_ZN6String10invalidateEv+0xc>
   b5de6:	f7ff fded 	bl	b59c4 <free>
	buffer = NULL;
   b5dea:	2300      	movs	r3, #0
	capacity = len = 0;
   b5dec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5df0:	6023      	str	r3, [r4, #0]
}
   b5df2:	bd10      	pop	{r4, pc}

000b5df4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5df4:	b538      	push	{r3, r4, r5, lr}
   b5df6:	4604      	mov	r4, r0
   b5df8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5dfa:	6800      	ldr	r0, [r0, #0]
   b5dfc:	3101      	adds	r1, #1
   b5dfe:	f7ff fde9 	bl	b59d4 <realloc>
	if (newbuffer) {
   b5e02:	b110      	cbz	r0, b5e0a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5e04:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5e08:	2001      	movs	r0, #1
	}
	return 0;
}
   b5e0a:	bd38      	pop	{r3, r4, r5, pc}

000b5e0c <_ZN6String7reserveEj>:
{
   b5e0c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5e0e:	6803      	ldr	r3, [r0, #0]
{
   b5e10:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5e12:	b123      	cbz	r3, b5e1e <_ZN6String7reserveEj+0x12>
   b5e14:	6843      	ldr	r3, [r0, #4]
   b5e16:	428b      	cmp	r3, r1
   b5e18:	d301      	bcc.n	b5e1e <_ZN6String7reserveEj+0x12>
   b5e1a:	2001      	movs	r0, #1
}
   b5e1c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5e1e:	4620      	mov	r0, r4
   b5e20:	f7ff ffe8 	bl	b5df4 <_ZN6String12changeBufferEj>
   b5e24:	2800      	cmp	r0, #0
   b5e26:	d0f9      	beq.n	b5e1c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5e28:	68a3      	ldr	r3, [r4, #8]
   b5e2a:	2b00      	cmp	r3, #0
   b5e2c:	d1f5      	bne.n	b5e1a <_ZN6String7reserveEj+0xe>
   b5e2e:	6822      	ldr	r2, [r4, #0]
   b5e30:	7013      	strb	r3, [r2, #0]
   b5e32:	e7f2      	b.n	b5e1a <_ZN6String7reserveEj+0xe>

000b5e34 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5e36:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5e38:	4611      	mov	r1, r2
   b5e3a:	9201      	str	r2, [sp, #4]
{
   b5e3c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5e3e:	f7ff ffe5 	bl	b5e0c <_ZN6String7reserveEj>
   b5e42:	9a01      	ldr	r2, [sp, #4]
   b5e44:	b928      	cbnz	r0, b5e52 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5e46:	4620      	mov	r0, r4
   b5e48:	f7ff ffc9 	bl	b5dde <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5e4c:	4620      	mov	r0, r4
   b5e4e:	b003      	add	sp, #12
   b5e50:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5e52:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5e54:	4629      	mov	r1, r5
   b5e56:	6820      	ldr	r0, [r4, #0]
   b5e58:	f001 fe02 	bl	b7a60 <memcpy>
	buffer[len] = 0;
   b5e5c:	6822      	ldr	r2, [r4, #0]
   b5e5e:	68a3      	ldr	r3, [r4, #8]
   b5e60:	2100      	movs	r1, #0
   b5e62:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5e64:	e7f2      	b.n	b5e4c <_ZN6String4copyEPKcj+0x18>

000b5e66 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5e66:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5e68:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5e6a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5e6e:	4604      	mov	r4, r0
	len = 0;
   b5e70:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5e72:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5e74:	b141      	cbz	r1, b5e88 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5e76:	4608      	mov	r0, r1
   b5e78:	9101      	str	r1, [sp, #4]
   b5e7a:	f001 fe47 	bl	b7b0c <strlen>
   b5e7e:	9901      	ldr	r1, [sp, #4]
   b5e80:	4602      	mov	r2, r0
   b5e82:	4620      	mov	r0, r4
   b5e84:	f7ff ffd6 	bl	b5e34 <_ZN6String4copyEPKcj>
}
   b5e88:	4620      	mov	r0, r4
   b5e8a:	b002      	add	sp, #8
   b5e8c:	bd10      	pop	{r4, pc}

000b5e8e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5e8e:	4288      	cmp	r0, r1
{
   b5e90:	b510      	push	{r4, lr}
   b5e92:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5e94:	d005      	beq.n	b5ea2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5e96:	680b      	ldr	r3, [r1, #0]
   b5e98:	b12b      	cbz	r3, b5ea6 <_ZN6StringaSERKS_+0x18>
   b5e9a:	688a      	ldr	r2, [r1, #8]
   b5e9c:	4619      	mov	r1, r3
   b5e9e:	f7ff ffc9 	bl	b5e34 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5ea2:	4620      	mov	r0, r4
   b5ea4:	bd10      	pop	{r4, pc}
	else invalidate();
   b5ea6:	f7ff ff9a 	bl	b5dde <_ZN6String10invalidateEv>
   b5eaa:	e7fa      	b.n	b5ea2 <_ZN6StringaSERKS_+0x14>

000b5eac <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5eac:	b510      	push	{r4, lr}
	buffer = NULL;
   b5eae:	2300      	movs	r3, #0
String::String(const String &value)
   b5eb0:	4604      	mov	r4, r0
	capacity = 0;
   b5eb2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5eb6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5eb8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5eba:	f7ff ffe8 	bl	b5e8e <_ZN6StringaSERKS_>
}
   b5ebe:	4620      	mov	r0, r4
   b5ec0:	bd10      	pop	{r4, pc}

000b5ec2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5ec2:	b513      	push	{r0, r1, r4, lr}
   b5ec4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5ec6:	b159      	cbz	r1, b5ee0 <_ZN6StringaSEPKc+0x1e>
   b5ec8:	4608      	mov	r0, r1
   b5eca:	9101      	str	r1, [sp, #4]
   b5ecc:	f001 fe1e 	bl	b7b0c <strlen>
   b5ed0:	9901      	ldr	r1, [sp, #4]
   b5ed2:	4602      	mov	r2, r0
   b5ed4:	4620      	mov	r0, r4
   b5ed6:	f7ff ffad 	bl	b5e34 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5eda:	4620      	mov	r0, r4
   b5edc:	b002      	add	sp, #8
   b5ede:	bd10      	pop	{r4, pc}
	else invalidate();
   b5ee0:	f7ff ff7d 	bl	b5dde <_ZN6String10invalidateEv>
   b5ee4:	e7f9      	b.n	b5eda <_ZN6StringaSEPKc+0x18>

000b5ee6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5ee6:	b510      	push	{r4, lr}
   b5ee8:	4604      	mov	r4, r0
   b5eea:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5eec:	2300      	movs	r3, #0
	capacity = 0;
   b5eee:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5ef2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5ef4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5ef6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5ef8:	a901      	add	r1, sp, #4
   b5efa:	f7ff ff53 	bl	b5da4 <itoa>
	*this = buf;
   b5efe:	a901      	add	r1, sp, #4
   b5f00:	4620      	mov	r0, r4
   b5f02:	f7ff ffde 	bl	b5ec2 <_ZN6StringaSEPKc>
}
   b5f06:	4620      	mov	r0, r4
   b5f08:	b00a      	add	sp, #40	; 0x28
   b5f0a:	bd10      	pop	{r4, pc}

000b5f0c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5f0c:	b570      	push	{r4, r5, r6, lr}
   b5f0e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5f10:	460e      	mov	r6, r1
   b5f12:	b909      	cbnz	r1, b5f18 <_ZN6String6concatEPKcj+0xc>
   b5f14:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5f16:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5f18:	b16a      	cbz	r2, b5f36 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5f1a:	6884      	ldr	r4, [r0, #8]
   b5f1c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5f1e:	4621      	mov	r1, r4
   b5f20:	f7ff ff74 	bl	b5e0c <_ZN6String7reserveEj>
   b5f24:	2800      	cmp	r0, #0
   b5f26:	d0f5      	beq.n	b5f14 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5f28:	6828      	ldr	r0, [r5, #0]
   b5f2a:	68ab      	ldr	r3, [r5, #8]
   b5f2c:	4631      	mov	r1, r6
   b5f2e:	4418      	add	r0, r3
   b5f30:	f001 fde4 	bl	b7afc <strcpy>
	len = newlen;
   b5f34:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5f36:	2001      	movs	r0, #1
   b5f38:	e7ed      	b.n	b5f16 <_ZN6String6concatEPKcj+0xa>

000b5f3a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b5f3a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5f3c:	2300      	movs	r3, #0
	buf[0] = c;
   b5f3e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5f42:	2201      	movs	r2, #1
   b5f44:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5f46:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b5f4a:	f7ff ffdf 	bl	b5f0c <_ZN6String6concatEPKcj>
}
   b5f4e:	b003      	add	sp, #12
   b5f50:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f54 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5f54:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5f56:	688a      	ldr	r2, [r1, #8]
   b5f58:	6809      	ldr	r1, [r1, #0]
{
   b5f5a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5f5c:	f7ff ffd6 	bl	b5f0c <_ZN6String6concatEPKcj>
   b5f60:	b910      	cbnz	r0, b5f68 <_ZplRK15StringSumHelperRK6String+0x14>
   b5f62:	4620      	mov	r0, r4
   b5f64:	f7ff ff3b 	bl	b5dde <_ZN6String10invalidateEv>
	return a;
}
   b5f68:	4620      	mov	r0, r4
   b5f6a:	bd10      	pop	{r4, pc}

000b5f6c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5f6c:	b513      	push	{r0, r1, r4, lr}
   b5f6e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5f70:	b929      	cbnz	r1, b5f7e <_ZplRK15StringSumHelperPKc+0x12>
   b5f72:	4620      	mov	r0, r4
   b5f74:	f7ff ff33 	bl	b5dde <_ZN6String10invalidateEv>
	return a;
}
   b5f78:	4620      	mov	r0, r4
   b5f7a:	b002      	add	sp, #8
   b5f7c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5f7e:	4608      	mov	r0, r1
   b5f80:	9101      	str	r1, [sp, #4]
   b5f82:	f001 fdc3 	bl	b7b0c <strlen>
   b5f86:	9901      	ldr	r1, [sp, #4]
   b5f88:	4602      	mov	r2, r0
   b5f8a:	4620      	mov	r0, r4
   b5f8c:	f7ff ffbe 	bl	b5f0c <_ZN6String6concatEPKcj>
   b5f90:	2800      	cmp	r0, #0
   b5f92:	d0ee      	beq.n	b5f72 <_ZplRK15StringSumHelperPKc+0x6>
   b5f94:	e7f0      	b.n	b5f78 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b5f98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5f98:	4802      	ldr	r0, [pc, #8]	; (b5fa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5f9a:	2300      	movs	r3, #0
   b5f9c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5f9e:	f7ff badd 	b.w	b555c <os_mutex_recursive_create>
   b5fa2:	bf00      	nop
   b5fa4:	2003e6dc 	.word	0x2003e6dc

000b5fa8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5faa:	4606      	mov	r6, r0
   b5fac:	460d      	mov	r5, r1
  size_t n = 0;
   b5fae:	188f      	adds	r7, r1, r2
   b5fb0:	2400      	movs	r4, #0
  while (size--) {
   b5fb2:	42bd      	cmp	r5, r7
   b5fb4:	d00c      	beq.n	b5fd0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5fb6:	6833      	ldr	r3, [r6, #0]
   b5fb8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5fbc:	689b      	ldr	r3, [r3, #8]
   b5fbe:	4630      	mov	r0, r6
   b5fc0:	4798      	blx	r3
     if (chunk>=0)
   b5fc2:	1e03      	subs	r3, r0, #0
   b5fc4:	db01      	blt.n	b5fca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5fc6:	441c      	add	r4, r3
  while (size--) {
   b5fc8:	e7f3      	b.n	b5fb2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5fca:	2c00      	cmp	r4, #0
   b5fcc:	bf08      	it	eq
   b5fce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5fd0:	4620      	mov	r0, r4
   b5fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fd4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5fd4:	b513      	push	{r0, r1, r4, lr}
   b5fd6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5fd8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5fda:	b159      	cbz	r1, b5ff4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5fdc:	9101      	str	r1, [sp, #4]
   b5fde:	f001 fd95 	bl	b7b0c <strlen>
   b5fe2:	6823      	ldr	r3, [r4, #0]
   b5fe4:	9901      	ldr	r1, [sp, #4]
   b5fe6:	68db      	ldr	r3, [r3, #12]
   b5fe8:	4602      	mov	r2, r0
   b5fea:	4620      	mov	r0, r4
    }
   b5fec:	b002      	add	sp, #8
   b5fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5ff2:	4718      	bx	r3
    }
   b5ff4:	b002      	add	sp, #8
   b5ff6:	bd10      	pop	{r4, pc}

000b5ff8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5ff8:	b508      	push	{r3, lr}
  return write(str);
   b5ffa:	f7ff ffeb 	bl	b5fd4 <_ZN5Print5writeEPKc>
}
   b5ffe:	bd08      	pop	{r3, pc}

000b6000 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6000:	6803      	ldr	r3, [r0, #0]
   b6002:	689b      	ldr	r3, [r3, #8]
   b6004:	4718      	bx	r3

000b6006 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6006:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6008:	210d      	movs	r1, #13
{
   b600a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b600c:	f7ff fff8 	bl	b6000 <_ZN5Print5printEc>
  n += print('\n');
   b6010:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6012:	4604      	mov	r4, r0
  n += print('\n');
   b6014:	4628      	mov	r0, r5
   b6016:	f7ff fff3 	bl	b6000 <_ZN5Print5printEc>
  return n;
}
   b601a:	4420      	add	r0, r4
   b601c:	bd38      	pop	{r3, r4, r5, pc}

000b601e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b601e:	b538      	push	{r3, r4, r5, lr}
   b6020:	4605      	mov	r5, r0
  return write(str);
   b6022:	f7ff ffd7 	bl	b5fd4 <_ZN5Print5writeEPKc>
   b6026:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6028:	4628      	mov	r0, r5
   b602a:	f7ff ffec 	bl	b6006 <_ZN5Print7printlnEv>
  return n;
}
   b602e:	4420      	add	r0, r4
   b6030:	bd38      	pop	{r3, r4, r5, pc}

000b6032 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6032:	b530      	push	{r4, r5, lr}
   b6034:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6036:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6038:	2a01      	cmp	r2, #1
  *str = '\0';
   b603a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b603e:	bf98      	it	ls
   b6040:	220a      	movls	r2, #10
   b6042:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6044:	460d      	mov	r5, r1
   b6046:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b604a:	fb01 5312 	mls	r3, r1, r2, r5
   b604e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6052:	2b09      	cmp	r3, #9
   b6054:	bf94      	ite	ls
   b6056:	3330      	addls	r3, #48	; 0x30
   b6058:	3337      	addhi	r3, #55	; 0x37
   b605a:	b2db      	uxtb	r3, r3
  } while(n);
   b605c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b605e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6062:	d9ef      	bls.n	b6044 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6064:	4621      	mov	r1, r4
   b6066:	f7ff ffb5 	bl	b5fd4 <_ZN5Print5writeEPKc>
}
   b606a:	b00b      	add	sp, #44	; 0x2c
   b606c:	bd30      	pop	{r4, r5, pc}

000b606e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6072:	b086      	sub	sp, #24
   b6074:	af00      	add	r7, sp, #0
   b6076:	4605      	mov	r5, r0
   b6078:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b607a:	1d38      	adds	r0, r7, #4
   b607c:	2114      	movs	r1, #20
{
   b607e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6080:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6082:	f7ff fcaf 	bl	b59e4 <vsnprintf>

    if (n<bufsize)
   b6086:	2813      	cmp	r0, #19
   b6088:	d80e      	bhi.n	b60a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b608a:	1d39      	adds	r1, r7, #4
   b608c:	4628      	mov	r0, r5
   b608e:	f7ff ffa1 	bl	b5fd4 <_ZN5Print5writeEPKc>
   b6092:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6094:	b11e      	cbz	r6, b609e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6096:	4628      	mov	r0, r5
   b6098:	f7ff ffb5 	bl	b6006 <_ZN5Print7printlnEv>
   b609c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b609e:	4620      	mov	r0, r4
   b60a0:	3718      	adds	r7, #24
   b60a2:	46bd      	mov	sp, r7
   b60a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b60a8:	f100 0308 	add.w	r3, r0, #8
   b60ac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b60b0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b60b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b60b6:	4622      	mov	r2, r4
   b60b8:	1c41      	adds	r1, r0, #1
   b60ba:	683b      	ldr	r3, [r7, #0]
   b60bc:	4668      	mov	r0, sp
   b60be:	f7ff fc91 	bl	b59e4 <vsnprintf>
  return write(str);
   b60c2:	4669      	mov	r1, sp
   b60c4:	4628      	mov	r0, r5
   b60c6:	f7ff ff85 	bl	b5fd4 <_ZN5Print5writeEPKc>
   b60ca:	4604      	mov	r4, r0
   b60cc:	46c5      	mov	sp, r8
   b60ce:	e7e1      	b.n	b6094 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b60d0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b60d0:	b510      	push	{r4, lr}
   b60d2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b60d4:	f7ff fa32 	bl	b553c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b60d8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b60da:	6823      	ldr	r3, [r4, #0]
   b60dc:	4620      	mov	r0, r4
   b60de:	695b      	ldr	r3, [r3, #20]
   b60e0:	4798      	blx	r3
    if (c >= 0) return c;
   b60e2:	2800      	cmp	r0, #0
   b60e4:	da08      	bge.n	b60f8 <_ZN6Stream9timedReadEv+0x28>
   b60e6:	f7ff fa29 	bl	b553c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b60ea:	68e3      	ldr	r3, [r4, #12]
   b60ec:	1ac0      	subs	r0, r0, r3
   b60ee:	68a3      	ldr	r3, [r4, #8]
   b60f0:	4298      	cmp	r0, r3
   b60f2:	d3f2      	bcc.n	b60da <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b60f4:	f04f 30ff 	mov.w	r0, #4294967295
}
   b60f8:	bd10      	pop	{r4, pc}
	...

000b60fc <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b60fc:	b538      	push	{r3, r4, r5, lr}
   b60fe:	460d      	mov	r5, r1
  String ret;
   b6100:	4907      	ldr	r1, [pc, #28]	; (b6120 <_ZN6Stream10readStringEv+0x24>)
{
   b6102:	4604      	mov	r4, r0
  String ret;
   b6104:	f7ff feaf 	bl	b5e66 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6108:	4628      	mov	r0, r5
   b610a:	f7ff ffe1 	bl	b60d0 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b610e:	2800      	cmp	r0, #0
   b6110:	db04      	blt.n	b611c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6112:	b2c1      	uxtb	r1, r0
   b6114:	4620      	mov	r0, r4
   b6116:	f7ff ff10 	bl	b5f3a <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b611a:	e7f5      	b.n	b6108 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b611c:	4620      	mov	r0, r4
   b611e:	bd38      	pop	{r3, r4, r5, pc}
   b6120:	000b7c2c 	.word	0x000b7c2c

000b6124 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6124:	4b01      	ldr	r3, [pc, #4]	; (b612c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6126:	4a02      	ldr	r2, [pc, #8]	; (b6130 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6128:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b612a:	4770      	bx	lr
   b612c:	2003e6e0 	.word	0x2003e6e0
   b6130:	000b8394 	.word	0x000b8394

000b6134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6134:	4b02      	ldr	r3, [pc, #8]	; (b6140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6136:	681a      	ldr	r2, [r3, #0]
   b6138:	4b02      	ldr	r3, [pc, #8]	; (b6144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b613a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b613c:	4770      	bx	lr
   b613e:	bf00      	nop
   b6140:	2003e52c 	.word	0x2003e52c
   b6144:	2003e6e4 	.word	0x2003e6e4

000b6148 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6148:	428a      	cmp	r2, r1
{
   b614a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b614c:	d007      	beq.n	b615e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b614e:	1a44      	subs	r4, r0, r1
   b6150:	9802      	ldr	r0, [sp, #8]
   b6152:	1ac0      	subs	r0, r0, r3
   b6154:	4344      	muls	r4, r0
   b6156:	1a50      	subs	r0, r2, r1
   b6158:	fb94 f0f0 	sdiv	r0, r4, r0
   b615c:	4418      	add	r0, r3
}
   b615e:	bd10      	pop	{r4, pc}

000b6160 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6160:	2100      	movs	r1, #0
   b6162:	f7ff bb9b 	b.w	b589c <system_delay_ms>
	...

000b6168 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6168:	4b01      	ldr	r3, [pc, #4]	; (b6170 <_GLOBAL__sub_I_RGB+0x8>)
   b616a:	2200      	movs	r2, #0
   b616c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b616e:	4770      	bx	lr
   b6170:	2003e6e8 	.word	0x2003e6e8

000b6174 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6174:	4b01      	ldr	r3, [pc, #4]	; (b617c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6176:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6178:	4770      	bx	lr
   b617a:	bf00      	nop
   b617c:	2003e530 	.word	0x2003e530

000b6180 <serialEventRun>:
{
   b6180:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6182:	4b0b      	ldr	r3, [pc, #44]	; (b61b0 <serialEventRun+0x30>)
   b6184:	b143      	cbz	r3, b6198 <serialEventRun+0x18>
   b6186:	f000 f981 	bl	b648c <_Z16_fetch_usbserialv>
   b618a:	6803      	ldr	r3, [r0, #0]
   b618c:	691b      	ldr	r3, [r3, #16]
   b618e:	4798      	blx	r3
   b6190:	2800      	cmp	r0, #0
   b6192:	dd01      	ble.n	b6198 <serialEventRun+0x18>
        serialEvent();
   b6194:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6198:	4b06      	ldr	r3, [pc, #24]	; (b61b4 <serialEventRun+0x34>)
   b619a:	b143      	cbz	r3, b61ae <serialEventRun+0x2e>
   b619c:	f000 fec4 	bl	b6f28 <_Z22__fetch_global_Serial1v>
   b61a0:	6803      	ldr	r3, [r0, #0]
   b61a2:	691b      	ldr	r3, [r3, #16]
   b61a4:	4798      	blx	r3
   b61a6:	2800      	cmp	r0, #0
   b61a8:	dd01      	ble.n	b61ae <serialEventRun+0x2e>
        serialEvent1();
   b61aa:	f3af 8000 	nop.w
}
   b61ae:	bd08      	pop	{r3, pc}
	...

000b61b8 <_post_loop>:
{
   b61b8:	b508      	push	{r3, lr}
	serialEventRun();
   b61ba:	f7ff ffe1 	bl	b6180 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b61be:	f7ff f9bd 	bl	b553c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b61c2:	4b01      	ldr	r3, [pc, #4]	; (b61c8 <_post_loop+0x10>)
   b61c4:	6018      	str	r0, [r3, #0]
}
   b61c6:	bd08      	pop	{r3, pc}
   b61c8:	2003e740 	.word	0x2003e740

000b61cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b61cc:	4805      	ldr	r0, [pc, #20]	; (b61e4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b61ce:	4a06      	ldr	r2, [pc, #24]	; (b61e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b61d0:	4906      	ldr	r1, [pc, #24]	; (b61ec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b61d2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b61d4:	1a12      	subs	r2, r2, r0
   b61d6:	f001 fc43 	bl	b7a60 <memcpy>
    __backup_sram_signature = signature;
   b61da:	4b05      	ldr	r3, [pc, #20]	; (b61f0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b61dc:	4a05      	ldr	r2, [pc, #20]	; (b61f4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b61de:	601a      	str	r2, [r3, #0]
}
   b61e0:	bd08      	pop	{r3, pc}
   b61e2:	bf00      	nop
   b61e4:	2003f400 	.word	0x2003f400
   b61e8:	2003f404 	.word	0x2003f404
   b61ec:	000b8724 	.word	0x000b8724
   b61f0:	2003f400 	.word	0x2003f400
   b61f4:	9a271c1e 	.word	0x9a271c1e

000b61f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b61f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b61fa:	2300      	movs	r3, #0
   b61fc:	9300      	str	r3, [sp, #0]
   b61fe:	461a      	mov	r2, r3
   b6200:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6204:	f7ff fb5c 	bl	b58c0 <system_ctrl_set_result>
}
   b6208:	b003      	add	sp, #12
   b620a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6210 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6210:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6212:	8843      	ldrh	r3, [r0, #2]
   b6214:	2b0a      	cmp	r3, #10
   b6216:	d008      	beq.n	b622a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6218:	2b50      	cmp	r3, #80	; 0x50
   b621a:	d10b      	bne.n	b6234 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b621c:	4b09      	ldr	r3, [pc, #36]	; (b6244 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b621e:	681b      	ldr	r3, [r3, #0]
   b6220:	b14b      	cbz	r3, b6236 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6222:	b003      	add	sp, #12
   b6224:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6228:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b622a:	f7ff ffe5 	bl	b61f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b622e:	b003      	add	sp, #12
   b6230:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6234:	2300      	movs	r3, #0
   b6236:	9300      	str	r3, [sp, #0]
   b6238:	461a      	mov	r2, r3
   b623a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b623e:	f7ff fb3f 	bl	b58c0 <system_ctrl_set_result>
}
   b6242:	e7f4      	b.n	b622e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6244:	2003e6fc 	.word	0x2003e6fc

000b6248 <module_user_init_hook>:
{
   b6248:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b624a:	4812      	ldr	r0, [pc, #72]	; (b6294 <module_user_init_hook+0x4c>)
   b624c:	2100      	movs	r1, #0
   b624e:	f7ff fbe1 	bl	b5a14 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6252:	4b11      	ldr	r3, [pc, #68]	; (b6298 <module_user_init_hook+0x50>)
   b6254:	681a      	ldr	r2, [r3, #0]
   b6256:	4b11      	ldr	r3, [pc, #68]	; (b629c <module_user_init_hook+0x54>)
   b6258:	429a      	cmp	r2, r3
   b625a:	4b11      	ldr	r3, [pc, #68]	; (b62a0 <module_user_init_hook+0x58>)
   b625c:	bf0c      	ite	eq
   b625e:	2201      	moveq	r2, #1
   b6260:	2200      	movne	r2, #0
   b6262:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6264:	d001      	beq.n	b626a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6266:	f7ff ffb1 	bl	b61cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b626a:	f7ff f957 	bl	b551c <HAL_RNG_GetRandomNumber>
   b626e:	4604      	mov	r4, r0
    srand(seed);
   b6270:	f001 fc0c 	bl	b7a8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6274:	4b0b      	ldr	r3, [pc, #44]	; (b62a4 <module_user_init_hook+0x5c>)
   b6276:	b113      	cbz	r3, b627e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6278:	4620      	mov	r0, r4
   b627a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b627e:	2100      	movs	r1, #0
   b6280:	4808      	ldr	r0, [pc, #32]	; (b62a4 <module_user_init_hook+0x5c>)
   b6282:	f7ff fb8f 	bl	b59a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b628a:	4807      	ldr	r0, [pc, #28]	; (b62a8 <module_user_init_hook+0x60>)
   b628c:	2100      	movs	r1, #0
   b628e:	f7ff bb0d 	b.w	b58ac <system_ctrl_set_app_request_handler>
   b6292:	bf00      	nop
   b6294:	000b6175 	.word	0x000b6175
   b6298:	2003f400 	.word	0x2003f400
   b629c:	9a271c1e 	.word	0x9a271c1e
   b62a0:	2003e6f8 	.word	0x2003e6f8
   b62a4:	00000000 	.word	0x00000000
   b62a8:	000b6211 	.word	0x000b6211

000b62ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b62ac:	4770      	bx	lr

000b62ae <_ZN9IPAddressD0Ev>:
   b62ae:	b510      	push	{r4, lr}
   b62b0:	2118      	movs	r1, #24
   b62b2:	4604      	mov	r4, r0
   b62b4:	f7fd fef3 	bl	b409e <_ZdlPvj>
   b62b8:	4620      	mov	r0, r4
   b62ba:	bd10      	pop	{r4, pc}

000b62bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b62bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b62be:	7d03      	ldrb	r3, [r0, #20]
   b62c0:	2b06      	cmp	r3, #6
{
   b62c2:	b08d      	sub	sp, #52	; 0x34
   b62c4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62c6:	f100 0704 	add.w	r7, r0, #4
   b62ca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b62ce:	d012      	beq.n	b62f6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b62d0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b62d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b62d8:	220a      	movs	r2, #10
   b62da:	4630      	mov	r0, r6
   b62dc:	f7ff fea9 	bl	b6032 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b62e0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b62e2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b62e4:	d019      	beq.n	b631a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b62e6:	2c00      	cmp	r4, #0
   b62e8:	d0f4      	beq.n	b62d4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b62ea:	212e      	movs	r1, #46	; 0x2e
   b62ec:	4630      	mov	r0, r6
   b62ee:	f7ff fe87 	bl	b6000 <_ZN5Print5printEc>
   b62f2:	4404      	add	r4, r0
   b62f4:	e7ee      	b.n	b62d4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b62f6:	232f      	movs	r3, #47	; 0x2f
   b62f8:	466a      	mov	r2, sp
   b62fa:	4639      	mov	r1, r7
   b62fc:	200a      	movs	r0, #10
		buf[0] = 0;
   b62fe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6302:	f7ff f933 	bl	b556c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6306:	4668      	mov	r0, sp
   b6308:	f001 fc00 	bl	b7b0c <strlen>
   b630c:	6833      	ldr	r3, [r6, #0]
   b630e:	4602      	mov	r2, r0
   b6310:	68db      	ldr	r3, [r3, #12]
   b6312:	4669      	mov	r1, sp
   b6314:	4630      	mov	r0, r6
   b6316:	4798      	blx	r3
   b6318:	4604      	mov	r4, r0
    }
    return n;
}
   b631a:	4620      	mov	r0, r4
   b631c:	b00d      	add	sp, #52	; 0x34
   b631e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6320 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6320:	b510      	push	{r4, lr}
   b6322:	4b05      	ldr	r3, [pc, #20]	; (b6338 <_ZN9IPAddressC1Ev+0x18>)
   b6324:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6326:	2211      	movs	r2, #17
   b6328:	f840 3b04 	str.w	r3, [r0], #4
   b632c:	2100      	movs	r1, #0
   b632e:	f001 fba5 	bl	b7a7c <memset>
}
   b6332:	4620      	mov	r0, r4
   b6334:	bd10      	pop	{r4, pc}
   b6336:	bf00      	nop
   b6338:	000b83bc 	.word	0x000b83bc

000b633c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b633c:	4603      	mov	r3, r0
   b633e:	4a07      	ldr	r2, [pc, #28]	; (b635c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6340:	b510      	push	{r4, lr}
   b6342:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6346:	f101 0210 	add.w	r2, r1, #16
   b634a:	f851 4b04 	ldr.w	r4, [r1], #4
   b634e:	f843 4b04 	str.w	r4, [r3], #4
   b6352:	4291      	cmp	r1, r2
   b6354:	d1f9      	bne.n	b634a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6356:	780a      	ldrb	r2, [r1, #0]
   b6358:	701a      	strb	r2, [r3, #0]
}
   b635a:	bd10      	pop	{r4, pc}
   b635c:	000b83bc 	.word	0x000b83bc

000b6360 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6360:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6362:	2b04      	cmp	r3, #4
   b6364:	d104      	bne.n	b6370 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6366:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6368:	3800      	subs	r0, #0
   b636a:	bf18      	it	ne
   b636c:	2001      	movne	r0, #1
   b636e:	4770      	bx	lr
    } else if (version() == 6) {
   b6370:	2b06      	cmp	r3, #6
   b6372:	d107      	bne.n	b6384 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6374:	6843      	ldr	r3, [r0, #4]
   b6376:	b93b      	cbnz	r3, b6388 <_ZNK9IPAddresscvbEv+0x28>
   b6378:	6883      	ldr	r3, [r0, #8]
   b637a:	b92b      	cbnz	r3, b6388 <_ZNK9IPAddresscvbEv+0x28>
   b637c:	68c3      	ldr	r3, [r0, #12]
   b637e:	b91b      	cbnz	r3, b6388 <_ZNK9IPAddresscvbEv+0x28>
   b6380:	6900      	ldr	r0, [r0, #16]
   b6382:	e7f1      	b.n	b6368 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6384:	2000      	movs	r0, #0
   b6386:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6388:	2001      	movs	r0, #1
}
   b638a:	4770      	bx	lr

000b638c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b638c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b638e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6392:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6396:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b639a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b639e:	2304      	movs	r3, #4
   b63a0:	6041      	str	r1, [r0, #4]
   b63a2:	7503      	strb	r3, [r0, #20]
}
   b63a4:	bd10      	pop	{r4, pc}
	...

000b63a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b63a8:	b507      	push	{r0, r1, r2, lr}
   b63aa:	4b06      	ldr	r3, [pc, #24]	; (b63c4 <_ZN9IPAddressC1EPKh+0x1c>)
   b63ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b63ae:	78cb      	ldrb	r3, [r1, #3]
   b63b0:	9300      	str	r3, [sp, #0]
   b63b2:	788b      	ldrb	r3, [r1, #2]
   b63b4:	784a      	ldrb	r2, [r1, #1]
   b63b6:	7809      	ldrb	r1, [r1, #0]
   b63b8:	f7ff ffe8 	bl	b638c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63bc:	b003      	add	sp, #12
   b63be:	f85d fb04 	ldr.w	pc, [sp], #4
   b63c2:	bf00      	nop
   b63c4:	000b83bc 	.word	0x000b83bc

000b63c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b63c8:	7441      	strb	r1, [r0, #17]
}
   b63ca:	4770      	bx	lr

000b63cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63cc:	4770      	bx	lr

000b63ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b63ce:	4770      	bx	lr

000b63d0 <_ZN9USBSerial4readEv>:
{
   b63d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b63d2:	2100      	movs	r1, #0
   b63d4:	7c00      	ldrb	r0, [r0, #16]
   b63d6:	f7ff fa29 	bl	b582c <HAL_USB_USART_Receive_Data>
}
   b63da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63de:	bd08      	pop	{r3, pc}

000b63e0 <_ZN9USBSerial4peekEv>:
{
   b63e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b63e2:	2101      	movs	r1, #1
   b63e4:	7c00      	ldrb	r0, [r0, #16]
   b63e6:	f7ff fa21 	bl	b582c <HAL_USB_USART_Receive_Data>
}
   b63ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63ee:	bd08      	pop	{r3, pc}

000b63f0 <_ZN9USBSerial17availableForWriteEv>:
{
   b63f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b63f2:	7c00      	ldrb	r0, [r0, #16]
   b63f4:	f7ff fa12 	bl	b581c <HAL_USB_USART_Available_Data_For_Write>
}
   b63f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b63fc:	bd08      	pop	{r3, pc}

000b63fe <_ZN9USBSerial9availableEv>:
{
   b63fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6400:	7c00      	ldrb	r0, [r0, #16]
   b6402:	f7ff fa03 	bl	b580c <HAL_USB_USART_Available_Data>
}
   b6406:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b640a:	bd08      	pop	{r3, pc}

000b640c <_ZN9USBSerial5writeEh>:
{
   b640c:	b513      	push	{r0, r1, r4, lr}
   b640e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6410:	7c00      	ldrb	r0, [r0, #16]
{
   b6412:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6414:	f7ff fa02 	bl	b581c <HAL_USB_USART_Available_Data_For_Write>
   b6418:	2800      	cmp	r0, #0
   b641a:	9901      	ldr	r1, [sp, #4]
   b641c:	dc01      	bgt.n	b6422 <_ZN9USBSerial5writeEh+0x16>
   b641e:	7c60      	ldrb	r0, [r4, #17]
   b6420:	b120      	cbz	r0, b642c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6422:	7c20      	ldrb	r0, [r4, #16]
   b6424:	f7ff fa0a 	bl	b583c <HAL_USB_USART_Send_Data>
   b6428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b642c:	b002      	add	sp, #8
   b642e:	bd10      	pop	{r4, pc}

000b6430 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6430:	7c00      	ldrb	r0, [r0, #16]
   b6432:	f7ff ba0b 	b.w	b584c <HAL_USB_USART_Flush_Data>

000b6436 <_ZN9USBSerialD0Ev>:
   b6436:	b510      	push	{r4, lr}
   b6438:	2114      	movs	r1, #20
   b643a:	4604      	mov	r4, r0
   b643c:	f7fd fe2f 	bl	b409e <_ZdlPvj>
   b6440:	4620      	mov	r0, r4
   b6442:	bd10      	pop	{r4, pc}

000b6444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6444:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b644a:	4604      	mov	r4, r0
   b644c:	4608      	mov	r0, r1
   b644e:	2100      	movs	r1, #0
   b6450:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6454:	4b04      	ldr	r3, [pc, #16]	; (b6468 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6456:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6458:	2301      	movs	r3, #1
  _serial = serial;
   b645a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b645c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b645e:	4611      	mov	r1, r2
   b6460:	f7ff f9c4 	bl	b57ec <HAL_USB_USART_Init>
}
   b6464:	4620      	mov	r0, r4
   b6466:	bd10      	pop	{r4, pc}
   b6468:	000b83d0 	.word	0x000b83d0

000b646c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b646c:	7c00      	ldrb	r0, [r0, #16]
   b646e:	2200      	movs	r2, #0
   b6470:	f7ff b9c4 	b.w	b57fc <HAL_USB_USART_Begin>

000b6474 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6474:	7c00      	ldrb	r0, [r0, #16]
   b6476:	f7ff b9f1 	b.w	b585c <HAL_USB_USART_Is_Connected>

000b647a <_Z19acquireSerialBufferv>:
{
   b647a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b647c:	2214      	movs	r2, #20
{
   b647e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6480:	2100      	movs	r1, #0
   b6482:	f001 fafb 	bl	b7a7c <memset>
}
   b6486:	4620      	mov	r0, r4
   b6488:	bd10      	pop	{r4, pc}
	...

000b648c <_Z16_fetch_usbserialv>:
{
   b648c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b648e:	4c0f      	ldr	r4, [pc, #60]	; (b64cc <_Z16_fetch_usbserialv+0x40>)
{
   b6490:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6492:	a803      	add	r0, sp, #12
   b6494:	f7ff fff1 	bl	b647a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6498:	7821      	ldrb	r1, [r4, #0]
   b649a:	f3bf 8f5b 	dmb	ish
   b649e:	f011 0101 	ands.w	r1, r1, #1
   b64a2:	d10f      	bne.n	b64c4 <_Z16_fetch_usbserialv+0x38>
   b64a4:	4620      	mov	r0, r4
   b64a6:	9101      	str	r1, [sp, #4]
   b64a8:	f7fd fe08 	bl	b40bc <__cxa_guard_acquire>
   b64ac:	9901      	ldr	r1, [sp, #4]
   b64ae:	b148      	cbz	r0, b64c4 <_Z16_fetch_usbserialv+0x38>
   b64b0:	aa03      	add	r2, sp, #12
   b64b2:	4807      	ldr	r0, [pc, #28]	; (b64d0 <_Z16_fetch_usbserialv+0x44>)
   b64b4:	f7ff ffc6 	bl	b6444 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64b8:	4620      	mov	r0, r4
   b64ba:	f7fd fe04 	bl	b40c6 <__cxa_guard_release>
   b64be:	4805      	ldr	r0, [pc, #20]	; (b64d4 <_Z16_fetch_usbserialv+0x48>)
   b64c0:	f001 fac8 	bl	b7a54 <atexit>
	return _usbserial;
}
   b64c4:	4802      	ldr	r0, [pc, #8]	; (b64d0 <_Z16_fetch_usbserialv+0x44>)
   b64c6:	b008      	add	sp, #32
   b64c8:	bd10      	pop	{r4, pc}
   b64ca:	bf00      	nop
   b64cc:	2003e700 	.word	0x2003e700
   b64d0:	2003e704 	.word	0x2003e704
   b64d4:	000b63cd 	.word	0x000b63cd

000b64d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b64d8:	4770      	bx	lr

000b64da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b64da:	7441      	strb	r1, [r0, #17]
}
   b64dc:	4770      	bx	lr

000b64de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b64de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b64e0:	7c00      	ldrb	r0, [r0, #16]
   b64e2:	f7ff f88b 	bl	b55fc <hal_usart_available_data_for_write>
}
   b64e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b64ea:	bd08      	pop	{r3, pc}

000b64ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b64ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b64ee:	7c00      	ldrb	r0, [r0, #16]
   b64f0:	f7ff f85c 	bl	b55ac <hal_usart_available>
}
   b64f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b64f8:	bd08      	pop	{r3, pc}

000b64fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b64fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b64fc:	7c00      	ldrb	r0, [r0, #16]
   b64fe:	f7ff f865 	bl	b55cc <hal_usart_peek>
}
   b6502:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6506:	bd08      	pop	{r3, pc}

000b6508 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6508:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b650a:	7c00      	ldrb	r0, [r0, #16]
   b650c:	f7ff f856 	bl	b55bc <hal_usart_read>
}
   b6510:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6514:	bd08      	pop	{r3, pc}

000b6516 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6516:	7c00      	ldrb	r0, [r0, #16]
   b6518:	f7ff b860 	b.w	b55dc <hal_usart_flush>

000b651c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b651c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b651e:	7c45      	ldrb	r5, [r0, #17]
{
   b6520:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6522:	b12d      	cbz	r5, b6530 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6524:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6526:	b003      	add	sp, #12
   b6528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b652c:	f7ff b836 	b.w	b559c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6530:	7c00      	ldrb	r0, [r0, #16]
   b6532:	9101      	str	r1, [sp, #4]
   b6534:	f7ff f862 	bl	b55fc <hal_usart_available_data_for_write>
   b6538:	2800      	cmp	r0, #0
   b653a:	9901      	ldr	r1, [sp, #4]
   b653c:	dcf2      	bgt.n	b6524 <_ZN11USARTSerial5writeEh+0x8>
}
   b653e:	4628      	mov	r0, r5
   b6540:	b003      	add	sp, #12
   b6542:	bd30      	pop	{r4, r5, pc}

000b6544 <_ZN11USARTSerialD0Ev>:
   b6544:	b510      	push	{r4, lr}
   b6546:	2114      	movs	r1, #20
   b6548:	4604      	mov	r4, r0
   b654a:	f7fd fda8 	bl	b409e <_ZdlPvj>
   b654e:	4620      	mov	r0, r4
   b6550:	bd10      	pop	{r4, pc}
	...

000b6554 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6554:	b510      	push	{r4, lr}
   b6556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b655a:	4604      	mov	r4, r0
   b655c:	4608      	mov	r0, r1
   b655e:	4611      	mov	r1, r2
   b6560:	2200      	movs	r2, #0
   b6562:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6566:	4b04      	ldr	r3, [pc, #16]	; (b6578 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6568:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b656a:	2301      	movs	r3, #1
  _serial = serial;
   b656c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b656e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6570:	f7ff f84c 	bl	b560c <hal_usart_init_ex>
}
   b6574:	4620      	mov	r0, r4
   b6576:	bd10      	pop	{r4, pc}
   b6578:	000b8400 	.word	0x000b8400

000b657c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b657c:	4770      	bx	lr

000b657e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b657e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6580:	4606      	mov	r6, r0
   b6582:	4615      	mov	r5, r2
   b6584:	460c      	mov	r4, r1
   b6586:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6588:	42bc      	cmp	r4, r7
   b658a:	d006      	beq.n	b659a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b658c:	6833      	ldr	r3, [r6, #0]
   b658e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6592:	689b      	ldr	r3, [r3, #8]
   b6594:	4630      	mov	r0, r6
   b6596:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6598:	e7f6      	b.n	b6588 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b659a:	4628      	mov	r0, r5
   b659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b659e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b659e:	7c00      	ldrb	r0, [r0, #16]
   b65a0:	2200      	movs	r2, #0
   b65a2:	f7ff b853 	b.w	b564c <hal_i2c_write>

000b65a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b65a6:	7c00      	ldrb	r0, [r0, #16]
   b65a8:	2100      	movs	r1, #0
   b65aa:	f7ff b857 	b.w	b565c <hal_i2c_available>

000b65ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b65ae:	7c00      	ldrb	r0, [r0, #16]
   b65b0:	2100      	movs	r1, #0
   b65b2:	f7ff b85b 	b.w	b566c <hal_i2c_read>

000b65b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b65b6:	7c00      	ldrb	r0, [r0, #16]
   b65b8:	2100      	movs	r1, #0
   b65ba:	f7ff b85f 	b.w	b567c <hal_i2c_peek>

000b65be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b65be:	7c00      	ldrb	r0, [r0, #16]
   b65c0:	2100      	movs	r1, #0
   b65c2:	f7ff b863 	b.w	b568c <hal_i2c_flush>

000b65c6 <_ZN7TwoWireD0Ev>:
   b65c6:	b510      	push	{r4, lr}
   b65c8:	2114      	movs	r1, #20
   b65ca:	4604      	mov	r4, r0
   b65cc:	f7fd fd67 	bl	b409e <_ZdlPvj>
   b65d0:	4620      	mov	r0, r4
   b65d2:	bd10      	pop	{r4, pc}

000b65d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65d4:	b538      	push	{r3, r4, r5, lr}
   b65d6:	4604      	mov	r4, r0
   b65d8:	4615      	mov	r5, r2
   b65da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65de:	2200      	movs	r2, #0
   b65e0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65e4:	4b09      	ldr	r3, [pc, #36]	; (b660c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b65e6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65e8:	4608      	mov	r0, r1
   b65ea:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b65ec:	4629      	mov	r1, r5
   b65ee:	f7ff f85d 	bl	b56ac <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65f2:	30bf      	adds	r0, #191	; 0xbf
   b65f4:	d108      	bne.n	b6608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b65f6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65f8:	07db      	lsls	r3, r3, #31
   b65fa:	d505      	bpl.n	b6608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b65fc:	6868      	ldr	r0, [r5, #4]
   b65fe:	f7ff f9e1 	bl	b59c4 <free>
    free(conf.tx_buffer);
   b6602:	68e8      	ldr	r0, [r5, #12]
   b6604:	f7ff f9de 	bl	b59c4 <free>
}
   b6608:	4620      	mov	r0, r4
   b660a:	bd38      	pop	{r3, r4, r5, pc}
   b660c:	000b8430 	.word	0x000b8430

000b6610 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6610:	2300      	movs	r3, #0
   b6612:	7c00      	ldrb	r0, [r0, #16]
   b6614:	461a      	mov	r2, r3
   b6616:	4619      	mov	r1, r3
   b6618:	f7ff b800 	b.w	b561c <hal_i2c_begin>

000b661c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b661c:	7c00      	ldrb	r0, [r0, #16]
   b661e:	2200      	movs	r2, #0
   b6620:	f7ff b804 	b.w	b562c <hal_i2c_begin_transmission>

000b6624 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6624:	b2c9      	uxtb	r1, r1
   b6626:	f7ff bff9 	b.w	b661c <_ZN7TwoWire17beginTransmissionEh>

000b662a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b662a:	7c00      	ldrb	r0, [r0, #16]
   b662c:	2200      	movs	r2, #0
   b662e:	f7ff b805 	b.w	b563c <hal_i2c_end_transmission>

000b6632 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6632:	2101      	movs	r1, #1
   b6634:	f7ff bff9 	b.w	b662a <_ZN7TwoWire15endTransmissionEh>

000b6638 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6638:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b663a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b663c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6640:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6642:	2201      	movs	r2, #1
   b6644:	f04f 33ff 	mov.w	r3, #4294967295
   b6648:	f10d 0107 	add.w	r1, sp, #7
   b664c:	47a0      	blx	r4
}
   b664e:	b002      	add	sp, #8
   b6650:	bd10      	pop	{r4, pc}

000b6652 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6652:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6654:	6803      	ldr	r3, [r0, #0]
   b6656:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6658:	f04f 33ff 	mov.w	r3, #4294967295
   b665c:	46a4      	mov	ip, r4
}
   b665e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6662:	4760      	bx	ip

000b6664 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6664:	b513      	push	{r0, r1, r4, lr}
   b6666:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6668:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b666a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b666e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6670:	f10d 0107 	add.w	r1, sp, #7
   b6674:	2201      	movs	r2, #1
   b6676:	47a0      	blx	r4
}
   b6678:	b002      	add	sp, #8
   b667a:	bd10      	pop	{r4, pc}

000b667c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b667c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b667e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6680:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6684:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6688:	429a      	cmp	r2, r3
int TCPClient::read() {
   b668a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b668c:	d008      	beq.n	b66a0 <_ZN9TCPClient4readEv+0x24>
   b668e:	6963      	ldr	r3, [r4, #20]
   b6690:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6694:	1c51      	adds	r1, r2, #1
   b6696:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b669a:	4413      	add	r3, r2
   b669c:	7918      	ldrb	r0, [r3, #4]
}
   b669e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66a0:	6803      	ldr	r3, [r0, #0]
   b66a2:	691b      	ldr	r3, [r3, #16]
   b66a4:	4798      	blx	r3
   b66a6:	2800      	cmp	r0, #0
   b66a8:	d1f1      	bne.n	b668e <_ZN9TCPClient4readEv+0x12>
   b66aa:	f04f 30ff 	mov.w	r0, #4294967295
   b66ae:	e7f6      	b.n	b669e <_ZN9TCPClient4readEv+0x22>

000b66b0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b66b0:	4770      	bx	lr

000b66b2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b66b2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b66b4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b66b6:	43c0      	mvns	r0, r0
   b66b8:	0fc0      	lsrs	r0, r0, #31
   b66ba:	4770      	bx	lr

000b66bc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b66bc:	4770      	bx	lr
	...

000b66c0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b66c0:	4b06      	ldr	r3, [pc, #24]	; (b66dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b66c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b66c4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b66c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b66ca:	d005      	beq.n	b66d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b66cc:	4608      	mov	r0, r1
   b66ce:	f000 fc91 	bl	b6ff4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b66d2:	2800      	cmp	r0, #0
   b66d4:	bf08      	it	eq
   b66d6:	2400      	moveq	r4, #0
      }
   b66d8:	4620      	mov	r0, r4
   b66da:	bd10      	pop	{r4, pc}
   b66dc:	000b838c 	.word	0x000b838c

000b66e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b66e0:	b510      	push	{r4, lr}
   b66e2:	21ac      	movs	r1, #172	; 0xac
   b66e4:	4604      	mov	r4, r0
   b66e6:	f7fd fcda 	bl	b409e <_ZdlPvj>
   b66ea:	4620      	mov	r0, r4
   b66ec:	bd10      	pop	{r4, pc}

000b66ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b66ee:	21ac      	movs	r1, #172	; 0xac
   b66f0:	f7fd bcd5 	b.w	b409e <_ZdlPvj>

000b66f4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b66f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b66f8:	f04f 0800 	mov.w	r8, #0
   b66fc:	b086      	sub	sp, #24
   b66fe:	461c      	mov	r4, r3
   b6700:	f8c0 8004 	str.w	r8, [r0, #4]
   b6704:	4605      	mov	r5, r0
   b6706:	460e      	mov	r6, r1
   b6708:	4617      	mov	r7, r2
    struct timeval tv = {};
   b670a:	4641      	mov	r1, r8
   b670c:	2210      	movs	r2, #16
   b670e:	a802      	add	r0, sp, #8
   b6710:	f001 f9b4 	bl	b7a7c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6714:	1c63      	adds	r3, r4, #1
   b6716:	d009      	beq.n	b672c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b671c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6720:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6724:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6728:	435c      	muls	r4, r3
   b672a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b672c:	6968      	ldr	r0, [r5, #20]
   b672e:	2310      	movs	r3, #16
   b6730:	9300      	str	r3, [sp, #0]
   b6732:	6800      	ldr	r0, [r0, #0]
   b6734:	ab02      	add	r3, sp, #8
   b6736:	f241 0205 	movw	r2, #4101	; 0x1005
   b673a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b673e:	f7fe ffbd 	bl	b56bc <sock_setsockopt>
    if (ret < 0) {
   b6742:	2800      	cmp	r0, #0
   b6744:	da07      	bge.n	b6756 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6746:	f7ff f955 	bl	b59f4 <__errno>
   b674a:	6803      	ldr	r3, [r0, #0]
   b674c:	606b      	str	r3, [r5, #4]
        return 0;
   b674e:	2000      	movs	r0, #0
}
   b6750:	b006      	add	sp, #24
   b6752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6756:	6968      	ldr	r0, [r5, #20]
   b6758:	2300      	movs	r3, #0
   b675a:	6800      	ldr	r0, [r0, #0]
   b675c:	463a      	mov	r2, r7
   b675e:	4631      	mov	r1, r6
   b6760:	f7fe ffcc 	bl	b56fc <sock_send>
    if (ret < 0) {
   b6764:	1e03      	subs	r3, r0, #0
   b6766:	dbee      	blt.n	b6746 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6768:	4618      	mov	r0, r3
   b676a:	e7f1      	b.n	b6750 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b676c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b676c:	b530      	push	{r4, r5, lr}
   b676e:	b087      	sub	sp, #28
   b6770:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6772:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6774:	4668      	mov	r0, sp
   b6776:	f7ff fe17 	bl	b63a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b677a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b677c:	3404      	adds	r4, #4
   b677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6780:	682b      	ldr	r3, [r5, #0]
   b6782:	7023      	strb	r3, [r4, #0]
    }
   b6784:	b007      	add	sp, #28
   b6786:	bd30      	pop	{r4, r5, pc}

000b6788 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6788:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b678a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b678c:	4b05      	ldr	r3, [pc, #20]	; (b67a4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b678e:	4604      	mov	r4, r0
   b6790:	358c      	adds	r5, #140	; 0x8c
   b6792:	f844 3b04 	str.w	r3, [r4], #4
   b6796:	4606      	mov	r6, r0
   b6798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b679c:	682b      	ldr	r3, [r5, #0]
   b679e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b67a0:	4630      	mov	r0, r6
   b67a2:	bd70      	pop	{r4, r5, r6, pc}
   b67a4:	000b83bc 	.word	0x000b83bc

000b67a8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b67a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67ac:	4698      	mov	r8, r3
    stop();
   b67ae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b67b0:	b093      	sub	sp, #76	; 0x4c
   b67b2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b67b4:	2400      	movs	r4, #0
    stop();
   b67b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b67b8:	4606      	mov	r6, r0
   b67ba:	4617      	mov	r7, r2
    stop();
   b67bc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67be:	4628      	mov	r0, r5
   b67c0:	466b      	mov	r3, sp
   b67c2:	4622      	mov	r2, r4
   b67c4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b67c6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67c8:	f7fe fe70 	bl	b54ac <netdb_getaddrinfo>
   b67cc:	4605      	mov	r5, r0
   b67ce:	2800      	cmp	r0, #0
   b67d0:	d163      	bne.n	b689a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b67d2:	9b00      	ldr	r3, [sp, #0]
   b67d4:	2b00      	cmp	r3, #0
   b67d6:	d04b      	beq.n	b6870 <_ZN9TCPClient7connectEPKctm+0xc8>
   b67d8:	695b      	ldr	r3, [r3, #20]
   b67da:	2b00      	cmp	r3, #0
   b67dc:	d048      	beq.n	b6870 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b67de:	a806      	add	r0, sp, #24
   b67e0:	f7ff fd9e 	bl	b6320 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b67e4:	9b00      	ldr	r3, [sp, #0]
   b67e6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b67e8:	7863      	ldrb	r3, [r4, #1]
   b67ea:	2b02      	cmp	r3, #2
   b67ec:	d104      	bne.n	b67f8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b67ee:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b67f0:	a806      	add	r0, sp, #24
   b67f2:	f7ff ffbb 	bl	b676c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b67f6:	e026      	b.n	b6846 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b67f8:	2b0a      	cmp	r3, #10
   b67fa:	d124      	bne.n	b6846 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b67fc:	2211      	movs	r2, #17
   b67fe:	4629      	mov	r1, r5
   b6800:	a801      	add	r0, sp, #4
   b6802:	f001 f93b 	bl	b7a7c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6806:	68a3      	ldr	r3, [r4, #8]
   b6808:	2b00      	cmp	r3, #0
   b680a:	d038      	beq.n	b687e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b680c:	f104 0308 	add.w	r3, r4, #8
   b6810:	f10d 0c04 	add.w	ip, sp, #4
   b6814:	3418      	adds	r4, #24
   b6816:	6818      	ldr	r0, [r3, #0]
   b6818:	6859      	ldr	r1, [r3, #4]
   b681a:	4662      	mov	r2, ip
   b681c:	c203      	stmia	r2!, {r0, r1}
   b681e:	3308      	adds	r3, #8
   b6820:	42a3      	cmp	r3, r4
   b6822:	4694      	mov	ip, r2
   b6824:	d1f7      	bne.n	b6816 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6826:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6828:	a901      	add	r1, sp, #4
   b682a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b682c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6830:	f7ff fd84 	bl	b633c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6834:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6838:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b683c:	ac07      	add	r4, sp, #28
   b683e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6840:	f8dc 3000 	ldr.w	r3, [ip]
   b6844:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6846:	a806      	add	r0, sp, #24
   b6848:	f7ff fd8a 	bl	b6360 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b684c:	b180      	cbz	r0, b6870 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b684e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6850:	ad07      	add	r5, sp, #28
   b6852:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6856:	4b12      	ldr	r3, [pc, #72]	; (b68a0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6858:	930c      	str	r3, [sp, #48]	; 0x30
   b685a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b685c:	ac0d      	add	r4, sp, #52	; 0x34
   b685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6860:	682b      	ldr	r3, [r5, #0]
   b6862:	7023      	strb	r3, [r4, #0]
   b6864:	463a      	mov	r2, r7
   b6866:	4643      	mov	r3, r8
   b6868:	a90c      	add	r1, sp, #48	; 0x30
   b686a:	4630      	mov	r0, r6
   b686c:	47c8      	blx	r9
   b686e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6870:	9800      	ldr	r0, [sp, #0]
   b6872:	f7fe fe13 	bl	b549c <netdb_freeaddrinfo>
}
   b6876:	4628      	mov	r0, r5
   b6878:	b013      	add	sp, #76	; 0x4c
   b687a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b687e:	68e3      	ldr	r3, [r4, #12]
   b6880:	2b00      	cmp	r3, #0
   b6882:	d1c3      	bne.n	b680c <_ZN9TCPClient7connectEPKctm+0x64>
   b6884:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6888:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b688c:	f7fe fe76 	bl	b557c <inet_htonl>
   b6890:	4581      	cmp	r9, r0
   b6892:	d1bb      	bne.n	b680c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6894:	f104 0114 	add.w	r1, r4, #20
   b6898:	e7aa      	b.n	b67f0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b689a:	4625      	mov	r5, r4
   b689c:	e7e8      	b.n	b6870 <_ZN9TCPClient7connectEPKctm+0xc8>
   b689e:	bf00      	nop
   b68a0:	000b83bc 	.word	0x000b83bc

000b68a4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b68a4:	b538      	push	{r3, r4, r5, lr}
   b68a6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b68a8:	681a      	ldr	r2, [r3, #0]
   b68aa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b68ac:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b68ae:	da10      	bge.n	b68d2 <_ZN9TCPClient9connectedEv+0x2e>
   b68b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b68b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b68b8:	429a      	cmp	r2, r3
   b68ba:	d10a      	bne.n	b68d2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b68bc:	6803      	ldr	r3, [r0, #0]
   b68be:	691b      	ldr	r3, [r3, #16]
   b68c0:	4798      	blx	r3
        if (!rv) {
   b68c2:	4604      	mov	r4, r0
   b68c4:	b928      	cbnz	r0, b68d2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b68c6:	682b      	ldr	r3, [r5, #0]
   b68c8:	4628      	mov	r0, r5
   b68ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b68cc:	4798      	blx	r3
        rv = available();
   b68ce:	4620      	mov	r0, r4
}
   b68d0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b68d2:	2001      	movs	r0, #1
   b68d4:	e7fc      	b.n	b68d0 <_ZN9TCPClient9connectedEv+0x2c>

000b68d6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b68d6:	b510      	push	{r4, lr}
   b68d8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b68da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b68de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b68e2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b68e4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b68e6:	d005      	beq.n	b68f4 <_ZN9TCPClient4peekEv+0x1e>
   b68e8:	6963      	ldr	r3, [r4, #20]
   b68ea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b68ee:	4413      	add	r3, r2
   b68f0:	7918      	ldrb	r0, [r3, #4]
}
   b68f2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b68f4:	6803      	ldr	r3, [r0, #0]
   b68f6:	691b      	ldr	r3, [r3, #16]
   b68f8:	4798      	blx	r3
   b68fa:	2800      	cmp	r0, #0
   b68fc:	d1f4      	bne.n	b68e8 <_ZN9TCPClient4peekEv+0x12>
   b68fe:	f04f 30ff 	mov.w	r0, #4294967295
   b6902:	e7f6      	b.n	b68f2 <_ZN9TCPClient4peekEv+0x1c>

000b6904 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6906:	6943      	ldr	r3, [r0, #20]
   b6908:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b690a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b690e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6912:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6914:	4605      	mov	r5, r0
   b6916:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6918:	d016      	beq.n	b6948 <_ZN9TCPClient4readEPhj+0x44>
   b691a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b691c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6920:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6924:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6926:	42bc      	cmp	r4, r7
   b6928:	bf28      	it	cs
   b692a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b692c:	3304      	adds	r3, #4
   b692e:	4622      	mov	r2, r4
   b6930:	4419      	add	r1, r3
   b6932:	4630      	mov	r0, r6
   b6934:	f001 f894 	bl	b7a60 <memcpy>
   b6938:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b693a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b693e:	4423      	add	r3, r4
   b6940:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6944:	4620      	mov	r0, r4
   b6946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6948:	6803      	ldr	r3, [r0, #0]
   b694a:	691b      	ldr	r3, [r3, #16]
   b694c:	4798      	blx	r3
   b694e:	2800      	cmp	r0, #0
   b6950:	d1e3      	bne.n	b691a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6952:	f04f 34ff 	mov.w	r4, #4294967295
   b6956:	e7f5      	b.n	b6944 <_ZN9TCPClient4readEPhj+0x40>

000b6958 <_ZN9TCPClient12flush_bufferEv>:
   b6958:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b695a:	2300      	movs	r3, #0
   b695c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6960:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6962:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6966:	4770      	bx	lr

000b6968 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b696c:	461f      	mov	r7, r3
    stop();
   b696e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6970:	460c      	mov	r4, r1
    stop();
   b6972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6974:	b08a      	sub	sp, #40	; 0x28
   b6976:	4605      	mov	r5, r0
   b6978:	4616      	mov	r6, r2
    stop();
   b697a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b697c:	7d23      	ldrb	r3, [r4, #20]
   b697e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6982:	2b04      	cmp	r3, #4
   b6984:	bf0c      	ite	eq
   b6986:	2002      	moveq	r0, #2
   b6988:	200a      	movne	r0, #10
   b698a:	2206      	movs	r2, #6
   b698c:	2101      	movs	r1, #1
   b698e:	f7fe febd 	bl	b570c <sock_socket>
   b6992:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6996:	696b      	ldr	r3, [r5, #20]
   b6998:	681b      	ldr	r3, [r3, #0]
   b699a:	2b00      	cmp	r3, #0
   b699c:	da08      	bge.n	b69b0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b699e:	682b      	ldr	r3, [r5, #0]
   b69a0:	4628      	mov	r0, r5
   b69a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69a4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b69a6:	4798      	blx	r3
}
   b69a8:	4620      	mov	r0, r4
   b69aa:	b00a      	add	sp, #40	; 0x28
   b69ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b69b0:	4628      	mov	r0, r5
   b69b2:	f7ff ffd1 	bl	b6958 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b69b6:	b1b7      	cbz	r7, b69e6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b69b8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69ba:	a903      	add	r1, sp, #12
   b69bc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b69be:	9303      	str	r3, [sp, #12]
   b69c0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69c4:	f7fe fda2 	bl	b550c <if_index_to_name>
   b69c8:	2800      	cmp	r0, #0
   b69ca:	d1e8      	bne.n	b699e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b69cc:	6968      	ldr	r0, [r5, #20]
   b69ce:	2306      	movs	r3, #6
   b69d0:	9300      	str	r3, [sp, #0]
   b69d2:	6800      	ldr	r0, [r0, #0]
   b69d4:	ab03      	add	r3, sp, #12
   b69d6:	f241 020b 	movw	r2, #4107	; 0x100b
   b69da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b69de:	f7fe fe6d 	bl	b56bc <sock_setsockopt>
   b69e2:	2800      	cmp	r0, #0
   b69e4:	d1db      	bne.n	b699e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b69e6:	221c      	movs	r2, #28
   b69e8:	2100      	movs	r1, #0
   b69ea:	a803      	add	r0, sp, #12
   b69ec:	f001 f846 	bl	b7a7c <memset>
    if (ip.version() == 4) {
   b69f0:	7d23      	ldrb	r3, [r4, #20]
   b69f2:	2b04      	cmp	r3, #4
   b69f4:	d11d      	bne.n	b6a32 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b69f6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b69fa:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b69fc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6a00:	f7fe fdc4 	bl	b558c <inet_htons>
   b6a04:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6a08:	6860      	ldr	r0, [r4, #4]
   b6a0a:	f7fe fdb7 	bl	b557c <inet_htonl>
   b6a0e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6a10:	696b      	ldr	r3, [r5, #20]
   b6a12:	221c      	movs	r2, #28
   b6a14:	6818      	ldr	r0, [r3, #0]
   b6a16:	a903      	add	r1, sp, #12
   b6a18:	f7fe fe60 	bl	b56dc <sock_connect>
   b6a1c:	2800      	cmp	r0, #0
   b6a1e:	d1be      	bne.n	b699e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6a20:	3404      	adds	r4, #4
   b6a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a24:	696d      	ldr	r5, [r5, #20]
   b6a26:	358c      	adds	r5, #140	; 0x8c
   b6a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a2a:	6823      	ldr	r3, [r4, #0]
   b6a2c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6a2e:	2401      	movs	r4, #1
   b6a30:	e7ba      	b.n	b69a8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6a32:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6a36:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6a38:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6a3c:	f7fe fda6 	bl	b558c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6a40:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6a42:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6a46:	1d23      	adds	r3, r4, #4
   b6a48:	f104 0714 	add.w	r7, r4, #20
   b6a4c:	6818      	ldr	r0, [r3, #0]
   b6a4e:	6859      	ldr	r1, [r3, #4]
   b6a50:	4632      	mov	r2, r6
   b6a52:	c203      	stmia	r2!, {r0, r1}
   b6a54:	3308      	adds	r3, #8
   b6a56:	42bb      	cmp	r3, r7
   b6a58:	4616      	mov	r6, r2
   b6a5a:	d1f7      	bne.n	b6a4c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6a5c:	e7d8      	b.n	b6a10 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6a60 <_ZN9TCPClient9availableEv>:
{
   b6a60:	b530      	push	{r4, r5, lr}
   b6a62:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6a64:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6a68:	b08b      	sub	sp, #44	; 0x2c
   b6a6a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6a6c:	b12b      	cbz	r3, b6a7a <_ZN9TCPClient9availableEv+0x1a>
   b6a6e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6a72:	429a      	cmp	r2, r3
   b6a74:	d101      	bne.n	b6a7a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6a76:	f7ff ff6f 	bl	b6958 <_ZN9TCPClient12flush_bufferEv>
   b6a7a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6a7c:	6808      	ldr	r0, [r1, #0]
   b6a7e:	2800      	cmp	r0, #0
   b6a80:	db18      	blt.n	b6ab4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6a82:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6a86:	2d7f      	cmp	r5, #127	; 0x7f
   b6a88:	d814      	bhi.n	b6ab4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6a8a:	3104      	adds	r1, #4
   b6a8c:	2308      	movs	r3, #8
   b6a8e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6a92:	4429      	add	r1, r5
   b6a94:	f7fe fe2a 	bl	b56ec <sock_recv>
            if (ret > 0) {
   b6a98:	2800      	cmp	r0, #0
   b6a9a:	dd13      	ble.n	b6ac4 <_ZN9TCPClient9availableEv+0x64>
   b6a9c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6a9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6aa2:	b90a      	cbnz	r2, b6aa8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6aa4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6aa8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6aaa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6aae:	4410      	add	r0, r2
   b6ab0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6ab4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6ab6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6aba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6abe:	1ac0      	subs	r0, r0, r3
   b6ac0:	b00b      	add	sp, #44	; 0x2c
   b6ac2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6ac4:	f7fe ff96 	bl	b59f4 <__errno>
   b6ac8:	6803      	ldr	r3, [r0, #0]
   b6aca:	2b0b      	cmp	r3, #11
   b6acc:	d0f2      	beq.n	b6ab4 <_ZN9TCPClient9availableEv+0x54>
   b6ace:	f7fe ff91 	bl	b59f4 <__errno>
   b6ad2:	6803      	ldr	r3, [r0, #0]
   b6ad4:	2b0b      	cmp	r3, #11
   b6ad6:	d0ed      	beq.n	b6ab4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6ad8:	2320      	movs	r3, #32
   b6ada:	2500      	movs	r5, #0
   b6adc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6ae0:	f7fe ff88 	bl	b59f4 <__errno>
   b6ae4:	6803      	ldr	r3, [r0, #0]
   b6ae6:	9301      	str	r3, [sp, #4]
   b6ae8:	4b08      	ldr	r3, [pc, #32]	; (b6b0c <_ZN9TCPClient9availableEv+0xac>)
   b6aea:	4909      	ldr	r1, [pc, #36]	; (b6b10 <_ZN9TCPClient9availableEv+0xb0>)
   b6aec:	9300      	str	r3, [sp, #0]
   b6aee:	aa02      	add	r2, sp, #8
   b6af0:	462b      	mov	r3, r5
   b6af2:	2032      	movs	r0, #50	; 0x32
   b6af4:	f7fe fec2 	bl	b587c <log_message>
                    sock_close(d_->sock);
   b6af8:	6963      	ldr	r3, [r4, #20]
   b6afa:	6818      	ldr	r0, [r3, #0]
   b6afc:	f7fe fde6 	bl	b56cc <sock_close>
   b6b00:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6b02:	f04f 32ff 	mov.w	r2, #4294967295
   b6b06:	601a      	str	r2, [r3, #0]
   b6b08:	e7d4      	b.n	b6ab4 <_ZN9TCPClient9availableEv+0x54>
   b6b0a:	bf00      	nop
   b6b0c:	000b8457 	.word	0x000b8457
   b6b10:	000b8450 	.word	0x000b8450

000b6b14 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6b14:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6b16:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6b18:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6b1a:	6818      	ldr	r0, [r3, #0]
   b6b1c:	2800      	cmp	r0, #0
   b6b1e:	db01      	blt.n	b6b24 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6b20:	f7fe fdd4 	bl	b56cc <sock_close>
   b6b24:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6b26:	f04f 32ff 	mov.w	r2, #4294967295
   b6b2a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6b2c:	6960      	ldr	r0, [r4, #20]
   b6b2e:	2211      	movs	r2, #17
   b6b30:	2100      	movs	r1, #0
   b6b32:	308c      	adds	r0, #140	; 0x8c
   b6b34:	f000 ffa2 	bl	b7a7c <memset>
    flush_buffer();
   b6b38:	4620      	mov	r0, r4
}
   b6b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6b3e:	f7ff bf0b 	b.w	b6958 <_ZN9TCPClient12flush_bufferEv>

000b6b42 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6b42:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6b44:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6b46:	4604      	mov	r4, r0
          total(0) {
   b6b48:	6001      	str	r1, [r0, #0]
   b6b4a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6b4e:	3088      	adds	r0, #136	; 0x88
   b6b50:	f7ff fbe6 	bl	b6320 <_ZN9IPAddressC1Ev>
}
   b6b54:	4620      	mov	r0, r4
   b6b56:	bd10      	pop	{r4, pc}

000b6b58 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6b5a:	2300      	movs	r3, #0
   b6b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6b60:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6b64:	4a0e      	ldr	r2, [pc, #56]	; (b6ba0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6b66:	6103      	str	r3, [r0, #16]
   b6b68:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b6a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6b6c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b6e:	20ac      	movs	r0, #172	; 0xac
   b6b70:	9101      	str	r1, [sp, #4]
   b6b72:	f7fd fa90 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6b76:	1e05      	subs	r5, r0, #0
   b6b78:	f105 060c 	add.w	r6, r5, #12
   b6b7c:	d008      	beq.n	b6b90 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b7e:	2301      	movs	r3, #1
   b6b80:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6b84:	4b07      	ldr	r3, [pc, #28]	; (b6ba4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6b86:	9901      	ldr	r1, [sp, #4]
   b6b88:	602b      	str	r3, [r5, #0]
   b6b8a:	4630      	mov	r0, r6
   b6b8c:	f7ff ffd9 	bl	b6b42 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6b90:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6b92:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6b96:	f7ff fedf 	bl	b6958 <_ZN9TCPClient12flush_bufferEv>
}
   b6b9a:	b002      	add	sp, #8
   b6b9c:	bd70      	pop	{r4, r5, r6, pc}
   b6b9e:	bf00      	nop
   b6ba0:	000b848c 	.word	0x000b848c
   b6ba4:	000b8470 	.word	0x000b8470

000b6ba8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6ba8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6baa:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6bae:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6bb0:	f7ff ffd2 	bl	b6b58 <_ZN9TCPClientC1Ei>
}
   b6bb4:	4620      	mov	r0, r4
   b6bb6:	bd10      	pop	{r4, pc}

000b6bb8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6bb8:	b510      	push	{r4, lr}
   b6bba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6bbc:	6800      	ldr	r0, [r0, #0]
   b6bbe:	2800      	cmp	r0, #0
   b6bc0:	db01      	blt.n	b6bc6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6bc2:	f7fe fd83 	bl	b56cc <sock_close>
    }
}
   b6bc6:	4620      	mov	r0, r4
   b6bc8:	bd10      	pop	{r4, pc}

000b6bca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6bca:	300c      	adds	r0, #12
   b6bcc:	f7ff bff4 	b.w	b6bb8 <_ZN9TCPClient4DataD1Ev>

000b6bd0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6bd0:	2200      	movs	r2, #0
   b6bd2:	6840      	ldr	r0, [r0, #4]
   b6bd4:	4611      	mov	r1, r2
   b6bd6:	f7fe be95 	b.w	b5904 <network_ready>

000b6bda <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6bda:	2200      	movs	r2, #0
   b6bdc:	6840      	ldr	r0, [r0, #4]
   b6bde:	4611      	mov	r1, r2
   b6be0:	f7fe beb0 	b.w	b5944 <network_listening>

000b6be4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6be4:	2200      	movs	r2, #0
   b6be6:	6840      	ldr	r0, [r0, #4]
   b6be8:	4611      	mov	r1, r2
   b6bea:	f7fe bebb 	b.w	b5964 <network_get_listen_timeout>

000b6bee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6bee:	6840      	ldr	r0, [r0, #4]
   b6bf0:	2200      	movs	r2, #0
   b6bf2:	f7fe beaf 	b.w	b5954 <network_set_listen_timeout>

000b6bf6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6bf6:	6840      	ldr	r0, [r0, #4]
   b6bf8:	2200      	movs	r2, #0
   b6bfa:	f081 0101 	eor.w	r1, r1, #1
   b6bfe:	f7fe be99 	b.w	b5934 <network_listen>

000b6c02 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6c02:	2300      	movs	r3, #0
   b6c04:	6840      	ldr	r0, [r0, #4]
   b6c06:	461a      	mov	r2, r3
   b6c08:	4619      	mov	r1, r3
   b6c0a:	f7fe be8b 	b.w	b5924 <network_off>

000b6c0e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6c0e:	2300      	movs	r3, #0
   b6c10:	6840      	ldr	r0, [r0, #4]
   b6c12:	461a      	mov	r2, r3
   b6c14:	4619      	mov	r1, r3
   b6c16:	f7fe be7d 	b.w	b5914 <network_on>

000b6c1a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6c1a:	2200      	movs	r2, #0
   b6c1c:	6840      	ldr	r0, [r0, #4]
   b6c1e:	4611      	mov	r1, r2
   b6c20:	f7fe be60 	b.w	b58e4 <network_connecting>

000b6c24 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c24:	6840      	ldr	r0, [r0, #4]
   b6c26:	2200      	movs	r2, #0
   b6c28:	2102      	movs	r1, #2
   b6c2a:	f7fe be63 	b.w	b58f4 <network_disconnect>

000b6c2e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c2e:	2300      	movs	r3, #0
   b6c30:	6840      	ldr	r0, [r0, #4]
   b6c32:	461a      	mov	r2, r3
   b6c34:	f7fe be4e 	b.w	b58d4 <network_connect>

000b6c38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6c38:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6c3a:	2204      	movs	r2, #4
   b6c3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6c3e:	4a02      	ldr	r2, [pc, #8]	; (b6c48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6c40:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6c42:	4770      	bx	lr
   b6c44:	2003e718 	.word	0x2003e718
   b6c48:	000b84d8 	.word	0x000b84d8

000b6c4c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6c4c:	2300      	movs	r3, #0
   b6c4e:	6840      	ldr	r0, [r0, #4]
   b6c50:	461a      	mov	r2, r3
   b6c52:	f7fe be3f 	b.w	b58d4 <network_connect>

000b6c56 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6c56:	6840      	ldr	r0, [r0, #4]
   b6c58:	2200      	movs	r2, #0
   b6c5a:	2102      	movs	r1, #2
   b6c5c:	f7fe be4a 	b.w	b58f4 <network_disconnect>

000b6c60 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6c60:	2200      	movs	r2, #0
   b6c62:	6840      	ldr	r0, [r0, #4]
   b6c64:	4611      	mov	r1, r2
   b6c66:	f7fe be3d 	b.w	b58e4 <network_connecting>

000b6c6a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6c6a:	2200      	movs	r2, #0
   b6c6c:	6840      	ldr	r0, [r0, #4]
   b6c6e:	4611      	mov	r1, r2
   b6c70:	f7fe be48 	b.w	b5904 <network_ready>

000b6c74 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6c74:	2300      	movs	r3, #0
   b6c76:	6840      	ldr	r0, [r0, #4]
   b6c78:	461a      	mov	r2, r3
   b6c7a:	4619      	mov	r1, r3
   b6c7c:	f7fe be4a 	b.w	b5914 <network_on>

000b6c80 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6c80:	2300      	movs	r3, #0
   b6c82:	6840      	ldr	r0, [r0, #4]
   b6c84:	461a      	mov	r2, r3
   b6c86:	4619      	mov	r1, r3
   b6c88:	f7fe be4c 	b.w	b5924 <network_off>

000b6c8c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6c8c:	6840      	ldr	r0, [r0, #4]
   b6c8e:	2100      	movs	r1, #0
   b6c90:	f7fe be70 	b.w	b5974 <network_is_on>

000b6c94 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6c94:	6840      	ldr	r0, [r0, #4]
   b6c96:	2100      	movs	r1, #0
   b6c98:	f7fe be74 	b.w	b5984 <network_is_off>

000b6c9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6c9c:	6840      	ldr	r0, [r0, #4]
   b6c9e:	2200      	movs	r2, #0
   b6ca0:	f081 0101 	eor.w	r1, r1, #1
   b6ca4:	f7fe be46 	b.w	b5934 <network_listen>

000b6ca8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6ca8:	6840      	ldr	r0, [r0, #4]
   b6caa:	2200      	movs	r2, #0
   b6cac:	f7fe be52 	b.w	b5954 <network_set_listen_timeout>

000b6cb0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6cb0:	2200      	movs	r2, #0
   b6cb2:	6840      	ldr	r0, [r0, #4]
   b6cb4:	4611      	mov	r1, r2
   b6cb6:	f7fe be55 	b.w	b5964 <network_get_listen_timeout>

000b6cba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6cba:	2200      	movs	r2, #0
   b6cbc:	6840      	ldr	r0, [r0, #4]
   b6cbe:	4611      	mov	r1, r2
   b6cc0:	f7fe be40 	b.w	b5944 <network_listening>

000b6cc4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cc8:	b095      	sub	sp, #84	; 0x54
   b6cca:	4614      	mov	r4, r2
   b6ccc:	460d      	mov	r5, r1
   b6cce:	4607      	mov	r7, r0
    IPAddress addr;
   b6cd0:	f7ff fb26 	bl	b6320 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6cd4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6cd6:	221c      	movs	r2, #28
   b6cd8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6cda:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6cdc:	f000 fece 	bl	b7a7c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6ce0:	2340      	movs	r3, #64	; 0x40
   b6ce2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	466b      	mov	r3, sp
   b6ce8:	aa0c      	add	r2, sp, #48	; 0x30
   b6cea:	2100      	movs	r1, #0
   b6cec:	f7fe fbde 	bl	b54ac <netdb_getaddrinfo>
    if (!r) {
   b6cf0:	4604      	mov	r4, r0
   b6cf2:	2800      	cmp	r0, #0
   b6cf4:	d14b      	bne.n	b6d8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6cf6:	4602      	mov	r2, r0
   b6cf8:	2101      	movs	r1, #1
   b6cfa:	6868      	ldr	r0, [r5, #4]
   b6cfc:	f7fe fe02 	bl	b5904 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d00:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d02:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d04:	4622      	mov	r2, r4
   b6d06:	6868      	ldr	r0, [r5, #4]
   b6d08:	f7fe fdfc 	bl	b5904 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d0c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d0e:	4681      	mov	r9, r0
        bool ok = false;
   b6d10:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d12:	2e00      	cmp	r6, #0
   b6d14:	d03b      	beq.n	b6d8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6d16:	2900      	cmp	r1, #0
   b6d18:	d139      	bne.n	b6d8e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6d1a:	6873      	ldr	r3, [r6, #4]
   b6d1c:	2b02      	cmp	r3, #2
   b6d1e:	d003      	beq.n	b6d28 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6d20:	2b0a      	cmp	r3, #10
   b6d22:	d011      	beq.n	b6d48 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d24:	69f6      	ldr	r6, [r6, #28]
   b6d26:	e7f4      	b.n	b6d12 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6d28:	f1b8 0f00 	cmp.w	r8, #0
   b6d2c:	d0fa      	beq.n	b6d24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6d2e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6d30:	a806      	add	r0, sp, #24
   b6d32:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6d34:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6d36:	f7ff fb37 	bl	b63a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d3c:	1d3c      	adds	r4, r7, #4
   b6d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d40:	682b      	ldr	r3, [r5, #0]
   b6d42:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d44:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6d46:	e7ed      	b.n	b6d24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6d48:	f1b9 0f00 	cmp.w	r9, #0
   b6d4c:	d0ea      	beq.n	b6d24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6d4e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6d50:	2210      	movs	r2, #16
   b6d52:	a801      	add	r0, sp, #4
   b6d54:	f000 fe92 	bl	b7a7c <memset>
                    a.v = 6;
   b6d58:	2306      	movs	r3, #6
   b6d5a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6d5e:	ad01      	add	r5, sp, #4
   b6d60:	f104 0308 	add.w	r3, r4, #8
   b6d64:	3418      	adds	r4, #24
   b6d66:	6818      	ldr	r0, [r3, #0]
   b6d68:	6859      	ldr	r1, [r3, #4]
   b6d6a:	462a      	mov	r2, r5
   b6d6c:	c203      	stmia	r2!, {r0, r1}
   b6d6e:	3308      	adds	r3, #8
   b6d70:	42a3      	cmp	r3, r4
   b6d72:	4615      	mov	r5, r2
   b6d74:	d1f7      	bne.n	b6d66 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6d76:	a901      	add	r1, sp, #4
   b6d78:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6d7a:	ad07      	add	r5, sp, #28
   b6d7c:	f7ff fade 	bl	b633c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d82:	1d3c      	adds	r4, r7, #4
   b6d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d86:	682b      	ldr	r3, [r5, #0]
   b6d88:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6d8a:	4649      	mov	r1, r9
   b6d8c:	e7ca      	b.n	b6d24 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6d8e:	9800      	ldr	r0, [sp, #0]
   b6d90:	f7fe fb84 	bl	b549c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6d94:	4638      	mov	r0, r7
   b6d96:	b015      	add	sp, #84	; 0x54
   b6d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6d9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6d9c:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6d9e:	4a03      	ldr	r2, [pc, #12]	; (b6dac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6da0:	601a      	str	r2, [r3, #0]
   b6da2:	2200      	movs	r2, #0
   b6da4:	605a      	str	r2, [r3, #4]

} // spark
   b6da6:	4770      	bx	lr
   b6da8:	2003e720 	.word	0x2003e720
   b6dac:	000b8514 	.word	0x000b8514

000b6db0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6db0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6db2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6db4:	d902      	bls.n	b6dbc <pinAvailable+0xc>
    return false;
   b6db6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6db8:	b002      	add	sp, #8
   b6dba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6dbc:	f1a0 030b 	sub.w	r3, r0, #11
   b6dc0:	2b02      	cmp	r3, #2
   b6dc2:	d81a      	bhi.n	b6dfa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6dc4:	4c17      	ldr	r4, [pc, #92]	; (b6e24 <pinAvailable+0x74>)
   b6dc6:	7821      	ldrb	r1, [r4, #0]
   b6dc8:	f3bf 8f5b 	dmb	ish
   b6dcc:	f011 0101 	ands.w	r1, r1, #1
   b6dd0:	d10b      	bne.n	b6dea <pinAvailable+0x3a>
   b6dd2:	4620      	mov	r0, r4
   b6dd4:	9101      	str	r1, [sp, #4]
   b6dd6:	f7fd f971 	bl	b40bc <__cxa_guard_acquire>
   b6dda:	9901      	ldr	r1, [sp, #4]
   b6ddc:	b128      	cbz	r0, b6dea <pinAvailable+0x3a>
   b6dde:	4812      	ldr	r0, [pc, #72]	; (b6e28 <pinAvailable+0x78>)
   b6de0:	f7fe fe64 	bl	b5aac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6de4:	4620      	mov	r0, r4
   b6de6:	f7fd f96e 	bl	b40c6 <__cxa_guard_release>
   b6dea:	4b0f      	ldr	r3, [pc, #60]	; (b6e28 <pinAvailable+0x78>)
   b6dec:	7818      	ldrb	r0, [r3, #0]
   b6dee:	f7fe fcc5 	bl	b577c <hal_spi_is_enabled>
   b6df2:	2800      	cmp	r0, #0
   b6df4:	d1df      	bne.n	b6db6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6df6:	2001      	movs	r0, #1
   b6df8:	e7de      	b.n	b6db8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6dfa:	2801      	cmp	r0, #1
   b6dfc:	d809      	bhi.n	b6e12 <pinAvailable+0x62>
   b6dfe:	f000 f8d3 	bl	b6fa8 <_Z19__fetch_global_Wirev>
   b6e02:	2100      	movs	r1, #0
   b6e04:	7c00      	ldrb	r0, [r0, #16]
   b6e06:	f7fe fc49 	bl	b569c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6e0a:	f080 0001 	eor.w	r0, r0, #1
   b6e0e:	b2c0      	uxtb	r0, r0
   b6e10:	e7d2      	b.n	b6db8 <pinAvailable+0x8>
   b6e12:	3809      	subs	r0, #9
   b6e14:	2801      	cmp	r0, #1
   b6e16:	d8ee      	bhi.n	b6df6 <pinAvailable+0x46>
   b6e18:	f000 f886 	bl	b6f28 <_Z22__fetch_global_Serial1v>
   b6e1c:	7c00      	ldrb	r0, [r0, #16]
   b6e1e:	f7fe fbe5 	bl	b55ec <hal_usart_is_enabled>
   b6e22:	e7f2      	b.n	b6e0a <pinAvailable+0x5a>
   b6e24:	2003e6b8 	.word	0x2003e6b8
   b6e28:	2003e6bc 	.word	0x2003e6bc

000b6e2c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6e2c:	2823      	cmp	r0, #35	; 0x23
{
   b6e2e:	b538      	push	{r3, r4, r5, lr}
   b6e30:	4604      	mov	r4, r0
   b6e32:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6e34:	d80a      	bhi.n	b6e4c <pinMode+0x20>
   b6e36:	29ff      	cmp	r1, #255	; 0xff
   b6e38:	d008      	beq.n	b6e4c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6e3a:	f7ff ffb9 	bl	b6db0 <pinAvailable>
   b6e3e:	b128      	cbz	r0, b6e4c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6e40:	4629      	mov	r1, r5
   b6e42:	4620      	mov	r0, r4
}
   b6e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6e48:	f7fe bb40 	b.w	b54cc <HAL_Pin_Mode>
}
   b6e4c:	bd38      	pop	{r3, r4, r5, pc}

000b6e4e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6e4e:	b538      	push	{r3, r4, r5, lr}
   b6e50:	4604      	mov	r4, r0
   b6e52:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6e54:	f7fe fb42 	bl	b54dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6e58:	28ff      	cmp	r0, #255	; 0xff
   b6e5a:	d010      	beq.n	b6e7e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6e5c:	2806      	cmp	r0, #6
   b6e5e:	d804      	bhi.n	b6e6a <digitalWrite+0x1c>
   b6e60:	234d      	movs	r3, #77	; 0x4d
   b6e62:	fa23 f000 	lsr.w	r0, r3, r0
   b6e66:	07c3      	lsls	r3, r0, #31
   b6e68:	d409      	bmi.n	b6e7e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7ff ffa0 	bl	b6db0 <pinAvailable>
   b6e70:	b128      	cbz	r0, b6e7e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6e72:	4629      	mov	r1, r5
   b6e74:	4620      	mov	r0, r4
}
   b6e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6e7a:	f7fe bb37 	b.w	b54ec <HAL_GPIO_Write>
}
   b6e7e:	bd38      	pop	{r3, r4, r5, pc}

000b6e80 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6e80:	280d      	cmp	r0, #13
{
   b6e82:	b510      	push	{r4, lr}
   b6e84:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6e86:	bf9c      	itt	ls
   b6e88:	340e      	addls	r4, #14
   b6e8a:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6e8c:	4620      	mov	r0, r4
   b6e8e:	f7ff ff8f 	bl	b6db0 <pinAvailable>
   b6e92:	b150      	cbz	r0, b6eaa <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6e94:	2103      	movs	r1, #3
   b6e96:	4620      	mov	r0, r4
   b6e98:	f7fe fb10 	bl	b54bc <HAL_Validate_Pin_Function>
   b6e9c:	2803      	cmp	r0, #3
   b6e9e:	d104      	bne.n	b6eaa <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6ea0:	4620      	mov	r0, r4
}
   b6ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6ea6:	f7fe bb29 	b.w	b54fc <hal_adc_read>
}
   b6eaa:	2000      	movs	r0, #0
   b6eac:	bd10      	pop	{r4, pc}

000b6eae <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b6eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6eb2:	4690      	mov	r8, r2
   b6eb4:	461f      	mov	r7, r3
   b6eb6:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6eb8:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b6eba:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b6ebc:	f1c4 0107 	rsb	r1, r4, #7
   b6ec0:	f1b8 0f00 	cmp.w	r8, #0
   b6ec4:	d112      	bne.n	b6eec <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6ec6:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6eca:	f001 0101 	and.w	r1, r1, #1
   b6ece:	4630      	mov	r0, r6
   b6ed0:	f7ff ffbd 	bl	b6e4e <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6ed4:	2101      	movs	r1, #1
   b6ed6:	4628      	mov	r0, r5
   b6ed8:	f7ff ffb9 	bl	b6e4e <digitalWrite>
    digitalWrite(clockPin, LOW);
   b6edc:	2100      	movs	r1, #0
   b6ede:	4628      	mov	r0, r5
   b6ee0:	f7ff ffb5 	bl	b6e4e <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6ee4:	3c01      	subs	r4, #1
   b6ee6:	d2e9      	bcs.n	b6ebc <shiftOut+0xe>
  }
}
   b6ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6eec:	fa47 f104 	asr.w	r1, r7, r4
   b6ef0:	e7eb      	b.n	b6eca <shiftOut+0x1c>

000b6ef2 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6ef2:	4770      	bx	lr

000b6ef4 <_Z20acquireSerial1Bufferv>:
{
   b6ef4:	b538      	push	{r3, r4, r5, lr}
   b6ef6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6ef8:	2514      	movs	r5, #20
   b6efa:	462a      	mov	r2, r5
   b6efc:	2100      	movs	r1, #0
   b6efe:	f000 fdbd 	bl	b7a7c <memset>
   b6f02:	8025      	strh	r5, [r4, #0]
   b6f04:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f06:	4907      	ldr	r1, [pc, #28]	; (b6f24 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6f08:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f0a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6f0c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f0e:	f000 f86f 	bl	b6ff0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f12:	4904      	ldr	r1, [pc, #16]	; (b6f24 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6f14:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6f16:	4628      	mov	r0, r5
   b6f18:	f000 f86a 	bl	b6ff0 <_ZnajRKSt9nothrow_t>
    };
   b6f1c:	60e0      	str	r0, [r4, #12]
}
   b6f1e:	4620      	mov	r0, r4
   b6f20:	bd38      	pop	{r3, r4, r5, pc}
   b6f22:	bf00      	nop
   b6f24:	000b8548 	.word	0x000b8548

000b6f28 <_Z22__fetch_global_Serial1v>:
{
   b6f28:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f2a:	4d0e      	ldr	r5, [pc, #56]	; (b6f64 <_Z22__fetch_global_Serial1v+0x3c>)
   b6f2c:	7829      	ldrb	r1, [r5, #0]
   b6f2e:	f3bf 8f5b 	dmb	ish
   b6f32:	f011 0401 	ands.w	r4, r1, #1
{
   b6f36:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6f38:	d111      	bne.n	b6f5e <_Z22__fetch_global_Serial1v+0x36>
   b6f3a:	4628      	mov	r0, r5
   b6f3c:	f7fd f8be 	bl	b40bc <__cxa_guard_acquire>
   b6f40:	b168      	cbz	r0, b6f5e <_Z22__fetch_global_Serial1v+0x36>
   b6f42:	a801      	add	r0, sp, #4
   b6f44:	f7ff ffd6 	bl	b6ef4 <_Z20acquireSerial1Bufferv>
   b6f48:	aa01      	add	r2, sp, #4
   b6f4a:	4621      	mov	r1, r4
   b6f4c:	4806      	ldr	r0, [pc, #24]	; (b6f68 <_Z22__fetch_global_Serial1v+0x40>)
   b6f4e:	f7ff fb01 	bl	b6554 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6f52:	4628      	mov	r0, r5
   b6f54:	f7fd f8b7 	bl	b40c6 <__cxa_guard_release>
   b6f58:	4804      	ldr	r0, [pc, #16]	; (b6f6c <_Z22__fetch_global_Serial1v+0x44>)
   b6f5a:	f000 fd7b 	bl	b7a54 <atexit>
    return serial1;
}
   b6f5e:	4802      	ldr	r0, [pc, #8]	; (b6f68 <_Z22__fetch_global_Serial1v+0x40>)
   b6f60:	b007      	add	sp, #28
   b6f62:	bd30      	pop	{r4, r5, pc}
   b6f64:	2003e728 	.word	0x2003e728
   b6f68:	2003e72c 	.word	0x2003e72c
   b6f6c:	000b6ef3 	.word	0x000b6ef3

000b6f70 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6f70:	4770      	bx	lr
	...

000b6f74 <_Z17acquireWireBufferv>:
{
   b6f74:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6f76:	4b0a      	ldr	r3, [pc, #40]	; (b6fa0 <_Z17acquireWireBufferv+0x2c>)
   b6f78:	6003      	str	r3, [r0, #0]
   b6f7a:	2301      	movs	r3, #1
{
   b6f7c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6f7e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6f80:	4908      	ldr	r1, [pc, #32]	; (b6fa4 <_Z17acquireWireBufferv+0x30>)
   b6f82:	2020      	movs	r0, #32
   b6f84:	f000 f834 	bl	b6ff0 <_ZnajRKSt9nothrow_t>
	};
   b6f88:	2520      	movs	r5, #32
   b6f8a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6f8c:	4905      	ldr	r1, [pc, #20]	; (b6fa4 <_Z17acquireWireBufferv+0x30>)
	};
   b6f8e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6f90:	4628      	mov	r0, r5
   b6f92:	f000 f82d 	bl	b6ff0 <_ZnajRKSt9nothrow_t>
	};
   b6f96:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6f9a:	4620      	mov	r0, r4
   b6f9c:	bd38      	pop	{r3, r4, r5, pc}
   b6f9e:	bf00      	nop
   b6fa0:	00010018 	.word	0x00010018
   b6fa4:	000b8548 	.word	0x000b8548

000b6fa8 <_Z19__fetch_global_Wirev>:
{
   b6fa8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6faa:	4d0e      	ldr	r5, [pc, #56]	; (b6fe4 <_Z19__fetch_global_Wirev+0x3c>)
   b6fac:	7829      	ldrb	r1, [r5, #0]
   b6fae:	f3bf 8f5b 	dmb	ish
   b6fb2:	f011 0401 	ands.w	r4, r1, #1
{
   b6fb6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6fb8:	d111      	bne.n	b6fde <_Z19__fetch_global_Wirev+0x36>
   b6fba:	4628      	mov	r0, r5
   b6fbc:	f7fd f87e 	bl	b40bc <__cxa_guard_acquire>
   b6fc0:	b168      	cbz	r0, b6fde <_Z19__fetch_global_Wirev+0x36>
   b6fc2:	4668      	mov	r0, sp
   b6fc4:	f7ff ffd6 	bl	b6f74 <_Z17acquireWireBufferv>
   b6fc8:	466a      	mov	r2, sp
   b6fca:	4621      	mov	r1, r4
   b6fcc:	4806      	ldr	r0, [pc, #24]	; (b6fe8 <_Z19__fetch_global_Wirev+0x40>)
   b6fce:	f7ff fb01 	bl	b65d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6fd2:	4628      	mov	r0, r5
   b6fd4:	f7fd f877 	bl	b40c6 <__cxa_guard_release>
   b6fd8:	4804      	ldr	r0, [pc, #16]	; (b6fec <_Z19__fetch_global_Wirev+0x44>)
   b6fda:	f000 fd3b 	bl	b7a54 <atexit>
	return wire;
}
   b6fde:	4802      	ldr	r0, [pc, #8]	; (b6fe8 <_Z19__fetch_global_Wirev+0x40>)
   b6fe0:	b007      	add	sp, #28
   b6fe2:	bd30      	pop	{r4, r5, pc}
   b6fe4:	2003e744 	.word	0x2003e744
   b6fe8:	2003e748 	.word	0x2003e748
   b6fec:	000b6f71 	.word	0x000b6f71

000b6ff0 <_ZnajRKSt9nothrow_t>:
   b6ff0:	f7fd b853 	b.w	b409a <_Znaj>

000b6ff4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6ff4:	4901      	ldr	r1, [pc, #4]	; (b6ffc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6ff6:	f000 b8f9 	b.w	b71ec <_ZNKSt9type_infoeqERKS_>
   b6ffa:	bf00      	nop
   b6ffc:	000b8564 	.word	0x000b8564

000b7000 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7002:	2400      	movs	r4, #0
   b7004:	2310      	movs	r3, #16
   b7006:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b700a:	6803      	ldr	r3, [r0, #0]
   b700c:	4615      	mov	r5, r2
   b700e:	699e      	ldr	r6, [r3, #24]
   b7010:	6812      	ldr	r2, [r2, #0]
   b7012:	466b      	mov	r3, sp
   b7014:	e9cd 4400 	strd	r4, r4, [sp]
   b7018:	47b0      	blx	r6
   b701a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b701e:	f003 0306 	and.w	r3, r3, #6
   b7022:	2b06      	cmp	r3, #6
   b7024:	bf03      	ittte	eq
   b7026:	9b00      	ldreq	r3, [sp, #0]
   b7028:	602b      	streq	r3, [r5, #0]
   b702a:	2001      	moveq	r0, #1
   b702c:	4620      	movne	r0, r4
   b702e:	b004      	add	sp, #16
   b7030:	bd70      	pop	{r4, r5, r6, pc}

000b7032 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7032:	9800      	ldr	r0, [sp, #0]
   b7034:	4290      	cmp	r0, r2
   b7036:	bf14      	ite	ne
   b7038:	2001      	movne	r0, #1
   b703a:	2006      	moveq	r0, #6
   b703c:	4770      	bx	lr
	...

000b7040 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7040:	b510      	push	{r4, lr}
   b7042:	4b03      	ldr	r3, [pc, #12]	; (b7050 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7044:	6003      	str	r3, [r0, #0]
   b7046:	4604      	mov	r4, r0
   b7048:	f000 f8cd 	bl	b71e6 <_ZNSt9type_infoD1Ev>
   b704c:	4620      	mov	r0, r4
   b704e:	bd10      	pop	{r4, pc}
   b7050:	000b85a4 	.word	0x000b85a4

000b7054 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7054:	b510      	push	{r4, lr}
   b7056:	4604      	mov	r4, r0
   b7058:	f7ff fff2 	bl	b7040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b705c:	4620      	mov	r0, r4
   b705e:	2108      	movs	r1, #8
   b7060:	f7fd f81d 	bl	b409e <_ZdlPvj>
   b7064:	4620      	mov	r0, r4
   b7066:	bd10      	pop	{r4, pc}

000b7068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b706c:	461f      	mov	r7, r3
   b706e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7072:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7076:	4598      	cmp	r8, r3
   b7078:	4606      	mov	r6, r0
   b707a:	4615      	mov	r5, r2
   b707c:	d107      	bne.n	b708e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b707e:	9907      	ldr	r1, [sp, #28]
   b7080:	f000 f8b4 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b7084:	b118      	cbz	r0, b708e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7086:	7165      	strb	r5, [r4, #5]
   b7088:	2000      	movs	r0, #0
   b708a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b708e:	4639      	mov	r1, r7
   b7090:	4630      	mov	r0, r6
   b7092:	f000 f8ab 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b7096:	2800      	cmp	r0, #0
   b7098:	d0f6      	beq.n	b7088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b709a:	2301      	movs	r3, #1
   b709c:	f8c4 8000 	str.w	r8, [r4]
   b70a0:	7125      	strb	r5, [r4, #4]
   b70a2:	71a3      	strb	r3, [r4, #6]
   b70a4:	e7f0      	b.n	b7088 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b70a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b70a6:	b538      	push	{r3, r4, r5, lr}
   b70a8:	4615      	mov	r5, r2
   b70aa:	461c      	mov	r4, r3
   b70ac:	f000 f89e 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b70b0:	b120      	cbz	r0, b70bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b70b2:	2308      	movs	r3, #8
   b70b4:	60e3      	str	r3, [r4, #12]
   b70b6:	2306      	movs	r3, #6
   b70b8:	6025      	str	r5, [r4, #0]
   b70ba:	7123      	strb	r3, [r4, #4]
   b70bc:	bd38      	pop	{r3, r4, r5, pc}

000b70be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b70be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b70c0:	4605      	mov	r5, r0
   b70c2:	460c      	mov	r4, r1
   b70c4:	9201      	str	r2, [sp, #4]
   b70c6:	461e      	mov	r6, r3
   b70c8:	f000 f890 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b70cc:	b950      	cbnz	r0, b70e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b70ce:	2e03      	cmp	r6, #3
   b70d0:	d808      	bhi.n	b70e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b70d2:	6823      	ldr	r3, [r4, #0]
   b70d4:	9a01      	ldr	r2, [sp, #4]
   b70d6:	695b      	ldr	r3, [r3, #20]
   b70d8:	4629      	mov	r1, r5
   b70da:	4620      	mov	r0, r4
   b70dc:	b002      	add	sp, #8
   b70de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b70e2:	4718      	bx	r3
   b70e4:	b002      	add	sp, #8
   b70e6:	bd70      	pop	{r4, r5, r6, pc}

000b70e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b70e8:	b510      	push	{r4, lr}
   b70ea:	4b03      	ldr	r3, [pc, #12]	; (b70f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b70ec:	6003      	str	r3, [r0, #0]
   b70ee:	4604      	mov	r4, r0
   b70f0:	f7ff ffa6 	bl	b7040 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b70f4:	4620      	mov	r0, r4
   b70f6:	bd10      	pop	{r4, pc}
   b70f8:	000b8604 	.word	0x000b8604

000b70fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b70fc:	b510      	push	{r4, lr}
   b70fe:	4604      	mov	r4, r0
   b7100:	f7ff fff2 	bl	b70e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7104:	4620      	mov	r0, r4
   b7106:	210c      	movs	r1, #12
   b7108:	f7fc ffc9 	bl	b409e <_ZdlPvj>
   b710c:	4620      	mov	r0, r4
   b710e:	bd10      	pop	{r4, pc}

000b7110 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7112:	9f08      	ldr	r7, [sp, #32]
   b7114:	4297      	cmp	r7, r2
   b7116:	4605      	mov	r5, r0
   b7118:	460e      	mov	r6, r1
   b711a:	4614      	mov	r4, r2
   b711c:	d00a      	beq.n	b7134 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b711e:	68a8      	ldr	r0, [r5, #8]
   b7120:	6802      	ldr	r2, [r0, #0]
   b7122:	9708      	str	r7, [sp, #32]
   b7124:	6a15      	ldr	r5, [r2, #32]
   b7126:	4631      	mov	r1, r6
   b7128:	4622      	mov	r2, r4
   b712a:	46ac      	mov	ip, r5
   b712c:	b003      	add	sp, #12
   b712e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7132:	4760      	bx	ip
   b7134:	4619      	mov	r1, r3
   b7136:	9301      	str	r3, [sp, #4]
   b7138:	f000 f858 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b713c:	9b01      	ldr	r3, [sp, #4]
   b713e:	2800      	cmp	r0, #0
   b7140:	d0ed      	beq.n	b711e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7142:	2006      	movs	r0, #6
   b7144:	b003      	add	sp, #12
   b7146:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7148 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7148:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b714c:	460d      	mov	r5, r1
   b714e:	4619      	mov	r1, r3
   b7150:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7154:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7158:	4681      	mov	r9, r0
   b715a:	4617      	mov	r7, r2
   b715c:	4698      	mov	r8, r3
   b715e:	f000 f845 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b7162:	b190      	cbz	r0, b718a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7164:	2d00      	cmp	r5, #0
   b7166:	6034      	str	r4, [r6, #0]
   b7168:	7137      	strb	r7, [r6, #4]
   b716a:	db09      	blt.n	b7180 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b716c:	1961      	adds	r1, r4, r5
   b716e:	458a      	cmp	sl, r1
   b7170:	bf0c      	ite	eq
   b7172:	2106      	moveq	r1, #6
   b7174:	2101      	movne	r1, #1
   b7176:	71b1      	strb	r1, [r6, #6]
   b7178:	2000      	movs	r0, #0
   b717a:	b001      	add	sp, #4
   b717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7180:	3502      	adds	r5, #2
   b7182:	d1f9      	bne.n	b7178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7184:	2301      	movs	r3, #1
   b7186:	71b3      	strb	r3, [r6, #6]
   b7188:	e7f6      	b.n	b7178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b718a:	4554      	cmp	r4, sl
   b718c:	d106      	bne.n	b719c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b718e:	4659      	mov	r1, fp
   b7190:	4648      	mov	r0, r9
   b7192:	f000 f82b 	bl	b71ec <_ZNKSt9type_infoeqERKS_>
   b7196:	b108      	cbz	r0, b719c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7198:	7177      	strb	r7, [r6, #5]
   b719a:	e7ed      	b.n	b7178 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b719c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b71a0:	6803      	ldr	r3, [r0, #0]
   b71a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b71a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b71aa:	69dc      	ldr	r4, [r3, #28]
   b71ac:	463a      	mov	r2, r7
   b71ae:	4643      	mov	r3, r8
   b71b0:	4629      	mov	r1, r5
   b71b2:	46a4      	mov	ip, r4
   b71b4:	b001      	add	sp, #4
   b71b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71ba:	4760      	bx	ip

000b71bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b71bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71c0:	4607      	mov	r7, r0
   b71c2:	460c      	mov	r4, r1
   b71c4:	4615      	mov	r5, r2
   b71c6:	461e      	mov	r6, r3
   b71c8:	f7ff ff6d 	bl	b70a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b71cc:	b948      	cbnz	r0, b71e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b71ce:	68b8      	ldr	r0, [r7, #8]
   b71d0:	6803      	ldr	r3, [r0, #0]
   b71d2:	699f      	ldr	r7, [r3, #24]
   b71d4:	462a      	mov	r2, r5
   b71d6:	4633      	mov	r3, r6
   b71d8:	4621      	mov	r1, r4
   b71da:	46bc      	mov	ip, r7
   b71dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b71e0:	4760      	bx	ip
   b71e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b71e6 <_ZNSt9type_infoD1Ev>:
   b71e6:	4770      	bx	lr

000b71e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b71e8:	2000      	movs	r0, #0
   b71ea:	4770      	bx	lr

000b71ec <_ZNKSt9type_infoeqERKS_>:
   b71ec:	4281      	cmp	r1, r0
   b71ee:	b508      	push	{r3, lr}
   b71f0:	d00e      	beq.n	b7210 <_ZNKSt9type_infoeqERKS_+0x24>
   b71f2:	6840      	ldr	r0, [r0, #4]
   b71f4:	7803      	ldrb	r3, [r0, #0]
   b71f6:	2b2a      	cmp	r3, #42	; 0x2a
   b71f8:	d00c      	beq.n	b7214 <_ZNKSt9type_infoeqERKS_+0x28>
   b71fa:	6849      	ldr	r1, [r1, #4]
   b71fc:	780b      	ldrb	r3, [r1, #0]
   b71fe:	2b2a      	cmp	r3, #42	; 0x2a
   b7200:	bf08      	it	eq
   b7202:	3101      	addeq	r1, #1
   b7204:	f000 fc70 	bl	b7ae8 <strcmp>
   b7208:	fab0 f080 	clz	r0, r0
   b720c:	0940      	lsrs	r0, r0, #5
   b720e:	bd08      	pop	{r3, pc}
   b7210:	2001      	movs	r0, #1
   b7212:	e7fc      	b.n	b720e <_ZNKSt9type_infoeqERKS_+0x22>
   b7214:	2000      	movs	r0, #0
   b7216:	e7fa      	b.n	b720e <_ZNKSt9type_infoeqERKS_+0x22>

000b7218 <__aeabi_drsub>:
   b7218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b721c:	e002      	b.n	b7224 <__adddf3>
   b721e:	bf00      	nop

000b7220 <__aeabi_dsub>:
   b7220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7224 <__adddf3>:
   b7224:	b530      	push	{r4, r5, lr}
   b7226:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b722a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b722e:	ea94 0f05 	teq	r4, r5
   b7232:	bf08      	it	eq
   b7234:	ea90 0f02 	teqeq	r0, r2
   b7238:	bf1f      	itttt	ne
   b723a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b723e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b724a:	f000 80e2 	beq.w	b7412 <__adddf3+0x1ee>
   b724e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7256:	bfb8      	it	lt
   b7258:	426d      	neglt	r5, r5
   b725a:	dd0c      	ble.n	b7276 <__adddf3+0x52>
   b725c:	442c      	add	r4, r5
   b725e:	ea80 0202 	eor.w	r2, r0, r2
   b7262:	ea81 0303 	eor.w	r3, r1, r3
   b7266:	ea82 0000 	eor.w	r0, r2, r0
   b726a:	ea83 0101 	eor.w	r1, r3, r1
   b726e:	ea80 0202 	eor.w	r2, r0, r2
   b7272:	ea81 0303 	eor.w	r3, r1, r3
   b7276:	2d36      	cmp	r5, #54	; 0x36
   b7278:	bf88      	it	hi
   b727a:	bd30      	pophi	{r4, r5, pc}
   b727c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7280:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b728c:	d002      	beq.n	b7294 <__adddf3+0x70>
   b728e:	4240      	negs	r0, r0
   b7290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7298:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b729c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b72a0:	d002      	beq.n	b72a8 <__adddf3+0x84>
   b72a2:	4252      	negs	r2, r2
   b72a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b72a8:	ea94 0f05 	teq	r4, r5
   b72ac:	f000 80a7 	beq.w	b73fe <__adddf3+0x1da>
   b72b0:	f1a4 0401 	sub.w	r4, r4, #1
   b72b4:	f1d5 0e20 	rsbs	lr, r5, #32
   b72b8:	db0d      	blt.n	b72d6 <__adddf3+0xb2>
   b72ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   b72be:	fa22 f205 	lsr.w	r2, r2, r5
   b72c2:	1880      	adds	r0, r0, r2
   b72c4:	f141 0100 	adc.w	r1, r1, #0
   b72c8:	fa03 f20e 	lsl.w	r2, r3, lr
   b72cc:	1880      	adds	r0, r0, r2
   b72ce:	fa43 f305 	asr.w	r3, r3, r5
   b72d2:	4159      	adcs	r1, r3
   b72d4:	e00e      	b.n	b72f4 <__adddf3+0xd0>
   b72d6:	f1a5 0520 	sub.w	r5, r5, #32
   b72da:	f10e 0e20 	add.w	lr, lr, #32
   b72de:	2a01      	cmp	r2, #1
   b72e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b72e4:	bf28      	it	cs
   b72e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b72ea:	fa43 f305 	asr.w	r3, r3, r5
   b72ee:	18c0      	adds	r0, r0, r3
   b72f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b72f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b72f8:	d507      	bpl.n	b730a <__adddf3+0xe6>
   b72fa:	f04f 0e00 	mov.w	lr, #0
   b72fe:	f1dc 0c00 	rsbs	ip, ip, #0
   b7302:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7306:	eb6e 0101 	sbc.w	r1, lr, r1
   b730a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b730e:	d31b      	bcc.n	b7348 <__adddf3+0x124>
   b7310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7314:	d30c      	bcc.n	b7330 <__adddf3+0x10c>
   b7316:	0849      	lsrs	r1, r1, #1
   b7318:	ea5f 0030 	movs.w	r0, r0, rrx
   b731c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7320:	f104 0401 	add.w	r4, r4, #1
   b7324:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b732c:	f080 809a 	bcs.w	b7464 <__adddf3+0x240>
   b7330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7334:	bf08      	it	eq
   b7336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b733a:	f150 0000 	adcs.w	r0, r0, #0
   b733e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7342:	ea41 0105 	orr.w	r1, r1, r5
   b7346:	bd30      	pop	{r4, r5, pc}
   b7348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b734c:	4140      	adcs	r0, r0
   b734e:	eb41 0101 	adc.w	r1, r1, r1
   b7352:	3c01      	subs	r4, #1
   b7354:	bf28      	it	cs
   b7356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b735a:	d2e9      	bcs.n	b7330 <__adddf3+0x10c>
   b735c:	f091 0f00 	teq	r1, #0
   b7360:	bf04      	itt	eq
   b7362:	4601      	moveq	r1, r0
   b7364:	2000      	moveq	r0, #0
   b7366:	fab1 f381 	clz	r3, r1
   b736a:	bf08      	it	eq
   b736c:	3320      	addeq	r3, #32
   b736e:	f1a3 030b 	sub.w	r3, r3, #11
   b7372:	f1b3 0220 	subs.w	r2, r3, #32
   b7376:	da0c      	bge.n	b7392 <__adddf3+0x16e>
   b7378:	320c      	adds	r2, #12
   b737a:	dd08      	ble.n	b738e <__adddf3+0x16a>
   b737c:	f102 0c14 	add.w	ip, r2, #20
   b7380:	f1c2 020c 	rsb	r2, r2, #12
   b7384:	fa01 f00c 	lsl.w	r0, r1, ip
   b7388:	fa21 f102 	lsr.w	r1, r1, r2
   b738c:	e00c      	b.n	b73a8 <__adddf3+0x184>
   b738e:	f102 0214 	add.w	r2, r2, #20
   b7392:	bfd8      	it	le
   b7394:	f1c2 0c20 	rsble	ip, r2, #32
   b7398:	fa01 f102 	lsl.w	r1, r1, r2
   b739c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b73a0:	bfdc      	itt	le
   b73a2:	ea41 010c 	orrle.w	r1, r1, ip
   b73a6:	4090      	lslle	r0, r2
   b73a8:	1ae4      	subs	r4, r4, r3
   b73aa:	bfa2      	ittt	ge
   b73ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b73b0:	4329      	orrge	r1, r5
   b73b2:	bd30      	popge	{r4, r5, pc}
   b73b4:	ea6f 0404 	mvn.w	r4, r4
   b73b8:	3c1f      	subs	r4, #31
   b73ba:	da1c      	bge.n	b73f6 <__adddf3+0x1d2>
   b73bc:	340c      	adds	r4, #12
   b73be:	dc0e      	bgt.n	b73de <__adddf3+0x1ba>
   b73c0:	f104 0414 	add.w	r4, r4, #20
   b73c4:	f1c4 0220 	rsb	r2, r4, #32
   b73c8:	fa20 f004 	lsr.w	r0, r0, r4
   b73cc:	fa01 f302 	lsl.w	r3, r1, r2
   b73d0:	ea40 0003 	orr.w	r0, r0, r3
   b73d4:	fa21 f304 	lsr.w	r3, r1, r4
   b73d8:	ea45 0103 	orr.w	r1, r5, r3
   b73dc:	bd30      	pop	{r4, r5, pc}
   b73de:	f1c4 040c 	rsb	r4, r4, #12
   b73e2:	f1c4 0220 	rsb	r2, r4, #32
   b73e6:	fa20 f002 	lsr.w	r0, r0, r2
   b73ea:	fa01 f304 	lsl.w	r3, r1, r4
   b73ee:	ea40 0003 	orr.w	r0, r0, r3
   b73f2:	4629      	mov	r1, r5
   b73f4:	bd30      	pop	{r4, r5, pc}
   b73f6:	fa21 f004 	lsr.w	r0, r1, r4
   b73fa:	4629      	mov	r1, r5
   b73fc:	bd30      	pop	{r4, r5, pc}
   b73fe:	f094 0f00 	teq	r4, #0
   b7402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7406:	bf06      	itte	eq
   b7408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b740c:	3401      	addeq	r4, #1
   b740e:	3d01      	subne	r5, #1
   b7410:	e74e      	b.n	b72b0 <__adddf3+0x8c>
   b7412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7416:	bf18      	it	ne
   b7418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b741c:	d029      	beq.n	b7472 <__adddf3+0x24e>
   b741e:	ea94 0f05 	teq	r4, r5
   b7422:	bf08      	it	eq
   b7424:	ea90 0f02 	teqeq	r0, r2
   b7428:	d005      	beq.n	b7436 <__adddf3+0x212>
   b742a:	ea54 0c00 	orrs.w	ip, r4, r0
   b742e:	bf04      	itt	eq
   b7430:	4619      	moveq	r1, r3
   b7432:	4610      	moveq	r0, r2
   b7434:	bd30      	pop	{r4, r5, pc}
   b7436:	ea91 0f03 	teq	r1, r3
   b743a:	bf1e      	ittt	ne
   b743c:	2100      	movne	r1, #0
   b743e:	2000      	movne	r0, #0
   b7440:	bd30      	popne	{r4, r5, pc}
   b7442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7446:	d105      	bne.n	b7454 <__adddf3+0x230>
   b7448:	0040      	lsls	r0, r0, #1
   b744a:	4149      	adcs	r1, r1
   b744c:	bf28      	it	cs
   b744e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7452:	bd30      	pop	{r4, r5, pc}
   b7454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7458:	bf3c      	itt	cc
   b745a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b745e:	bd30      	popcc	{r4, r5, pc}
   b7460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b746c:	f04f 0000 	mov.w	r0, #0
   b7470:	bd30      	pop	{r4, r5, pc}
   b7472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7476:	bf1a      	itte	ne
   b7478:	4619      	movne	r1, r3
   b747a:	4610      	movne	r0, r2
   b747c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7480:	bf1c      	itt	ne
   b7482:	460b      	movne	r3, r1
   b7484:	4602      	movne	r2, r0
   b7486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b748a:	bf06      	itte	eq
   b748c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7490:	ea91 0f03 	teqeq	r1, r3
   b7494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7498:	bd30      	pop	{r4, r5, pc}
   b749a:	bf00      	nop

000b749c <__aeabi_ui2d>:
   b749c:	f090 0f00 	teq	r0, #0
   b74a0:	bf04      	itt	eq
   b74a2:	2100      	moveq	r1, #0
   b74a4:	4770      	bxeq	lr
   b74a6:	b530      	push	{r4, r5, lr}
   b74a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74b0:	f04f 0500 	mov.w	r5, #0
   b74b4:	f04f 0100 	mov.w	r1, #0
   b74b8:	e750      	b.n	b735c <__adddf3+0x138>
   b74ba:	bf00      	nop

000b74bc <__aeabi_i2d>:
   b74bc:	f090 0f00 	teq	r0, #0
   b74c0:	bf04      	itt	eq
   b74c2:	2100      	moveq	r1, #0
   b74c4:	4770      	bxeq	lr
   b74c6:	b530      	push	{r4, r5, lr}
   b74c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b74d4:	bf48      	it	mi
   b74d6:	4240      	negmi	r0, r0
   b74d8:	f04f 0100 	mov.w	r1, #0
   b74dc:	e73e      	b.n	b735c <__adddf3+0x138>
   b74de:	bf00      	nop

000b74e0 <__aeabi_f2d>:
   b74e0:	0042      	lsls	r2, r0, #1
   b74e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b74e6:	ea4f 0131 	mov.w	r1, r1, rrx
   b74ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b74ee:	bf1f      	itttt	ne
   b74f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b74f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b74f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b74fc:	4770      	bxne	lr
   b74fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7502:	bf08      	it	eq
   b7504:	4770      	bxeq	lr
   b7506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b750a:	bf04      	itt	eq
   b750c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7510:	4770      	bxeq	lr
   b7512:	b530      	push	{r4, r5, lr}
   b7514:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b751c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7520:	e71c      	b.n	b735c <__adddf3+0x138>
   b7522:	bf00      	nop

000b7524 <__aeabi_ul2d>:
   b7524:	ea50 0201 	orrs.w	r2, r0, r1
   b7528:	bf08      	it	eq
   b752a:	4770      	bxeq	lr
   b752c:	b530      	push	{r4, r5, lr}
   b752e:	f04f 0500 	mov.w	r5, #0
   b7532:	e00a      	b.n	b754a <__aeabi_l2d+0x16>

000b7534 <__aeabi_l2d>:
   b7534:	ea50 0201 	orrs.w	r2, r0, r1
   b7538:	bf08      	it	eq
   b753a:	4770      	bxeq	lr
   b753c:	b530      	push	{r4, r5, lr}
   b753e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7542:	d502      	bpl.n	b754a <__aeabi_l2d+0x16>
   b7544:	4240      	negs	r0, r0
   b7546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b754a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b754e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7556:	f43f aed8 	beq.w	b730a <__adddf3+0xe6>
   b755a:	f04f 0203 	mov.w	r2, #3
   b755e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7562:	bf18      	it	ne
   b7564:	3203      	addne	r2, #3
   b7566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b756a:	bf18      	it	ne
   b756c:	3203      	addne	r2, #3
   b756e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7572:	f1c2 0320 	rsb	r3, r2, #32
   b7576:	fa00 fc03 	lsl.w	ip, r0, r3
   b757a:	fa20 f002 	lsr.w	r0, r0, r2
   b757e:	fa01 fe03 	lsl.w	lr, r1, r3
   b7582:	ea40 000e 	orr.w	r0, r0, lr
   b7586:	fa21 f102 	lsr.w	r1, r1, r2
   b758a:	4414      	add	r4, r2
   b758c:	e6bd      	b.n	b730a <__adddf3+0xe6>
   b758e:	bf00      	nop

000b7590 <__aeabi_dmul>:
   b7590:	b570      	push	{r4, r5, r6, lr}
   b7592:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b759a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b759e:	bf1d      	ittte	ne
   b75a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b75a4:	ea94 0f0c 	teqne	r4, ip
   b75a8:	ea95 0f0c 	teqne	r5, ip
   b75ac:	f000 f8de 	bleq	b776c <__aeabi_dmul+0x1dc>
   b75b0:	442c      	add	r4, r5
   b75b2:	ea81 0603 	eor.w	r6, r1, r3
   b75b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b75ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b75be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b75c2:	bf18      	it	ne
   b75c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b75c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b75cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b75d0:	d038      	beq.n	b7644 <__aeabi_dmul+0xb4>
   b75d2:	fba0 ce02 	umull	ip, lr, r0, r2
   b75d6:	f04f 0500 	mov.w	r5, #0
   b75da:	fbe1 e502 	umlal	lr, r5, r1, r2
   b75de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b75e2:	fbe0 e503 	umlal	lr, r5, r0, r3
   b75e6:	f04f 0600 	mov.w	r6, #0
   b75ea:	fbe1 5603 	umlal	r5, r6, r1, r3
   b75ee:	f09c 0f00 	teq	ip, #0
   b75f2:	bf18      	it	ne
   b75f4:	f04e 0e01 	orrne.w	lr, lr, #1
   b75f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b75fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7604:	d204      	bcs.n	b7610 <__aeabi_dmul+0x80>
   b7606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b760a:	416d      	adcs	r5, r5
   b760c:	eb46 0606 	adc.w	r6, r6, r6
   b7610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b761c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7628:	bf88      	it	hi
   b762a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b762e:	d81e      	bhi.n	b766e <__aeabi_dmul+0xde>
   b7630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7634:	bf08      	it	eq
   b7636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b763a:	f150 0000 	adcs.w	r0, r0, #0
   b763e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7642:	bd70      	pop	{r4, r5, r6, pc}
   b7644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7648:	ea46 0101 	orr.w	r1, r6, r1
   b764c:	ea40 0002 	orr.w	r0, r0, r2
   b7650:	ea81 0103 	eor.w	r1, r1, r3
   b7654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7658:	bfc2      	ittt	gt
   b765a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b765e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7662:	bd70      	popgt	{r4, r5, r6, pc}
   b7664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7668:	f04f 0e00 	mov.w	lr, #0
   b766c:	3c01      	subs	r4, #1
   b766e:	f300 80ab 	bgt.w	b77c8 <__aeabi_dmul+0x238>
   b7672:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7676:	bfde      	ittt	le
   b7678:	2000      	movle	r0, #0
   b767a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b767e:	bd70      	pople	{r4, r5, r6, pc}
   b7680:	f1c4 0400 	rsb	r4, r4, #0
   b7684:	3c20      	subs	r4, #32
   b7686:	da35      	bge.n	b76f4 <__aeabi_dmul+0x164>
   b7688:	340c      	adds	r4, #12
   b768a:	dc1b      	bgt.n	b76c4 <__aeabi_dmul+0x134>
   b768c:	f104 0414 	add.w	r4, r4, #20
   b7690:	f1c4 0520 	rsb	r5, r4, #32
   b7694:	fa00 f305 	lsl.w	r3, r0, r5
   b7698:	fa20 f004 	lsr.w	r0, r0, r4
   b769c:	fa01 f205 	lsl.w	r2, r1, r5
   b76a0:	ea40 0002 	orr.w	r0, r0, r2
   b76a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b76a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b76ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b76b0:	fa21 f604 	lsr.w	r6, r1, r4
   b76b4:	eb42 0106 	adc.w	r1, r2, r6
   b76b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76bc:	bf08      	it	eq
   b76be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76c2:	bd70      	pop	{r4, r5, r6, pc}
   b76c4:	f1c4 040c 	rsb	r4, r4, #12
   b76c8:	f1c4 0520 	rsb	r5, r4, #32
   b76cc:	fa00 f304 	lsl.w	r3, r0, r4
   b76d0:	fa20 f005 	lsr.w	r0, r0, r5
   b76d4:	fa01 f204 	lsl.w	r2, r1, r4
   b76d8:	ea40 0002 	orr.w	r0, r0, r2
   b76dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b76e4:	f141 0100 	adc.w	r1, r1, #0
   b76e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76ec:	bf08      	it	eq
   b76ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76f2:	bd70      	pop	{r4, r5, r6, pc}
   b76f4:	f1c4 0520 	rsb	r5, r4, #32
   b76f8:	fa00 f205 	lsl.w	r2, r0, r5
   b76fc:	ea4e 0e02 	orr.w	lr, lr, r2
   b7700:	fa20 f304 	lsr.w	r3, r0, r4
   b7704:	fa01 f205 	lsl.w	r2, r1, r5
   b7708:	ea43 0302 	orr.w	r3, r3, r2
   b770c:	fa21 f004 	lsr.w	r0, r1, r4
   b7710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7714:	fa21 f204 	lsr.w	r2, r1, r4
   b7718:	ea20 0002 	bic.w	r0, r0, r2
   b771c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7724:	bf08      	it	eq
   b7726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b772a:	bd70      	pop	{r4, r5, r6, pc}
   b772c:	f094 0f00 	teq	r4, #0
   b7730:	d10f      	bne.n	b7752 <__aeabi_dmul+0x1c2>
   b7732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7736:	0040      	lsls	r0, r0, #1
   b7738:	eb41 0101 	adc.w	r1, r1, r1
   b773c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7740:	bf08      	it	eq
   b7742:	3c01      	subeq	r4, #1
   b7744:	d0f7      	beq.n	b7736 <__aeabi_dmul+0x1a6>
   b7746:	ea41 0106 	orr.w	r1, r1, r6
   b774a:	f095 0f00 	teq	r5, #0
   b774e:	bf18      	it	ne
   b7750:	4770      	bxne	lr
   b7752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7756:	0052      	lsls	r2, r2, #1
   b7758:	eb43 0303 	adc.w	r3, r3, r3
   b775c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7760:	bf08      	it	eq
   b7762:	3d01      	subeq	r5, #1
   b7764:	d0f7      	beq.n	b7756 <__aeabi_dmul+0x1c6>
   b7766:	ea43 0306 	orr.w	r3, r3, r6
   b776a:	4770      	bx	lr
   b776c:	ea94 0f0c 	teq	r4, ip
   b7770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7774:	bf18      	it	ne
   b7776:	ea95 0f0c 	teqne	r5, ip
   b777a:	d00c      	beq.n	b7796 <__aeabi_dmul+0x206>
   b777c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7780:	bf18      	it	ne
   b7782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7786:	d1d1      	bne.n	b772c <__aeabi_dmul+0x19c>
   b7788:	ea81 0103 	eor.w	r1, r1, r3
   b778c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7790:	f04f 0000 	mov.w	r0, #0
   b7794:	bd70      	pop	{r4, r5, r6, pc}
   b7796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b779a:	bf06      	itte	eq
   b779c:	4610      	moveq	r0, r2
   b779e:	4619      	moveq	r1, r3
   b77a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b77a4:	d019      	beq.n	b77da <__aeabi_dmul+0x24a>
   b77a6:	ea94 0f0c 	teq	r4, ip
   b77aa:	d102      	bne.n	b77b2 <__aeabi_dmul+0x222>
   b77ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b77b0:	d113      	bne.n	b77da <__aeabi_dmul+0x24a>
   b77b2:	ea95 0f0c 	teq	r5, ip
   b77b6:	d105      	bne.n	b77c4 <__aeabi_dmul+0x234>
   b77b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b77bc:	bf1c      	itt	ne
   b77be:	4610      	movne	r0, r2
   b77c0:	4619      	movne	r1, r3
   b77c2:	d10a      	bne.n	b77da <__aeabi_dmul+0x24a>
   b77c4:	ea81 0103 	eor.w	r1, r1, r3
   b77c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b77d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b77d4:	f04f 0000 	mov.w	r0, #0
   b77d8:	bd70      	pop	{r4, r5, r6, pc}
   b77da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b77de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b77e2:	bd70      	pop	{r4, r5, r6, pc}

000b77e4 <__aeabi_ddiv>:
   b77e4:	b570      	push	{r4, r5, r6, lr}
   b77e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b77ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b77ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b77f2:	bf1d      	ittte	ne
   b77f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b77f8:	ea94 0f0c 	teqne	r4, ip
   b77fc:	ea95 0f0c 	teqne	r5, ip
   b7800:	f000 f8a7 	bleq	b7952 <__aeabi_ddiv+0x16e>
   b7804:	eba4 0405 	sub.w	r4, r4, r5
   b7808:	ea81 0e03 	eor.w	lr, r1, r3
   b780c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7810:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7814:	f000 8088 	beq.w	b7928 <__aeabi_ddiv+0x144>
   b7818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b781c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b7820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7828:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b782c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7834:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b783c:	429d      	cmp	r5, r3
   b783e:	bf08      	it	eq
   b7840:	4296      	cmpeq	r6, r2
   b7842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7846:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b784a:	d202      	bcs.n	b7852 <__aeabi_ddiv+0x6e>
   b784c:	085b      	lsrs	r3, r3, #1
   b784e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7852:	1ab6      	subs	r6, r6, r2
   b7854:	eb65 0503 	sbc.w	r5, r5, r3
   b7858:	085b      	lsrs	r3, r3, #1
   b785a:	ea4f 0232 	mov.w	r2, r2, rrx
   b785e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7866:	ebb6 0e02 	subs.w	lr, r6, r2
   b786a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b786e:	bf22      	ittt	cs
   b7870:	1ab6      	subcs	r6, r6, r2
   b7872:	4675      	movcs	r5, lr
   b7874:	ea40 000c 	orrcs.w	r0, r0, ip
   b7878:	085b      	lsrs	r3, r3, #1
   b787a:	ea4f 0232 	mov.w	r2, r2, rrx
   b787e:	ebb6 0e02 	subs.w	lr, r6, r2
   b7882:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7886:	bf22      	ittt	cs
   b7888:	1ab6      	subcs	r6, r6, r2
   b788a:	4675      	movcs	r5, lr
   b788c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7890:	085b      	lsrs	r3, r3, #1
   b7892:	ea4f 0232 	mov.w	r2, r2, rrx
   b7896:	ebb6 0e02 	subs.w	lr, r6, r2
   b789a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b789e:	bf22      	ittt	cs
   b78a0:	1ab6      	subcs	r6, r6, r2
   b78a2:	4675      	movcs	r5, lr
   b78a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b78a8:	085b      	lsrs	r3, r3, #1
   b78aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b78ae:	ebb6 0e02 	subs.w	lr, r6, r2
   b78b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b78b6:	bf22      	ittt	cs
   b78b8:	1ab6      	subcs	r6, r6, r2
   b78ba:	4675      	movcs	r5, lr
   b78bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b78c0:	ea55 0e06 	orrs.w	lr, r5, r6
   b78c4:	d018      	beq.n	b78f8 <__aeabi_ddiv+0x114>
   b78c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b78ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b78ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b78d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b78d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b78da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b78de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b78e2:	d1c0      	bne.n	b7866 <__aeabi_ddiv+0x82>
   b78e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78e8:	d10b      	bne.n	b7902 <__aeabi_ddiv+0x11e>
   b78ea:	ea41 0100 	orr.w	r1, r1, r0
   b78ee:	f04f 0000 	mov.w	r0, #0
   b78f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b78f6:	e7b6      	b.n	b7866 <__aeabi_ddiv+0x82>
   b78f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78fc:	bf04      	itt	eq
   b78fe:	4301      	orreq	r1, r0
   b7900:	2000      	moveq	r0, #0
   b7902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7906:	bf88      	it	hi
   b7908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b790c:	f63f aeaf 	bhi.w	b766e <__aeabi_dmul+0xde>
   b7910:	ebb5 0c03 	subs.w	ip, r5, r3
   b7914:	bf04      	itt	eq
   b7916:	ebb6 0c02 	subseq.w	ip, r6, r2
   b791a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b791e:	f150 0000 	adcs.w	r0, r0, #0
   b7922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7926:	bd70      	pop	{r4, r5, r6, pc}
   b7928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b792c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7934:	bfc2      	ittt	gt
   b7936:	ebd4 050c 	rsbsgt	r5, r4, ip
   b793a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b793e:	bd70      	popgt	{r4, r5, r6, pc}
   b7940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7944:	f04f 0e00 	mov.w	lr, #0
   b7948:	3c01      	subs	r4, #1
   b794a:	e690      	b.n	b766e <__aeabi_dmul+0xde>
   b794c:	ea45 0e06 	orr.w	lr, r5, r6
   b7950:	e68d      	b.n	b766e <__aeabi_dmul+0xde>
   b7952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7956:	ea94 0f0c 	teq	r4, ip
   b795a:	bf08      	it	eq
   b795c:	ea95 0f0c 	teqeq	r5, ip
   b7960:	f43f af3b 	beq.w	b77da <__aeabi_dmul+0x24a>
   b7964:	ea94 0f0c 	teq	r4, ip
   b7968:	d10a      	bne.n	b7980 <__aeabi_ddiv+0x19c>
   b796a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b796e:	f47f af34 	bne.w	b77da <__aeabi_dmul+0x24a>
   b7972:	ea95 0f0c 	teq	r5, ip
   b7976:	f47f af25 	bne.w	b77c4 <__aeabi_dmul+0x234>
   b797a:	4610      	mov	r0, r2
   b797c:	4619      	mov	r1, r3
   b797e:	e72c      	b.n	b77da <__aeabi_dmul+0x24a>
   b7980:	ea95 0f0c 	teq	r5, ip
   b7984:	d106      	bne.n	b7994 <__aeabi_ddiv+0x1b0>
   b7986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b798a:	f43f aefd 	beq.w	b7788 <__aeabi_dmul+0x1f8>
   b798e:	4610      	mov	r0, r2
   b7990:	4619      	mov	r1, r3
   b7992:	e722      	b.n	b77da <__aeabi_dmul+0x24a>
   b7994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7998:	bf18      	it	ne
   b799a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b799e:	f47f aec5 	bne.w	b772c <__aeabi_dmul+0x19c>
   b79a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b79a6:	f47f af0d 	bne.w	b77c4 <__aeabi_dmul+0x234>
   b79aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b79ae:	f47f aeeb 	bne.w	b7788 <__aeabi_dmul+0x1f8>
   b79b2:	e712      	b.n	b77da <__aeabi_dmul+0x24a>

000b79b4 <__aeabi_d2f>:
   b79b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b79b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b79bc:	bf24      	itt	cs
   b79be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b79c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b79c6:	d90d      	bls.n	b79e4 <__aeabi_d2f+0x30>
   b79c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b79cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b79d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b79d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b79d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b79dc:	bf08      	it	eq
   b79de:	f020 0001 	biceq.w	r0, r0, #1
   b79e2:	4770      	bx	lr
   b79e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b79e8:	d121      	bne.n	b7a2e <__aeabi_d2f+0x7a>
   b79ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b79ee:	bfbc      	itt	lt
   b79f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b79f4:	4770      	bxlt	lr
   b79f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b79fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b79fe:	f1c2 0218 	rsb	r2, r2, #24
   b7a02:	f1c2 0c20 	rsb	ip, r2, #32
   b7a06:	fa10 f30c 	lsls.w	r3, r0, ip
   b7a0a:	fa20 f002 	lsr.w	r0, r0, r2
   b7a0e:	bf18      	it	ne
   b7a10:	f040 0001 	orrne.w	r0, r0, #1
   b7a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7a20:	ea40 000c 	orr.w	r0, r0, ip
   b7a24:	fa23 f302 	lsr.w	r3, r3, r2
   b7a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7a2c:	e7cc      	b.n	b79c8 <__aeabi_d2f+0x14>
   b7a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7a32:	d107      	bne.n	b7a44 <__aeabi_d2f+0x90>
   b7a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7a38:	bf1e      	ittt	ne
   b7a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7a42:	4770      	bxne	lr
   b7a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7a50:	4770      	bx	lr
   b7a52:	bf00      	nop

000b7a54 <atexit>:
   b7a54:	2300      	movs	r3, #0
   b7a56:	4601      	mov	r1, r0
   b7a58:	461a      	mov	r2, r3
   b7a5a:	4618      	mov	r0, r3
   b7a5c:	f000 b85e 	b.w	b7b1c <__register_exitproc>

000b7a60 <memcpy>:
   b7a60:	440a      	add	r2, r1
   b7a62:	4291      	cmp	r1, r2
   b7a64:	f100 33ff 	add.w	r3, r0, #4294967295
   b7a68:	d100      	bne.n	b7a6c <memcpy+0xc>
   b7a6a:	4770      	bx	lr
   b7a6c:	b510      	push	{r4, lr}
   b7a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7a72:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7a76:	4291      	cmp	r1, r2
   b7a78:	d1f9      	bne.n	b7a6e <memcpy+0xe>
   b7a7a:	bd10      	pop	{r4, pc}

000b7a7c <memset>:
   b7a7c:	4402      	add	r2, r0
   b7a7e:	4603      	mov	r3, r0
   b7a80:	4293      	cmp	r3, r2
   b7a82:	d100      	bne.n	b7a86 <memset+0xa>
   b7a84:	4770      	bx	lr
   b7a86:	f803 1b01 	strb.w	r1, [r3], #1
   b7a8a:	e7f9      	b.n	b7a80 <memset+0x4>

000b7a8c <srand>:
   b7a8c:	b538      	push	{r3, r4, r5, lr}
   b7a8e:	4b10      	ldr	r3, [pc, #64]	; (b7ad0 <srand+0x44>)
   b7a90:	681d      	ldr	r5, [r3, #0]
   b7a92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7a94:	4604      	mov	r4, r0
   b7a96:	b9b3      	cbnz	r3, b7ac6 <srand+0x3a>
   b7a98:	2018      	movs	r0, #24
   b7a9a:	f7fd ff8b 	bl	b59b4 <malloc>
   b7a9e:	4602      	mov	r2, r0
   b7aa0:	63a8      	str	r0, [r5, #56]	; 0x38
   b7aa2:	b920      	cbnz	r0, b7aae <srand+0x22>
   b7aa4:	4b0b      	ldr	r3, [pc, #44]	; (b7ad4 <srand+0x48>)
   b7aa6:	480c      	ldr	r0, [pc, #48]	; (b7ad8 <srand+0x4c>)
   b7aa8:	2142      	movs	r1, #66	; 0x42
   b7aaa:	f7fd ffab 	bl	b5a04 <__assert_func>
   b7aae:	490b      	ldr	r1, [pc, #44]	; (b7adc <srand+0x50>)
   b7ab0:	4b0b      	ldr	r3, [pc, #44]	; (b7ae0 <srand+0x54>)
   b7ab2:	e9c0 1300 	strd	r1, r3, [r0]
   b7ab6:	4b0b      	ldr	r3, [pc, #44]	; (b7ae4 <srand+0x58>)
   b7ab8:	6083      	str	r3, [r0, #8]
   b7aba:	230b      	movs	r3, #11
   b7abc:	8183      	strh	r3, [r0, #12]
   b7abe:	2100      	movs	r1, #0
   b7ac0:	2001      	movs	r0, #1
   b7ac2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ac8:	2200      	movs	r2, #0
   b7aca:	611c      	str	r4, [r3, #16]
   b7acc:	615a      	str	r2, [r3, #20]
   b7ace:	bd38      	pop	{r3, r4, r5, pc}
   b7ad0:	2003e530 	.word	0x2003e530
   b7ad4:	000b863d 	.word	0x000b863d
   b7ad8:	000b8654 	.word	0x000b8654
   b7adc:	abcd330e 	.word	0xabcd330e
   b7ae0:	e66d1234 	.word	0xe66d1234
   b7ae4:	0005deec 	.word	0x0005deec

000b7ae8 <strcmp>:
   b7ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7aec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7af0:	2a01      	cmp	r2, #1
   b7af2:	bf28      	it	cs
   b7af4:	429a      	cmpcs	r2, r3
   b7af6:	d0f7      	beq.n	b7ae8 <strcmp>
   b7af8:	1ad0      	subs	r0, r2, r3
   b7afa:	4770      	bx	lr

000b7afc <strcpy>:
   b7afc:	4603      	mov	r3, r0
   b7afe:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7b02:	f803 2b01 	strb.w	r2, [r3], #1
   b7b06:	2a00      	cmp	r2, #0
   b7b08:	d1f9      	bne.n	b7afe <strcpy+0x2>
   b7b0a:	4770      	bx	lr

000b7b0c <strlen>:
   b7b0c:	4603      	mov	r3, r0
   b7b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7b12:	2a00      	cmp	r2, #0
   b7b14:	d1fb      	bne.n	b7b0e <strlen+0x2>
   b7b16:	1a18      	subs	r0, r3, r0
   b7b18:	3801      	subs	r0, #1
   b7b1a:	4770      	bx	lr

000b7b1c <__register_exitproc>:
   b7b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7b20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7bdc <__register_exitproc+0xc0>
   b7b24:	4606      	mov	r6, r0
   b7b26:	f8d8 0000 	ldr.w	r0, [r8]
   b7b2a:	461f      	mov	r7, r3
   b7b2c:	460d      	mov	r5, r1
   b7b2e:	4691      	mov	r9, r2
   b7b30:	f000 f856 	bl	b7be0 <__retarget_lock_acquire_recursive>
   b7b34:	4b25      	ldr	r3, [pc, #148]	; (b7bcc <__register_exitproc+0xb0>)
   b7b36:	681c      	ldr	r4, [r3, #0]
   b7b38:	b934      	cbnz	r4, b7b48 <__register_exitproc+0x2c>
   b7b3a:	4c25      	ldr	r4, [pc, #148]	; (b7bd0 <__register_exitproc+0xb4>)
   b7b3c:	601c      	str	r4, [r3, #0]
   b7b3e:	4b25      	ldr	r3, [pc, #148]	; (b7bd4 <__register_exitproc+0xb8>)
   b7b40:	b113      	cbz	r3, b7b48 <__register_exitproc+0x2c>
   b7b42:	681b      	ldr	r3, [r3, #0]
   b7b44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7b48:	6863      	ldr	r3, [r4, #4]
   b7b4a:	2b1f      	cmp	r3, #31
   b7b4c:	dd07      	ble.n	b7b5e <__register_exitproc+0x42>
   b7b4e:	f8d8 0000 	ldr.w	r0, [r8]
   b7b52:	f000 f847 	bl	b7be4 <__retarget_lock_release_recursive>
   b7b56:	f04f 30ff 	mov.w	r0, #4294967295
   b7b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7b5e:	b34e      	cbz	r6, b7bb4 <__register_exitproc+0x98>
   b7b60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7b64:	b988      	cbnz	r0, b7b8a <__register_exitproc+0x6e>
   b7b66:	4b1c      	ldr	r3, [pc, #112]	; (b7bd8 <__register_exitproc+0xbc>)
   b7b68:	b923      	cbnz	r3, b7b74 <__register_exitproc+0x58>
   b7b6a:	f8d8 0000 	ldr.w	r0, [r8]
   b7b6e:	f000 f838 	bl	b7be2 <__retarget_lock_release>
   b7b72:	e7f0      	b.n	b7b56 <__register_exitproc+0x3a>
   b7b74:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7b78:	f7fd ff1c 	bl	b59b4 <malloc>
   b7b7c:	2800      	cmp	r0, #0
   b7b7e:	d0f4      	beq.n	b7b6a <__register_exitproc+0x4e>
   b7b80:	2300      	movs	r3, #0
   b7b82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7b86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7b8a:	6863      	ldr	r3, [r4, #4]
   b7b8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7b90:	2201      	movs	r2, #1
   b7b92:	409a      	lsls	r2, r3
   b7b94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7b98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7b9c:	4313      	orrs	r3, r2
   b7b9e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7ba2:	2e02      	cmp	r6, #2
   b7ba4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7ba8:	bf02      	ittt	eq
   b7baa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7bae:	4313      	orreq	r3, r2
   b7bb0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7bb4:	6863      	ldr	r3, [r4, #4]
   b7bb6:	f8d8 0000 	ldr.w	r0, [r8]
   b7bba:	1c5a      	adds	r2, r3, #1
   b7bbc:	3302      	adds	r3, #2
   b7bbe:	6062      	str	r2, [r4, #4]
   b7bc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7bc4:	f000 f80e 	bl	b7be4 <__retarget_lock_release_recursive>
   b7bc8:	2000      	movs	r0, #0
   b7bca:	e7c6      	b.n	b7b5a <__register_exitproc+0x3e>
   b7bcc:	2003e7e8 	.word	0x2003e7e8
   b7bd0:	2003e75c 	.word	0x2003e75c
   b7bd4:	00000000 	.word	0x00000000
   b7bd8:	000b59b5 	.word	0x000b59b5
   b7bdc:	2003e594 	.word	0x2003e594

000b7be0 <__retarget_lock_acquire_recursive>:
   b7be0:	4770      	bx	lr

000b7be2 <__retarget_lock_release>:
   b7be2:	4770      	bx	lr

000b7be4 <__retarget_lock_release_recursive>:
   b7be4:	4770      	bx	lr

000b7be6 <link_code_end>:
	...

000b7be8 <dynalib_user>:
   b7be8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7bf8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7c08:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b7c18:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b7c28:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b7c38:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b7c48:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b7c58:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b7c68:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b7c78:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b7c88:	6174 6574 4820 5454 2f50 2e31 0031 656b     tate HTTP/1.1.ke
   b7c98:	7065 612d 696c 6576 4800 736f 3a74 0020     ep-alive.Host: .
   b7ca8:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b7cb8:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b7cc8:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b7cd8:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b7ce8:	7200 6465 2020 203d 6200 756c 2065 203d     .red  = .blue = 
   b7cf8:	0a00 754e 526d 6465 3d20 2520 2069 754e     ..NumRed = %i Nu
   b7d08:	426d 756c 2065 203d 6925 0a00 6f63 316c     mBlue = %i..col1
   b7d18:	3d20 2520 322e 2066 6f63 326c 3d20 2520      = %.2f col2 = %
   b7d28:	322e 2066 6f63 336c 3d20 2520 322e 0066     .2f col3 = %.2f.
   b7d38:	500a 6569 6563 6953 6564 3d20 2520 322e     .PieceSide = %.2
   b7d48:	2066 6950 6365 5365 6469 2065 203d 2e25     f PieceSide = %.
   b7d58:	6632 5020 6569 6563 6953 6564 3d20 2520     2f PieceSide = %
   b7d68:	322e 0066                                   .2f.

000b7d6c <_ZL11SERVOANGLES>:
   b7d6c:	0000 0000 001e 0000 003c 0000 005a 0000     ........<...Z...
   b7d7c:	0078 0000 0096 0000 00b4 0000               x...........

000b7d88 <_ZL11hueUsername>:
   b7d88:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b7d98:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b7da8:	7438 334d 4637 5433 0000 0000               8tM37F3T....

000b7db4 <_ZL6COLORS>:
   b7db4:	0000 0000 f365 0000 e6ce 0000 d1d2 0000     ....e...........
   b7dc4:	bcd7 0000 b040 0000 a7db 0000               ....@.......

000b7dd0 <_ZL8hueHubIP>:
   b7dd0:	3931 2e32 3631 2e38 2e31 0035               192.168.1.5.

000b7ddc <_ZTV16Adafruit_SSD1306>:
	...
   b7de4:	4cdd 000b 4d6d 000b 5411 000b 5fa9 000b     .L..mM...T..._..
   b7df4:	4ce1 000b 5129 000b 4b69 000b 49f9 000b     .L..)Q..iK...I..
   b7e04:	51e7 000b 5285 000b 52bb 000b 52d7 000b     .Q...R...R...R..

000b7e14 <_ZL4font>:
   b7e14:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7e24:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7e34:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7e44:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7e54:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7e64:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7e74:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7e84:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7e94:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7ea4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7eb4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7ec4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7ed4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7ee4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7ef4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7f04:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7f14:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7f24:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7f34:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7f44:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7f54:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7f64:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7f74:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7f84:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7f94:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7fa4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7fb4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7fc4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7fd4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7fe4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7ff4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8004:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8014:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8024:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8034:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8044:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8054:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8064:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8074:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8084:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8094:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b80a4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b80b4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b80c4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b80d4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b80e4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b80f4:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8104:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8114:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8124:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8134:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8144:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8154:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8164:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8174:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8184:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8194:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b81a4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b81b4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b81c4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b81d4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b81e4:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b81f4:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8204:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8214:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8224:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8234:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8244:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8254:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b8264:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b8274:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8284:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8294:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b82a4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b82b4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b82c4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b82d4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b82e4:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b82f4:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8304:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8310 <_ZTV12Adafruit_GFX>:
	...
   b8320:	5411 000b 5fa9 000b 40a5 000b 5129 000b     .T..._...@..)Q..
   b8330:	524f 000b 526b 000b 51e7 000b 5285 000b     OR..kR...Q...R..
   b8340:	52bb 000b 52d7 000b                         .R...R..

000b8348 <_ZTVN5spark13EthernetClassE>:
	...
   b8350:	5a83 000b 5a79 000b 5a6f 000b 5a65 000b     .Z..yZ..oZ..eZ..
   b8360:	5a59 000b 5a4d 000b 6c8d 000b 6c95 000b     YZ..MZ...l...l..
   b8370:	5a41 000b 5a39 000b 5a2f 000b 5a25 000b     AZ..9Z../Z..%Z..
   b8380:	6cc5 000b                                   .l..

000b8384 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8384:	0800 1810 2820 3830                         .... (08

000b838c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b8394:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b83a4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b83b4 <_ZTV9IPAddress>:
	...
   b83bc:	62bd 000b 62ad 000b 62af 000b               .b...b...b..

000b83c8 <_ZTV9USBSerial>:
	...
   b83d0:	63cf 000b 6437 000b 640d 000b 5fa9 000b     .c..7d...d..._..
   b83e0:	63ff 000b 63d1 000b 63e1 000b 6431 000b     .c...c...c..1d..
   b83f0:	63f1 000b 63c9 000b                         .c...c..

000b83f8 <_ZTV11USARTSerial>:
	...
   b8400:	64d9 000b 6545 000b 651d 000b 5fa9 000b     .d..Ee...e..._..
   b8410:	64ed 000b 6509 000b 64fb 000b 6517 000b     .d...e...d...e..
   b8420:	64db 000b 64df 000b                         .d...d..

000b8428 <_ZTV7TwoWire>:
	...
   b8430:	657d 000b 65c7 000b 659f 000b 657f 000b     }e...e...e...e..
   b8440:	65a7 000b 65af 000b 65b7 000b 65bf 000b     .e...e...e...e..
   b8450:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b8460:	2072 203d 6425 0000                         r = %d..

000b8468 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8470:	66bd 000b 66e1 000b 6bcb 000b 66ef 000b     .f...f...k...f..
   b8480:	66c1 000b                                   .f..

000b8484 <_ZTV9TCPClient>:
	...
   b848c:	4111 000b 4145 000b 6639 000b 6653 000b     .A..EA..9f..Sf..
   b849c:	6a61 000b 667d 000b 68d7 000b 66b1 000b     aj..}f...h...f..
   b84ac:	6969 000b 67a9 000b 6905 000b 6b15 000b     ii...g...i...k..
   b84bc:	68a5 000b 66b3 000b 6665 000b 66f5 000b     .h...f..ef...f..
   b84cc:	6789 000b                                   .g..

000b84d0 <_ZTVN5spark9WiFiClassE>:
	...
   b84d8:	6c2f 000b 6c25 000b 6c1b 000b 6bd1 000b     /l..%l...l...k..
   b84e8:	6c0f 000b 6c03 000b 6c8d 000b 6c95 000b     .l...l...l...l..
   b84f8:	6bf7 000b 6bef 000b 6be5 000b 6bdb 000b     .k...k...k...k..
   b8508:	6cc5 000b                                   .l..

000b850c <_ZTVN5spark12NetworkClassE>:
	...
   b8514:	6c4d 000b 6c57 000b 6c61 000b 6c6b 000b     Ml..Wl..al..kl..
   b8524:	6c75 000b 6c81 000b 6c8d 000b 6c95 000b     ul...l...l...l..
   b8534:	6c9d 000b 6ca9 000b 6cb1 000b 6cbb 000b     .l...l...l...l..
   b8544:	6cc5 000b                                   .l..

000b8548 <_ZSt7nothrow>:
	...

000b8549 <_ZTSSt19_Sp_make_shared_tag>:
   b8549:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8559:	6572 5f64 6174 0067 0000                     red_tag....

000b8564 <_ZTISt19_Sp_make_shared_tag>:
   b8564:	85a4 000b 8549 000b                         ....I...

000b856c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b856c:	8604 000b 8578 000b 8628 000b               ....x...(...

000b8578 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8578:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8588:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8598:	0045 0000                                   E...

000b859c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b859c:	0000 0000 856c 000b 7041 000b 7055 000b     ....l...Ap..Up..
   b85ac:	71e9 000b 71e9 000b 70bf 000b 7001 000b     .q...q...p...p..
   b85bc:	70a7 000b 7069 000b 7033 000b               .p..ip..3p..

000b85c8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b85c8:	8604 000b 85d4 000b 856c 000b               ........l...

000b85d4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b85d4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b85e4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b85f4:	666e 456f 0000 0000                         nfoE....

000b85fc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b85fc:	0000 0000 85c8 000b 70e9 000b 70fd 000b     .........p...p..
   b860c:	71e9 000b 71e9 000b 70bf 000b 7001 000b     .q...q...p...p..
   b861c:	71bd 000b 7149 000b 7111 000b               .q..Iq...q..

000b8628 <_ZTISt9type_info>:
   b8628:	85a4 000b 8630 000b                         ....0...

000b8630 <_ZTSSt9type_info>:
   b8630:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8640:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8650:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8660:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8670:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8680:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8690:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b86a0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b86b0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b86c0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b86d1 <link_const_variable_data_end>:
   b86d1:	00          	.byte	0x00
	...

000b86d4 <link_constructors_location>:
   b86d4:	000b4955 	.word	0x000b4955
   b86d8:	000b5a8d 	.word	0x000b5a8d
   b86dc:	000b5d15 	.word	0x000b5d15
   b86e0:	000b5f99 	.word	0x000b5f99
   b86e4:	000b6125 	.word	0x000b6125
   b86e8:	000b6135 	.word	0x000b6135
   b86ec:	000b6169 	.word	0x000b6169
   b86f0:	000b6c39 	.word	0x000b6c39
   b86f4:	000b6d9d 	.word	0x000b6d9d

000b86f8 <link_constructors_end>:
	...
